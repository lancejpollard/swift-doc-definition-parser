{
  "path": "/documentation/classkit/clserror",
  "type": "Structure",
  "name": "CLSError",
  "desc": "Errors issued by ClassKit.",
  "items": [
    {
      "name": "let CLSErrorCodeDomain: String",
      "desc": "The error domain that ClassKit uses when issuing errors."
    },
    {
      "name": "static var none: CLSError.Code",
      "desc": "No error."
    },
    {
      "name": "static var authorizationDenied: CLSError.Code",
      "desc": "The app isn’t authorized to perform the requested operation."
    },
    {
      "name": "static var classKitUnavailable: CLSError.Code",
      "desc": "ClassKit isn’t available on this device."
    },
    {
      "name": "static var databaseInaccessible: CLSError.Code",
      "desc": "ClassKit isn’t accessible because the device is locked."
    },
    {
      "name": "static var errorDomain: String",
      "desc": "A domain for the error."
    },
    {
      "name": "static var invalidArgument: CLSError.Code",
      "desc": "An invalid argument was provided to the API."
    },
    {
      "name": "static var invalidCreate: CLSError.Code",
      "desc": "An attempt to save a new object that already exists in the data store failed."
    },
    {
      "name": "static var invalidModification: CLSError.Code",
      "desc": "An attempt to modify a read-only object failed."
    },
    {
      "name": "static var invalidUpdate: CLSError.Code",
      "desc": "ClassKit failed to save an updated object in the data store."
    },
    {
      "name": "static var limits: CLSError.Code",
      "desc": "A limit has been exceeded."
    },
    {
      "name": "static var partialFailure: CLSError.Code",
      "desc": "ClassKit encountered more than one error."
    },
    {
      "name": "enum CLSError.Code",
      "desc": "Error codes that ClassKit issues."
    },
    {
      "name": "var errorCode: Int",
      "desc": "A code for the error."
    },
    {
      "name": "var code: Code"
    },
    {
      "name": "var errorUserInfo: [String : Any]",
      "desc": "Information about the error."
    },
    {
      "name": "var userInfo: [String : Any]"
    },
    {
      "name": "struct CLSErrorUserInfoKey",
      "desc": "Keys that appear in the user info dictionary in errors that ClassKit creates."
    },
    {
      "name": "var localizedDescription: String",
      "desc": "A localized, human-readable explanation of the error."
    },
    {
      "name": "static func == (CLSError, CLSError) -> Bool",
      "desc": "Indicates whether two errors are equal."
    },
    {
      "name": "static func != (CLSError, CLSError) -> Bool",
      "desc": "Indicates whether two errors are not equal."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of the error by feeding them into the given hash function."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hashed value of the error."
    },
    {
      "name": "init(Code, userInfo: [String : Any])",
      "desc": "Creates a new ClassKit error."
    },
    {
      "name": "static var invalidAccountCredentials: CLSError.Code"
    }
  ],
  "declaration": "struct CLSError"
}