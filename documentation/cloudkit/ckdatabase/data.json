{
  "path": "/documentation/cloudkit/ckdatabase",
  "type": "Class",
  "name": "CKDatabase",
  "desc": "A collection of record zones and subscriptions.",
  "items": [
    {
      "name": "func perform(CKQuery, inZoneWith: CKRecordZone.ID?, completionHandler: ([CKRecord]?, Error?) -> Void)",
      "desc": "Fetches records from a record zone that matches the specified query."
    },
    {
      "name": "func add(CKDatabaseOperation)",
      "desc": "Executes an operation in the current database."
    },
    {
      "name": "func fetch(withRecordID: CKRecord.ID, completionHandler: (CKRecord?, Error?) -> Void)",
      "desc": "Fetches the record with the specified ID."
    },
    {
      "name": "func save(CKRecord, completionHandler: (CKRecord?, Error?) -> Void)",
      "desc": "Saves a single record."
    },
    {
      "name": "func delete(withRecordID: CKRecord.ID, completionHandler: (CKRecord.ID?, Error?) -> Void)",
      "desc": "Deletes the record with the specified ID."
    },
    {
      "name": "func fetchAllRecordZones(completionHandler: ([CKRecordZone]?, Error?) -> Void)",
      "desc": "Fetches the database’s record zones."
    },
    {
      "name": "func fetch(withRecordZoneID: CKRecordZone.ID, completionHandler: (CKRecordZone?, Error?) -> Void)",
      "desc": "Fetches the record zone with the specified ID."
    },
    {
      "name": "func save(CKRecordZone, completionHandler: (CKRecordZone?, Error?) -> Void)",
      "desc": "Saves a single record zone."
    },
    {
      "name": "func delete(withRecordZoneID: CKRecordZone.ID, completionHandler: (CKRecordZone.ID?, Error?) -> Void)",
      "desc": "Deletes the record zone with the specified ID."
    },
    {
      "name": "func fetchAllSubscriptions(completionHandler: ([CKSubscription]?, Error?) -> Void)",
      "desc": "Fetches the database’s subscriptions."
    },
    {
      "name": "func fetch(withSubscriptionID: CKSubscription.ID, completionHandler: (CKSubscription?, Error?) -> Void)",
      "desc": "Fetches the subscriptions with the specified ID."
    },
    {
      "name": "func save(CKSubscription, completionHandler: (CKSubscription?, Error?) -> Void)",
      "desc": "Saves a single subscription."
    },
    {
      "name": "func delete(withSubscriptionID: CKSubscription.ID, completionHandler: (String?, Error?) -> Void)",
      "desc": "Deletes the subscription with the specified ID."
    },
    {
      "name": "var databaseScope: CKDatabase.Scope",
      "desc": "The type of database."
    },
    {
      "name": "enum CKDatabase.Scope",
      "desc": "Constants that represent the scope of a database."
    },
    {
      "name": "func configuredWith<R>(configuration: CKOperation.Configuration?, group: CKOperationGroup?, body: (CKDatabase) -> R) -> R"
    },
    {
      "name": "func configuredWith<R>(configuration: CKOperation.Configuration?, group: CKOperationGroup?, body: (CKDatabase) -> R) -> R"
    },
    {
      "name": "func databaseChanges(since: CKServerChangeToken?, resultsLimit: Int?) -> (modifications: [CKDatabase.DatabaseChange.Modification], deletions: [CKDatabase.DatabaseChange.Deletion], changeToken: CKServerChangeToken, moreComing: Bool)"
    },
    {
      "name": "func deleteSubscription(withID: CKSubscription.ID) -> CKSubscription.ID"
    },
    {
      "name": "func fetch(withCursor: CKQueryOperation.Cursor, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int, completionHandler: (Result<(matchResults: [(CKRecord.ID, Result<CKRecord, Error>)], queryCursor: CKQueryOperation.Cursor?), Error>) -> Void)"
    },
    {
      "name": "func fetch(withQuery: CKQuery, inZoneWith: CKRecordZone.ID?, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int, completionHandler: (Result<(matchResults: [(CKRecord.ID, Result<CKRecord, Error>)], queryCursor: CKQueryOperation.Cursor?), Error>) -> Void)"
    },
    {
      "name": "func fetch(withRecordIDs: [CKRecord.ID], desiredKeys: [CKRecord.FieldKey]?, completionHandler: (Result<[CKRecord.ID : Result<CKRecord, Error>], Error>) -> Void)"
    },
    {
      "name": "func fetch(withRecordZoneIDs: [CKRecordZone.ID], completionHandler: (Result<[CKRecordZone.ID : Result<CKRecordZone, Error>], Error>) -> Void)"
    },
    {
      "name": "func fetch(withSubscriptionIDs: [CKSubscription.ID], completionHandler: (Result<[CKSubscription.ID : Result<CKSubscription, Error>], Error>) -> Void)"
    },
    {
      "name": "func fetchDatabaseChanges(since: CKServerChangeToken?, resultsLimit: Int?, completionHandler: (Result<(modifications: [CKDatabase.DatabaseChange.Modification], deletions: [CKDatabase.DatabaseChange.Deletion], changeToken: CKServerChangeToken, moreComing: Bool), Error>) -> Void)"
    },
    {
      "name": "func fetchRecordZoneChanges(inZoneWith: CKRecordZone.ID, since: CKServerChangeToken?, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int?, completionHandler: (Result<(modificationResultsByID: [CKRecord.ID : Result<CKDatabase.RecordZoneChange.Modification, Error>], deletions: [CKDatabase.RecordZoneChange.Deletion], changeToken: CKServerChangeToken, moreComing: Bool), Error>) -> Void)"
    },
    {
      "name": "func modifyRecordZones(saving: [CKRecordZone], deleting: [CKRecordZone.ID]) -> (saveResults: [CKRecordZone.ID : Result<CKRecordZone, Error>], deleteResults: [CKRecordZone.ID : Result<Void, Error>])"
    },
    {
      "name": "func modifyRecordZones(saving: [CKRecordZone], deleting: [CKRecordZone.ID], completionHandler: (Result<(saveResults: [CKRecordZone.ID : Result<CKRecordZone, Error>], deleteResults: [CKRecordZone.ID : Result<Void, Error>]), Error>) -> Void)"
    },
    {
      "name": "func modifyRecords(saving: [CKRecord], deleting: [CKRecord.ID], savePolicy: CKModifyRecordsOperation.RecordSavePolicy, atomically: Bool) -> (saveResults: [CKRecord.ID : Result<CKRecord, Error>], deleteResults: [CKRecord.ID : Result<Void, Error>])"
    },
    {
      "name": "func modifyRecords(saving: [CKRecord], deleting: [CKRecord.ID], savePolicy: CKModifyRecordsOperation.RecordSavePolicy, atomically: Bool, completionHandler: (Result<(saveResults: [CKRecord.ID : Result<CKRecord, Error>], deleteResults: [CKRecord.ID : Result<Void, Error>]), Error>) -> Void)"
    },
    {
      "name": "func modifySubscriptions(saving: [CKSubscription], deleting: [CKSubscription.ID]) -> (saveResults: [CKSubscription.ID : Result<CKSubscription, Error>], deleteResults: [CKSubscription.ID : Result<Void, Error>])"
    },
    {
      "name": "func modifySubscriptions(saving: [CKSubscription], deleting: [CKSubscription.ID], completionHandler: (Result<(saveResults: [CKSubscription.ID : Result<CKSubscription, Error>], deleteResults: [CKSubscription.ID : Result<Void, Error>]), Error>) -> Void)"
    },
    {
      "name": "func recordZoneChanges(inZoneWith: CKRecordZone.ID, since: CKServerChangeToken?, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int?) -> (modificationResultsByID: [CKRecord.ID : Result<CKDatabase.RecordZoneChange.Modification, Error>], deletions: [CKDatabase.RecordZoneChange.Deletion], changeToken: CKServerChangeToken, moreComing: Bool)"
    },
    {
      "name": "func recordZones(for: [CKRecordZone.ID]) -> [CKRecordZone.ID : Result<CKRecordZone, Error>]"
    },
    {
      "name": "func records(continuingMatchFrom: CKQueryOperation.Cursor, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int) -> (matchResults: [(CKRecord.ID, Result<CKRecord, Error>)], queryCursor: CKQueryOperation.Cursor?)"
    },
    {
      "name": "func records(for: [CKRecord.ID], desiredKeys: [CKRecord.FieldKey]?) -> [CKRecord.ID : Result<CKRecord, Error>]"
    },
    {
      "name": "func records(matching: CKQuery, inZoneWith: CKRecordZone.ID?, desiredKeys: [CKRecord.FieldKey]?, resultsLimit: Int) -> (matchResults: [(CKRecord.ID, Result<CKRecord, Error>)], queryCursor: CKQueryOperation.Cursor?)"
    },
    {
      "name": "func subscription(for: CKSubscription.ID) -> CKSubscription"
    },
    {
      "name": "func subscriptions(for: [CKSubscription.ID]) -> [CKSubscription.ID : Result<CKSubscription, Error>]"
    },
    {
      "name": "enum CKDatabase.DatabaseChange"
    },
    {
      "name": "enum CKDatabase.RecordZoneChange"
    }
  ],
  "declaration": "class CKDatabase : NSObject",
  "inheritsFrom": [
    "NSObject"
  ]
}