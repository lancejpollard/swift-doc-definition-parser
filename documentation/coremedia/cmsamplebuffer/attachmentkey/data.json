{
  "path": "/documentation/coremedia/cmsamplebuffer/attachmentkey",
  "type": "Structure",
  "name": "CMSampleBuffer.AttachmentKey",
  "desc": "Keys that identify sample buffer attachments.",
  "items": [
    {
      "name": "static let cameraIntrinsicMatrix: CMSampleBuffer.AttachmentKey"
    },
    {
      "name": "static let displayEmptyMediaImmediately: CMSampleBuffer.AttachmentKey"
    },
    {
      "name": "static let drainAfterDecoding: CMSampleBuffer.AttachmentKey"
    },
    {
      "name": "static let droppedFrameReason: CMSampleBuffer.AttachmentKey"
    },
    {
      "name": "static let droppedFrameReasonInfo: CMSampleBuffer.AttachmentKey"
    },
    {
      "name": "static let emptyMedia: CMSampleBuffer.AttachmentKey"
    },
    {
      "name": "static let endsPreviousSampleDuration: CMSampleBuffer.AttachmentKey"
    },
    {
      "name": "static let fillDiscontinuitiesWithSilence: CMSampleBuffer.AttachmentKey"
    },
    {
      "name": "static let forceKeyFrame: CMSampleBuffer.AttachmentKey"
    },
    {
      "name": "static let gradualDecoderRefresh: CMSampleBuffer.AttachmentKey"
    },
    {
      "name": "static let permanentEmptyMedia: CMSampleBuffer.AttachmentKey"
    },
    {
      "name": "static let postNotificationWhenConsumed: CMSampleBuffer.AttachmentKey"
    },
    {
      "name": "static let resetDecoderBeforeDecoding: CMSampleBuffer.AttachmentKey"
    },
    {
      "name": "static let resumeOutput: CMSampleBuffer.AttachmentKey"
    },
    {
      "name": "static let reverse: CMSampleBuffer.AttachmentKey"
    },
    {
      "name": "static let sampleReferenceByteOffset: CMSampleBuffer.AttachmentKey"
    },
    {
      "name": "static let sampleReferenceURL: CMSampleBuffer.AttachmentKey"
    },
    {
      "name": "static let speedMultiplier: CMSampleBuffer.AttachmentKey"
    },
    {
      "name": "static let stillImageLensStabilizationInfo: CMSampleBuffer.AttachmentKey"
    },
    {
      "name": "static let transitionID: CMSampleBuffer.AttachmentKey"
    },
    {
      "name": "static let trimDurationAtEnd: CMSampleBuffer.AttachmentKey"
    },
    {
      "name": "static let trimDurationAtStart: CMSampleBuffer.AttachmentKey"
    },
    {
      "name": "func hash(into: inout Hasher)"
    },
    {
      "name": "var hashValue: Int"
    },
    {
      "name": "static func != (CMSampleBuffer.AttachmentKey, CMSampleBuffer.AttachmentKey) -> Bool"
    },
    {
      "name": "init(rawValue: CFString)"
    },
    {
      "name": "var rawValue: CFString"
    },
    {
      "name": "typealias CMSampleBuffer.AttachmentKey.RawValue"
    }
  ],
  "declaration": "struct AttachmentKey"
}