{
  "path": "/documentation/coremedia/cmformatdescription/timecode/flag",
  "type": "Structure",
  "name": "CMFormatDescription.TimeCode.Flag",
  "desc": "No overview available.",
  "items": [
    {
      "name": "static let dropFrame: CMFormatDescription.TimeCode.Flag"
    },
    {
      "name": "static let negTimesOK: CMFormatDescription.TimeCode.Flag"
    },
    {
      "name": "static let twentyFourHourMax: CMFormatDescription.TimeCode.Flag"
    },
    {
      "name": "typealias CMFormatDescription.TimeCode.Flag.ArrayLiteralElement"
    },
    {
      "name": "typealias CMFormatDescription.TimeCode.Flag.Element"
    },
    {
      "name": "typealias CMFormatDescription.TimeCode.Flag.RawValue"
    },
    {
      "name": "func contains(CMFormatDescription.TimeCode.Flag) -> Bool",
      "desc": "Returns a Boolean value that indicates whether a given element is a member of the option set."
    },
    {
      "name": "func insert(CMFormatDescription.TimeCode.Flag) -> (inserted: Bool, memberAfterInsert: CMFormatDescription.TimeCode.Flag)",
      "desc": "Adds the given element to the option set if it is not already a member."
    },
    {
      "name": "func remove(CMFormatDescription.TimeCode.Flag) -> CMFormatDescription.TimeCode.Flag?",
      "desc": "Removes the given element and all elements subsumed by it."
    },
    {
      "name": "func update(with: CMFormatDescription.TimeCode.Flag) -> CMFormatDescription.TimeCode.Flag?",
      "desc": "Inserts the given element into the set."
    },
    {
      "name": "func formIntersection(CMFormatDescription.TimeCode.Flag)",
      "desc": "Removes all elements of this option set that are not also present in the given set."
    },
    {
      "name": "func formSymmetricDifference(CMFormatDescription.TimeCode.Flag)",
      "desc": "Replaces this set with a new set containing all elements contained in either this set or the given set, but not in both."
    },
    {
      "name": "func formUnion(CMFormatDescription.TimeCode.Flag)",
      "desc": "Inserts the elements of another set into this option set."
    },
    {
      "name": "func intersection(CMFormatDescription.TimeCode.Flag) -> CMFormatDescription.TimeCode.Flag",
      "desc": "Returns a new option set with only the elements contained in both this set and the given set."
    },
    {
      "name": "func subtract(CMFormatDescription.TimeCode.Flag)",
      "desc": "Removes the elements of the given set from this set."
    },
    {
      "name": "func subtracting(CMFormatDescription.TimeCode.Flag) -> CMFormatDescription.TimeCode.Flag",
      "desc": "Returns a new set containing the elements of this set that do not occur in the given set."
    },
    {
      "name": "func symmetricDifference(CMFormatDescription.TimeCode.Flag) -> CMFormatDescription.TimeCode.Flag",
      "desc": "Returns a new option set with the elements contained in this set or in the given set, but not in both."
    },
    {
      "name": "func union(CMFormatDescription.TimeCode.Flag) -> CMFormatDescription.TimeCode.Flag",
      "desc": "Returns a new option set of the elements contained in this set, in the given set, or in both."
    },
    {
      "name": "var isEmpty: Bool",
      "desc": "A Boolean value that indicates whether the set has no elements."
    },
    {
      "name": "func isDisjoint(with: CMFormatDescription.TimeCode.Flag) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the set has no members in common with the given set."
    },
    {
      "name": "func isStrictSubset(of: CMFormatDescription.TimeCode.Flag) -> Bool",
      "desc": "Returns a Boolean value that indicates whether this set is a strict subset of the given set."
    },
    {
      "name": "func isStrictSuperset(of: CMFormatDescription.TimeCode.Flag) -> Bool",
      "desc": "Returns a Boolean value that indicates whether this set is a strict superset of the given set."
    },
    {
      "name": "func isSubset(of: CMFormatDescription.TimeCode.Flag) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the set is a subset of another set."
    },
    {
      "name": "func isSuperset(of: CMFormatDescription.TimeCode.Flag) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the set is a superset of the given set."
    },
    {
      "name": "let rawValue: UInt32"
    },
    {
      "name": "static func != (CMFormatDescription.TimeCode.Flag, CMFormatDescription.TimeCode.Flag) -> Bool"
    },
    {
      "name": "init()",
      "desc": "Creates an empty option set."
    },
    {
      "name": "init<S>(S)",
      "desc": "Creates a new set from a finite sequence of items."
    },
    {
      "name": "init(arrayLiteral: CMFormatDescription.TimeCode.Flag...)",
      "desc": "Creates a set containing the elements of the given array literal."
    },
    {
      "name": "init(rawValue: UInt32)"
    }
  ],
  "declaration": "struct CMFormatDescription.TimeCode.Flag",
  "conformsTo": [
    "OptionSet"
  ]
}