{
  "path": "/documentation/coremedia/cmformatdescription/extensions/value",
  "type": "Structure",
  "name": "CMFormatDescription.Extensions.Value",
  "desc": "No overview available.",
  "items": [
    {
      "name": "static func alphaChannelMode(CMFormatDescription.Extensions.Value.AlphaChannelMode) -> CMFormatDescription.Extensions.Value"
    },
    {
      "name": "static func chromaLocation(CMFormatDescription.Extensions.Value.ChromaLocation) -> CMFormatDescription.Extensions.Value"
    },
    {
      "name": "static func cleanAperture(width: (numerator: Int, denominator: Int), height: (numerator: Int, denominator: Int), horizontalOffet: (numerator: Int, denominator: Int), verticalOffset: (numerator: Int, denominator: Int)) -> CMFormatDescription.Extensions.Value"
    },
    {
      "name": "static func cleanAperture<Width, Height, Horizontal, Vertical>(width: Width, height: Height, horizontalOffet: Horizontal, verticalOffset: Vertical) -> CMFormatDescription.Extensions.Value"
    },
    {
      "name": "static func colorPrimaries(CMFormatDescription.Extensions.Value.ColorPrimaries) -> CMFormatDescription.Extensions.Value"
    },
    {
      "name": "static func data(CFData) -> CMFormatDescription.Extensions.Value"
    },
    {
      "name": "static func fieldDetail(CMFormatDescription.Extensions.Value.FieldDetail) -> CMFormatDescription.Extensions.Value"
    },
    {
      "name": "static func fontTable([Int : String]) -> CMFormatDescription.Extensions.Value"
    },
    {
      "name": "static func mobile3GPPTextColor(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat) -> CMFormatDescription.Extensions.Value"
    },
    {
      "name": "static func mobile3GPPTextDefaultStyle(startChar: Int, endChar: Int, localFontID: Int, fontFace: CMFormatDescription.Extensions.Value.FontFace, fontSize: Int, foregroundColor: CMFormatDescription.Extensions.Value) -> CMFormatDescription.Extensions.Value"
    },
    {
      "name": "static func mpeg2VideoProfile(CMFormatDescription.Extensions.Value.MPEG2VideoProfile) -> CMFormatDescription.Extensions.Value"
    },
    {
      "name": "static func number<T>(T) -> CMFormatDescription.Extensions.Value"
    },
    {
      "name": "static func pixelAspectRatio<Horizontal, Vertical>(horizontalSpacing: Horizontal, verticalSpacing: Vertical) -> CMFormatDescription.Extensions.Value"
    },
    {
      "name": "static func qtTextColor(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat) -> CMFormatDescription.Extensions.Value"
    },
    {
      "name": "static func qtTextDefaultStyle(startChar: Int, height: Int, ascent: Int, localFontID: Int, fontFace: CMFormatDescription.Extensions.Value.FontFace, fontSize: Int, foregroundColor: CMFormatDescription.Extensions.Value, defaultFontName: String?) -> CMFormatDescription.Extensions.Value"
    },
    {
      "name": "static func sourceReferenceName(value: String, langCode: Int) -> CMFormatDescription.Extensions.Value"
    },
    {
      "name": "static func string(String) -> CMFormatDescription.Extensions.Value"
    },
    {
      "name": "static func string(CFString) -> CMFormatDescription.Extensions.Value"
    },
    {
      "name": "static func textDisplayFlags(Set<CMFormatDescription.Extensions.Value.TextDisplayFlags>) -> CMFormatDescription.Extensions.Value"
    },
    {
      "name": "static func textJustification(CMFormatDescription.Extensions.Value.TextJustification) -> CMFormatDescription.Extensions.Value"
    },
    {
      "name": "static func textRect(top: Int, left: Int, bottom: Int, right: Int) -> CMFormatDescription.Extensions.Value"
    },
    {
      "name": "static func transferFunction(CMFormatDescription.Extensions.Value.TransferFunction) -> CMFormatDescription.Extensions.Value"
    },
    {
      "name": "static func vendor(CMFormatDescription.Extensions.Value.Vendor) -> CMFormatDescription.Extensions.Value"
    },
    {
      "name": "static func vendor(String) -> CMFormatDescription.Extensions.Value"
    },
    {
      "name": "static func yCbCrMatrix(CMFormatDescription.Extensions.Value.YCbCrMatrix) -> CMFormatDescription.Extensions.Value"
    },
    {
      "name": "var propertyListRepresentation: CFPropertyList"
    },
    {
      "name": "func hash(into: inout Hasher)"
    },
    {
      "name": "var hashValue: Int"
    },
    {
      "name": "static func != (CMFormatDescription.Extensions.Value, CMFormatDescription.Extensions.Value) -> Bool"
    },
    {
      "name": "static func == (CMFormatDescription.Extensions.Value, CMFormatDescription.Extensions.Value) -> Bool"
    },
    {
      "name": "init(CFPropertyList)"
    },
    {
      "name": "struct CMFormatDescription.Extensions.Value.AlphaChannelMode"
    },
    {
      "name": "struct CMFormatDescription.Extensions.Value.ChromaLocation"
    },
    {
      "name": "struct CMFormatDescription.Extensions.Value.ColorPrimaries"
    },
    {
      "name": "struct CMFormatDescription.Extensions.Value.FieldDetail"
    },
    {
      "name": "struct CMFormatDescription.Extensions.Value.FontFace"
    },
    {
      "name": "struct CMFormatDescription.Extensions.Value.MPEG2VideoProfile"
    },
    {
      "name": "struct CMFormatDescription.Extensions.Value.TextDisplayFlags"
    },
    {
      "name": "struct CMFormatDescription.Extensions.Value.TextJustification"
    },
    {
      "name": "struct CMFormatDescription.Extensions.Value.TransferFunction"
    },
    {
      "name": "struct CMFormatDescription.Extensions.Value.Vendor"
    },
    {
      "name": "struct CMFormatDescription.Extensions.Value.YCbCrMatrix"
    }
  ],
  "declaration": "struct CMFormatDescription.Extensions.Value",
  "conformsTo": [
    "Hashable"
  ]
}