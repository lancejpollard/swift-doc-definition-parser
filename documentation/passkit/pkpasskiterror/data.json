{
  "path": "/documentation/passkit/pkpasskiterror",
  "type": "Structure",
  "name": "PKPassKitError",
  "desc": "Errors that the PassKit framework uses.",
  "items": [
    {
      "name": "init(Code, userInfo: [String : Any])",
      "desc": "Creates a pass error object of the specified type with the specified user information."
    },
    {
      "name": "var code: Code",
      "desc": "The code that provides context for the error."
    },
    {
      "name": "var errorCode: Int",
      "desc": "The code that provides context for the error."
    },
    {
      "name": "var userInfo: [String : Any]",
      "desc": "A dictionary that contains custom information that relates to the error."
    },
    {
      "name": "var errorUserInfo: [String : Any]",
      "desc": "A dictionary that contains custom information that relates to the error."
    },
    {
      "name": "var localizedDescription: String",
      "desc": "A localized description of the error."
    },
    {
      "name": "static var invalidDataError: PKPassKitError.Code"
    },
    {
      "name": "static var invalidSignature: PKPassKitError.Code"
    },
    {
      "name": "static var notEntitledError: PKPassKitError.Code"
    },
    {
      "name": "static var unknownError: PKPassKitError.Code"
    },
    {
      "name": "static var unsupportedVersionError: PKPassKitError.Code"
    },
    {
      "name": "enum PKPassKitError.Code",
      "desc": "Errors that the PassKit framework uses."
    },
    {
      "name": "enum PKAddPaymentPassError",
      "desc": "Error codes for adding payment passes."
    },
    {
      "name": "static var errorDomain: String"
    },
    {
      "name": "let PKPassKitErrorDomain: String",
      "desc": "The error domain for PassKit errors."
    },
    {
      "name": "static func == (PKPassKitError, PKPassKitError) -> Bool",
      "desc": "Returns a Boolean value indicating whether two pass error objects are equal."
    },
    {
      "name": "static func != (PKPassKitError, PKPassKitError) -> Bool",
      "desc": "Returns a Boolean value indicating whether two errors are unequal."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the pass error object by feeding the item into the given hasher."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value for the Secure Element pass error."
    }
  ],
  "declaration": "struct PKPassKitError"
}