{
  "path": "/documentation/quartz/ikimagebrowserview",
  "type": "Class",
  "name": "IKImageBrowserView",
  "desc": "The IKImageBrowserView class is a view for displaying and browsing a large amount of images and movies efficiently. This class will be deprecated in a future release. Please switch to NSCollectionView instead.",
  "items": [
    {
      "name": "func reloadData()",
      "desc": "Marks the receiver as needing its data reloaded."
    },
    {
      "name": "var delegate: AnyObject!",
      "desc": "Returns the delegate of the receiver."
    },
    {
      "name": "var dataSource: AnyObject!",
      "desc": "Returns the data source of the receiver."
    },
    {
      "name": "func setCellsStyleMask(Int)",
      "desc": "Defines the appearance style of the cells."
    },
    {
      "name": "func cellsStyleMask() -> Int",
      "desc": "Returns the appearance style mask for the cell."
    },
    {
      "name": "func setConstrainsToOriginalSize(Bool)",
      "desc": "Sets whether the receiver constrains the cell’s image to its original size."
    },
    {
      "name": "func constrainsToOriginalSize() -> Bool",
      "desc": "Returns whether the receiver constrains the cell's image to its original size."
    },
    {
      "name": "func setIntercellSpacing(NSSize)",
      "desc": "Sets the spacing between cells in the view."
    },
    {
      "name": "func intercellSpacing() -> NSSize",
      "desc": "Returns the spacing between cells in the view."
    },
    {
      "name": "func newCell(forRepresentedItem: Any!) -> IKImageBrowserCell!",
      "desc": "Returns the cell to use for the specified item."
    },
    {
      "name": "func setZoomValue(Float)",
      "desc": "Sets the zoom value."
    },
    {
      "name": "func zoomValue() -> Float",
      "desc": "Returns the current zoom value."
    },
    {
      "name": "func setContentResizingMask(Int)",
      "desc": "Determines how the receiver resizes its content when zooming."
    },
    {
      "name": "func contentResizingMask() -> Int",
      "desc": "Returns the receiver’s content resizing mask, which determines how its content is resized while zooming."
    },
    {
      "name": "func scrollIndexToVisible(Int)",
      "desc": "Scrolls the receiver to the item at the specified index."
    },
    {
      "name": "func setCellSize(NSSize)",
      "desc": "Sets the cell size."
    },
    {
      "name": "func cellSize() -> NSSize",
      "desc": "Returns the cell size."
    },
    {
      "name": "func indexOfItem(at: NSPoint) -> Int",
      "desc": "Returns the index of the item at the specified location."
    },
    {
      "name": "func itemFrame(at: Int) -> NSRect",
      "desc": "Returns the frame rectangle for the item located at the specified index."
    },
    {
      "name": "func visibleItemIndexes() -> IndexSet!",
      "desc": "Returns the indexes of the view’s currently visible items."
    },
    {
      "name": "func cellForItem(at: Int) -> IKImageBrowserCell!",
      "desc": "Returns the browser cell for the item at the specified index."
    },
    {
      "name": "func selectionIndexes() -> IndexSet!",
      "desc": "Returns the indexes of the selected cells."
    },
    {
      "name": "func setSelectionIndexes(IndexSet!, byExtendingSelection: Bool)",
      "desc": "Selects cells at the specified indexes."
    },
    {
      "name": "func setAllowsMultipleSelection(Bool)",
      "desc": "Controls whether the user can select more than one cell at a time."
    },
    {
      "name": "func allowsMultipleSelection() -> Bool",
      "desc": "Returns whether multiple selections are allowed."
    },
    {
      "name": "func setAllowsEmptySelection(Bool)",
      "desc": "Controls whether an empty selection is allowed."
    },
    {
      "name": "func allowsEmptySelection() -> Bool",
      "desc": "Returns whether an empty selection is allowed."
    },
    {
      "name": "func setAllowsReordering(Bool)",
      "desc": "Controls whether the user can reorder items."
    },
    {
      "name": "func allowsReordering() -> Bool",
      "desc": "Returns whether the user can reorder items."
    },
    {
      "name": "func setAnimates(Bool)",
      "desc": "Controls whether the receiver animates reordering and changes of the data source."
    },
    {
      "name": "func animates() -> Bool",
      "desc": "Returns whether the receiver animates reordering and changes of the data source."
    },
    {
      "name": "func expandGroup(at: Int)",
      "desc": "Expands a group at the specified index."
    },
    {
      "name": "func collapseGroup(at: Int)",
      "desc": "Collapses a group at the specified index."
    },
    {
      "name": "func isGroupExpanded(at: Int) -> Bool",
      "desc": "Returns whether the group at the provided index is expanded."
    },
    {
      "name": "func setDraggingDestinationDelegate(Any!)",
      "desc": "Sets the dragging destination delegate of the receiver."
    },
    {
      "name": "func draggingDestinationDelegate() -> Any!",
      "desc": "Returns the dragging destination delegate of the receiver."
    },
    {
      "name": "func setDrop(Int, dropOperation: IKImageBrowserDropOperation)",
      "desc": "Allows the class to retarget the drop action."
    },
    {
      "name": "func indexAtLocationOfDroppedItem() -> Int",
      "desc": "Returns the index of the cell where the drop operation occurred."
    },
    {
      "name": "func setAllowsDroppingOnItems(Bool)",
      "desc": "Specifies whether the user can drop on items."
    },
    {
      "name": "func allowsDroppingOnItems() -> Bool",
      "desc": "Returns whether the user can drop on items."
    },
    {
      "name": "func dropOperation() -> IKImageBrowserDropOperation",
      "desc": "Returns the current drop operation."
    },
    {
      "name": "func setForegroundLayer(CALayer!)",
      "desc": "The Core Animation layer used as the foreground overlay."
    },
    {
      "name": "func foregroundLayer() -> CALayer!",
      "desc": "Returns the foreground Core Animation layer"
    },
    {
      "name": "func setBackgroundLayer(CALayer!)",
      "desc": "The Core Animation layer used as the view’s background."
    },
    {
      "name": "func backgroundLayer() -> CALayer!",
      "desc": "Returns the foreground Core Animation layer"
    },
    {
      "name": "func setCanControlQuickLookPanel(Bool)",
      "desc": "Specifies whether the view can automatically take control of the QuickLook panel."
    },
    {
      "name": "func canControlQuickLookPanel() -> Bool",
      "desc": "Returns whether the view can automatically take control of the QuickLook panel."
    },
    {
      "name": "func numberOfColumns() -> Int",
      "desc": "Returns the current number of columns."
    },
    {
      "name": "func numberOfRows() -> Int",
      "desc": "Returns the current number of rows."
    },
    {
      "name": "func rect(ofColumn: Int) -> NSRect",
      "desc": "Returns the rectangle containing the specified column."
    },
    {
      "name": "func columnIndexes(in: NSRect) -> IndexSet!",
      "desc": "Returns the column indexes in the specified rectangle."
    },
    {
      "name": "func rect(ofRow: Int) -> NSRect",
      "desc": "Returns the rectangle containing the specified row."
    },
    {
      "name": "func rowIndexes(in: NSRect) -> IndexSet!",
      "desc": "Returns the row indexes in the specified rectangle."
    },
    {
      "name": "struct IKImageBrowserDropOperation",
      "desc": "These constants specify the locations for dropping items onto the browser view. Used by the method setDrop(_:dropOperation:)."
    }
  ],
  "declaration": "class IKImageBrowserView : NSView",
  "inheritsFrom": [
    "NSView"
  ],
  "conformsTo": [
    "NSDraggingSource"
  ]
}