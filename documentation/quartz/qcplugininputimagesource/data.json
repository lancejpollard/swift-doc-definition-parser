{
  "path": "/documentation/quartz/qcplugininputimagesource",
  "type": "Protocol",
  "name": "QCPlugInInputImageSource",
  "desc": "The QCPlugInInputImageSource protocol eliminates the need to use explicit image types for the image input ports on your custom patch. Not only does using the protocol avoid restrictions of a specific image type, but it avoids impedance mismatches, and provides better performance by deferring pixel computation until it is needed. When you need to access the pixels in an image, you simply convert the image to a representation (texture or buffer) using one of the methods defined by the QCPlugInInputImageSource protocol. Use a texture representation when you want to use input images on the GPU. Use a buffer representation when you want to use input images on the CPU.",
  "items": [
    {
      "name": "func lockTextureRepresentation(with: CGColorSpace!, forBounds: NSRect) -> Bool",
      "desc": "Creates an OpenGL texture representation from a subregion of the image source using the provided color space."
    },
    {
      "name": "func unlockTextureRepresentation()",
      "desc": "Releases the OpenGL texture representation of the image source."
    },
    {
      "name": "func lockBufferRepresentation(withPixelFormat: String!, colorSpace: CGColorSpace!, forBounds: NSRect) -> Bool",
      "desc": "Creates a memory buffer representation from a subregion of the image source using the provided pixel format and color space."
    },
    {
      "name": "func bindTextureRepresentation(toCGLContext: CGLContextObj!, textureUnit: GLenum, normalizeCoordinates: Bool)",
      "desc": "Binds the texture to a given texture unit and optionally scales or flips the texture."
    },
    {
      "name": "func unbindTextureRepresentation(fromCGLContext: CGLContextObj!, textureUnit: GLenum)",
      "desc": "Unbinds the texture from a texture unit."
    },
    {
      "name": "func unlockBufferRepresentation()",
      "desc": "Releases the memory buffer representation of the image source."
    },
    {
      "name": "func imageColorSpace() -> Unmanaged<CGColorSpace>!",
      "desc": "Returns the color space of the image source."
    },
    {
      "name": "func shouldColorMatch() -> Bool",
      "desc": "Returns whether or not the image source should be color matched."
    },
    {
      "name": "func texturePixelsWide() -> Int",
      "desc": "Returns the width of the texture representation."
    },
    {
      "name": "func texturePixelsHigh() -> Int",
      "desc": "Returns the height of the texture representation."
    },
    {
      "name": "func textureTarget() -> GLenum",
      "desc": "Returns the texture target."
    },
    {
      "name": "func textureName() -> GLuint",
      "desc": "Returns the texture name."
    },
    {
      "name": "func textureColorSpace() -> Unmanaged<CGColorSpace>!",
      "desc": "Returns the color space of the texture representation."
    },
    {
      "name": "func textureFlipped() -> Bool",
      "desc": "Returns whether or not the contents of the texture are flipped vertically."
    },
    {
      "name": "func textureMatrix() -> UnsafePointer<GLfloat>!",
      "desc": "Returns a texture matrix."
    },
    {
      "name": "func imageBounds() -> NSRect",
      "desc": "Returns the actual bounds of the image source expressed in pixels and aligned to integer boundaries."
    },
    {
      "name": "func bufferPixelsWide() -> Int",
      "desc": "Returns the width of the image buffer representation."
    },
    {
      "name": "func bufferPixelsHigh() -> Int",
      "desc": "Returns the height of the image buffer representation."
    },
    {
      "name": "func bufferPixelFormat() -> String!",
      "desc": "Returns the pixel format of the image buffer representation."
    },
    {
      "name": "func bufferColorSpace() -> Unmanaged<CGColorSpace>!",
      "desc": "Returns the color space of the image buffer representation."
    },
    {
      "name": "func bufferBaseAddress() -> UnsafeRawPointer!",
      "desc": "Returns the base address of the image buffer."
    },
    {
      "name": "func bufferBytesPerRow() -> Int",
      "desc": "Returns the bytes per row of the buffer representation."
    }
  ],
  "declaration": "protocol QCPlugInInputImageSource"
}