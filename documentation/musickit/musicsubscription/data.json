{
  "path": "/documentation/musickit/musicsubscription",
  "type": "Structure",
  "name": "MusicSubscription",
  "desc": "A representation of the current state of the user’s subscription to Apple Music.",
  "items": [
    {
      "name": "struct Updates",
      "desc": "An asynchronous sequence to use for observing updates to the current state of the user’s subscription to Apple Music."
    },
    {
      "name": "static func == (MusicSubscription, MusicSubscription) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are equal."
    },
    {
      "name": "let canBecomeSubscriber: Bool",
      "desc": "A capability that allows your app to present subscription offers for Apple Music."
    },
    {
      "name": "let canPlayCatalogContent: Bool",
      "desc": "A capability that allows your app to play subscription content using a music player."
    },
    {
      "name": "var description: String",
      "desc": "A textual representation of this instance."
    },
    {
      "name": "let hasCloudLibraryEnabled: Bool",
      "desc": "A capability that allows your app to perform modifications to the user’s iCloud Music Library."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of this value by feeding them into the given hasher."
    },
    {
      "name": "static var current: MusicSubscription",
      "desc": "The current state of the user’s subscription to Apple Music."
    },
    {
      "name": "static var subscriptionUpdates: MusicSubscription.Updates",
      "desc": "An asynchronous sequence to use for observing updates to the current state of the user’s subscription to Apple Music."
    },
    {
      "name": "enum Error",
      "desc": "An error that MusicKit can throw upon requesting the current music subscription of the user."
    }
  ],
  "declaration": "struct MusicSubscription",
  "conformsTo": [
    "CustomStringConvertible",
    "Equatable",
    "Hashable"
  ]
}