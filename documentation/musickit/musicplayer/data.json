{
  "path": "/documentation/musickit/musicplayer",
  "type": "Class",
  "name": "MusicPlayer",
  "desc": "An object your app uses to play music.",
  "items": [
    {
      "name": "class Queue",
      "desc": "A representation of the playback queue for a music player."
    },
    {
      "name": "class State",
      "desc": "An object that exposes the observable properties of a music player."
    },
    {
      "name": "var isPreparedToPlay: Bool",
      "desc": "A Boolean value that indicates whether a music player is ready to play."
    },
    {
      "name": "var playbackTime: TimeInterval",
      "desc": "The current playback time, in seconds, of the current entry."
    },
    {
      "name": "let state: MusicPlayer.State",
      "desc": "An object that exposes the observable properties of the music player."
    },
    {
      "name": "func beginSeekingBackward()",
      "desc": "Begins seeking backward through the music content."
    },
    {
      "name": "func beginSeekingForward()",
      "desc": "Begins seeking forward through the music content."
    },
    {
      "name": "func endSeeking()",
      "desc": "Ends forward and backward seeking through the music content."
    },
    {
      "name": "func pause()",
      "desc": "Pauses playback of the current entry."
    },
    {
      "name": "func play() async throws",
      "desc": "Initiates playback from the current queue."
    },
    {
      "name": "func prepareToPlay() async throws",
      "desc": "Prepares the current queue for playback, interrupting any active (nonmixable) audio sessions."
    },
    {
      "name": "func restartCurrentEntry()",
      "desc": "Restarts playback at the beginning of the currently playing entry."
    },
    {
      "name": "func skipToNextEntry() async throws",
      "desc": "Starts playback of the next entry in the playback queue."
    },
    {
      "name": "func skipToPreviousEntry() async throws",
      "desc": "Starts playback of the previous entry in the playback queue."
    },
    {
      "name": "func stop()",
      "desc": "Ends playback of the current entry."
    },
    {
      "name": "enum PlaybackStatus",
      "desc": "The music player playback status modes."
    },
    {
      "name": "enum RepeatMode",
      "desc": "The repeat modes for the music player."
    },
    {
      "name": "enum ShuffleMode",
      "desc": "The shuffle modes for the music player."
    }
  ],
  "declaration": "class MusicPlayer"
}