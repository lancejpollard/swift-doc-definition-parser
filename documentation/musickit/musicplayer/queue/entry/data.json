{
  "path": "/documentation/musickit/musicplayer/queue/entry",
  "type": "Structure",
  "name": "MusicPlayer.Queue.Entry",
  "desc": "An entry for the playback queue of the music player.",
  "items": [
    {
      "name": "static func == (MusicPlayer.Queue.Entry, MusicPlayer.Queue.Entry) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are equal."
    },
    {
      "name": "init(PlayableMusicItem, startTime: TimeInterval?, endTime: TimeInterval?)",
      "desc": "Creates an entry of the playback queue with a playable music item, and optional start and end times."
    },
    {
      "name": "var artwork: Artwork?",
      "desc": "The artwork of this entry of the playback queue."
    },
    {
      "name": "var description: String",
      "desc": "A textual representation of this instance."
    },
    {
      "name": "var endTime: TimeInterval?",
      "desc": "An optional end time for this entry of the playback queue."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value."
    },
    {
      "name": "let id: String",
      "desc": "The unique identifier of this entry of the playback queue."
    },
    {
      "name": "var isTransient: Bool",
      "desc": "A Boolean value that indicates whether this entry of the playback queue has a transient music item."
    },
    {
      "name": "var item: MusicPlayer.Queue.Entry.Item?",
      "desc": "A music item that corresponds to this entry of the playback queue, such as a song or a music video."
    },
    {
      "name": "var startTime: TimeInterval?",
      "desc": "An optional start time for this entry of the playback queue."
    },
    {
      "name": "var subtitle: String?",
      "desc": "The subtitle of this entry of the playback queue."
    },
    {
      "name": "var title: String",
      "desc": "The title of this entry of the playback queue."
    },
    {
      "name": "var transientItem: PlayableMusicItem?",
      "desc": "A music item that corresponds to a recently inserted entry in the playback queue that has underlying items the music player still needs to resolve."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of this value by feeding them into the given hasher."
    },
    {
      "name": "typealias ID",
      "desc": "A type representing the stable identity of the entity associated with an instance."
    },
    {
      "name": "enum Item",
      "desc": "An item that corresponds to an entry in the playback queue."
    }
  ],
  "declaration": "struct Entry",
  "conformsTo": [
    "CustomStringConvertible",
    "Equatable",
    "Hashable",
    "Identifiable"
  ]
}