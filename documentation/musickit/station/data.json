{
  "path": "/documentation/musickit/station",
  "type": "Structure",
  "name": "Station",
  "desc": "A music item that represents a station.",
  "items": [
    {
      "name": "static func == (Station, Station) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are equal."
    },
    {
      "name": "var artwork: Artwork?",
      "desc": "The station artwork."
    },
    {
      "name": "var contentRating: ContentRating?",
      "desc": "The rating of the content that potentially plays while playing the station."
    },
    {
      "name": "var duration: TimeInterval?",
      "desc": "The duration of the stream."
    },
    {
      "name": "var editorialNotes: EditorialNotes?",
      "desc": "The notes about the station that appear in the Music app."
    },
    {
      "name": "var episodeNumber: Int?",
      "desc": "The episode number of the station."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value."
    },
    {
      "name": "let id: MusicItemID",
      "desc": "The unique identifier for the station."
    },
    {
      "name": "var isLive: Bool",
      "desc": "A Boolean value that indicates whether the station is live."
    },
    {
      "name": "var name: String",
      "desc": "The name of the station."
    },
    {
      "name": "var playParameters: PlayParameters?",
      "desc": "The parameters to use to play the station."
    },
    {
      "name": "var stationProviderName: String?",
      "desc": "The name of the entity that provides the station."
    },
    {
      "name": "var url: URL?",
      "desc": "The URL for the station."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of this value by feeding them into the given hasher."
    },
    {
      "name": "typealias ID",
      "desc": "A type representing the stable identity of the entity associated with an instance."
    }
  ],
  "declaration": "struct Station",
  "conformsTo": [
    "CustomDebugStringConvertible",
    "CustomStringConvertible",
    "Decodable",
    "Encodable",
    "Equatable",
    "FilterableMusicItem",
    "Hashable",
    "Identifiable",
    "MusicCatalogSearchable",
    "MusicItem",
    "MusicPropertyContainer",
    "PlayableMusicItem"
  ]
}