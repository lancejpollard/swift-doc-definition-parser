{
  "path": "/documentation/musickit/applicationmusicplayer/queue-swift.class/entries-swift.struct",
  "type": "Structure",
  "name": "ApplicationMusicPlayer.Queue.Entries",
  "desc": "No overview available.",
  "items": [
    {
      "name": "static func == (ApplicationMusicPlayer.Queue.Entries, ApplicationMusicPlayer.Queue.Entries) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are equal."
    },
    {
      "name": "init()",
      "desc": "Creates an empty collection of entries."
    },
    {
      "name": "init(arrayLiteral: MusicPlayer.Queue.Entry...)",
      "desc": "Creates an instance initialized with the given elements."
    },
    {
      "name": "var endIndex: ApplicationMusicPlayer.Queue.Entries.Index",
      "desc": "The collection’s “past the end” position—that is, the position one greater than the last valid subscript argument."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value."
    },
    {
      "name": "var indices: ApplicationMusicPlayer.Queue.Entries.Indices",
      "desc": "The indices that are valid for subscripting the collection, in ascending order."
    },
    {
      "name": "var startIndex: ApplicationMusicPlayer.Queue.Entries.Index",
      "desc": "The position of the first element in a nonempty collection."
    },
    {
      "name": "func distance(from: ApplicationMusicPlayer.Queue.Entries.Index, to: ApplicationMusicPlayer.Queue.Entries.Index) -> Int",
      "desc": "Returns the distance between two indices."
    },
    {
      "name": "func formIndex(after: inout ApplicationMusicPlayer.Queue.Entries.Index)",
      "desc": "Replaces the given index with its successor."
    },
    {
      "name": "func formIndex(before: inout ApplicationMusicPlayer.Queue.Entries.Index)",
      "desc": "Replaces the given index with its predecessor."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of this value by feeding them into the given hasher."
    },
    {
      "name": "func index(ApplicationMusicPlayer.Queue.Entries.Index, offsetBy: Int) -> ApplicationMusicPlayer.Queue.Entries.Index",
      "desc": "Returns an index that is the specified distance from the given index."
    },
    {
      "name": "func index(ApplicationMusicPlayer.Queue.Entries.Index, offsetBy: Int, limitedBy: ApplicationMusicPlayer.Queue.Entries.Index) -> ApplicationMusicPlayer.Queue.Entries.Index?",
      "desc": "Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index."
    },
    {
      "name": "func index(after: ApplicationMusicPlayer.Queue.Entries.Index) -> ApplicationMusicPlayer.Queue.Entries.Index",
      "desc": "Returns the position immediately after the given index."
    },
    {
      "name": "func index(before: ApplicationMusicPlayer.Queue.Entries.Index) -> ApplicationMusicPlayer.Queue.Entries.Index",
      "desc": "Returns the position immediately before the given index."
    },
    {
      "name": "func makeIterator() -> ApplicationMusicPlayer.Queue.Entries.Iterator",
      "desc": "Returns an iterator over the elements of this sequence."
    },
    {
      "name": "func replaceSubrange<C>(Range<ApplicationMusicPlayer.Queue.Entries.Index>, with: C)",
      "desc": "Replaces the specified subrange of elements with the given collection."
    },
    {
      "name": "subscript(Range<ApplicationMusicPlayer.Queue.Entries.Index>) -> ApplicationMusicPlayer.Queue.Entries.SubSequence",
      "desc": "Accesses a contiguous subrange of the collection’s elements."
    },
    {
      "name": "subscript(ApplicationMusicPlayer.Queue.Entries.Index) -> ApplicationMusicPlayer.Queue.Entries.Element",
      "desc": "Accesses the element at the specified position."
    },
    {
      "name": "typealias ArrayLiteralElement",
      "desc": "The type of the elements of an array literal."
    },
    {
      "name": "typealias Element",
      "desc": "A type representing the sequence’s elements."
    },
    {
      "name": "typealias Index",
      "desc": "A type that represents a position in the collection."
    },
    {
      "name": "typealias Indices",
      "desc": "A type that represents the indices that are valid for subscripting the collection, in ascending order."
    },
    {
      "name": "typealias Iterator",
      "desc": "A type that provides the sequence’s iteration interface and encapsulates its iteration state."
    },
    {
      "name": "typealias SubSequence",
      "desc": "A collection representing a contiguous subrange of this collection’s elements. The subsequence shares indices with the original collection."
    }
  ],
  "declaration": "struct Entries",
  "conformsTo": [
    "BidirectionalCollection",
    "Collection",
    "Equatable",
    "ExpressibleByArrayLiteral",
    "Hashable",
    "MutableCollection",
    "RandomAccessCollection",
    "RangeReplaceableCollection",
    "Sequence"
  ]
}