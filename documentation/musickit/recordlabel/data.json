{
  "path": "/documentation/musickit/recordlabel",
  "type": "Structure",
  "name": "RecordLabel",
  "desc": "A music item that represents a record label.",
  "items": [
    {
      "name": "static func == (RecordLabel, RecordLabel) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are equal."
    },
    {
      "name": "var artwork: Artwork?",
      "desc": "The record labelâ€™s artwork."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value."
    },
    {
      "name": "let id: MusicItemID",
      "desc": "The unique identifier for the record label."
    },
    {
      "name": "var latestReleases: MusicItemCollection<Album>?",
      "desc": "A collection of the most recent releases for the record label."
    },
    {
      "name": "var name: String",
      "desc": "The name of the record label."
    },
    {
      "name": "var shortDescription: String?",
      "desc": "An abbreviated description to show inline or when the record label appears alongside other content."
    },
    {
      "name": "var standardDescription: String?",
      "desc": "A description to show when the record label is prominently displayed."
    },
    {
      "name": "var topReleases: MusicItemCollection<Album>?",
      "desc": "A collection of top releases for the record label."
    },
    {
      "name": "var url: URL?",
      "desc": "The URL for the record label."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of this value by feeding them into the given hasher."
    },
    {
      "name": "typealias ID",
      "desc": "A type representing the stable identity of the entity associated with an instance."
    }
  ],
  "declaration": "struct RecordLabel",
  "conformsTo": [
    "CustomDebugStringConvertible",
    "CustomStringConvertible",
    "Decodable",
    "Encodable",
    "Equatable",
    "FilterableMusicItem",
    "Hashable",
    "Identifiable",
    "MusicCatalogSearchable",
    "MusicItem",
    "MusicPropertyContainer"
  ]
}