{
  "path": "/documentation/musickit/song",
  "type": "Structure",
  "name": "Song",
  "desc": "A music item that represents a song.",
  "items": [
    {
      "name": "static func == (Song, Song) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are equal."
    },
    {
      "name": "var albumTitle: String?",
      "desc": "The title of the album the song appears on."
    },
    {
      "name": "var albums: MusicItemCollection<Album>?",
      "desc": "The song’s associated albums."
    },
    {
      "name": "var artistName: String",
      "desc": "The artist’s name."
    },
    {
      "name": "var artistURL: URL?",
      "desc": "The artist’s URL."
    },
    {
      "name": "var artists: MusicItemCollection<Artist>?",
      "desc": "The song’s associated artists."
    },
    {
      "name": "var artwork: Artwork?",
      "desc": "The artwork for the song."
    },
    {
      "name": "var attribution: String?",
      "desc": "For classical music only, the name of the artist or composer to attribute to the song."
    },
    {
      "name": "var composerName: String?",
      "desc": "The name of the song’s composer."
    },
    {
      "name": "var composers: MusicItemCollection<Artist>?",
      "desc": "The song’s composers."
    },
    {
      "name": "var contentRating: ContentRating?",
      "desc": "The rating of the content."
    },
    {
      "name": "var discNumber: Int?",
      "desc": "The number of the disc the song appears on."
    },
    {
      "name": "var duration: TimeInterval?",
      "desc": "The duration of the song."
    },
    {
      "name": "var editorialNotes: EditorialNotes?",
      "desc": "The editorial notes for the song."
    },
    {
      "name": "var genreNames: [String]",
      "desc": "The names of the song’s associated genres."
    },
    {
      "name": "var genres: MusicItemCollection<Genre>?",
      "desc": "The song’s associated genres."
    },
    {
      "name": "var hasLyrics: Bool",
      "desc": "A Boolean value that indicates whether the song has lyrics available in the catalog. If true, the song has lyrics available; otherwise, it doesn’t."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value."
    },
    {
      "name": "let id: MusicItemID",
      "desc": "The unique identifier for the song."
    },
    {
      "name": "var isrc: String?",
      "desc": "The International Standard Recording Code (ISRC) for the song."
    },
    {
      "name": "var movementCount: Int?",
      "desc": "For classical music only, the movement count of this song."
    },
    {
      "name": "var movementName: String?",
      "desc": "For classical music only, the movement name of this song."
    },
    {
      "name": "var movementNumber: Int?",
      "desc": "For classical music only, the movement number of this song."
    },
    {
      "name": "var musicVideos: MusicItemCollection<MusicVideo>?",
      "desc": "The song’s associated music videos."
    },
    {
      "name": "var playParameters: PlayParameters?",
      "desc": "The parameters to use to play the song."
    },
    {
      "name": "var previewAssets: [PreviewAsset]?",
      "desc": "The preview assets for the song."
    },
    {
      "name": "var releaseDate: Date?",
      "desc": "The release date (or expected prerelease date) for the song."
    },
    {
      "name": "var station: Station?",
      "desc": "The song’s associated station."
    },
    {
      "name": "var title: String",
      "desc": "The title of the song."
    },
    {
      "name": "var trackNumber: Int?",
      "desc": "The song’s number in the album’s track list."
    },
    {
      "name": "var url: URL?",
      "desc": "The URL for the song."
    },
    {
      "name": "var workName: String?",
      "desc": "For classical music only, the name of the associated work."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of this value by feeding them into the given hasher."
    },
    {
      "name": "typealias ID",
      "desc": "A type representing the stable identity of the entity associated with an instance."
    }
  ],
  "declaration": "struct Song",
  "conformsTo": [
    "CustomDebugStringConvertible",
    "CustomStringConvertible",
    "Decodable",
    "Encodable",
    "Equatable",
    "FilterableMusicItem",
    "Hashable",
    "Identifiable",
    "MusicCatalogSearchable",
    "MusicItem",
    "MusicPropertyContainer",
    "PlayableMusicItem"
  ]
}