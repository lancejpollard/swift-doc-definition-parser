{
  "path": "/documentation/tabulardata/dataframe/slice",
  "type": "Structure",
  "name": "DataFrame.Slice",
  "desc": "A set of a data frame’s rows you create by using a method from a data frame instance or another data frame slice.",
  "items": [
    {
      "name": "var isEmpty: Bool",
      "desc": "A Boolean that indicates whether the data frame type is empty."
    },
    {
      "name": "var shape: (rows: Int, columns: Int)",
      "desc": "The number of rows and columns in the slice."
    },
    {
      "name": "var columns: [AnyColumnSlice]",
      "desc": "The entire slice as a collection of columns."
    },
    {
      "name": "var rows: DataFrame.Rows",
      "desc": "The entire slice as a collection of rows."
    },
    {
      "name": "var base: DataFrame",
      "desc": "The underlying data frame."
    },
    {
      "name": "subscript<R>(R) -> DataFrame.Slice",
      "desc": "Accesses rows of a data frame type with an index range expression."
    },
    {
      "name": "subscript(Range<Int>) -> DataFrame.Slice",
      "desc": "Accesses a slice of the data frame type with an index range."
    },
    {
      "name": "subscript<T>(ColumnID<T>) -> DiscontiguousColumnSlice<T>",
      "desc": "Returns a column you select by its column identifier."
    },
    {
      "name": "subscript<T>(column _: Int, T.Type) -> DiscontiguousColumnSlice<T>",
      "desc": "Returns a column you select by its index."
    },
    {
      "name": "subscript<T>(String, T.Type) -> DiscontiguousColumnSlice<T>",
      "desc": "Returns a column you select by its name and type."
    },
    {
      "name": "subscript(String) -> AnyColumnSlice",
      "desc": "Returns a column you select by its name."
    },
    {
      "name": "subscript(dynamicMember _: String) -> AnyColumnSlice",
      "desc": "Returns a column you select by its name to support dynamic-member lookup."
    },
    {
      "name": "subscript<S>(S) -> DataFrame.Slice",
      "desc": "Generates a data frame slice that includes the columns in a sequence of column names."
    },
    {
      "name": "func selecting<S>(columnNames: S) -> DataFrame.Slice",
      "desc": "Generates a data frame slice that includes the columns you select with a sequence of names."
    },
    {
      "name": "func selecting(columnNames: String...) -> DataFrame.Slice",
      "desc": "Generates a data frame slice that includes the columns you select with a list of names."
    },
    {
      "name": "func prefix(Int) -> DataFrame.Slice",
      "desc": "Returns a new slice that contains the initial elements of the original slice."
    },
    {
      "name": "func prefix(upTo: Int) -> DataFrame.Slice",
      "desc": "Returns a new slice that contains the initial elements of the original slice up to, but not including, the element at a position."
    },
    {
      "name": "func prefix(through: Int) -> DataFrame.Slice",
      "desc": "Returns a new slice that contains the initial elements of the original slice up to and including the element at a position."
    },
    {
      "name": "func suffix(Int) -> DataFrame.Slice",
      "desc": "Returns a new slice that contains the final elements of the original slice."
    },
    {
      "name": "func suffix(from: Int) -> DataFrame.Slice",
      "desc": "Returns a new slice that contains the final elements of the original slice beginning with the element at a position."
    },
    {
      "name": "func filter<T>(on: ColumnID<T>, (T?) throws -> Bool) rethrows -> DataFrame.Slice",
      "desc": "Returns a selection of rows that satisfy a predicate in the columns you select by column identifier."
    },
    {
      "name": "func filter<T>(on: String, T.Type, (T?) throws -> Bool) rethrows -> DataFrame.Slice",
      "desc": "Returns a selection of rows that satisfy a predicate in the columns you select by name."
    },
    {
      "name": "func randomSplit(by: Double, seed: Int?) -> (DataFrame.Slice, DataFrame.Slice)",
      "desc": "Generates two data frame slices by randomly splitting the rows of the data table."
    },
    {
      "name": "func randomSplit<G>(by: Double, using: inout G) -> (DataFrame.Slice, DataFrame.Slice)",
      "desc": "Generates two data frame slices by randomly splitting the rows of the data table type with a random-number generator."
    },
    {
      "name": "func stratifiedSplit(on: String, by: Double, randomSeed: Int?) -> (DataFrame, DataFrame)",
      "desc": "Generates two data frames by randomly splitting the rows of a column, which you select by its name, into strata."
    },
    {
      "name": "func stratifiedSplit<T0, T1>(on: ColumnID<T0>, ColumnID<T1>, by: Double, randomSeed: Int?) -> (DataFrame, DataFrame)",
      "desc": "Generates two data frames by randomly splitting the rows of two columns, which you select by column identifiers, into strata."
    },
    {
      "name": "func stratifiedSplit<T0, T1, T2>(on: ColumnID<T0>, ColumnID<T1>, ColumnID<T2>, by: Double, randomSeed: Int?) -> (DataFrame, DataFrame)",
      "desc": "Generates two data frames by randomly splitting the rows of three columns, which you select by column identifiers, into strata."
    },
    {
      "name": "func sorted(on: String, order: Order) -> DataFrame",
      "desc": "Generates a data frame by copying the data frame’s rows and then sorting the rows according to a column that you select by its name."
    },
    {
      "name": "func sorted<T>(on: String, T.Type, order: Order) -> DataFrame",
      "desc": "Generates a data frame by copying the data frame’s rows and then sorting the rows according to a column that you select by its name and type."
    },
    {
      "name": "func sorted<T>(on: String, T.Type, by: (T, T) throws -> Bool) rethrows -> DataFrame",
      "desc": "Generates a data frame by copying the data frame’s rows and then sorting the rows according to a column that you select by its name and type, with a predicate."
    },
    {
      "name": "func sorted<T>(on: ColumnID<T>, by: (T, T) throws -> Bool) rethrows -> DataFrame",
      "desc": "Generates a data frame by copying the data frame’s rows and then sorting the rows according to a column that you select by its column identifier, with a predicate."
    },
    {
      "name": "func sorted<T0, T1>(on: ColumnID<T0>, ColumnID<T1>, order: Order) -> DataFrame",
      "desc": "Generates a data frame by copying the data frame’s rows and then sorting the rows according to two columns that you select by their column identifiers."
    },
    {
      "name": "func sorted<T0, T1, T2>(on: ColumnID<T0>, ColumnID<T1>, ColumnID<T2>, order: Order) -> DataFrame",
      "desc": "Generates a data frame by copying the data frame’s rows and then sorting the rows according to three columns that you select by their column identifiers."
    },
    {
      "name": "func joined<R>(R, on: String, kind: JoinKind) -> DataFrame",
      "desc": "Generates a data frame by joining with another data frame type with a common column you select by name."
    },
    {
      "name": "func joined<R>(R, on: (left: String, right: String), kind: JoinKind) -> DataFrame",
      "desc": "Generates a data frame by joining with another data frame type along the columns that you select by name for both data frame types."
    },
    {
      "name": "func joined<R, T>(R, on: (left: ColumnID<T>, right: ColumnID<T>), kind: JoinKind) -> DataFrame",
      "desc": "Generates a data frame by joining with another data frame type along the columns that you select by identifier for both data frame types."
    },
    {
      "name": "func joined<R, T>(R, on: ColumnID<T>, kind: JoinKind) -> DataFrame",
      "desc": "Generates a data frame by joining with another data frame type with a common column that you select by identifier."
    },
    {
      "name": "func grouped(by: String, timeUnit: Calendar.Component) -> RowGrouping<Int>",
      "desc": "Creates a grouping of rows that the method selects by choosing unique units of time in a date column you select by name."
    },
    {
      "name": "func grouped(by: ColumnID<Date>, timeUnit: Calendar.Component) -> RowGrouping<Int>",
      "desc": "Creates a grouping of rows that the method selects by choosing unique units of time in a date column you select by column identifier."
    },
    {
      "name": "func grouped<InputKey, GroupingKey>(by: String, transform: (InputKey?) -> GroupingKey?) -> RowGrouping<GroupingKey>",
      "desc": "Creates a grouping of rows that the method selects by choosing unique values the transform closure creates with elements of a column you select by name."
    },
    {
      "name": "func grouped<InputKey, GroupingKey>(by: ColumnID<InputKey>, transform: (InputKey?) -> GroupingKey?) -> RowGrouping<GroupingKey>",
      "desc": "Creates a grouping of rows that the method selects by choosing unique values the transform closure creates with elements of a column you select by column identifier."
    },
    {
      "name": "struct RowGrouping",
      "desc": "A collection of row selections that have the same value in a column."
    },
    {
      "name": "func grouped(by: String) -> RowGroupingProtocol",
      "desc": "Creates a grouping of rows that the method selects by choosing unique values in a column."
    },
    {
      "name": "func grouped<T0, T1>(by: ColumnID<T0>, ColumnID<T1>) -> some RowGroupingProtocol",
      "desc": "Creates a grouping from two columns of different types."
    },
    {
      "name": "func grouped<T0, T1, T2>(by: ColumnID<T0>, ColumnID<T1>, ColumnID<T2>) -> some RowGroupingProtocol",
      "desc": "Creates a grouping from three columns of different types."
    },
    {
      "name": "protocol RowGroupingProtocol",
      "desc": "A type that represents a collection of row selections that have the same value in a column."
    },
    {
      "name": "func summary() -> DataFrame",
      "desc": "Generates a data frame that summarizes the columns of the data frame slice."
    },
    {
      "name": "func summary(of: String...) -> DataFrame",
      "desc": "Generates a data frame that summarizes the columns you select by name."
    },
    {
      "name": "func summary(ofColumns: Int...) -> DataFrame",
      "desc": "Generates a data frame that summarizes the columns you select by index."
    },
    {
      "name": "enum SummaryColumnIDs",
      "desc": "The summary data frame column identifiers."
    },
    {
      "name": "func writeCSV(to: URL, options: CSVWritingOptions) throws",
      "desc": "Creates a CSV file with the contents of the data frame type."
    },
    {
      "name": "func csvRepresentation(options: CSVWritingOptions) throws -> Data",
      "desc": "Generates a CSV data instance of the data frame type."
    },
    {
      "name": "static func == (DataFrame.Slice, DataFrame.Slice) -> Bool",
      "desc": "Returns a Boolean that indicates whether the slices are equal."
    },
    {
      "name": "static func != (Self, Self) -> Bool",
      "desc": "Returns a Boolean that indicates whether the slices are unequal."
    },
    {
      "name": "var description: String",
      "desc": "A text representation of the data frame slice."
    },
    {
      "name": "var debugDescription: String",
      "desc": "A text representation of the data frame slice suitable for debugging."
    },
    {
      "name": "func description(options: FormattingOptions) -> String",
      "desc": "Generates a text representation of the data frame type."
    },
    {
      "name": "var customMirror: Mirror",
      "desc": "A mirror that reflects the data frame slice."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of the data frame slice by feeding them into a hasher."
    },
    {
      "name": "typealias ColumnType",
      "desc": "A type that conforms to the type-erased column protocol."
    }
  ],
  "declaration": "@dynamicMemberLookup struct Slice",
  "conformsTo": [
    "CustomDebugStringConvertible",
    "CustomReflectable",
    "CustomStringConvertible",
    "DataFrameProtocol",
    "Equatable",
    "Hashable"
  ]
}