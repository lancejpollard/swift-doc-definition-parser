{
  "path": "/documentation/tabulardata/dataframeprotocol",
  "type": "Protocol",
  "name": "DataFrameProtocol",
  "desc": "A type that represents a data frame.",
  "items": [
    {
      "name": "var isEmpty: Bool",
      "desc": "A Boolean that indicates whether the data frame type is empty."
    },
    {
      "name": "var shape: (rows: Int, columns: Int)",
      "desc": "The number or rows and columns of the data frame type."
    },
    {
      "name": "var columns: [Self.ColumnType]",
      "desc": "The columns of the underlying data frame."
    },
    {
      "name": "associatedtype ColumnType : AnyColumnProtocol",
      "desc": "A type that conforms to the type-erased column protocol."
    },
    {
      "name": "var rows: DataFrame.Rows",
      "desc": "The rows of the underlying data frame."
    },
    {
      "name": "struct Rows",
      "desc": "A collection of rows in a data frame."
    },
    {
      "name": "var base: DataFrame",
      "desc": "The underlying data frame."
    },
    {
      "name": "subscript(Range<Int>) -> DataFrame.Slice",
      "desc": "Accesses a slice of the data frame type with an index range."
    },
    {
      "name": "subscript<R>(R) -> DataFrame.Slice",
      "desc": "Accesses rows of a data frame type with an index range expression."
    },
    {
      "name": "func randomSplit(by: Double, seed: Int?) -> (DataFrame.Slice, DataFrame.Slice)",
      "desc": "Generates two data frame slices by randomly splitting the rows of the data table."
    },
    {
      "name": "func randomSplit<G>(by: Double, using: inout G) -> (DataFrame.Slice, DataFrame.Slice)",
      "desc": "Generates two data frame slices by randomly splitting the rows of the data table type with a random-number generator."
    },
    {
      "name": "func stratifiedSplit(on: String, by: Double, randomSeed: Int?) -> (DataFrame, DataFrame)",
      "desc": "Generates two data frames by randomly splitting the rows of a column, which you select by its name, into strata."
    },
    {
      "name": "func stratifiedSplit(on: String..., by: Double, randomSeed: Int?) -> (DataFrame, DataFrame)",
      "desc": "Generates two data frames by randomly splitting the rows of multiple columns, which you select by their names, into strata."
    },
    {
      "name": "func stratifiedSplit<T>(on: ColumnID<T>, by: Double, randomSeed: Int?) -> (DataFrame, DataFrame)",
      "desc": "Generates two data frames by randomly splitting the rows of a column, which you select by column identifier, into strata."
    },
    {
      "name": "func stratifiedSplit<T0, T1>(on: ColumnID<T0>, ColumnID<T1>, by: Double, randomSeed: Int?) -> (DataFrame, DataFrame)",
      "desc": "Generates two data frames by randomly splitting the rows of two columns, which you select by column identifiers, into strata."
    },
    {
      "name": "func stratifiedSplit<T0, T1, T2>(on: ColumnID<T0>, ColumnID<T1>, ColumnID<T2>, by: Double, randomSeed: Int?) -> (DataFrame, DataFrame)",
      "desc": "Generates two data frames by randomly splitting the rows of three columns, which you select by column identifiers, into strata."
    },
    {
      "name": "func sorted(on: String, order: Order) -> DataFrame",
      "desc": "Generates a data frame by copying the data frame’s rows and then sorting the rows according to a column that you select by its name."
    },
    {
      "name": "func sorted<T>(on: String, T.Type, order: Order) -> DataFrame",
      "desc": "Generates a data frame by copying the data frame’s rows and then sorting the rows according to a column that you select by its name and type."
    },
    {
      "name": "func sorted<T>(on: String, T.Type, by: (T, T) throws -> Bool) rethrows -> DataFrame",
      "desc": "Generates a data frame by copying the data frame’s rows and then sorting the rows according to a column that you select by its name and type, with a predicate."
    },
    {
      "name": "func sorted<T>(on: ColumnID<T>, order: Order) -> DataFrame",
      "desc": "Generates a data frame by copying the data frame’s rows and then sorting the rows according to a column that you select by its column identifier."
    },
    {
      "name": "func sorted<T>(on: ColumnID<T>, by: (T, T) throws -> Bool) rethrows -> DataFrame",
      "desc": "Generates a data frame by copying the data frame’s rows and then sorting the rows according to a column that you select by its column identifier, with a predicate."
    },
    {
      "name": "func sorted<T0, T1>(on: ColumnID<T0>, ColumnID<T1>, order: Order) -> DataFrame",
      "desc": "Generates a data frame by copying the data frame’s rows and then sorting the rows according to two columns that you select by their column identifiers."
    },
    {
      "name": "func sorted<T0, T1, T2>(on: ColumnID<T0>, ColumnID<T1>, ColumnID<T2>, order: Order) -> DataFrame",
      "desc": "Generates a data frame by copying the data frame’s rows and then sorting the rows according to three columns that you select by their column identifiers."
    },
    {
      "name": "func joined<R>(R, on: String, kind: JoinKind) -> DataFrame",
      "desc": "Generates a data frame by joining with another data frame type with a common column you select by name."
    },
    {
      "name": "func joined<R>(R, on: (left: String, right: String), kind: JoinKind) -> DataFrame",
      "desc": "Generates a data frame by joining with another data frame type along the columns that you select by name for both data frame types."
    },
    {
      "name": "func joined<R, T>(R, on: (left: ColumnID<T>, right: ColumnID<T>), kind: JoinKind) -> DataFrame",
      "desc": "Generates a data frame by joining with another data frame type along the columns that you select by identifier for both data frame types."
    },
    {
      "name": "func joined<R, T>(R, on: ColumnID<T>, kind: JoinKind) -> DataFrame",
      "desc": "Generates a data frame by joining with another data frame type with a common column that you select by identifier."
    },
    {
      "name": "enum JoinKind",
      "desc": "An operation type that joins two data frame types."
    },
    {
      "name": "func grouped<GroupingKey>(by: ColumnID<GroupingKey>) -> RowGrouping<GroupingKey>",
      "desc": "Creates a grouping of rows that the method selects by choosing unique values in a column."
    },
    {
      "name": "func grouped(by: String, timeUnit: Calendar.Component) -> RowGrouping<Int>",
      "desc": "Creates a grouping of rows that the method selects by choosing unique units of time in a date column you select by name."
    },
    {
      "name": "func grouped(by: ColumnID<Date>, timeUnit: Calendar.Component) -> RowGrouping<Int>",
      "desc": "Creates a grouping of rows that the method selects by choosing unique units of time in a date column you select by column identifier."
    },
    {
      "name": "func grouped<InputKey, GroupingKey>(by: String, transform: (InputKey?) -> GroupingKey?) -> RowGrouping<GroupingKey>",
      "desc": "Creates a grouping of rows that the method selects by choosing unique values the transform closure creates with elements of a column you select by name."
    },
    {
      "name": "func grouped<InputKey, GroupingKey>(by: ColumnID<InputKey>, transform: (InputKey?) -> GroupingKey?) -> RowGrouping<GroupingKey>",
      "desc": "Creates a grouping of rows that the method selects by choosing unique values the transform closure creates with elements of a column you select by column identifier."
    },
    {
      "name": "func grouped(by: String...) -> some RowGroupingProtocol",
      "desc": "Creates a grouping from multiple columns you select by name."
    },
    {
      "name": "func grouped<T>(by: ColumnID<T>...) -> some RowGroupingProtocol",
      "desc": "Creates a grouping from multiple columns that you select by column identifier."
    },
    {
      "name": "func grouped<T0, T1>(by: ColumnID<T0>, ColumnID<T1>) -> some RowGroupingProtocol",
      "desc": "Creates a grouping from two columns of different types."
    },
    {
      "name": "func grouped<T0, T1, T2>(by: ColumnID<T0>, ColumnID<T1>, ColumnID<T2>) -> some RowGroupingProtocol",
      "desc": "Creates a grouping from three columns of different types."
    },
    {
      "name": "func writeCSV(to: URL, options: CSVWritingOptions) throws",
      "desc": "Creates a CSV file with the contents of the data frame type."
    },
    {
      "name": "func csvRepresentation(options: CSVWritingOptions) throws -> Data",
      "desc": "Generates a CSV data instance of the data frame type."
    },
    {
      "name": "func description(options: FormattingOptions) -> String",
      "desc": "Generates a text representation of the data frame type."
    }
  ],
  "declaration": "protocol DataFrameProtocol"
}