{
  "path": "/documentation/tabulardata/discontiguouscolumnslice",
  "type": "Structure",
  "name": "DiscontiguousColumnSlice",
  "desc": "A collection that represents a selection, potentially with gaps, of elements from a typed column.",
  "items": [
    {
      "name": "init(Column<WrappedElement>)",
      "desc": "Creates a slice with the contents of a column."
    },
    {
      "name": "init(column: Column<WrappedElement>, ranges: [Range<Int>])",
      "desc": "Creates a slice with the contents of a column."
    },
    {
      "name": "func distinct() -> DiscontiguousColumnSlice<WrappedElement>",
      "desc": "Generates a discontiguous slice that contains unique elements."
    },
    {
      "name": "func eraseToAnyColumn() -> AnyColumnSlice",
      "desc": "Generates a type-erased copy of the column slice."
    },
    {
      "name": "var prototype: AnyColumnPrototype",
      "desc": "A prototype that creates type-erased columns with the same underlying type as the column slice."
    },
    {
      "name": "func map<T>((DiscontiguousColumnSlice<WrappedElement>.Element) throws -> T?) rethrows -> Column<T>",
      "desc": "Creates a new column by applying a transformation to each element."
    },
    {
      "name": "func filled(with: Self.WrappedElement) -> FilledColumn<Self>",
      "desc": "Generates a filled column by replacing missing elements with a value."
    },
    {
      "name": "var name: String",
      "desc": "The name of the slice’s parent column."
    },
    {
      "name": "var count: Int",
      "desc": "The number of elements in the column slice."
    },
    {
      "name": "var wrappedElementType: Any.Type",
      "desc": "The underlying type of the column’s elements."
    },
    {
      "name": "func argmin() -> Int?",
      "desc": "Returns the index of the element with the lowest value, ignoring missing elements."
    },
    {
      "name": "func argmax() -> Int?",
      "desc": "Returns the index of the element with the highest value, ignoring missing elements."
    },
    {
      "name": "func isNil(at: Int) -> Bool",
      "desc": "Returns a Boolean that indicates whether the element at the index is missing."
    },
    {
      "name": "subscript(Int) -> DiscontiguousColumnSlice<WrappedElement>.Element",
      "desc": "Accesses an element at an index."
    },
    {
      "name": "subscript(Range<Int>) -> DiscontiguousColumnSlice<WrappedElement>",
      "desc": "Accesses a contiguous range of elements."
    },
    {
      "name": "subscript<R>(R) -> DiscontiguousColumnSlice<WrappedElement>",
      "desc": "Accesses a contiguous range of elements with a range expression."
    },
    {
      "name": "subscript((UnboundedRange_) -> ()) -> DiscontiguousColumnSlice<WrappedElement>",
      "desc": "Accesses a contiguous range of elements with an unbounded range."
    },
    {
      "name": "func summary() -> CategoricalSummary<WrappedElement>",
      "desc": "Generates a categorical summary of the column slice’s elements."
    },
    {
      "name": "func numericSummary() -> NumericSummary<Double>",
      "desc": "Generates a numeric summary of the integer column slice’s elements."
    },
    {
      "name": "func numericSummary() -> NumericSummary<WrappedElement>",
      "desc": "Generates a numeric summary of the floating-point column slice’s elements."
    },
    {
      "name": "func sum() -> WrappedElement",
      "desc": "Returns the sum of the column slice’s elements, ignoring missing elements."
    },
    {
      "name": "func min() -> DiscontiguousColumnSlice<WrappedElement>.Element",
      "desc": "Returns the element with the lowest value, ignoring missing elements."
    },
    {
      "name": "func max() -> DiscontiguousColumnSlice<WrappedElement>.Element",
      "desc": "Returns the element with the highest value, ignoring missing elements."
    },
    {
      "name": "func mean() -> DiscontiguousColumnSlice<WrappedElement>.Element",
      "desc": "Returns the mean average of the floating-point slice’s elements, ignoring missing elements."
    },
    {
      "name": "func mean() -> Double?",
      "desc": "Returns the mean average of the integer slice’s elements, ignoring missing elements."
    },
    {
      "name": "func standardDeviation(deltaDegreesOfFreedom: Int) -> Double?",
      "desc": "Returns the standard deviation of the integer column slice’s elements, ignoring missing elements."
    },
    {
      "name": "func standardDeviation(deltaDegreesOfFreedom: Int) -> DiscontiguousColumnSlice<WrappedElement>.Element",
      "desc": "Returns the standard deviation of the floating-point column slice’s elements, ignoring missing elements."
    },
    {
      "name": "var description: String",
      "desc": "A text representation of the column slice."
    },
    {
      "name": "var debugDescription: String",
      "desc": "A text representation of the column slice suitable for debugging."
    },
    {
      "name": "func description(options: FormattingOptions) -> String",
      "desc": "Generates a string description of the optional column type."
    },
    {
      "name": "var customMirror: Mirror",
      "desc": "A mirror that reflects the column slice."
    },
    {
      "name": "static func == (DiscontiguousColumnSlice<WrappedElement>, DiscontiguousColumnSlice<WrappedElement>) -> Bool",
      "desc": "Returns a Boolean that indicates whether the column slices are equal."
    },
    {
      "name": "static func != (Self, Self) -> Bool",
      "desc": "Returns a Boolean that indicates whether the column slices are unequal."
    },
    {
      "name": "static func += (inout DiscontiguousColumnSlice<WrappedElement>, WrappedElement)",
      "desc": "Modifies a column slice by adding a value to each element."
    },
    {
      "name": "static func -= (inout DiscontiguousColumnSlice<WrappedElement>, WrappedElement)",
      "desc": "Modifies a column slice by subtracting a value from each element."
    },
    {
      "name": "static func *= (inout DiscontiguousColumnSlice<WrappedElement>, WrappedElement)",
      "desc": "Modifies a column slice by multiplying each element by a value."
    },
    {
      "name": "static func /= (inout DiscontiguousColumnSlice<WrappedElement>, WrappedElement)",
      "desc": "Modifies an integer column slice by dividing each element by a value."
    },
    {
      "name": "static func /= (inout DiscontiguousColumnSlice<WrappedElement>, WrappedElement)",
      "desc": "Modifies a floating-point column slice by dividing each element by a value."
    },
    {
      "name": "static func += <C>(inout DiscontiguousColumnSlice<WrappedElement>, C)",
      "desc": "Modifies a column slice by adding each value in a collection to the corresponding element in the column."
    },
    {
      "name": "static func += <C>(inout DiscontiguousColumnSlice<WrappedElement>, C)",
      "desc": "Modifies a column slice by adding each optional value in a collection to the corresponding element in the column."
    },
    {
      "name": "static func -= <C>(inout DiscontiguousColumnSlice<WrappedElement>, C)",
      "desc": "Modifies a column slice by subtracting each value in a collection from the corresponding element in the column."
    },
    {
      "name": "static func -= <C>(inout DiscontiguousColumnSlice<WrappedElement>, C)",
      "desc": "Modifies a column slice by subtracting each optional value in a collection from the corresponding element in the column."
    },
    {
      "name": "static func *= <C>(inout DiscontiguousColumnSlice<WrappedElement>, C)",
      "desc": "Modifies a column slice by multiplying each element in the column by the corresponding value in a collection."
    },
    {
      "name": "static func *= <C>(inout DiscontiguousColumnSlice<WrappedElement>, C)",
      "desc": "Modifies a column slice by multiplying each element in the column by the corresponding optional value in a collection."
    },
    {
      "name": "static func /= <C>(inout DiscontiguousColumnSlice<WrappedElement>, C)",
      "desc": "Modifies an integer column slice by dividing each element in the column by the corresponding value in a collection."
    },
    {
      "name": "static func /= <C>(inout DiscontiguousColumnSlice<WrappedElement>, C)",
      "desc": "Modifies an integer column slice by dividing each element in the column by the corresponding optional value in a collection."
    },
    {
      "name": "static func /= <C>(inout DiscontiguousColumnSlice<WrappedElement>, C)",
      "desc": "Modifies a floating-point column slice by dividing each element in the column by the corresponding value in a collection."
    },
    {
      "name": "static func /= <C>(inout DiscontiguousColumnSlice<WrappedElement>, C)",
      "desc": "Modifies a floating-point column slice by dividing each element in the column by the corresponding optional value in a collection."
    },
    {
      "name": "static func + (Self, Self) -> Column<Self.WrappedElement>",
      "desc": "Generates a column by adding each element in an optional column type to the corresponding elements of another."
    },
    {
      "name": "static func - (Self, Self) -> Column<Self.WrappedElement>",
      "desc": "Generates a column by subtracting each element in an optional column type from the corresponding elements of another."
    },
    {
      "name": "static func * (Self, Self) -> Column<Self.WrappedElement>",
      "desc": "Generates a column by multiplying each element in an optional column type by the corresponding elements of another."
    },
    {
      "name": "static func / (Self, Self) -> Column<Self.WrappedElement>",
      "desc": "Generates an integer column by dividing each element in an optional column type by the corresponding elements of another."
    },
    {
      "name": "static func / (Self, Self) -> Column<Self.WrappedElement>",
      "desc": "Generates a floating-point column by dividing each element in an optional column type by the corresponding elements of another."
    },
    {
      "name": "static func + (Self, Self.Element) -> Column<Self.Element>",
      "desc": "Generates a column by adding a value to each element in a column."
    },
    {
      "name": "static func + (Self.Element, Self) -> Column<Self.Element>",
      "desc": "Generates a column by adding each element in a column to a value."
    },
    {
      "name": "static func + (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
      "desc": "Generates a column by adding a value to each element in an optional column."
    },
    {
      "name": "static func + (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
      "desc": "Generates a column by adding each element in an optional column to a value."
    },
    {
      "name": "static func - (Self, Self.Element) -> Column<Self.Element>",
      "desc": "Generates a column by subtracting a value from each element in a column."
    },
    {
      "name": "static func - (Self.Element, Self) -> Column<Self.Element>",
      "desc": "Generates a column by subtracting each element in a column from a value."
    },
    {
      "name": "static func - (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
      "desc": "Generates a column by subtracting a value from each element in an optional column type."
    },
    {
      "name": "static func - (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
      "desc": "Generates a column by subtracting each element in an optional column from a value."
    },
    {
      "name": "static func * (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
      "desc": "Generates a column by multiplying each element in an optional column by a value."
    },
    {
      "name": "static func * (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
      "desc": "Generates a column by multiplying a value by each element in an optional column type."
    },
    {
      "name": "static func / (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
      "desc": "Generates an integer column by dividing each element in an optional column by a value."
    },
    {
      "name": "static func / (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
      "desc": "Generates a floating-point column by dividing each element in an optional column by a value."
    },
    {
      "name": "static func / (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
      "desc": "Generates an integer column by dividing a value by each element in an optional column type."
    },
    {
      "name": "static func / (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
      "desc": "Generates a floating-point column by dividing a value by each element in an optional column type."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of the column slice by feeding them into a hasher."
    },
    {
      "name": "typealias Element",
      "desc": "The type of the column slice’s elements."
    },
    {
      "name": "typealias Index",
      "desc": "The type that represents a position in the column slice."
    },
    {
      "name": "var missingCount: Int",
      "desc": "The number of missing elements in the column slice."
    }
  ],
  "declaration": "struct DiscontiguousColumnSlice<WrappedElement>",
  "conformsTo": [
    "BidirectionalCollection",
    "Collection",
    "ColumnProtocol",
    "CustomDebugStringConvertible",
    "CustomReflectable",
    "CustomStringConvertible",
    "Equatable",
    "Hashable",
    "MutableCollection",
    "OptionalColumnProtocol",
    "Sequence"
  ]
}