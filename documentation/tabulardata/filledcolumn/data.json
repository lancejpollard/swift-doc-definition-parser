{
  "path": "/documentation/tabulardata/filledcolumn",
  "type": "Structure",
  "name": "FilledColumn",
  "desc": "A view on a column that replaces missing elements with a default value.",
  "items": [
    {
      "name": "var name: String",
      "desc": "The name of the column."
    },
    {
      "name": "func argmin() -> FilledColumn<Base>.Index?",
      "desc": "Returns the index of the element with the lowest value."
    },
    {
      "name": "func argmax() -> FilledColumn<Base>.Index?",
      "desc": "Returns the index of the element with the highest value."
    },
    {
      "name": "subscript(Base.Index) -> Base.WrappedElement",
      "desc": "Retrieves an element at a position in the column type."
    },
    {
      "name": "func summary() -> CategoricalSummary<FilledColumn<Base>.WrappedElement>",
      "desc": "Generates a categorical summary of the filled column’s elements, including default values."
    },
    {
      "name": "func numericSummary() -> NumericSummary<Double>",
      "desc": "Generates a numeric summary of the integer column’s elements."
    },
    {
      "name": "func numericSummary() -> NumericSummary<Base.WrappedElement>",
      "desc": "Generates a numeric summary of the floating-point column’s elements."
    },
    {
      "name": "func sum() -> FilledColumn<Base>.Element",
      "desc": "Returns the sum of the integer column’s elements."
    },
    {
      "name": "func sum() -> FilledColumn<Base>.Element",
      "desc": "Returns the sum of the floating-point column’s elements."
    },
    {
      "name": "func min() -> FilledColumn<Base>.Element?",
      "desc": "Returns the element with the lowest value."
    },
    {
      "name": "func max() -> FilledColumn<Base>.Element?",
      "desc": "Returns the element with the highest value."
    },
    {
      "name": "func mean() -> Double?",
      "desc": "Returns the mean average of the integer column’s elements."
    },
    {
      "name": "func mean() -> FilledColumn<Base>.Element?",
      "desc": "Returns the mean average of the floating-point column’s elements."
    },
    {
      "name": "func standardDeviation(deltaDegreesOfFreedom: Int) -> Double?",
      "desc": "Returns the standard deviation of the integer column’s elements."
    },
    {
      "name": "func standardDeviation(deltaDegreesOfFreedom: Int) -> FilledColumn<Base>.Element?",
      "desc": "Returns the standard deviation of the floating-point column’s elements."
    },
    {
      "name": "var description: String",
      "desc": "A mirror that reflects the filled column."
    },
    {
      "name": "var debugDescription: String",
      "desc": "A text representation of the filled column suitable for debugging."
    },
    {
      "name": "func description(options: FormattingOptions) -> String",
      "desc": "Generates a string description of the filled column."
    },
    {
      "name": "static func + (Self, Self) -> Column<Self.Element>",
      "desc": "Generates a column by adding each element in a column type to the corresponding elements of another."
    },
    {
      "name": "static func - (Self, Self) -> Column<Self.Element>",
      "desc": "Generates a column by subtracting each element in a column type from the corresponding elements of another."
    },
    {
      "name": "static func * (Self, Self) -> Column<Self.Element>",
      "desc": "Generates a column by multiplying each element in a column type by the corresponding elements of another."
    },
    {
      "name": "static func / (Self, Self) -> Column<Self.Element>",
      "desc": "Generates an integer column by dividing each element in a column type by the corresponding elements of another."
    },
    {
      "name": "static func / (Self, Self) -> Column<Self.Element>",
      "desc": "Generates a floating-point column by dividing each element in a column type by the corresponding elements of another."
    },
    {
      "name": "static func + (Self, Self.Element) -> Column<Self.Element>",
      "desc": "Generates a column by adding a value to each element in a column."
    },
    {
      "name": "static func + (Self.Element, Self) -> Column<Self.Element>",
      "desc": "Generates a column by adding each element in a column to a value."
    },
    {
      "name": "static func - (Self, Self.Element) -> Column<Self.Element>",
      "desc": "Generates a column by subtracting a value from each element in a column."
    },
    {
      "name": "static func - (Self.Element, Self) -> Column<Self.Element>",
      "desc": "Generates a column by subtracting each element in a column from a value."
    },
    {
      "name": "static func * (Self, Self.Element) -> Column<Self.Element>",
      "desc": "Generates a column by multiplying each element in a column by a value."
    },
    {
      "name": "static func * (Self.Element, Self) -> Column<Self.Element>",
      "desc": "Generates a column by multiplying a value by each element in a column."
    },
    {
      "name": "static func / (Self, Self.Element) -> Column<Self.Element>",
      "desc": "Generates an integer column by dividing each element in a column by a value."
    },
    {
      "name": "static func / (Self.Element, Self) -> Column<Self.Element>",
      "desc": "Generates an integer column by dividing a value by each element in a column."
    },
    {
      "name": "static func / (Self, Self.Element) -> Column<Self.Element>",
      "desc": "Generates a floating-point column by dividing each element in a column by a value."
    },
    {
      "name": "static func / (Self.Element, Self) -> Column<Self.Element>",
      "desc": "Generates a floating-point column by dividing a value by each element in a column."
    },
    {
      "name": "static func == (Self, Self.Element) -> [Bool]",
      "desc": "Returns a Boolean array that indicates whether the corresponding element of a column type is equal to a value."
    },
    {
      "name": "static func == (Self.Element, Self) -> [Bool]",
      "desc": "Returns a Boolean array that indicates whether the value is equal to the corresponding element of a column type."
    },
    {
      "name": "static func != (Self, Self.Element) -> [Bool]",
      "desc": "Returns a Boolean array that indicates whether the corresponding element of a column type isn’t equal to a value."
    },
    {
      "name": "static func != (Self.Element, Self) -> [Bool]",
      "desc": "Returns a Boolean array that indicates whether the value isn’t equal to the corresponding element of a column type."
    },
    {
      "name": "static func < (Self, Self.Element) -> [Bool]",
      "desc": "Returns a Boolean array that indicates whether the corresponding element of a column type is less than a value."
    },
    {
      "name": "static func < (Self.Element, Self) -> [Bool]",
      "desc": "Returns a Boolean array that indicates whether the value is less than the corresponding element of a column type."
    },
    {
      "name": "static func <= (Self, Self.Element) -> [Bool]",
      "desc": "Returns a Boolean array that indicates whether the corresponding element of a column type is less than or equal to a value."
    },
    {
      "name": "static func <= (Self.Element, Self) -> [Bool]",
      "desc": "Returns a Boolean array that indicates whether the value is less than or equal to the corresponding element of a column type."
    },
    {
      "name": "static func > (Self, Self.Element) -> [Bool]",
      "desc": "Returns a Boolean array that indicates whether the corresponding element of a column type is greater than a value."
    },
    {
      "name": "static func > (Self.Element, Self) -> [Bool]",
      "desc": "Returns a Boolean array that indicates whether the value is greater than the corresponding element of a column type."
    },
    {
      "name": "static func >= (Self, Self.Element) -> [Bool]",
      "desc": "Returns a Boolean array that indicates whether the corresponding element of a column type is greater than or equal to a value."
    },
    {
      "name": "static func >= (Self.Element, Self) -> [Bool]",
      "desc": "Returns a Boolean array that indicates whether the value is greater than or equal to the corresponding element of a column type."
    },
    {
      "name": "typealias Element",
      "desc": "The type of the column’s elements that defines an associated type for the bidirectional collection protocol."
    },
    {
      "name": "typealias WrappedElement",
      "desc": "The type of the column’s elements that defines an associated type for the optional column protocol."
    },
    {
      "name": "typealias Index",
      "desc": "A type that represents a position in the collection."
    },
    {
      "name": "typealias Indices",
      "desc": "A type that represents the indices that are valid for subscripting the collection, in ascending order."
    },
    {
      "name": "typealias Iterator",
      "desc": "A type that provides the collection’s iteration interface and encapsulates its iteration state."
    },
    {
      "name": "typealias SubSequence",
      "desc": "A collection representing a contiguous subrange of this collection’s elements. The subsequence shares indices with the original collection."
    }
  ],
  "declaration": "struct FilledColumn<Base> where Base : OptionalColumnProtocol",
  "conformsTo": [
    "BidirectionalCollection",
    "Collection",
    "ColumnProtocol",
    "CustomStringConvertible",
    "Sequence"
  ]
}