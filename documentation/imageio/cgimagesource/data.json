{
  "path": "/documentation/imageio/cgimagesource",
  "type": "Class",
  "name": "CGImageSource",
  "desc": "An opaque type that you use to read image data from a URL, data object, or data consumer.",
  "items": [
    {
      "name": "func CGImageSourceCreateWithURL(CFURL, CFDictionary?) -> CGImageSource?",
      "desc": "Creates an image source that reads from a location specified by a URL."
    },
    {
      "name": "func CGImageSourceCreateWithData(CFData, CFDictionary?) -> CGImageSource?",
      "desc": "Creates an image source that reads from a Core Foundation data object."
    },
    {
      "name": "func CGImageSourceCreateWithDataProvider(CGDataProvider, CFDictionary?) -> CGImageSource?",
      "desc": "Creates an image source that reads data from the specified data provider."
    },
    {
      "name": "func CGImageSourceCreateIncremental(CFDictionary?) -> CGImageSource",
      "desc": "Creates an empty image source that you can use to accumulate incremental image data."
    },
    {
      "name": "func CGImageSourceCreateImageAtIndex(CGImageSource, Int, CFDictionary?) -> CGImage?",
      "desc": "Creates an image object from the data at the specified index in an image source."
    },
    {
      "name": "func CGImageSourceCreateThumbnailAtIndex(CGImageSource, Int, CFDictionary?) -> CGImage?",
      "desc": "Creates a thumbnail version of the image at the specified index in an image source."
    },
    {
      "name": "func CGImageSourceGetPrimaryImageIndex(CGImageSource) -> Int",
      "desc": "Returns the index of the primary image for an High Efficiency Image File Format (HEIF) image."
    },
    {
      "name": "func CGImageSourceGetTypeID() -> CFTypeID",
      "desc": "Returns the unique type identifier of an image source opaque type."
    },
    {
      "name": "func CGImageSourceGetType(CGImageSource) -> CFString?",
      "desc": "Returns the uniform type identifier of the source container."
    },
    {
      "name": "func CGImageSourceCopyTypeIdentifiers() -> CFArray",
      "desc": "Returns an array of uniform type identifiers that are supported for image sources."
    },
    {
      "name": "func CGImageSourceGetCount(CGImageSource) -> Int",
      "desc": "Returns the number of images (not including thumbnails) in the image source."
    },
    {
      "name": "func CGImageSourceCopyProperties(CGImageSource, CFDictionary?) -> CFDictionary?",
      "desc": "Returns the properties of the image source."
    },
    {
      "name": "func CGImageSourceCopyPropertiesAtIndex(CGImageSource, Int, CFDictionary?) -> CFDictionary?",
      "desc": "Returns the properties of the image at a specified location in an image source."
    },
    {
      "name": "func CGImageSourceCopyAuxiliaryDataInfoAtIndex(CGImageSource, Int, CFString) -> CFDictionary?",
      "desc": "Returns auxiliary data, such as mattes and depth information, that accompany the image."
    },
    {
      "name": "func CGImageSourceUpdateData(CGImageSource, CFData, Bool)",
      "desc": "Updates the data in an incremental image source."
    },
    {
      "name": "func CGImageSourceUpdateDataProvider(CGImageSource, CGDataProvider, Bool)",
      "desc": "Updates an incremental image source with a new data provider."
    },
    {
      "name": "func CGImageSourceGetStatus(CGImageSource) -> CGImageSourceStatus",
      "desc": "Return the status of an image source."
    },
    {
      "name": "func CGImageSourceGetStatusAtIndex(CGImageSource, Int) -> CGImageSourceStatus",
      "desc": "Returns the current status of an image at the specified location in the image source."
    },
    {
      "name": "enum CGImageSourceStatus",
      "desc": "The set of status values for images and image sources."
    },
    {
      "name": "let kCGImageSourceTypeIdentifierHint: CFString",
      "desc": "The uniform type identifier that represents your best guess for the image’s type."
    },
    {
      "name": "let kCGImageSourceShouldAllowFloat: CFString",
      "desc": "A Boolean that indicates whether to use floating-point values in returned images."
    },
    {
      "name": "let kCGImageSourceShouldCache: CFString",
      "desc": "A Boolean value that indicates whether to cache the decoded image."
    },
    {
      "name": "let kCGImageSourceShouldCacheImmediately: CFString",
      "desc": "A Boolean value that indicates whether image decoding and caching happens at image creation time."
    },
    {
      "name": "let kCGImageSourceCreateThumbnailFromImageIfAbsent: CFString",
      "desc": "A Boolean value that indicates whether to create a thumbnail image automatically if the data source doesn’t contain one."
    },
    {
      "name": "let kCGImageSourceCreateThumbnailFromImageAlways: CFString",
      "desc": "A Boolean value that indicates whether to always create a thumbnail image."
    },
    {
      "name": "let kCGImageSourceThumbnailMaxPixelSize: CFString",
      "desc": "The maximum width and height of a thumbnail image, specified in pixels."
    },
    {
      "name": "let kCGImageSourceCreateThumbnailWithTransform: CFString",
      "desc": "A Boolean value that indicates whether to rotate and scale the thumbnail image to match the image’s orientation and aspect ratio."
    },
    {
      "name": "let kCGImageSourceSubsampleFactor: CFString",
      "desc": "The factor by which to scale down any returned images."
    }
  ],
  "declaration": "class CGImageSource"
}