{
  "path": "/documentation/mapkit/mkerror",
  "type": "Structure",
  "name": "MKError",
  "desc": "Error constants for the MapKit framework.",
  "items": [
    {
      "name": "static var decodingFailed: MKError.Code",
      "desc": "GeoJSON decoding failed."
    },
    {
      "name": "static var directionsNotFound: MKError.Code",
      "desc": "Directions to the specified location are not available."
    },
    {
      "name": "static var loadingThrottled: MKError.Code",
      "desc": "The data was not loaded because data throttling is in effect."
    },
    {
      "name": "static var placemarkNotFound: MKError.Code",
      "desc": "The specified placemark could not be found."
    },
    {
      "name": "static var serverFailure: MKError.Code",
      "desc": "The map server was unable to return the desired information."
    },
    {
      "name": "static var unknown: MKError.Code",
      "desc": "An unknown error occurred."
    },
    {
      "name": "enum MKError.Code",
      "desc": "Error constants for the MapKit framework."
    },
    {
      "name": "var code: Code",
      "desc": "The error code within the domain."
    },
    {
      "name": "var errorCode: Int",
      "desc": "The error code within the domain."
    },
    {
      "name": "var userInfo: [String : Any]",
      "desc": "A dictionary that contains information about to the error."
    },
    {
      "name": "var errorUserInfo: [String : Any]",
      "desc": "A dictionary that contains information about to the error."
    },
    {
      "name": "var localizedDescription: String",
      "desc": "A string that contains a localized description of the error, appropriate for displaying to the user."
    },
    {
      "name": "static var errorDomain: String",
      "desc": "The error domain."
    },
    {
      "name": "static func != (MKError, MKError) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are not equal."
    },
    {
      "name": "static func == (MKError, MKError) -> Bool",
      "desc": "Indicates whether two errors are equivalent."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value of the error."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of this value by feeding them into the given hasher."
    },
    {
      "name": "init(Code, userInfo: [String : Any])",
      "desc": "Creates an error using the specified code and user info dictionary."
    }
  ],
  "declaration": "struct MKError"
}