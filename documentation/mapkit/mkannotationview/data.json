{
  "path": "/documentation/mapkit/mkannotationview",
  "type": "Class",
  "name": "MKAnnotationView",
  "desc": "The visual representation of one of your annotation objects.",
  "items": [
    {
      "name": "init(annotation: MKAnnotation?, reuseIdentifier: String?)",
      "desc": "Initializes and returns a new annotation view."
    },
    {
      "name": "init?(coder: NSCoder)",
      "desc": "Creates an annotation view using data from the specified unarchiver."
    },
    {
      "name": "func prepareForReuse()",
      "desc": "Called when the view is removed from the reuse queue."
    },
    {
      "name": "func prepareForDisplay()",
      "desc": "Notifies the annotation view that it is about to be displayed on the map."
    },
    {
      "name": "var displayPriority: MKFeatureDisplayPriority",
      "desc": "The display priority of this annotation view."
    },
    {
      "name": "struct MKFeatureDisplayPriority",
      "desc": "Constants indicating the display priority for annotations."
    },
    {
      "name": "var zPriority: MKAnnotationViewZPriority",
      "desc": "The relative importance of this annotation view when unselected with respect to its ordering along the z axis."
    },
    {
      "name": "var selectedZPriority: MKAnnotationViewZPriority",
      "desc": "The relative importance of this annotation view when selected with respect to its ordering along the z axis."
    },
    {
      "name": "struct MKAnnotationViewZPriority",
      "desc": "Constants that indicates the priority for ordering overlapping annotation views."
    },
    {
      "name": "var isEnabled: Bool",
      "desc": "A Boolean value indicating whether the annotation is enabled."
    },
    {
      "name": "var image: UIImage?",
      "desc": "The image to be displayed by the annotation view."
    },
    {
      "name": "var isHighlighted: Bool",
      "desc": "A Boolean value indicating whether the annotation view is highlighted."
    },
    {
      "name": "var annotation: MKAnnotation?",
      "desc": "The annotation object currently associated with the view."
    },
    {
      "name": "var centerOffset: CGPoint",
      "desc": "The offset (in points) at which to display the view."
    },
    {
      "name": "var calloutOffset: CGPoint",
      "desc": "The offset (in points) at which to place the callout bubble."
    },
    {
      "name": "var reuseIdentifier: String?",
      "desc": "The string that identifies that this annotation view is reusable."
    },
    {
      "name": "func setSelected(Bool, animated: Bool)",
      "desc": "Sets the selection state of the annotation view."
    },
    {
      "name": "var isSelected: Bool",
      "desc": "A Boolean value indicating whether the annotation view is currently selected."
    },
    {
      "name": "var canShowCallout: Bool",
      "desc": "A Boolean value indicating whether the annotation view is able to display extra information in a callout bubble."
    },
    {
      "name": "var leftCalloutAccessoryView: UIView?",
      "desc": "The view to display on the left side of the standard callout bubble."
    },
    {
      "name": "var rightCalloutAccessoryView: UIView?",
      "desc": "The view to display on the right side of the standard callout bubble."
    },
    {
      "name": "var detailCalloutAccessoryView: UIView?",
      "desc": "The detail accessory view to be used in the standard callout."
    },
    {
      "name": "var leftCalloutOffset: CGPoint",
      "desc": "The offset in points from the middle-left of the annotation view."
    },
    {
      "name": "var rightCalloutOffset: CGPoint",
      "desc": "The offset in points from the middle-right of the annotation view."
    },
    {
      "name": "var isDraggable: Bool",
      "desc": "A Boolean indicating whether the annotation view is draggable."
    },
    {
      "name": "func setDragState(MKAnnotationView.DragState, animated: Bool)",
      "desc": "Sets the current drag state for the annotation view."
    },
    {
      "name": "var dragState: MKAnnotationView.DragState",
      "desc": "The current drag state of the annotation view."
    },
    {
      "name": "var collisionMode: MKAnnotationView.CollisionMode",
      "desc": "The collision mode to use when interpreting the collision frame rectangle."
    },
    {
      "name": "enum MKAnnotationView.CollisionMode",
      "desc": "Constants indicating how to interpret the collision frame rectangle of an annotation view."
    },
    {
      "name": "var clusteringIdentifier: String?",
      "desc": "An identifier that determines whether the annotation view participates in clustering."
    },
    {
      "name": "var cluster: MKAnnotationView?",
      "desc": "The clustering annotation view currently standing in for this annotation view."
    },
    {
      "name": "static let MKAnnotationCalloutInfoDidChange: NSNotification.Name",
      "desc": "Notifies observers that the title or subtitle information of an annotation object changed."
    }
  ],
  "declaration": "class MKAnnotationView : UIView",
  "inheritsFrom": [
    "NSView",
    "UIView"
  ]
}