{
  "path": "/documentation/javascriptcore/jsvalueref",
  "type": "Type Alias",
  "name": "JSValueRef",
  "desc": "A JavaScript value.",
  "items": [
    {
      "name": "func JSValueGetType(JSContextRef!, JSValueRef!) -> JSType",
      "desc": "Returns a JavaScript value’s type."
    },
    {
      "name": "func JSValueIsUndefined(JSContextRef!, JSValueRef!) -> Bool",
      "desc": "Tests whether a JavaScript value’s type is the undefined type."
    },
    {
      "name": "func JSValueIsNull(JSContextRef!, JSValueRef!) -> Bool",
      "desc": "Tests whether a JavaScript value’s type is the null type."
    },
    {
      "name": "func JSValueIsBoolean(JSContextRef!, JSValueRef!) -> Bool",
      "desc": "Tests whether a JavaScript value is Boolean."
    },
    {
      "name": "func JSValueIsNumber(JSContextRef!, JSValueRef!) -> Bool",
      "desc": "Tests whether a JavaScript value’s type is the number type."
    },
    {
      "name": "func JSValueIsString(JSContextRef!, JSValueRef!) -> Bool",
      "desc": "Tests whether a JavaScript value’s type is the string type."
    },
    {
      "name": "func JSValueIsSymbol(JSContextRef!, JSValueRef!) -> Bool",
      "desc": "Tests whether a JavaScript value's type is the symbol type."
    },
    {
      "name": "func JSValueIsObject(JSContextRef!, JSValueRef!) -> Bool",
      "desc": "Tests whether a JavaScript value’s type is the object type."
    },
    {
      "name": "func JSValueIsObjectOfClass(JSContextRef!, JSValueRef!, JSClassRef!) -> Bool",
      "desc": "Tests whether a JavaScript value is an object with a specified class in its class chain."
    },
    {
      "name": "func JSValueIsArray(JSContextRef!, JSValueRef!) -> Bool",
      "desc": "Tests whether a JavaScript value is an array."
    },
    {
      "name": "func JSValueIsDate(JSContextRef!, JSValueRef!) -> Bool",
      "desc": "Tests whether a JavaScript value is a date."
    },
    {
      "name": "func JSValueGetTypedArrayType(JSContextRef!, JSValueRef!, UnsafeMutablePointer<JSValueRef?>!) -> JSTypedArrayType",
      "desc": "Returns a JavaScript value’s typed array type."
    },
    {
      "name": "struct JSType",
      "desc": "Constants that identify the type of a JavaScript value."
    },
    {
      "name": "func JSValueMakeUndefined(JSContextRef!) -> JSValueRef!",
      "desc": "Creates a JavaScript value of the undefined type."
    },
    {
      "name": "func JSValueMakeNull(JSContextRef!) -> JSValueRef!",
      "desc": "Creates a JavaScript value of the null type."
    },
    {
      "name": "func JSValueMakeBoolean(JSContextRef!, Bool) -> JSValueRef!",
      "desc": "Creates a JavaScript Boolean value."
    },
    {
      "name": "func JSValueMakeNumber(JSContextRef!, Double) -> JSValueRef!",
      "desc": "Creates a JavaScript value of the number type."
    },
    {
      "name": "func JSValueMakeString(JSContextRef!, JSStringRef!) -> JSValueRef!",
      "desc": "Creates a JavaScript value of the string type."
    },
    {
      "name": "func JSValueMakeSymbol(JSContextRef!, JSStringRef!) -> JSValueRef!",
      "desc": "Creates a JavaScript value of the symbol type."
    },
    {
      "name": "func JSValueToBoolean(JSContextRef!, JSValueRef!) -> Bool",
      "desc": "Converts a JavaScript value to a Boolean and returns the resulting Boolean."
    },
    {
      "name": "func JSValueToNumber(JSContextRef!, JSValueRef!, UnsafeMutablePointer<JSValueRef?>!) -> Double",
      "desc": "Converts a JavaScript value to a number and returns the resulting number."
    },
    {
      "name": "func JSValueToStringCopy(JSContextRef!, JSValueRef!, UnsafeMutablePointer<JSValueRef?>!) -> JSStringRef!",
      "desc": "Converts a JavaScript value to a string and copies the result into a JavaScript string."
    },
    {
      "name": "func JSValueToObject(JSContextRef!, JSValueRef!, UnsafeMutablePointer<JSValueRef?>!) -> JSObjectRef!",
      "desc": "Converts a JavaScript value to an object and returns the resulting object."
    },
    {
      "name": "func JSValueMakeFromJSONString(JSContextRef!, JSStringRef!) -> JSValueRef!",
      "desc": "Creates a JavaScript value from a JSON-formatted string."
    },
    {
      "name": "func JSValueCreateJSONString(JSContextRef!, JSValueRef!, UInt32, UnsafeMutablePointer<JSValueRef?>!) -> JSStringRef!",
      "desc": "Creates a JavaScript string that contains the JSON-serialized representation of a JavaScript value."
    },
    {
      "name": "func JSValueIsEqual(JSContextRef!, JSValueRef!, JSValueRef!, UnsafeMutablePointer<JSValueRef?>!) -> Bool",
      "desc": "Tests whether two JavaScript values are equal."
    },
    {
      "name": "func JSValueIsStrictEqual(JSContextRef!, JSValueRef!, JSValueRef!) -> Bool",
      "desc": "Tests whether two JavaScript values are strict equal."
    },
    {
      "name": "func JSValueIsInstanceOfConstructor(JSContextRef!, JSValueRef!, JSObjectRef!, UnsafeMutablePointer<JSValueRef?>!) -> Bool",
      "desc": "Tests whether a JavaScript value is an object that the specified constructor creates."
    },
    {
      "name": "func JSValueProtect(JSContextRef!, JSValueRef!)",
      "desc": "Protects a JavaScript value from garbage collection."
    },
    {
      "name": "func JSValueUnprotect(JSContextRef!, JSValueRef!)",
      "desc": "Unprotects a JavaScript value from garbage collection."
    }
  ],
  "declaration": "typealias JSValueRef = OpaquePointer"
}