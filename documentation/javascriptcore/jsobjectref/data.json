{
  "path": "/documentation/javascriptcore/jsobjectref",
  "type": "Type Alias",
  "name": "JSObjectRef",
  "desc": "A JavaScript object.",
  "items": [
    {
      "name": "func JSContextGetGlobalObject(JSContextRef!) -> JSObjectRef!",
      "desc": "Gets the global object of a JavaScript execution context."
    },
    {
      "name": "func JSObjectCallAsConstructor(JSContextRef!, JSObjectRef!, Int, UnsafePointer<JSValueRef?>!, UnsafeMutablePointer<JSValueRef?>!) -> JSObjectRef!",
      "desc": "Calls an object as a constructor."
    },
    {
      "name": "func JSObjectCallAsFunction(JSContextRef!, JSObjectRef!, JSObjectRef!, Int, UnsafePointer<JSValueRef?>!, UnsafeMutablePointer<JSValueRef?>!) -> JSValueRef!",
      "desc": "Calls an object as a function."
    },
    {
      "name": "func JSObjectCopyPropertyNames(JSContextRef!, JSObjectRef!) -> JSPropertyNameArrayRef!",
      "desc": "Gets the names of an object’s enumerable properties."
    },
    {
      "name": "func JSObjectDeleteProperty(JSContextRef!, JSObjectRef!, JSStringRef!, UnsafeMutablePointer<JSValueRef?>!) -> Bool",
      "desc": "Deletes a property from an object."
    },
    {
      "name": "func JSObjectGetPrivate(JSObjectRef!) -> UnsafeMutableRawPointer!",
      "desc": "Gets an object’s private data."
    },
    {
      "name": "func JSObjectGetProperty(JSContextRef!, JSObjectRef!, JSStringRef!, UnsafeMutablePointer<JSValueRef?>!) -> JSValueRef!",
      "desc": "Gets a property from an object."
    },
    {
      "name": "func JSObjectGetPropertyAtIndex(JSContextRef!, JSObjectRef!, UInt32, UnsafeMutablePointer<JSValueRef?>!) -> JSValueRef!",
      "desc": "Gets a property from an object by numeric index."
    },
    {
      "name": "func JSObjectGetPrototype(JSContextRef!, JSObjectRef!) -> JSValueRef!",
      "desc": "Gets an object’s prototype."
    },
    {
      "name": "func JSObjectHasProperty(JSContextRef!, JSObjectRef!, JSStringRef!) -> Bool",
      "desc": "Tests whether an object has a specified property."
    },
    {
      "name": "func JSObjectIsConstructor(JSContextRef!, JSObjectRef!) -> Bool",
      "desc": "Tests whether you can call an object as a constructor."
    },
    {
      "name": "func JSObjectIsFunction(JSContextRef!, JSObjectRef!) -> Bool",
      "desc": "Tests whether you can call an object as a function."
    },
    {
      "name": "func JSObjectMake(JSContextRef!, JSClassRef!, UnsafeMutableRawPointer!) -> JSObjectRef!",
      "desc": "Creates a JavaScript object."
    },
    {
      "name": "func JSObjectMakeArray(JSContextRef!, Int, UnsafePointer<JSValueRef?>!, UnsafeMutablePointer<JSValueRef?>!) -> JSObjectRef!",
      "desc": "Creates a JavaScript array object."
    },
    {
      "name": "func JSObjectMakeConstructor(JSContextRef!, JSClassRef!, JSObjectCallAsConstructorCallback!) -> JSObjectRef!",
      "desc": "Creates a JavaScript constructor."
    },
    {
      "name": "func JSObjectMakeDate(JSContextRef!, Int, UnsafePointer<JSValueRef?>!, UnsafeMutablePointer<JSValueRef?>!) -> JSObjectRef!",
      "desc": "Creates a JavaScript date object as though invoking the built-in date constructor."
    },
    {
      "name": "func JSObjectMakeError(JSContextRef!, Int, UnsafePointer<JSValueRef?>!, UnsafeMutablePointer<JSValueRef?>!) -> JSObjectRef!",
      "desc": "Creates a JavaScript error object as though invoking the built-in error constructor."
    },
    {
      "name": "func JSObjectMakeFunction(JSContextRef!, JSStringRef!, UInt32, UnsafePointer<JSStringRef?>!, JSStringRef!, JSStringRef!, Int32, UnsafeMutablePointer<JSValueRef?>!) -> JSObjectRef!",
      "desc": "Creates a function with a specified script as its body."
    },
    {
      "name": "func JSObjectMakeFunctionWithCallback(JSContextRef!, JSStringRef!, JSObjectCallAsFunctionCallback!) -> JSObjectRef!",
      "desc": "Creates a JavaScript function with a specified callback as its implementation."
    },
    {
      "name": "func JSObjectMakeRegExp(JSContextRef!, Int, UnsafePointer<JSValueRef?>!, UnsafeMutablePointer<JSValueRef?>!) -> JSObjectRef!",
      "desc": "Creates a JavaScript regular expression object as though invoking the built-in regular expression constructor."
    },
    {
      "name": "func JSObjectSetPrivate(JSObjectRef!, UnsafeMutableRawPointer!) -> Bool",
      "desc": "Sets a pointer to private data on an object."
    },
    {
      "name": "func JSObjectSetProperty(JSContextRef!, JSObjectRef!, JSStringRef!, JSValueRef!, JSPropertyAttributes, UnsafeMutablePointer<JSValueRef?>!)",
      "desc": "Sets a property on an object."
    },
    {
      "name": "func JSObjectSetPropertyAtIndex(JSContextRef!, JSObjectRef!, UInt32, JSValueRef!, UnsafeMutablePointer<JSValueRef?>!)",
      "desc": "Sets a property on an object by numeric index."
    },
    {
      "name": "func JSObjectGetPropertyForKey(JSContextRef!, JSObjectRef!, JSValueRef!, UnsafeMutablePointer<JSValueRef?>!) -> JSValueRef!",
      "desc": "Gets a property from an object using a JavaScript value as the property key."
    },
    {
      "name": "func JSObjectSetPrototype(JSContextRef!, JSObjectRef!, JSValueRef!)",
      "desc": "Sets an object’s prototype."
    },
    {
      "name": "func JSObjectDeletePropertyForKey(JSContextRef!, JSObjectRef!, JSValueRef!, UnsafeMutablePointer<JSValueRef?>!) -> Bool",
      "desc": "Deletes a property from an object using a JavaScript value as the property key."
    },
    {
      "name": "func JSObjectHasPropertyForKey(JSContextRef!, JSObjectRef!, JSValueRef!, UnsafeMutablePointer<JSValueRef?>!) -> Bool",
      "desc": "Tests whether an object has the specified property using a JavaScript value as the property key."
    },
    {
      "name": "func JSObjectSetPropertyForKey(JSContextRef!, JSObjectRef!, JSValueRef!, JSValueRef!, JSPropertyAttributes, UnsafeMutablePointer<JSValueRef?>!)",
      "desc": "Sets a property on an object using a JavaScript value as the property key."
    },
    {
      "name": "func JSObjectMakeDeferredPromise(JSContextRef!, UnsafeMutablePointer<JSObjectRef?>!, UnsafeMutablePointer<JSObjectRef?>!, UnsafeMutablePointer<JSValueRef?>!) -> JSObjectRef!",
      "desc": "Creates a JavaScript promise object by invoking the provided executor."
    },
    {
      "name": "func JSClassCreate(UnsafePointer<JSClassDefinition>!) -> JSClassRef!",
      "desc": "Creates a JavaScript class."
    },
    {
      "name": "func JSClassRelease(JSClassRef!)",
      "desc": "Releases a JavaScript class."
    },
    {
      "name": "func JSClassRetain(JSClassRef!) -> JSClassRef!",
      "desc": "Retains a JavaScript class."
    },
    {
      "name": "let kJSClassDefinitionEmpty: JSClassDefinition",
      "desc": "A class definition structure of the current version that contains null pointers and has no attributes."
    },
    {
      "name": "struct JSClassDefinition",
      "desc": "A structure that contains properties and callbacks that define a type of object."
    },
    {
      "name": "func JSPropertyNameAccumulatorAddName(JSPropertyNameAccumulatorRef!, JSStringRef!)",
      "desc": "Adds a property name to a JavaScript property name accumulator."
    },
    {
      "name": "func JSPropertyNameArrayGetCount(JSPropertyNameArrayRef!) -> Int",
      "desc": "Gets a count of the number of items in a JavaScript property name array."
    },
    {
      "name": "func JSPropertyNameArrayGetNameAtIndex(JSPropertyNameArrayRef!, Int) -> JSStringRef!",
      "desc": "Gets a property name at a specified index in a JavaScript property name array."
    },
    {
      "name": "func JSPropertyNameArrayRelease(JSPropertyNameArrayRef!)",
      "desc": "Releases a JavaScript property name array."
    },
    {
      "name": "func JSPropertyNameArrayRetain(JSPropertyNameArrayRef!) -> JSPropertyNameArrayRef!",
      "desc": "Retains a JavaScript property name array."
    },
    {
      "name": "typealias JSPropertyAttributes",
      "desc": "A set of JavaScript property attributes."
    },
    {
      "name": "typealias JSPropertyNameArrayRef",
      "desc": "An array of JavaScript property names."
    },
    {
      "name": "typealias JSPropertyNameAccumulatorRef",
      "desc": "An ordered set of the names of a JavaScript object’s properties."
    },
    {
      "name": "func JSObjectMakeTypedArray(JSContextRef!, JSTypedArrayType, Int, UnsafeMutablePointer<JSValueRef?>!) -> JSObjectRef!",
      "desc": "Creates a JavaScript typed array object with the specified number of elements."
    },
    {
      "name": "func JSObjectMakeTypedArrayWithBytesNoCopy(JSContextRef!, JSTypedArrayType, UnsafeMutableRawPointer!, Int, JSTypedArrayBytesDeallocator!, UnsafeMutableRawPointer!, UnsafeMutablePointer<JSValueRef?>!) -> JSObjectRef!",
      "desc": "Creates a JavaScript typed array object from an existing pointer."
    },
    {
      "name": "func JSObjectMakeTypedArrayWithArrayBuffer(JSContextRef!, JSTypedArrayType, JSObjectRef!, UnsafeMutablePointer<JSValueRef?>!) -> JSObjectRef!",
      "desc": "Creates a JavaScript typed array object from an existing JavaScript array buffer object."
    },
    {
      "name": "func JSObjectMakeTypedArrayWithArrayBufferAndOffset(JSContextRef!, JSTypedArrayType, JSObjectRef!, Int, Int, UnsafeMutablePointer<JSValueRef?>!) -> JSObjectRef!",
      "desc": "Creates a JavaScript typed array object from an existing JavaScript array buffer object with the specified offset and length."
    },
    {
      "name": "struct JSTypedArrayType",
      "desc": "The type of a JavaScript typed array object."
    },
    {
      "name": "typealias JSTypedArrayBytesDeallocator",
      "desc": "A function that deallocates bytes that pass to a typed array constructor."
    },
    {
      "name": "func JSObjectGetTypedArrayBytesPtr(JSContextRef!, JSObjectRef!, UnsafeMutablePointer<JSValueRef?>!) -> UnsafeMutableRawPointer!",
      "desc": "Returns a temporary pointer to the backing store of a JavaScript typed array object."
    },
    {
      "name": "func JSObjectGetTypedArrayLength(JSContextRef!, JSObjectRef!, UnsafeMutablePointer<JSValueRef?>!) -> Int",
      "desc": "Returns the length of a JavaScript typed array object."
    },
    {
      "name": "func JSObjectGetTypedArrayByteLength(JSContextRef!, JSObjectRef!, UnsafeMutablePointer<JSValueRef?>!) -> Int",
      "desc": "Returns the byte length of a JavaScript typed array object."
    },
    {
      "name": "func JSObjectGetTypedArrayByteOffset(JSContextRef!, JSObjectRef!, UnsafeMutablePointer<JSValueRef?>!) -> Int",
      "desc": "Returns the byte offset of a JavaScript typed array object."
    },
    {
      "name": "func JSObjectGetTypedArrayBuffer(JSContextRef!, JSObjectRef!, UnsafeMutablePointer<JSValueRef?>!) -> JSObjectRef!",
      "desc": "Returns the JavaScript array buffer object to use as the backing of a JavaScript typed array object."
    },
    {
      "name": "func JSObjectMakeArrayBufferWithBytesNoCopy(JSContextRef!, UnsafeMutableRawPointer!, Int, JSTypedArrayBytesDeallocator!, UnsafeMutableRawPointer!, UnsafeMutablePointer<JSValueRef?>!) -> JSObjectRef!",
      "desc": "Creates a JavaScript array buffer object from an existing pointer."
    },
    {
      "name": "func JSObjectGetArrayBufferByteLength(JSContextRef!, JSObjectRef!, UnsafeMutablePointer<JSValueRef?>!) -> Int",
      "desc": "Returns the number of bytes in a JavaScript data object."
    },
    {
      "name": "func JSObjectGetArrayBufferBytesPtr(JSContextRef!, JSObjectRef!, UnsafeMutablePointer<JSValueRef?>!) -> UnsafeMutableRawPointer!",
      "desc": "Returns a pointer to the data buffer that serves as the backing store for a JavaScript typed array object."
    }
  ],
  "declaration": "typealias JSObjectRef = OpaquePointer"
}