{
  "path": "/documentation/applearchive/archiveflags",
  "type": "Structure",
  "name": "ArchiveFlags",
  "desc": "No overview available.",
  "items": [
    {
      "name": "typealias ArchiveFlags.ArrayLiteralElement"
    },
    {
      "name": "typealias ArchiveFlags.Element"
    },
    {
      "name": "typealias ArchiveFlags.RawValue"
    },
    {
      "name": "init()"
    },
    {
      "name": "init<S>(S)",
      "desc": "Creates a new set from a finite sequence of items."
    },
    {
      "name": "init(arrayLiteral: ArchiveFlags...)",
      "desc": "Creates a set containing the elements of the given array literal."
    },
    {
      "name": "init(rawValue: UInt64)"
    },
    {
      "name": "var hashValue: Int"
    },
    {
      "name": "var isEmpty: Bool",
      "desc": "A Boolean value that indicates whether the set has no elements."
    },
    {
      "name": "var rawValue: UInt64"
    },
    {
      "name": "static let archiveDeduplicateData: ArchiveFlags"
    },
    {
      "name": "static let extractNoAutoDeduplicate: ArchiveFlags"
    },
    {
      "name": "static let extractNoAutoSparse: ArchiveFlags"
    },
    {
      "name": "static let ignoreOperationNotPermitted: ArchiveFlags"
    },
    {
      "name": "static let replaceAttributes: ArchiveFlags"
    },
    {
      "name": "func contains(ArchiveFlags) -> Bool",
      "desc": "Returns a Boolean value that indicates whether a given element is a member of the option set."
    },
    {
      "name": "func formIntersection(ArchiveFlags)",
      "desc": "Removes all elements of this option set that are not also present in the given set."
    },
    {
      "name": "func formSymmetricDifference(ArchiveFlags)",
      "desc": "Replaces this set with a new set containing all elements contained in either this set or the given set, but not in both."
    },
    {
      "name": "func formUnion(ArchiveFlags)",
      "desc": "Inserts the elements of another set into this option set."
    },
    {
      "name": "func hash(into: inout Hasher)"
    },
    {
      "name": "func insert(ArchiveFlags) -> (inserted: Bool, memberAfterInsert: ArchiveFlags)",
      "desc": "Adds the given element to the option set if it is not already a member."
    },
    {
      "name": "func intersection(ArchiveFlags) -> ArchiveFlags",
      "desc": "Returns a new option set with only the elements contained in both this set and the given set."
    },
    {
      "name": "func isDisjoint(with: ArchiveFlags) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the set has no members in common with the given set."
    },
    {
      "name": "func isStrictSubset(of: ArchiveFlags) -> Bool",
      "desc": "Returns a Boolean value that indicates whether this set is a strict subset of the given set."
    },
    {
      "name": "func isStrictSuperset(of: ArchiveFlags) -> Bool",
      "desc": "Returns a Boolean value that indicates whether this set is a strict superset of the given set."
    },
    {
      "name": "func isSubset(of: ArchiveFlags) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the set is a subset of another set."
    },
    {
      "name": "func isSuperset(of: ArchiveFlags) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the set is a superset of the given set."
    },
    {
      "name": "func remove(ArchiveFlags) -> ArchiveFlags?",
      "desc": "Removes the given element and all elements subsumed by it."
    },
    {
      "name": "func subtract(ArchiveFlags)",
      "desc": "Removes the elements of the given set from this set."
    },
    {
      "name": "func subtracting(ArchiveFlags) -> ArchiveFlags",
      "desc": "Returns a new set containing the elements of this set that do not occur in the given set."
    },
    {
      "name": "func symmetricDifference(ArchiveFlags) -> ArchiveFlags",
      "desc": "Returns a new option set with the elements contained in this set or in the given set, but not in both."
    },
    {
      "name": "func union(ArchiveFlags) -> ArchiveFlags",
      "desc": "Returns a new option set of the elements contained in this set, in the given set, or in both."
    },
    {
      "name": "func update(with: ArchiveFlags) -> ArchiveFlags?",
      "desc": "Inserts the given element into the set."
    },
    {
      "name": "static func verbosity(level: Int) -> ArchiveFlags"
    },
    {
      "name": "static func != (ArchiveFlags, ArchiveFlags) -> Bool"
    }
  ],
  "declaration": "struct ArchiveFlags",
  "conformsTo": [
    "Hashable",
    "OptionSet"
  ]
}