{
  "path": "/documentation/applearchive/archiveheader/fieldkeyset",
  "type": "Class",
  "name": "ArchiveHeader.FieldKeySet",
  "desc": "An object that represents a field key set.",
  "items": [
    {
      "name": "init()",
      "desc": "Creates a new empty field key set."
    },
    {
      "name": "init?(String)",
      "desc": "Creates a new field key set from the specified comma-separated string of 3-letter keys."
    },
    {
      "name": "init<S>(S)",
      "desc": "Creates a new set from a finite sequence of items."
    },
    {
      "name": "init(copying: ArchiveHeader.FieldKeySet)",
      "desc": "Creates a copy of the specified field key set."
    },
    {
      "name": "init(arrayLiteral: ArchiveHeader.FieldKey...)",
      "desc": "Creates a set containing the elements of the given array literal."
    },
    {
      "name": "static var defaultForArchive: ArchiveHeader.FieldKeySet",
      "desc": "A constant that contains the default key set for an archive."
    },
    {
      "name": "static var defaultForManifest: ArchiveHeader.FieldKeySet",
      "desc": "A constant that contains the default key set for a manifest."
    },
    {
      "name": "typealias ArchiveHeader.FieldKeySet.Element"
    },
    {
      "name": "typealias ArchiveHeader.FieldKeySet.Index"
    },
    {
      "name": "typealias ArchiveHeader.FieldKeySet.Iterator"
    },
    {
      "name": "typealias ArchiveHeader.FieldKeySet.Indices"
    },
    {
      "name": "typealias ArchiveHeader.FieldKeySet.ArrayLiteralElement"
    },
    {
      "name": "typealias ArchiveHeader.FieldKeySet.SubSequence"
    },
    {
      "name": "var count: Int",
      "desc": "The number of elements in the collection."
    },
    {
      "name": "var description: String"
    },
    {
      "name": "var startIndex: Int"
    },
    {
      "name": "var endIndex: Int",
      "desc": "The “past the end” position—that is, the position one greater than the last valid subscript argument."
    },
    {
      "name": "var first: ArchiveHeader.FieldKey?",
      "desc": "The first element of the collection."
    },
    {
      "name": "var isEmpty: Bool",
      "desc": "A Boolean value indicating whether the collection is empty."
    },
    {
      "name": "var last: ArchiveHeader.FieldKey?",
      "desc": "The last element of the collection."
    },
    {
      "name": "var lazy: LazySequence<ArchiveHeader.FieldKeySet>",
      "desc": "A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily."
    },
    {
      "name": "var publisher: Publishers.Sequence<ArchiveHeader.FieldKeySet, Never>"
    },
    {
      "name": "var underestimatedCount: Int",
      "desc": "A value less than or equal to the number of elements in the collection."
    },
    {
      "name": "func allSatisfy((ArchiveHeader.FieldKey) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate."
    },
    {
      "name": "func compactMap<ElementOfResult>((ArchiveHeader.FieldKey) -> ElementOfResult?) -> [ElementOfResult]",
      "desc": "Returns an array containing the non-nil results of calling the given transformation with each element of this sequence."
    },
    {
      "name": "func contains(ArchiveHeader.FieldKey) -> Bool"
    },
    {
      "name": "func contains(where: (ArchiveHeader.FieldKey) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate."
    },
    {
      "name": "func difference<C>(from: C) -> CollectionDifference<ArchiveHeader.FieldKey>",
      "desc": "Returns the difference needed to produce this collection’s ordered elements from the given collection."
    },
    {
      "name": "func difference<C>(from: C, by: (C.Element, ArchiveHeader.FieldKey) -> Bool) -> CollectionDifference<ArchiveHeader.FieldKey>",
      "desc": "Returns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test."
    },
    {
      "name": "func drop(while: (ArchiveHeader.FieldKey) -> Bool) -> Slice<ArchiveHeader.FieldKeySet>",
      "desc": "Returns a subsequence by skipping elements while predicate returns true and returning the remaining elements."
    },
    {
      "name": "func dropFirst(Int) -> Slice<ArchiveHeader.FieldKeySet>",
      "desc": "Returns a subsequence containing all but the given number of initial elements."
    },
    {
      "name": "func dropLast(Int) -> Slice<ArchiveHeader.FieldKeySet>",
      "desc": "Returns a subsequence containing all but the specified number of final elements."
    },
    {
      "name": "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
      "desc": "Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order."
    },
    {
      "name": "func elementsEqual<OtherSequence>(OtherSequence, by: (ArchiveHeader.FieldKey, OtherSequence.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test."
    },
    {
      "name": "func enumerated() -> EnumeratedSequence<ArchiveHeader.FieldKeySet>",
      "desc": "Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence."
    },
    {
      "name": "func filter((ArchiveHeader.FieldKey) -> Bool) -> [ArchiveHeader.FieldKey]",
      "desc": "Returns an array containing, in order, the elements of the sequence that satisfy the given predicate."
    },
    {
      "name": "func first(where: (ArchiveHeader.FieldKey) -> Bool) -> ArchiveHeader.FieldKey?",
      "desc": "Returns the first element of the sequence that satisfies the given predicate."
    },
    {
      "name": "func firstIndex(of: ArchiveHeader.FieldKey) -> Int?",
      "desc": "Returns the first index where the specified value appears in the collection."
    },
    {
      "name": "func firstIndex(where: (ArchiveHeader.FieldKey) -> Bool) -> Int?",
      "desc": "Returns the first index in which an element of the collection satisfies the given predicate."
    },
    {
      "name": "func flatMap<SegmentOfResult>((ArchiveHeader.FieldKey) -> SegmentOfResult) -> [SegmentOfResult.Element]",
      "desc": "Returns an array containing the concatenated results of calling the given transformation with each element of this sequence."
    },
    {
      "name": "func forEach((ArchiveHeader.FieldKey) -> Void)",
      "desc": "Calls the given closure on each element in the sequence in the same order as a for-in loop."
    },
    {
      "name": "func formIndex(inout Int, offsetBy: Int)",
      "desc": "Offsets the given index by the specified distance."
    },
    {
      "name": "func formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool",
      "desc": "Offsets the given index by the specified distance, or so that it equals the given limiting index."
    },
    {
      "name": "func formIndex(after: inout Int)",
      "desc": "Replaces the given index with its successor."
    },
    {
      "name": "func formIndex(before: inout Int)",
      "desc": "Replaces the given index with its predecessor."
    },
    {
      "name": "func formIntersection(ArchiveHeader.FieldKeySet)"
    },
    {
      "name": "func formSymmetricDifference(ArchiveHeader.FieldKeySet)"
    },
    {
      "name": "func formUnion(ArchiveHeader.FieldKeySet)"
    },
    {
      "name": "func index(Int, offsetBy: Int, limitedBy: Int) -> Int?",
      "desc": "Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index."
    },
    {
      "name": "func insert(ArchiveHeader.FieldKey) -> (inserted: Bool, memberAfterInsert: ArchiveHeader.FieldKey)"
    },
    {
      "name": "func intersection(ArchiveHeader.FieldKeySet) -> ArchiveHeader.FieldKeySet"
    },
    {
      "name": "func isDisjoint(with: ArchiveHeader.FieldKeySet) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the set has no members in common with the given set."
    },
    {
      "name": "func isStrictSubset(of: ArchiveHeader.FieldKeySet) -> Bool",
      "desc": "Returns a Boolean value that indicates whether this set is a strict subset of the given set."
    },
    {
      "name": "func isStrictSuperset(of: ArchiveHeader.FieldKeySet) -> Bool",
      "desc": "Returns a Boolean value that indicates whether this set is a strict superset of the given set."
    },
    {
      "name": "func isSubset(of: ArchiveHeader.FieldKeySet) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the set is a subset of another set."
    },
    {
      "name": "func isSuperset(of: ArchiveHeader.FieldKeySet) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the set is a superset of the given set."
    },
    {
      "name": "func last(where: (ArchiveHeader.FieldKey) -> Bool) -> ArchiveHeader.FieldKey?",
      "desc": "Returns the last element of the sequence that satisfies the given predicate."
    },
    {
      "name": "func lastIndex(of: ArchiveHeader.FieldKey) -> Int?",
      "desc": "Returns the last index where the specified value appears in the collection."
    },
    {
      "name": "func lastIndex(where: (ArchiveHeader.FieldKey) -> Bool) -> Int?",
      "desc": "Returns the index of the last element in the collection that matches the given predicate."
    },
    {
      "name": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (ArchiveHeader.FieldKey, ArchiveHeader.FieldKey) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements."
    },
    {
      "name": "func makeIterator() -> IndexingIterator<ArchiveHeader.FieldKeySet>",
      "desc": "Returns an iterator over the elements of the collection."
    },
    {
      "name": "func map<T>((ArchiveHeader.FieldKey) -> T) -> [T]",
      "desc": "Returns an array containing the results of mapping the given closure over the sequence’s elements."
    },
    {
      "name": "func max(by: (ArchiveHeader.FieldKey, ArchiveHeader.FieldKey) -> Bool) -> ArchiveHeader.FieldKey?",
      "desc": "Returns the maximum element in the sequence, using the given predicate as the comparison between elements."
    },
    {
      "name": "func min(by: (ArchiveHeader.FieldKey, ArchiveHeader.FieldKey) -> Bool) -> ArchiveHeader.FieldKey?",
      "desc": "Returns the minimum element in the sequence, using the given predicate as the comparison between elements."
    },
    {
      "name": "func prefix(Int) -> Slice<ArchiveHeader.FieldKeySet>",
      "desc": "Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection."
    },
    {
      "name": "func prefix(through: Int) -> Slice<ArchiveHeader.FieldKeySet>",
      "desc": "Returns a subsequence from the start of the collection through the specified position."
    },
    {
      "name": "func prefix(upTo: Int) -> Slice<ArchiveHeader.FieldKeySet>",
      "desc": "Returns a subsequence from the start of the collection up to, but not including, the specified position."
    },
    {
      "name": "func prefix(while: (ArchiveHeader.FieldKey) -> Bool) -> Slice<ArchiveHeader.FieldKeySet>",
      "desc": "Returns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements."
    },
    {
      "name": "func randomElement() -> ArchiveHeader.FieldKey?",
      "desc": "Returns a random element of the collection."
    },
    {
      "name": "func randomElement<T>(using: inout T) -> ArchiveHeader.FieldKey?",
      "desc": "Returns a random element of the collection, using the given generator as a source for randomness."
    },
    {
      "name": "func reduce<Result>(Result, (Result, ArchiveHeader.FieldKey) -> Result) -> Result",
      "desc": "Returns the result of combining the elements of the sequence using the given closure."
    },
    {
      "name": "func reduce<Result>(into: Result, (inout Result, ArchiveHeader.FieldKey) -> ()) -> Result",
      "desc": "Returns the result of combining the elements of the sequence using the given closure."
    },
    {
      "name": "func remove(ArchiveHeader.FieldKey) -> ArchiveHeader.FieldKey?"
    },
    {
      "name": "func reversed() -> ReversedCollection<ArchiveHeader.FieldKeySet>",
      "desc": "Returns a view presenting the elements of the collection in reverse order."
    },
    {
      "name": "func shuffled() -> [ArchiveHeader.FieldKey]",
      "desc": "Returns the elements of the sequence, shuffled."
    },
    {
      "name": "func shuffled<T>(using: inout T) -> [ArchiveHeader.FieldKey]",
      "desc": "Returns the elements of the sequence, shuffled using the given generator as a source for randomness."
    },
    {
      "name": "func sorted(by: (ArchiveHeader.FieldKey, ArchiveHeader.FieldKey) -> Bool) -> [ArchiveHeader.FieldKey]",
      "desc": "Returns the elements of the sequence, sorted using the given predicate as the comparison between elements."
    },
    {
      "name": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (ArchiveHeader.FieldKey) -> Bool) -> [Slice<ArchiveHeader.FieldKeySet>]",
      "desc": "Returns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
    },
    {
      "name": "func split(separator: ArchiveHeader.FieldKey, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Slice<ArchiveHeader.FieldKeySet>]",
      "desc": "Returns the longest possible subsequences of the collection, in order, around elements equal to the given element."
    },
    {
      "name": "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
      "desc": "Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence."
    },
    {
      "name": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (ArchiveHeader.FieldKey, PossiblePrefix.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test."
    },
    {
      "name": "func subtract(ArchiveHeader.FieldKeySet)",
      "desc": "Removes the elements of the given set from this set."
    },
    {
      "name": "func subtracting(ArchiveHeader.FieldKeySet) -> ArchiveHeader.FieldKeySet",
      "desc": "Returns a new set containing the elements of this set that do not occur in the given set."
    },
    {
      "name": "func suffix(Int) -> Slice<ArchiveHeader.FieldKeySet>",
      "desc": "Returns a subsequence, up to the given maximum length, containing the final elements of the collection."
    },
    {
      "name": "func suffix(from: Int) -> Slice<ArchiveHeader.FieldKeySet>",
      "desc": "Returns a subsequence from the specified position to the end of the collection."
    },
    {
      "name": "func symmetricDifference(ArchiveHeader.FieldKeySet) -> ArchiveHeader.FieldKeySet"
    },
    {
      "name": "func union(ArchiveHeader.FieldKeySet) -> ArchiveHeader.FieldKeySet"
    },
    {
      "name": "func update(with: ArchiveHeader.FieldKey) -> ArchiveHeader.FieldKey?"
    },
    {
      "name": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<ArchiveHeader.FieldKey>) -> R) -> R?",
      "desc": "Executes a closure on the sequence’s contiguous storage."
    },
    {
      "name": "subscript(Int) -> ArchiveHeader.FieldKey"
    },
    {
      "name": "subscript<R>(R) -> Slice<ArchiveHeader.FieldKeySet>",
      "desc": "Accesses the contiguous subrange of the collection’s elements specified by a range expression."
    },
    {
      "name": "subscript((UnboundedRange_) -> ()) -> Slice<ArchiveHeader.FieldKeySet>"
    },
    {
      "name": "subscript(Range<Int>) -> Slice<ArchiveHeader.FieldKeySet>",
      "desc": "Accesses a contiguous subrange of the collection’s elements."
    },
    {
      "name": "static func != (ArchiveHeader.FieldKeySet, ArchiveHeader.FieldKeySet) -> Bool"
    },
    {
      "name": "static func == (ArchiveHeader.FieldKeySet, ArchiveHeader.FieldKeySet) -> Bool"
    },
    {
      "name": "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult"
    },
    {
      "name": "func formatted<S>(S) -> S.FormatOutput"
    },
    {
      "name": "func sorted<Comparator>(using: Comparator) -> [ArchiveHeader.FieldKey]"
    },
    {
      "name": "func sorted<S, Comparator>(using: S) -> [ArchiveHeader.FieldKey]"
    }
  ],
  "declaration": "final class FieldKeySet",
  "conformsTo": [
    "CustomStringConvertible",
    "RandomAccessCollection",
    "SetAlgebra"
  ]
}