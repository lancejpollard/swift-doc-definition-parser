{
  "path": "/documentation/applearchive/archiveheader/entryxatblob",
  "type": "Class",
  "name": "ArchiveHeader.EntryXATBlob",
  "desc": "An object that describes the extended attributes of an archive entry.",
  "items": [
    {
      "name": "init()",
      "desc": "Creates a new empty extended attribute blob."
    },
    {
      "name": "init?(directory: FilePath, path: FilePath, flags: ArchiveFlags)",
      "desc": "Creates a new extended attribute blob from the specified directory and path."
    },
    {
      "name": "init?(withAAEncodedData: UnsafeBufferPointer<UInt8>)",
      "desc": "Creates a new archive header from encoded data."
    },
    {
      "name": "func apply(directory: FilePath, path: FilePath, flags: ArchiveFlags)",
      "desc": "Applies extended attributes to a filesystem object."
    },
    {
      "name": "struct ArchiveHeader.EntryXATBlob.ExtendedAttribute",
      "desc": "A structure that describes the extended attributes of a filesystem."
    },
    {
      "name": "typealias ArchiveHeader.EntryXATBlob.Element"
    },
    {
      "name": "typealias ArchiveHeader.EntryXATBlob.Index"
    },
    {
      "name": "typealias ArchiveHeader.EntryXATBlob.Indices"
    },
    {
      "name": "typealias ArchiveHeader.EntryXATBlob.Iterator"
    },
    {
      "name": "typealias ArchiveHeader.EntryXATBlob.SubSequence"
    },
    {
      "name": "subscript(Int) -> ArchiveHeader.EntryXATBlob.ExtendedAttribute"
    },
    {
      "name": "subscript<R>(R) -> Slice<ArchiveHeader.EntryXATBlob>"
    },
    {
      "name": "subscript((UnboundedRange_) -> ()) -> Slice<ArchiveHeader.EntryXATBlob>"
    },
    {
      "name": "subscript(Range<Int>) -> Slice<ArchiveHeader.EntryXATBlob>",
      "desc": "Accesses a contiguous subrange of the collection’s elements."
    },
    {
      "name": "subscript<R>(R) -> Slice<ArchiveHeader.EntryXATBlob>",
      "desc": "Accesses the contiguous subrange of the collection’s elements specified by a range expression."
    },
    {
      "name": "var count: Int",
      "desc": "The number of elements in the collection."
    },
    {
      "name": "var endIndex: Int"
    },
    {
      "name": "var first: ExtendedAttribute?",
      "desc": "The first element of the collection."
    },
    {
      "name": "var isEmpty: Bool",
      "desc": "A Boolean value indicating whether the collection is empty."
    },
    {
      "name": "var last: ExtendedAttribute?",
      "desc": "The last element of the collection."
    },
    {
      "name": "var lazy: LazySequence<ArchiveHeader.EntryXATBlob>",
      "desc": "A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily."
    },
    {
      "name": "var publisher: Publishers.Sequence<ArchiveHeader.EntryXATBlob, Never>"
    },
    {
      "name": "var startIndex: Int"
    },
    {
      "name": "var underestimatedCount: Int",
      "desc": "A value less than or equal to the number of elements in the collection."
    },
    {
      "name": "func allSatisfy((ExtendedAttribute) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate."
    },
    {
      "name": "func append(ArchiveHeader.EntryXATBlob.ExtendedAttribute)"
    },
    {
      "name": "func compactMap<ElementOfResult>((ExtendedAttribute) -> ElementOfResult?) -> [ElementOfResult]",
      "desc": "Returns an array containing the non-nil results of calling the given transformation with each element of this sequence."
    },
    {
      "name": "func contains(ExtendedAttribute) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence contains the given element."
    },
    {
      "name": "func contains(where: (ExtendedAttribute) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate."
    },
    {
      "name": "func difference<C>(from: C) -> CollectionDifference<ExtendedAttribute>",
      "desc": "Returns the difference needed to produce this collection’s ordered elements from the given collection."
    },
    {
      "name": "func difference<C>(from: C, by: (C.Element, ExtendedAttribute) -> Bool) -> CollectionDifference<ExtendedAttribute>",
      "desc": "Returns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test."
    },
    {
      "name": "func drop(while: (ExtendedAttribute) -> Bool) -> Slice<ArchiveHeader.EntryXATBlob>",
      "desc": "Returns a subsequence by skipping elements while predicate returns true and returning the remaining elements."
    },
    {
      "name": "func dropFirst(Int) -> Slice<ArchiveHeader.EntryXATBlob>",
      "desc": "Returns a subsequence containing all but the given number of initial elements."
    },
    {
      "name": "func dropLast(Int) -> Slice<ArchiveHeader.EntryXATBlob>",
      "desc": "Returns a subsequence containing all but the specified number of final elements."
    },
    {
      "name": "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
      "desc": "Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order."
    },
    {
      "name": "func elementsEqual<OtherSequence>(OtherSequence, by: (ExtendedAttribute, OtherSequence.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test."
    },
    {
      "name": "func enumerated() -> EnumeratedSequence<ArchiveHeader.EntryXATBlob>",
      "desc": "Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence."
    },
    {
      "name": "func filter((ExtendedAttribute) -> Bool) -> [ExtendedAttribute]",
      "desc": "Returns an array containing, in order, the elements of the sequence that satisfy the given predicate."
    },
    {
      "name": "func first(where: (ExtendedAttribute) -> Bool) -> ExtendedAttribute?",
      "desc": "Returns the first element of the sequence that satisfies the given predicate."
    },
    {
      "name": "func firstIndex(of: ExtendedAttribute) -> Int?",
      "desc": "Returns the first index where the specified value appears in the collection."
    },
    {
      "name": "func firstIndex(where: (ExtendedAttribute) -> Bool) -> Int?",
      "desc": "Returns the first index in which an element of the collection satisfies the given predicate."
    },
    {
      "name": "func flatMap<SegmentOfResult>((ExtendedAttribute) -> SegmentOfResult) -> [SegmentOfResult.Element]",
      "desc": "Returns an array containing the concatenated results of calling the given transformation with each element of this sequence."
    },
    {
      "name": "func forEach((ExtendedAttribute) -> Void)",
      "desc": "Calls the given closure on each element in the sequence in the same order as a for-in loop."
    },
    {
      "name": "func formIndex(inout Int, offsetBy: Int)",
      "desc": "Offsets the given index by the specified distance."
    },
    {
      "name": "func formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool",
      "desc": "Offsets the given index by the specified distance, or so that it equals the given limiting index."
    },
    {
      "name": "func formIndex(after: inout Int)",
      "desc": "Replaces the given index with its successor."
    },
    {
      "name": "func formIndex(before: inout Int)",
      "desc": "Replaces the given index with its predecessor."
    },
    {
      "name": "func index(Int, offsetBy: Int, limitedBy: Int) -> Int?",
      "desc": "Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index."
    },
    {
      "name": "func last(where: (ExtendedAttribute) -> Bool) -> ExtendedAttribute?",
      "desc": "Returns the last element of the sequence that satisfies the given predicate."
    },
    {
      "name": "func lastIndex(of: ExtendedAttribute) -> Int?",
      "desc": "Returns the last index where the specified value appears in the collection."
    },
    {
      "name": "func lastIndex(where: (ExtendedAttribute) -> Bool) -> Int?",
      "desc": "Returns the index of the last element in the collection that matches the given predicate."
    },
    {
      "name": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (ExtendedAttribute, ExtendedAttribute) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements."
    },
    {
      "name": "func makeIterator() -> IndexingIterator<ArchiveHeader.EntryXATBlob>",
      "desc": "Returns an iterator over the elements of the collection."
    },
    {
      "name": "func map<T>((ExtendedAttribute) -> T) -> [T]",
      "desc": "Returns an array containing the results of mapping the given closure over the sequence’s elements."
    },
    {
      "name": "func max(by: (ExtendedAttribute, ExtendedAttribute) -> Bool) -> ExtendedAttribute?",
      "desc": "Returns the maximum element in the sequence, using the given predicate as the comparison between elements."
    },
    {
      "name": "func min(by: (ExtendedAttribute, ExtendedAttribute) -> Bool) -> ExtendedAttribute?",
      "desc": "Returns the minimum element in the sequence, using the given predicate as the comparison between elements."
    },
    {
      "name": "func partition(by: (ExtendedAttribute) -> Bool) -> Int",
      "desc": "Reorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don’t match."
    },
    {
      "name": "func prefix(Int) -> Slice<ArchiveHeader.EntryXATBlob>",
      "desc": "Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection."
    },
    {
      "name": "func prefix(through: Int) -> Slice<ArchiveHeader.EntryXATBlob>",
      "desc": "Returns a subsequence from the start of the collection through the specified position."
    },
    {
      "name": "func prefix(upTo: Int) -> Slice<ArchiveHeader.EntryXATBlob>",
      "desc": "Returns a subsequence from the start of the collection up to, but not including, the specified position."
    },
    {
      "name": "func prefix(while: (ExtendedAttribute) -> Bool) -> Slice<ArchiveHeader.EntryXATBlob>",
      "desc": "Returns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements."
    },
    {
      "name": "func randomElement() -> ExtendedAttribute?",
      "desc": "Returns a random element of the collection."
    },
    {
      "name": "func randomElement<T>(using: inout T) -> ExtendedAttribute?",
      "desc": "Returns a random element of the collection, using the given generator as a source for randomness."
    },
    {
      "name": "func reduce<Result>(Result, (Result, ExtendedAttribute) -> Result) -> Result",
      "desc": "Returns the result of combining the elements of the sequence using the given closure."
    },
    {
      "name": "func reduce<Result>(into: Result, (inout Result, ExtendedAttribute) -> ()) -> Result",
      "desc": "Returns the result of combining the elements of the sequence using the given closure."
    },
    {
      "name": "func remove(at: Int) -> ArchiveHeader.EntryXATBlob.ExtendedAttribute"
    },
    {
      "name": "func removeAll()"
    },
    {
      "name": "func reverse()",
      "desc": "Reverses the elements of the collection in place."
    },
    {
      "name": "func reversed() -> ReversedCollection<ArchiveHeader.EntryXATBlob>",
      "desc": "Returns a view presenting the elements of the collection in reverse order."
    },
    {
      "name": "func shuffle()",
      "desc": "Shuffles the collection in place."
    },
    {
      "name": "func shuffle<T>(using: inout T)",
      "desc": "Shuffles the collection in place, using the given generator as a source for randomness."
    },
    {
      "name": "func shuffled() -> [ExtendedAttribute]",
      "desc": "Returns the elements of the sequence, shuffled."
    },
    {
      "name": "func shuffled<T>(using: inout T) -> [ExtendedAttribute]",
      "desc": "Returns the elements of the sequence, shuffled using the given generator as a source for randomness."
    },
    {
      "name": "func sort(by: (ExtendedAttribute, ExtendedAttribute) -> Bool)",
      "desc": "Sorts the collection in place, using the given predicate as the comparison between elements."
    },
    {
      "name": "func sorted(by: (ExtendedAttribute, ExtendedAttribute) -> Bool) -> [ExtendedAttribute]",
      "desc": "Returns the elements of the sequence, sorted using the given predicate as the comparison between elements."
    },
    {
      "name": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (ExtendedAttribute) -> Bool) -> [Slice<ArchiveHeader.EntryXATBlob>]",
      "desc": "Returns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
    },
    {
      "name": "func split(separator: ExtendedAttribute, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Slice<ArchiveHeader.EntryXATBlob>]",
      "desc": "Returns the longest possible subsequences of the collection, in order, around elements equal to the given element."
    },
    {
      "name": "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
      "desc": "Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence."
    },
    {
      "name": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (ExtendedAttribute, PossiblePrefix.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test."
    },
    {
      "name": "func suffix(Int) -> Slice<ArchiveHeader.EntryXATBlob>",
      "desc": "Returns a subsequence, up to the given maximum length, containing the final elements of the collection."
    },
    {
      "name": "func suffix(from: Int) -> Slice<ArchiveHeader.EntryXATBlob>",
      "desc": "Returns a subsequence from the specified position to the end of the collection."
    },
    {
      "name": "func swapAt(Int, Int)",
      "desc": "Exchanges the values at the specified indices of the collection."
    },
    {
      "name": "func withAAEncodedData<R>((UnsafeBufferPointer<UInt8>) -> R) -> R"
    },
    {
      "name": "func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<ExtendedAttribute>) -> R) -> R?",
      "desc": "Executes a closure on the collection’s contiguous storage."
    },
    {
      "name": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<ExtendedAttribute>) -> R) -> R?",
      "desc": "Executes a closure on the sequence’s contiguous storage."
    },
    {
      "name": "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult"
    },
    {
      "name": "func formatted<S>(S) -> S.FormatOutput"
    },
    {
      "name": "func sort<Comparator>(using: Comparator)"
    },
    {
      "name": "func sort<S, Comparator>(using: S)"
    },
    {
      "name": "func sorted<Comparator>(using: Comparator) -> [ExtendedAttribute]"
    },
    {
      "name": "func sorted<S, Comparator>(using: S) -> [ExtendedAttribute]"
    }
  ],
  "declaration": "class EntryXATBlob",
  "conformsTo": [
    "MutableCollection",
    "RandomAccessCollection"
  ]
}