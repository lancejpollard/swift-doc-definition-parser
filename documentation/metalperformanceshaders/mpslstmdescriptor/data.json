{
  "path": "/documentation/metalperformanceshaders/mpslstmdescriptor",
  "type": "Class",
  "name": "MPSLSTMDescriptor",
  "desc": "A description of a long short-term memory block or layer.",
  "items": [
    {
      "name": "var cellGateInputWeights: MPSCNNConvolutionDataSource?"
    },
    {
      "name": "var cellGateMemoryWeights: MPSCNNConvolutionDataSource?"
    },
    {
      "name": "var cellGateRecurrentWeights: MPSCNNConvolutionDataSource?"
    },
    {
      "name": "var cellToOutputNeuronParamA: Float"
    },
    {
      "name": "var cellToOutputNeuronParamB: Float"
    },
    {
      "name": "var cellToOutputNeuronType: MPSCNNNeuronType"
    },
    {
      "name": "enum MPSCNNNeuronType",
      "desc": "The types of neuron filter to append to a convolution."
    },
    {
      "name": "var forgetGateInputWeights: MPSCNNConvolutionDataSource?"
    },
    {
      "name": "var forgetGateMemoryWeights: MPSCNNConvolutionDataSource?"
    },
    {
      "name": "var forgetGateRecurrentWeights: MPSCNNConvolutionDataSource?"
    },
    {
      "name": "var inputGateInputWeights: MPSCNNConvolutionDataSource?"
    },
    {
      "name": "var inputGateMemoryWeights: MPSCNNConvolutionDataSource?"
    },
    {
      "name": "var inputGateRecurrentWeights: MPSCNNConvolutionDataSource?"
    },
    {
      "name": "var memoryWeightsAreDiagonal: Bool"
    },
    {
      "name": "var outputGateInputWeights: MPSCNNConvolutionDataSource?"
    },
    {
      "name": "var outputGateMemoryWeights: MPSCNNConvolutionDataSource?"
    },
    {
      "name": "var outputGateRecurrentWeights: MPSCNNConvolutionDataSource?"
    },
    {
      "name": "protocol MPSCNNConvolutionDataSource",
      "desc": "The protocol that provides convolution filter weights and bias terms."
    },
    {
      "name": "var cellToOutputNeuronParamC: Float"
    },
    {
      "name": "class func createLSTMDescriptor(withInputFeatureChannels: Int, outputFeatureChannels: Int) -> Self"
    }
  ],
  "declaration": "class MPSLSTMDescriptor : MPSRNNDescriptor",
  "inheritsFrom": [
    "MPSRNNDescriptor"
  ]
}