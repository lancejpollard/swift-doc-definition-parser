{
  "path": "/documentation/metalperformanceshaders/mpsbinaryimagekernel",
  "type": "Class",
  "name": "MPSBinaryImageKernel",
  "desc": "A kernel that consumes two textures and produces one texture.",
  "items": [
    {
      "name": "init?(coder: NSCoder, device: MTLDevice)"
    },
    {
      "name": "init(device: MTLDevice)"
    },
    {
      "name": "func encode(commandBuffer: MTLCommandBuffer, primaryTexture: MTLTexture, inPlaceSecondaryTexture: UnsafeMutablePointer<MTLTexture>, fallbackCopyAllocator: MPSCopyAllocator?) -> Bool",
      "desc": "This method attempts to apply a kernel in place on a texture."
    },
    {
      "name": "func encode(commandBuffer: MTLCommandBuffer, inPlacePrimaryTexture: UnsafeMutablePointer<MTLTexture>, secondaryTexture: MTLTexture, fallbackCopyAllocator: MPSCopyAllocator?) -> Bool",
      "desc": "This method attempts to apply a kernel in place on a texture."
    },
    {
      "name": "func encode(commandBuffer: MTLCommandBuffer, primaryTexture: MTLTexture, secondaryTexture: MTLTexture, destinationTexture: MTLTexture)",
      "desc": "Encodes a kernel into a command buffer, out-of-place."
    },
    {
      "name": "func encode(commandBuffer: MTLCommandBuffer, primaryImage: MPSImage, secondaryImage: MPSImage, destinationImage: MPSImage)"
    },
    {
      "name": "func primarySourceRegion(forDestinationSize: MTLSize) -> MPSRegion",
      "desc": "Determines the region of the primary source texture that will be read for an encode operation."
    },
    {
      "name": "func secondarySourceRegion(forDestinationSize: MTLSize) -> MPSRegion",
      "desc": "Determines the region of the secondary source texture that will be read for an encode operation."
    },
    {
      "name": "var primaryOffset: MPSOffset",
      "desc": "The position of the destination clip rectangle origin relative to the primary source buffer."
    },
    {
      "name": "var secondaryOffset: MPSOffset",
      "desc": "The position of the destination clip rectangle origin relative to the secondary source buffer."
    },
    {
      "name": "var primaryEdgeMode: MPSImageEdgeMode",
      "desc": "The edge mode to use when texture reads stray off the edge of the primary source image."
    },
    {
      "name": "var secondaryEdgeMode: MPSImageEdgeMode",
      "desc": "The edge mode to use when texture reads stray off the edge of the secondary source image."
    },
    {
      "name": "var clipRect: MTLRegion",
      "desc": "An optional clip rectangle to use when writing data. Only the pixels in the rectangle will be overwritten."
    }
  ],
  "declaration": "class MPSBinaryImageKernel : MPSKernel",
  "inheritsFrom": [
    "MPSKernel"
  ]
}