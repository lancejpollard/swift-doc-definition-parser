{
  "path": "/documentation/corenfc/nfcfelicatag",
  "type": "Protocol",
  "name": "NFCFeliCaTag",
  "desc": "An interface for interacting with a FeliCaâ„¢ tag.",
  "items": [
    {
      "name": "property list key com.apple.developer.nfc.readersession.felica.systemcodes",
      "desc": "A list of FeliCa system codes that the app supports."
    },
    {
      "name": "var currentSystemCode: Data",
      "desc": "The system code most recently selected by the reader session during a polling sequence."
    },
    {
      "name": "var currentIDm: Data",
      "desc": "The manufacturer identifier for the system currently selected by the reader session."
    },
    {
      "name": "func polling(systemCode: Data, requestCode: NFCFeliCaPollingRequestCode, timeSlot: NFCFeliCaPollingTimeSlot, completionHandler: (Data, Data, Error?) -> Void)",
      "desc": "Sends the Polling command as defined by FeliCa card specification to the tag."
    },
    {
      "name": "func requestService(nodeCodeList: [Data], completionHandler: ([Data], Error?) -> Void)",
      "desc": "Sends the Request Service command, as defined by the FeliCa card specification, to the tag."
    },
    {
      "name": "func requestServiceV2(nodeCodeList: [Data], completionHandler: (Int, Int, NFCFeliCaEncryptionId, [Data], [Data], Error?) -> Void)",
      "desc": "Sends the Request Service V2 command, as defined by the FeliCa card specification, to the tag."
    },
    {
      "name": "func requestResponse(completionHandler: (Int, Error?) -> Void)",
      "desc": "Sends the Request Response command, as defined by the FeliCa card specification, to the tag."
    },
    {
      "name": "func requestSpecificationVersion(completionHandler: (Int, Int, Data, Data, Error?) -> Void)",
      "desc": "Sends the Request Specification Version command, as defined by the FeliCa card specification, to the tag."
    },
    {
      "name": "func requestSystemCode(completionHandler: ([Data], Error?) -> Void)",
      "desc": "Sends the Request System Code command, as defined by the FeliCa card specification, to the tag."
    },
    {
      "name": "func resetMode(completionHandler: (Int, Int, Error?) -> Void)",
      "desc": "Sends the Reset Mode command, as defined by the FeliCa card specification, to the tag."
    },
    {
      "name": "func readWithoutEncryption(serviceCodeList: [Data], blockList: [Data], completionHandler: (Int, Int, [Data], Error?) -> Void)",
      "desc": "Sends the Read Without Encryption command, as defined by the FeliCa card specification, to the tag."
    },
    {
      "name": "func writeWithoutEncryption(serviceCodeList: [Data], blockList: [Data], blockData: [Data], completionHandler: (Int, Int, Error?) -> Void)",
      "desc": "Sends the Write Without Encryption command, as defined by the FeliCa card specification, to the tag."
    },
    {
      "name": "func sendFeliCaCommand(commandPacket: Data, completionHandler: (Data, Error?) -> Void)",
      "desc": "Sends the FeliCa command packet data to the tag."
    },
    {
      "name": "func polling(systemCode: Data, requestCode: NFCFeliCaPollingRequestCode, timeSlot: NFCFeliCaPollingTimeSlot, resultHandler: (Result<NFCFeliCaPollingResponse, Error>) -> Void)"
    },
    {
      "name": "func readWithoutEncryption(serviceCodeList: [Data], blockList: [Data], resultHandler: (Result<(NFCFeliCaStatusFlag, [Data]), Error>) -> Void)"
    },
    {
      "name": "func requestResponse(resultHandler: (Result<Int, Error>) -> Void)"
    },
    {
      "name": "func requestService(nodeCodeList: [Data], resultHandler: (Result<[Data], Error>) -> Void)"
    },
    {
      "name": "func requestServiceV2(nodeCodeList: [Data], resultHandler: (Result<NFCFeliCaRequsetServiceV2Response, Error>) -> Void)"
    },
    {
      "name": "func requestSpecificationVersion(resultHandler: (Result<NFCFeliCaRequestSpecificationVersionResponse, Error>) -> Void)"
    },
    {
      "name": "func requestSystemCode(resultHandler: (Result<[Data], Error>) -> Void)"
    },
    {
      "name": "func resetMode(resultHandler: (Result<NFCFeliCaStatusFlag, Error>) -> Void)"
    },
    {
      "name": "func sendFeliCaCommand(commandPacket: Data, resultHandler: (Result<Data, Error>) -> Void)"
    },
    {
      "name": "func writeWithoutEncryption(serviceCodeList: [Data], blockList: [Data], blockData: [Data], resultHandler: (Result<NFCFeliCaStatusFlag, Error>) -> Void)"
    }
  ],
  "declaration": "protocol NFCFeliCaTag",
  "inheritsFrom": [
    "NFCNDEFTag"
  ]
}