{
  "path": "/documentation/networkextension/nefilternewflowverdict",
  "type": "Class",
  "name": "NEFilterNewFlowVerdict",
  "desc": "The result from a filter data provder after the initial examination of a flow.",
  "items": [
    {
      "name": "class func allow() -> NEFilterNewFlowVerdict",
      "desc": "Create a verdict that indicates to the system that the all of the new flow’s data should be allowed to pass to its final destination."
    },
    {
      "name": "class func drop() -> NEFilterNewFlowVerdict",
      "desc": "Create a verdict that indicates to the system that all of the new flow’s data should dropped, and the user should not be given the opportunity to request access."
    },
    {
      "name": "class func pause() -> NEFilterNewFlowVerdict",
      "desc": "Creates a verdict that tells the system to pause the flow."
    },
    {
      "name": "class func filterDataVerdict(withFilterInbound: Bool, peekInboundBytes: Int, filterOutbound: Bool, peekOutboundBytes: Int) -> NEFilterNewFlowVerdict",
      "desc": "Create a verdict that indicates to the system that the filter needs to make a decision about a new flow after seeing a portion of the flow's data."
    },
    {
      "name": "class func remediateVerdict(withRemediationURLMapKey: String, remediationButtonTextMapKey: String) -> NEFilterNewFlowVerdict",
      "desc": "Create a verdict that indicates to the system that all of the new flow’s data should be dropped, but allow the user to request access by tapping or clicking on a URL."
    },
    {
      "name": "class func needRules() -> NEFilterNewFlowVerdict",
      "desc": "Create a verdict that indicates to the system that the Filter Data Provider needs more information before it can make a decision about a new flow."
    },
    {
      "name": "class func urlAppendStringVerdict(withMapKey: String) -> NEFilterNewFlowVerdict",
      "desc": "Create a verdict that indicates to the system that all of the new flow’s data should be allowed to pass to its final destination, but a string should first be appended to the new flow’s request URL."
    },
    {
      "name": "var statisticsReportFrequency: NEFilterReport.Frequency"
    }
  ],
  "declaration": "class NEFilterNewFlowVerdict : NEFilterVerdict",
  "inheritsFrom": [
    "NEFilterVerdict"
  ],
  "conformsTo": [
    "NSCopying",
    "NSSecureCoding"
  ]
}