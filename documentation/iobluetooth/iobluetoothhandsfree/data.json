{
  "path": "/documentation/iobluetooth/iobluetoothhandsfree",
  "type": "Class",
  "name": "IOBluetoothHandsFree",
  "desc": "Hands free profile class.",
  "items": [
    {
      "name": "init!(device: IOBluetoothDevice!, delegate: IOBluetoothHandsFreeDelegate!)",
      "desc": "Create a new IOBluetoothHandsFree object"
    },
    {
      "name": "var isSMSEnabled: Bool",
      "desc": "Return YES if the device has SMS enabled."
    },
    {
      "name": "var smsMode: IOBluetoothSMSMode",
      "desc": "Return the device's SMS mode."
    },
    {
      "name": "var isConnected: Bool"
    },
    {
      "name": "var delegate: IOBluetoothHandsFreeDelegate!",
      "desc": "Return the delegate"
    },
    {
      "name": "var device: IOBluetoothDevice!",
      "desc": "Return the IOBluetoothDevice."
    },
    {
      "name": "var deviceCallHoldModes: UInt32",
      "desc": "Return the device's supported call hold modes."
    },
    {
      "name": "var deviceSupportedFeatures: UInt32",
      "desc": "Return the device's supported features."
    },
    {
      "name": "var deviceSupportedSMSServices: UInt32",
      "desc": "Return the device's supported SMS services."
    },
    {
      "name": "var isInputMuted: Bool",
      "desc": "Return the input mute state."
    },
    {
      "name": "var inputVolume: Float",
      "desc": "Return the input volume"
    },
    {
      "name": "var isOutputMuted: Bool",
      "desc": "Return the output mute state."
    },
    {
      "name": "var outputVolume: Float",
      "desc": "Return the output volume"
    },
    {
      "name": "var supportedFeatures: UInt32",
      "desc": "Set the supported features"
    },
    {
      "name": "func connect()",
      "desc": "Connect to the device"
    },
    {
      "name": "func connectSCO()",
      "desc": "Open a SCO connection with the device"
    },
    {
      "name": "func disconnect()",
      "desc": "Disconnect from the device"
    },
    {
      "name": "func disconnectSCO()",
      "desc": "Disconnect the SCO connection with the device"
    },
    {
      "name": "func indicator(String!) -> Int32",
      "desc": "Return an indicator's value"
    },
    {
      "name": "func isSCOConnected() -> Bool",
      "desc": "Determine if there is a SCO connection to the device"
    },
    {
      "name": "func setIndicator(String!, value: Int32)",
      "desc": "Set an indicator's value"
    }
  ],
  "declaration": "class IOBluetoothHandsFree : NSObject",
  "inheritsFrom": [
    "NSObject"
  ]
}