{
  "path": "/documentation/swift/keyedencodingcontainer",
  "type": "Generic Structure",
  "name": "KeyedEncodingContainer",
  "desc": "A concrete container that provides a view into an encoderâ€™s storage, making the encoded properties of an encodable type accessible by keys.",
  "items": [
    {
      "name": "typealias KeyedEncodingContainer.Key"
    },
    {
      "name": "init<Container>(Container)",
      "desc": "Creates a new instance with the given container."
    },
    {
      "name": "var codingPath: [CodingKey]",
      "desc": "The path of coding keys taken to get to this point in encoding."
    },
    {
      "name": "func encode(UInt64, forKey: KeyedEncodingContainer<K>.Key)",
      "desc": "Encodes the given value for the given key."
    },
    {
      "name": "func encode<T>(T, forKey: KeyedEncodingContainer<K>.Key)",
      "desc": "Encodes the given value for the given key."
    },
    {
      "name": "func encode(UInt32, forKey: KeyedEncodingContainer<K>.Key)",
      "desc": "Encodes the given value for the given key."
    },
    {
      "name": "func encode(String, forKey: KeyedEncodingContainer<K>.Key)",
      "desc": "Encodes the given value for the given key."
    },
    {
      "name": "func encode(Int16, forKey: KeyedEncodingContainer<K>.Key)",
      "desc": "Encodes the given value for the given key."
    },
    {
      "name": "func encode(Double, forKey: KeyedEncodingContainer<K>.Key)",
      "desc": "Encodes the given value for the given key."
    },
    {
      "name": "func encode(Int64, forKey: KeyedEncodingContainer<K>.Key)",
      "desc": "Encodes the given value for the given key."
    },
    {
      "name": "func encode(Int8, forKey: KeyedEncodingContainer<K>.Key)",
      "desc": "Encodes the given value for the given key."
    },
    {
      "name": "func encode(Int, forKey: KeyedEncodingContainer<K>.Key)",
      "desc": "Encodes the given value for the given key."
    },
    {
      "name": "func encode(Float, forKey: KeyedEncodingContainer<K>.Key)",
      "desc": "Encodes the given value for the given key."
    },
    {
      "name": "func encode(UInt8, forKey: KeyedEncodingContainer<K>.Key)",
      "desc": "Encodes the given value for the given key."
    },
    {
      "name": "func encode(Bool, forKey: KeyedEncodingContainer<K>.Key)",
      "desc": "Encodes the given value for the given key."
    },
    {
      "name": "func encode(UInt, forKey: KeyedEncodingContainer<K>.Key)",
      "desc": "Encodes the given value for the given key."
    },
    {
      "name": "func encode(UInt16, forKey: KeyedEncodingContainer<K>.Key)",
      "desc": "Encodes the given value for the given key."
    },
    {
      "name": "func encode(Int32, forKey: KeyedEncodingContainer<K>.Key)",
      "desc": "Encodes the given value for the given key."
    },
    {
      "name": "func encode<T, C>(CodableConfiguration<T?, C>, forKey: KeyedEncodingContainer<K>.Key)"
    },
    {
      "name": "func encode<T>(T, forKey: KeyedEncodingContainer<K>.Key, configuration: T.EncodingConfiguration)"
    },
    {
      "name": "func encode<T, C>(T, forKey: KeyedEncodingContainer<K>.Key, configuration: C.Type)"
    },
    {
      "name": "func encodeConditional<T>(T, forKey: KeyedEncodingContainer<K>.Key)",
      "desc": "Encodes a reference to the given object only if it is encoded unconditionally elsewhere in the payload (previously, or in the future)."
    },
    {
      "name": "func encodeConditional<T>(T, forKey: K)",
      "desc": "Encodes a reference to the given object only if it is encoded unconditionally elsewhere in the payload (previously, or in the future)."
    },
    {
      "name": "func encodeIfPresent(Int16?, forKey: K)"
    },
    {
      "name": "func encodeIfPresent(Int8?, forKey: K)"
    },
    {
      "name": "func encodeIfPresent(Int32?, forKey: K)"
    },
    {
      "name": "func encodeIfPresent(UInt8?, forKey: K)"
    },
    {
      "name": "func encodeIfPresent(UInt?, forKey: K)"
    },
    {
      "name": "func encodeIfPresent(Bool?, forKey: K)"
    },
    {
      "name": "func encodeIfPresent(UInt64?, forKey: K)"
    },
    {
      "name": "func encodeIfPresent(Double?, forKey: K)"
    },
    {
      "name": "func encodeIfPresent(UInt32?, forKey: K)"
    },
    {
      "name": "func encodeIfPresent(Int?, forKey: K)"
    },
    {
      "name": "func encodeIfPresent<T>(T?, forKey: K)"
    },
    {
      "name": "func encodeIfPresent(String?, forKey: K)"
    },
    {
      "name": "func encodeIfPresent(Float?, forKey: K)"
    },
    {
      "name": "func encodeIfPresent(UInt16?, forKey: K)"
    },
    {
      "name": "func encodeIfPresent(Int64?, forKey: K)"
    },
    {
      "name": "func encodeIfPresent(UInt8?, forKey: KeyedEncodingContainer<K>.Key)",
      "desc": "Encodes the given value for the given key if it is not nil."
    },
    {
      "name": "func encodeIfPresent(Double?, forKey: KeyedEncodingContainer<K>.Key)",
      "desc": "Encodes the given value for the given key if it is not nil."
    },
    {
      "name": "func encodeIfPresent(UInt32?, forKey: KeyedEncodingContainer<K>.Key)",
      "desc": "Encodes the given value for the given key if it is not nil."
    },
    {
      "name": "func encodeIfPresent(Float?, forKey: KeyedEncodingContainer<K>.Key)",
      "desc": "Encodes the given value for the given key if it is not nil."
    },
    {
      "name": "func encodeIfPresent(Int8?, forKey: KeyedEncodingContainer<K>.Key)",
      "desc": "Encodes the given value for the given key if it is not nil."
    },
    {
      "name": "func encodeIfPresent<T>(T?, forKey: KeyedEncodingContainer<K>.Key)",
      "desc": "Encodes the given value for the given key if it is not nil."
    },
    {
      "name": "func encodeIfPresent(UInt?, forKey: KeyedEncodingContainer<K>.Key)",
      "desc": "Encodes the given value for the given key if it is not nil."
    },
    {
      "name": "func encodeIfPresent(Int32?, forKey: KeyedEncodingContainer<K>.Key)",
      "desc": "Encodes the given value for the given key if it is not nil."
    },
    {
      "name": "func encodeIfPresent(Int16?, forKey: KeyedEncodingContainer<K>.Key)",
      "desc": "Encodes the given value for the given key if it is not nil."
    },
    {
      "name": "func encodeIfPresent(UInt16?, forKey: KeyedEncodingContainer<K>.Key)",
      "desc": "Encodes the given value for the given key if it is not nil."
    },
    {
      "name": "func encodeIfPresent(Int64?, forKey: KeyedEncodingContainer<K>.Key)",
      "desc": "Encodes the given value for the given key if it is not nil."
    },
    {
      "name": "func encodeIfPresent(Bool?, forKey: KeyedEncodingContainer<K>.Key)",
      "desc": "Encodes the given value for the given key if it is not nil."
    },
    {
      "name": "func encodeIfPresent(UInt64?, forKey: KeyedEncodingContainer<K>.Key)",
      "desc": "Encodes the given value for the given key if it is not nil."
    },
    {
      "name": "func encodeIfPresent(String?, forKey: KeyedEncodingContainer<K>.Key)",
      "desc": "Encodes the given value for the given key if it is not nil."
    },
    {
      "name": "func encodeIfPresent(Int?, forKey: KeyedEncodingContainer<K>.Key)",
      "desc": "Encodes the given value for the given key if it is not nil."
    },
    {
      "name": "func encodeIfPresent<T>(T?, forKey: KeyedEncodingContainer<K>.Key, configuration: T.EncodingConfiguration)"
    },
    {
      "name": "func encodeIfPresent<T, C>(T?, forKey: KeyedEncodingContainer<K>.Key, configuration: C.Type)"
    },
    {
      "name": "func encodeNil(forKey: KeyedEncodingContainer<K>.Key)",
      "desc": "Encodes a null value for the given key."
    },
    {
      "name": "func nestedContainer<NestedKey>(keyedBy: NestedKey.Type, forKey: KeyedEncodingContainer<K>.Key) -> KeyedEncodingContainer<NestedKey>",
      "desc": "Stores a keyed encoding container for the given key and returns it."
    },
    {
      "name": "func nestedUnkeyedContainer(forKey: KeyedEncodingContainer<K>.Key) -> UnkeyedEncodingContainer",
      "desc": "Stores an unkeyed encoding container for the given key and returns it."
    },
    {
      "name": "func superEncoder() -> Encoder",
      "desc": "Stores a new nested container for the default super key and returns a new encoder instance for encoding super into that container."
    },
    {
      "name": "func superEncoder(forKey: KeyedEncodingContainer<K>.Key) -> Encoder",
      "desc": "Stores a new nested container for the given key and returns a new encoder instance for encoding super into that container."
    }
  ],
  "declaration": "struct KeyedEncodingContainer<K> where K : CodingKey",
  "conformsTo": [
    "KeyedEncodingContainerProtocol"
  ]
}