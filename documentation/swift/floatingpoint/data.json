{
  "path": "/documentation/swift/floatingpoint",
  "type": "Protocol",
  "name": "FloatingPoint",
  "desc": "A floating-point numeric type.",
  "items": [
    {
      "name": "enum FloatingPointClassification",
      "desc": "The IEEE 754 floating-point classes."
    },
    {
      "name": "enum FloatingPointRoundingRule",
      "desc": "A rule for rounding a floating-point number."
    },
    {
      "name": "enum FloatingPointSign",
      "desc": "The sign of a floating-point value."
    },
    {
      "name": "static func < (Self, Self) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument."
    },
    {
      "name": "static func <= (Self, Self) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument."
    },
    {
      "name": "static func > (Self, Self) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument."
    },
    {
      "name": "static func >= (Self, Self) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument."
    },
    {
      "name": "associatedtype Exponent",
      "desc": "A type that can represent any written exponent."
    },
    {
      "name": "init(Int)",
      "desc": "Creates a new value, rounded to the closest possible representation."
    },
    {
      "name": "init<Source>(Source)",
      "desc": "Creates a new value, rounded to the closest possible representation."
    },
    {
      "name": "init?<Source>(exactly: Source)",
      "desc": "Creates a new value, if the given integer can be represented exactly."
    },
    {
      "name": "init(sign: FloatingPointSign, exponent: Self.Exponent, significand: Self)",
      "desc": "Creates a new value from the given sign, exponent, and significand."
    },
    {
      "name": "init(signOf: Self, magnitudeOf: Self)",
      "desc": "Creates a new floating-point value using the sign of one value and the magnitude of another."
    },
    {
      "name": "var exponent: Self.Exponent",
      "desc": "The exponent of the floating-point value."
    },
    {
      "name": "var floatingPointClass: FloatingPointClassification",
      "desc": "The classification of this value."
    },
    {
      "name": "var isCanonical: Bool",
      "desc": "A Boolean value indicating whether the instance’s representation is in its canonical form."
    },
    {
      "name": "var isFinite: Bool",
      "desc": "A Boolean value indicating whether this instance is finite."
    },
    {
      "name": "var isInfinite: Bool",
      "desc": "A Boolean value indicating whether the instance is infinite."
    },
    {
      "name": "var isNaN: Bool",
      "desc": "A Boolean value indicating whether the instance is NaN (“not a number”)."
    },
    {
      "name": "var isNormal: Bool",
      "desc": "A Boolean value indicating whether this instance is normal."
    },
    {
      "name": "var isSignalingNaN: Bool",
      "desc": "A Boolean value indicating whether the instance is a signaling NaN."
    },
    {
      "name": "var isSubnormal: Bool",
      "desc": "A Boolean value indicating whether the instance is subnormal."
    },
    {
      "name": "var isZero: Bool",
      "desc": "A Boolean value indicating whether the instance is equal to zero."
    },
    {
      "name": "var nextDown: Self",
      "desc": "The greatest representable value that compares less than this value."
    },
    {
      "name": "var nextUp: Self",
      "desc": "The least representable value that compares greater than this value."
    },
    {
      "name": "var sign: FloatingPointSign",
      "desc": "The sign of the floating-point value."
    },
    {
      "name": "var significand: Self",
      "desc": "The significand of the floating-point value."
    },
    {
      "name": "var ulp: Self",
      "desc": "The unit in the last place of this value."
    },
    {
      "name": "static var greatestFiniteMagnitude: Self",
      "desc": "The greatest finite number representable by this type."
    },
    {
      "name": "static var infinity: Self",
      "desc": "Positive infinity."
    },
    {
      "name": "static var leastNonzeroMagnitude: Self",
      "desc": "The least positive number."
    },
    {
      "name": "static var leastNormalMagnitude: Self",
      "desc": "The least positive normal number."
    },
    {
      "name": "static var nan: Self",
      "desc": "A quiet NaN (“not a number”)."
    },
    {
      "name": "static var pi: Self",
      "desc": "The mathematical constant pi."
    },
    {
      "name": "static var radix: Int",
      "desc": "The radix, or base of exponentiation, for a floating-point type."
    },
    {
      "name": "static var signalingNaN: Self",
      "desc": "A signaling NaN (“not a number”)."
    },
    {
      "name": "static var ulpOfOne: Self",
      "desc": "The unit in the last place of 1.0."
    },
    {
      "name": "func addProduct(Self, Self)",
      "desc": "Adds the product of the two given values to this value in place, computed without intermediate rounding."
    },
    {
      "name": "func addingProduct(Self, Self) -> Self",
      "desc": "Returns the result of adding the product of the two given values to this value, computed without intermediate rounding."
    },
    {
      "name": "func formRemainder(dividingBy: Self)",
      "desc": "Replaces this value with the remainder of itself divided by the given value."
    },
    {
      "name": "func formSquareRoot()",
      "desc": "Replaces this value with its square root, rounded to a representable value."
    },
    {
      "name": "func formTruncatingRemainder(dividingBy: Self)",
      "desc": "Replaces this value with the remainder of itself divided by the given value using truncating division."
    },
    {
      "name": "func isEqual(to: Self) -> Bool",
      "desc": "Returns a Boolean value indicating whether this instance is equal to the given value."
    },
    {
      "name": "func isLess(than: Self) -> Bool",
      "desc": "Returns a Boolean value indicating whether this instance is less than the given value."
    },
    {
      "name": "func isLessThanOrEqualTo(Self) -> Bool",
      "desc": "Returns a Boolean value indicating whether this instance is less than or equal to the given value."
    },
    {
      "name": "func isTotallyOrdered(belowOrEqualTo: Self) -> Bool",
      "desc": "Returns a Boolean value indicating whether this instance should precede or tie positions with the given value in an ascending sort."
    },
    {
      "name": "func negate()",
      "desc": "Replaces this value with its additive inverse."
    },
    {
      "name": "func remainder(dividingBy: Self) -> Self",
      "desc": "Returns the remainder of this value divided by the given value."
    },
    {
      "name": "func round()",
      "desc": "Rounds this value to an integral value using “schoolbook rounding.”"
    },
    {
      "name": "func round(FloatingPointRoundingRule)",
      "desc": "Rounds the value to an integral value using the specified rounding rule."
    },
    {
      "name": "func rounded() -> Self",
      "desc": "Returns this value rounded to an integral value using “schoolbook rounding.”"
    },
    {
      "name": "func rounded(FloatingPointRoundingRule) -> Self",
      "desc": "Returns this value rounded to an integral value using the specified rounding rule."
    },
    {
      "name": "func squareRoot() -> Self",
      "desc": "Returns the square root of the value, rounded to a representable value."
    },
    {
      "name": "func truncatingRemainder(dividingBy: Self) -> Self",
      "desc": "Returns the remainder of this value divided by the given value using truncating division."
    },
    {
      "name": "static func maximum(Self, Self) -> Self",
      "desc": "Returns the greater of the two given values."
    },
    {
      "name": "static func maximumMagnitude(Self, Self) -> Self",
      "desc": "Returns the value with greater magnitude."
    },
    {
      "name": "static func minimum(Self, Self) -> Self",
      "desc": "Returns the lesser of the two given values."
    },
    {
      "name": "static func minimumMagnitude(Self, Self) -> Self",
      "desc": "Returns the value with lesser magnitude."
    },
    {
      "name": "static func * (Self, Self) -> Self",
      "desc": "Multiplies two values and produces their product, rounding to a representable value."
    },
    {
      "name": "static func *= (inout Self, Self)",
      "desc": "Multiplies two values and stores the result in the left-hand-side variable, rounding to a representable value."
    },
    {
      "name": "static func + (Self, Self) -> Self",
      "desc": "Adds two values and produces their sum, rounded to a representable value."
    },
    {
      "name": "static func += (inout Self, Self)",
      "desc": "Adds two values and stores the result in the left-hand-side variable, rounded to a representable value."
    },
    {
      "name": "static func - (Self) -> Self",
      "desc": "Calculates the additive inverse of a value."
    },
    {
      "name": "static func - (Self, Self) -> Self",
      "desc": "Subtracts one value from another and produces their difference, rounded to a representable value."
    },
    {
      "name": "static func -= (inout Self, Self)",
      "desc": "Subtracts the second value from the first and stores the difference in the left-hand-side variable, rounding to a representable value."
    },
    {
      "name": "static func / (Self, Self) -> Self",
      "desc": "Returns the quotient of dividing the first value by the second, rounded to a representable value."
    },
    {
      "name": "static func /= (inout Self, Self)",
      "desc": "Divides the first value by the second and stores the quotient in the left-hand-side variable, rounding to a representable value."
    },
    {
      "name": "static func == (Self, Self) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are equal."
    }
  ],
  "declaration": "protocol FloatingPoint where Self == Self.Magnitude",
  "inheritsFrom": [
    "Hashable",
    "SignedNumeric",
    "Strideable"
  ]
}