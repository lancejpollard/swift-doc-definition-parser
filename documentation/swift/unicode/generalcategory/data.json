{
  "path": "/documentation/swift/unicode/generalcategory",
  "type": "Enumeration",
  "name": "Unicode.GeneralCategory",
  "desc": "The most general classification of a Unicode scalar.",
  "items": [
    {
      "name": "case closePunctuation",
      "desc": "A closing punctuation mark of a pair."
    },
    {
      "name": "case connectorPunctuation",
      "desc": "A connecting punctuation mark, like a tie."
    },
    {
      "name": "case control",
      "desc": "A C0 or C1 control code."
    },
    {
      "name": "case currencySymbol",
      "desc": "A currency sign."
    },
    {
      "name": "case dashPunctuation",
      "desc": "A dash or hyphen punctuation mark."
    },
    {
      "name": "case decimalNumber",
      "desc": "A decimal digit."
    },
    {
      "name": "case enclosingMark",
      "desc": "An enclosing combining mark."
    },
    {
      "name": "case finalPunctuation",
      "desc": "A final quotation mark."
    },
    {
      "name": "case format",
      "desc": "A format control character."
    },
    {
      "name": "case initialPunctuation",
      "desc": "An initial quotation mark."
    },
    {
      "name": "case letterNumber",
      "desc": "A letter-like numeric character."
    },
    {
      "name": "case lineSeparator",
      "desc": "A line separator, which is specifically (and only) U+2028 LINE SEPARATOR."
    },
    {
      "name": "case lowercaseLetter",
      "desc": "A lowercase letter."
    },
    {
      "name": "case mathSymbol",
      "desc": "A symbol of mathematical use."
    },
    {
      "name": "case modifierLetter",
      "desc": "A modifier letter."
    },
    {
      "name": "case modifierSymbol",
      "desc": "A non-letterlike modifier symbol."
    },
    {
      "name": "case nonspacingMark",
      "desc": "A non-spacing combining mark with zero advance width (abbreviated Mn)."
    },
    {
      "name": "case openPunctuation",
      "desc": "An opening punctuation mark of a pair."
    },
    {
      "name": "case otherLetter",
      "desc": "Other letters, including syllables and ideographs."
    },
    {
      "name": "case otherNumber",
      "desc": "A numeric character of another type."
    },
    {
      "name": "case otherPunctuation",
      "desc": "A punctuation mark of another type."
    },
    {
      "name": "case otherSymbol",
      "desc": "A symbol of another type."
    },
    {
      "name": "case paragraphSeparator",
      "desc": "A paragraph separator, which is specifically (and only) U+2029 PARAGRAPH SEPARATOR."
    },
    {
      "name": "case privateUse",
      "desc": "A private-use character."
    },
    {
      "name": "case spaceSeparator",
      "desc": "A space character of non-zero width."
    },
    {
      "name": "case spacingMark",
      "desc": "A spacing combining mark with positive advance width."
    },
    {
      "name": "case surrogate",
      "desc": "A surrogate code point."
    },
    {
      "name": "case titlecaseLetter",
      "desc": "A digraph character whose first part is uppercase."
    },
    {
      "name": "case unassigned",
      "desc": "A reserved unassigned code point or a non-character."
    },
    {
      "name": "case uppercaseLetter",
      "desc": "An uppercase letter."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of this value by feeding them into the given hasher."
    },
    {
      "name": "static func != (Unicode.GeneralCategory, Unicode.GeneralCategory) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are not equal."
    },
    {
      "name": "static func == (Unicode.GeneralCategory, Unicode.GeneralCategory) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are equal."
    }
  ],
  "declaration": "enum GeneralCategory",
  "conformsTo": [
    "Sendable"
  ]
}