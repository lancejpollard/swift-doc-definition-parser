{
  "path": "/documentation/swift/unicode/canonicalcombiningclass",
  "type": "Structure",
  "name": "Unicode.CanonicalCombiningClass",
  "desc": "The classification of a scalar used in the Canonical Ordering Algorithm defined by the Unicode Standard.",
  "items": [
    {
      "name": "typealias Unicode.CanonicalCombiningClass.RawValue",
      "desc": "The raw type that can be used to represent all values of the conforming type."
    },
    {
      "name": "init(rawValue: UInt8)",
      "desc": "Creates a new canonical combining class with the given raw integer value."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value."
    },
    {
      "name": "let rawValue: UInt8",
      "desc": "The raw integer value of the canonical combining class."
    },
    {
      "name": "static let above: Unicode.CanonicalCombiningClass",
      "desc": "Distinct marks directly above."
    },
    {
      "name": "static let aboveLeft: Unicode.CanonicalCombiningClass",
      "desc": "Distinct marks at the top left."
    },
    {
      "name": "static let aboveRight: Unicode.CanonicalCombiningClass",
      "desc": "Distinct marks at the top right."
    },
    {
      "name": "static let attachedAbove: Unicode.CanonicalCombiningClass",
      "desc": "Marks attached directly above."
    },
    {
      "name": "static let attachedAboveRight: Unicode.CanonicalCombiningClass",
      "desc": "Marks attached at the top right."
    },
    {
      "name": "static let attachedBelow: Unicode.CanonicalCombiningClass",
      "desc": "Marks attached directly below."
    },
    {
      "name": "static let attachedBelowLeft: Unicode.CanonicalCombiningClass",
      "desc": "Marks attached at the bottom left."
    },
    {
      "name": "static let below: Unicode.CanonicalCombiningClass",
      "desc": "Distinct marks directly below."
    },
    {
      "name": "static let belowLeft: Unicode.CanonicalCombiningClass",
      "desc": "Distinct marks at the bottom left."
    },
    {
      "name": "static let belowRight: Unicode.CanonicalCombiningClass",
      "desc": "Distinct marks at the bottom right."
    },
    {
      "name": "static let doubleAbove: Unicode.CanonicalCombiningClass",
      "desc": "Distinct marks extending above two bases."
    },
    {
      "name": "static let doubleBelow: Unicode.CanonicalCombiningClass",
      "desc": "Distinct marks subtending two bases."
    },
    {
      "name": "static let iotaSubscript: Unicode.CanonicalCombiningClass",
      "desc": "Greek iota subscript only (U+0345 COMBINING GREEK YPOGEGRAMMENI)."
    },
    {
      "name": "static let kanaVoicing: Unicode.CanonicalCombiningClass",
      "desc": "Combining marks that are attached to hiragana and katakana to indicate voicing changes."
    },
    {
      "name": "static let left: Unicode.CanonicalCombiningClass",
      "desc": "Distinct marks to the left."
    },
    {
      "name": "static let notReordered: Unicode.CanonicalCombiningClass",
      "desc": "Base glyphs that occupy their own space and do not combine with others."
    },
    {
      "name": "static let nukta: Unicode.CanonicalCombiningClass",
      "desc": "Diacritic nukta marks in Brahmi-derived scripts."
    },
    {
      "name": "static let overlay: Unicode.CanonicalCombiningClass",
      "desc": "Marks that overlay a base letter or symbol."
    },
    {
      "name": "static let right: Unicode.CanonicalCombiningClass",
      "desc": "Distinct marks to the right."
    },
    {
      "name": "static let virama: Unicode.CanonicalCombiningClass",
      "desc": "Diacritic virama marks in Brahmi-derived scripts."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of this value by feeding them into the given hasher."
    },
    {
      "name": "static func != (Unicode.CanonicalCombiningClass, Unicode.CanonicalCombiningClass) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are not equal."
    },
    {
      "name": "static func ... (Unicode.CanonicalCombiningClass) -> PartialRangeFrom<Unicode.CanonicalCombiningClass>",
      "desc": "Returns a partial range extending upward from a lower bound."
    },
    {
      "name": "static func ... (Unicode.CanonicalCombiningClass) -> PartialRangeThrough<Unicode.CanonicalCombiningClass>",
      "desc": "Returns a partial range up to, and including, its upper bound."
    },
    {
      "name": "static func ... (Unicode.CanonicalCombiningClass, Unicode.CanonicalCombiningClass) -> ClosedRange<Unicode.CanonicalCombiningClass>",
      "desc": "Returns a closed range that contains both of its bounds."
    },
    {
      "name": "static func ..< (Unicode.CanonicalCombiningClass) -> PartialRangeUpTo<Unicode.CanonicalCombiningClass>",
      "desc": "Returns a partial range up to, but not including, its upper bound."
    },
    {
      "name": "static func ..< (Unicode.CanonicalCombiningClass, Unicode.CanonicalCombiningClass) -> Range<Unicode.CanonicalCombiningClass>",
      "desc": "Returns a half-open range that contains its lower bound but not its upper bound."
    },
    {
      "name": "static func < (Unicode.CanonicalCombiningClass, Unicode.CanonicalCombiningClass) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument."
    },
    {
      "name": "static func <= (Unicode.CanonicalCombiningClass, Unicode.CanonicalCombiningClass) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument."
    },
    {
      "name": "static func == (Unicode.CanonicalCombiningClass, Unicode.CanonicalCombiningClass) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are equal."
    },
    {
      "name": "static func > (Unicode.CanonicalCombiningClass, Unicode.CanonicalCombiningClass) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument."
    },
    {
      "name": "static func >= (Unicode.CanonicalCombiningClass, Unicode.CanonicalCombiningClass) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument."
    }
  ],
  "declaration": "struct CanonicalCombiningClass",
  "conformsTo": [
    "Comparable",
    "Hashable",
    "RawRepresentable",
    "Sendable"
  ]
}