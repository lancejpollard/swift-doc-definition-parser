{
  "path": "/documentation/swift/unicode/scalar",
  "type": "Structure",
  "name": "Unicode.Scalar",
  "desc": "A Unicode scalar value.",
  "items": [
    {
      "name": "init(UInt8)",
      "desc": "Creates a Unicode scalar with the specified numeric value."
    },
    {
      "name": "init(Unicode.Scalar)",
      "desc": "Creates a duplicate of the given Unicode scalar."
    },
    {
      "name": "init?(UInt32)",
      "desc": "Creates a Unicode scalar with the specified numeric value."
    },
    {
      "name": "init?(UInt16)",
      "desc": "Creates a Unicode scalar with the specified numeric value."
    },
    {
      "name": "init?(Int)",
      "desc": "Creates a Unicode scalar with the specified numeric value."
    },
    {
      "name": "init(unicodeScalarLiteral: Unicode.Scalar)",
      "desc": "Creates a Unicode scalar with the specified value."
    },
    {
      "name": "init?(String)",
      "desc": "Instantiates an instance of the conforming type from a string representation."
    },
    {
      "name": "var value: UInt32",
      "desc": "A numeric representation of the Unicode scalar."
    },
    {
      "name": "var properties: Unicode.Scalar.Properties",
      "desc": "Properties of this scalar defined by the Unicode standard."
    },
    {
      "name": "struct Unicode.Scalar.Properties",
      "desc": "A value that provides access to properties of a Unicode scalar that are defined by the Unicode standard."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of this value by feeding them into the given hasher."
    },
    {
      "name": "var isASCII: Bool",
      "desc": "A Boolean value indicating whether the Unicode scalar is an ASCII character."
    },
    {
      "name": "var description: String",
      "desc": "A textual representation of the Unicode scalar."
    },
    {
      "name": "func write<Target>(to: inout Target)",
      "desc": "Writes the textual representation of the Unicode scalar into the given output stream."
    },
    {
      "name": "func escaped(asASCII: Bool) -> String",
      "desc": "Returns a string representation of the Unicode scalar."
    },
    {
      "name": "var utf16: Unicode.Scalar.UTF16View"
    },
    {
      "name": "struct Unicode.Scalar.UTF16View"
    },
    {
      "name": "var debugDescription: String",
      "desc": "An escaped textual representation of the Unicode scalar, suitable for debugging."
    },
    {
      "name": "var customMirror: Mirror",
      "desc": "A mirror that reflects the Unicode.Scalar instance."
    },
    {
      "name": "static func == (Unicode.Scalar, Unicode.Scalar) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are equal."
    },
    {
      "name": "static func != (Unicode.Scalar, Unicode.Scalar) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are not equal."
    },
    {
      "name": "static func < (Unicode.Scalar, Unicode.Scalar) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument."
    },
    {
      "name": "static func <= (Unicode.Scalar, Unicode.Scalar) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument."
    },
    {
      "name": "static func > (Unicode.Scalar, Unicode.Scalar) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument."
    },
    {
      "name": "static func >= (Unicode.Scalar, Unicode.Scalar) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument."
    },
    {
      "name": "static func ... (Unicode.Scalar) -> PartialRangeFrom<Unicode.Scalar>",
      "desc": "Returns a partial range extending upward from a lower bound."
    },
    {
      "name": "static func ... (Unicode.Scalar) -> PartialRangeThrough<Unicode.Scalar>",
      "desc": "Returns a partial range up to, and including, its upper bound."
    },
    {
      "name": "static func ... (Unicode.Scalar, Unicode.Scalar) -> ClosedRange<Unicode.Scalar>",
      "desc": "Returns a closed range that contains both of its bounds."
    },
    {
      "name": "static func ..< (Unicode.Scalar) -> PartialRangeUpTo<Unicode.Scalar>",
      "desc": "Returns a partial range up to, but not including, its upper bound."
    },
    {
      "name": "static func ..< (Unicode.Scalar, Unicode.Scalar) -> Range<Unicode.Scalar>",
      "desc": "Returns a half-open range that contains its lower bound but not its upper bound."
    },
    {
      "name": "typealias Unicode.Scalar.UnicodeScalarLiteralType",
      "desc": "A type that represents a Unicode scalar literal."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value."
    },
    {
      "name": "var utf8: Unicode.Scalar.UTF8View"
    },
    {
      "name": "struct Unicode.Scalar.UTF8View"
    }
  ],
  "declaration": "@frozen struct Scalar",
  "conformsTo": [
    "Comparable",
    "CustomDebugStringConvertible",
    "CustomReflectable",
    "CustomStringConvertible",
    "Equatable",
    "ExpressibleByUnicodeScalarLiteral",
    "Hashable",
    "LosslessStringConvertible",
    "Sendable",
    "TextOutputStreamable"
  ]
}