{
  "path": "/documentation/swift/asyncthrowingstream/continuation",
  "type": "Structure",
  "name": "AsyncThrowingStream.Continuation",
  "desc": "A mechanism to interface between synchronous code and an asynchronous stream.",
  "items": [
    {
      "name": "func yield(Element) -> AsyncThrowingStream<Element, Failure>.Continuation.YieldResult",
      "desc": "Resume the task awaiting the next iteration point by having it return nomally from its suspension point with a given element."
    },
    {
      "name": "func yield(with: Result<Element, Failure>) -> AsyncThrowingStream<Element, Failure>.Continuation.YieldResult",
      "desc": "Resume the task awaiting the next iteration point by having it return normally or throw, based on a given result."
    },
    {
      "name": "func yield() -> AsyncThrowingStream<Element, Failure>.Continuation.YieldResult",
      "desc": "Resume the task awaiting the next iteration point by having it return nomally from its suspension point."
    },
    {
      "name": "enum AsyncThrowingStream.Continuation.YieldResult",
      "desc": "A type that indicates the result of yielding a value to a client, by way of the continuation."
    },
    {
      "name": "func finish(throwing: Failure?)",
      "desc": "Resume the task awaiting the next iteration point by having it return nil, which signifies the end of the iteration."
    },
    {
      "name": "var onTermination: (@Sendable (AsyncThrowingStream<Element, Failure>.Continuation.Termination) -> Void)?",
      "desc": "A callback to invoke when canceling iteration of an asynchronous stream."
    },
    {
      "name": "enum AsyncThrowingStream.Continuation.Termination",
      "desc": "A type that indicates how the stream terminated."
    },
    {
      "name": "enum AsyncThrowingStream.Continuation.BufferingPolicy",
      "desc": "A strategy that handles exhaustion of a bufferâ€™s capacity."
    }
  ],
  "declaration": "struct AsyncThrowingStream<Element, Failure>.Continuation",
  "conformsTo": [
    "Sendable"
  ]
}