{
  "path": "/documentation/swift/uint8",
  "type": "Structure",
  "name": "UInt8",
  "desc": "An 8-bit unsigned integer value type.",
  "items": [
    {
      "name": "typealias UInt8.IntegerLiteralType",
      "desc": "A type that represents an integer literal."
    },
    {
      "name": "typealias UInt8.Magnitude",
      "desc": "A type that can represent the absolute value of any possible value of this type."
    },
    {
      "name": "typealias UInt8.SIMDMaskScalar"
    },
    {
      "name": "typealias UInt8.Stride",
      "desc": "A type that represents the distance between two values."
    },
    {
      "name": "init()",
      "desc": "Creates a new value equal to zero."
    },
    {
      "name": "init(CGFloat)"
    },
    {
      "name": "init(Float)",
      "desc": "Creates an integer from the given floating-point value, rounding toward zero."
    },
    {
      "name": "init(Double)",
      "desc": "Creates an integer from the given floating-point value, rounding toward zero."
    },
    {
      "name": "init(Float80)",
      "desc": "Creates an integer from the given floating-point value, rounding toward zero."
    },
    {
      "name": "init<T>(T)",
      "desc": "Creates a new instance from the given integer."
    },
    {
      "name": "init<T>(T)",
      "desc": "Creates an integer from the given floating-point value, rounding toward zero. Any fractional part of the value passed as source is removed."
    },
    {
      "name": "init?(String)",
      "desc": "Creates a new integer value from the given string."
    },
    {
      "name": "init(Float16)",
      "desc": "Creates an integer from the given floating-point value, rounding toward zero."
    },
    {
      "name": "init?<S>(S, radix: Int)",
      "desc": "Creates a new integer value from the given string and radix."
    },
    {
      "name": "init(ascii: Unicode.Scalar)",
      "desc": "Construct with value v.value."
    },
    {
      "name": "init(bigEndian: UInt8)",
      "desc": "Creates an integer from its big-endian representation, changing the byte order if necessary."
    },
    {
      "name": "init(bitPattern: Int8)",
      "desc": "Creates a new instance with the same memory representation as the given value."
    },
    {
      "name": "init<Other>(clamping: Other)",
      "desc": "Creates a new instance with the representable value that’s closest to the given integer."
    },
    {
      "name": "init?(exactly: Float)",
      "desc": "Creates an integer from the given floating-point value, if it can be represented exactly."
    },
    {
      "name": "init?(exactly: Double)",
      "desc": "Creates an integer from the given floating-point value, if it can be represented exactly."
    },
    {
      "name": "init?(exactly: Float80)",
      "desc": "Creates an integer from the given floating-point value, if it can be represented exactly."
    },
    {
      "name": "init?<T>(exactly: T)",
      "desc": "Creates an integer from the given floating-point value, if it can be represented exactly."
    },
    {
      "name": "init?<T>(exactly: T)",
      "desc": "Creates a new instance from the given integer, if it can be represented exactly."
    },
    {
      "name": "init?(exactly: NSNumber)"
    },
    {
      "name": "init?(exactly: Float16)",
      "desc": "Creates an integer from the given floating-point value, if it can be represented exactly."
    },
    {
      "name": "init(from: Decoder)",
      "desc": "Creates a new instance by decoding from the given decoder."
    },
    {
      "name": "init(integerLiteral: UInt8)",
      "desc": "Creates an instance initialized to the specified integer value."
    },
    {
      "name": "init(littleEndian: UInt8)",
      "desc": "Creates an integer from its little-endian representation, changing the byte order if necessary."
    },
    {
      "name": "init(truncating: NSNumber)"
    },
    {
      "name": "init<T>(truncatingIfNeeded: T)",
      "desc": "Creates a new instance from the bit pattern of the given instance by truncating or sign-extending if needed to fit this type."
    },
    {
      "name": "var bigEndian: UInt8",
      "desc": "The big-endian representation of this integer."
    },
    {
      "name": "var bitWidth: Int",
      "desc": "The number of bits in the binary representation of this value."
    },
    {
      "name": "var byteSwapped: UInt8",
      "desc": "A representation of this integer with the byte order swapped."
    },
    {
      "name": "var customMirror: Mirror",
      "desc": "A mirror that reflects the UInt8 instance."
    },
    {
      "name": "var description: String",
      "desc": "A textual representation of this value."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value."
    },
    {
      "name": "var leadingZeroBitCount: Int",
      "desc": "The number of leading zeros in this value’s binary representation."
    },
    {
      "name": "var littleEndian: UInt8",
      "desc": "The little-endian representation of this integer."
    },
    {
      "name": "var magnitude: UInt8",
      "desc": "The magnitude of this value."
    },
    {
      "name": "var nonzeroBitCount: Int",
      "desc": "The number of bits equal to 1 in this value’s binary representation."
    },
    {
      "name": "var trailingZeroBitCount: Int",
      "desc": "The number of trailing zeros in this value’s binary representation."
    },
    {
      "name": "var words: UInt8.Words",
      "desc": "A collection containing the words of this value’s binary representation, in order from the least significant to most significant."
    },
    {
      "name": "static var bitWidth: Int",
      "desc": "The number of bits used for the underlying binary representation of values of this type."
    },
    {
      "name": "static var bnnsDataType: BNNSDataType"
    },
    {
      "name": "static var isSigned: Bool",
      "desc": "A Boolean value indicating whether this type is a signed integer type."
    },
    {
      "name": "static var max: UInt8",
      "desc": "The maximum representable integer in this type."
    },
    {
      "name": "static var min: UInt8",
      "desc": "The minimum representable integer in this type."
    },
    {
      "name": "static var zero: UInt8",
      "desc": "The zero value."
    },
    {
      "name": "func addingReportingOverflow(UInt8) -> (partialValue: UInt8, overflow: Bool)",
      "desc": "Returns the sum of this value and the given value, along with a Boolean value indicating whether overflow occurred in the operation."
    },
    {
      "name": "func advanced(by: Int) -> UInt8",
      "desc": "Returns a value that is offset the specified distance from this value."
    },
    {
      "name": "func distance(to: UInt8) -> Int",
      "desc": "Returns the distance from this value to the given value, expressed as a stride."
    },
    {
      "name": "func dividedReportingOverflow(by: UInt8) -> (partialValue: UInt8, overflow: Bool)",
      "desc": "Returns the quotient obtained by dividing this value by the given value, along with a Boolean value indicating whether overflow occurred in the operation."
    },
    {
      "name": "func dividingFullWidth((high: UInt8, low: UInt8.Magnitude)) -> (quotient: UInt8, remainder: UInt8)",
      "desc": "Returns a tuple containing the quotient and remainder of dividing the given value by this value."
    },
    {
      "name": "func encode(to: Encoder)",
      "desc": "Encodes this value into the given encoder."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of this value by feeding them into the given hasher."
    },
    {
      "name": "func isMultiple(of: UInt8) -> Bool",
      "desc": "Returns true if this value is a multiple of the given value, and false otherwise."
    },
    {
      "name": "func multipliedFullWidth(by: UInt8) -> (high: UInt8, low: UInt8.Magnitude)",
      "desc": "Returns a tuple containing the high and low parts of the result of multiplying this value by the given value."
    },
    {
      "name": "func multipliedReportingOverflow(by: UInt8) -> (partialValue: UInt8, overflow: Bool)",
      "desc": "Returns the product of this value and the given value, along with a Boolean value indicating whether overflow occurred in the operation."
    },
    {
      "name": "func quotientAndRemainder(dividingBy: UInt8) -> (quotient: UInt8, remainder: UInt8)",
      "desc": "Returns the quotient and remainder of this value divided by the given value."
    },
    {
      "name": "func remainderReportingOverflow(dividingBy: UInt8) -> (partialValue: UInt8, overflow: Bool)",
      "desc": "Returns the remainder after dividing this value by the given value, along with a Boolean value indicating whether overflow occurred during division."
    },
    {
      "name": "func signum() -> UInt8",
      "desc": "Returns -1 if this value is negative and 1 if it’s positive; otherwise, 0."
    },
    {
      "name": "func subtractingReportingOverflow(UInt8) -> (partialValue: UInt8, overflow: Bool)",
      "desc": "Returns the difference obtained by subtracting the given value from this value, along with a Boolean value indicating whether overflow occurred in the operation."
    },
    {
      "name": "static func random(in: ClosedRange<UInt8>) -> UInt8",
      "desc": "Returns a random value within the specified range."
    },
    {
      "name": "static func random(in: Range<UInt8>) -> UInt8",
      "desc": "Returns a random value within the specified range."
    },
    {
      "name": "static func random<T>(in: ClosedRange<UInt8>, using: inout T) -> UInt8",
      "desc": "Returns a random value within the specified range, using the given generator as a source for randomness."
    },
    {
      "name": "static func random<T>(in: Range<UInt8>, using: inout T) -> UInt8",
      "desc": "Returns a random value within the specified range, using the given generator as a source for randomness."
    },
    {
      "name": "static func != <Other>(UInt8, Other) -> Bool",
      "desc": "Returns a Boolean value indicating whether the two given values are not equal."
    },
    {
      "name": "static func != (UInt8, UInt8) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are not equal."
    },
    {
      "name": "static func % (UInt8, UInt8) -> UInt8",
      "desc": "Returns the remainder of dividing the first value by the second."
    },
    {
      "name": "static func %= (inout UInt8, UInt8)",
      "desc": "Divides the first value by the second and stores the remainder in the left-hand-side variable."
    },
    {
      "name": "static func & (UInt8, UInt8) -> UInt8",
      "desc": "Returns the result of performing a bitwise AND operation on the two given values."
    },
    {
      "name": "static func &* (UInt8, UInt8) -> UInt8",
      "desc": "Returns the product of the two given values, wrapping the result in case of any overflow."
    },
    {
      "name": "static func &*= (inout UInt8, UInt8)",
      "desc": "Multiplies two values and stores the result in the left-hand-side variable, wrapping any overflow."
    },
    {
      "name": "static func &+ (UInt8, UInt8) -> UInt8",
      "desc": "Returns the sum of the two given values, wrapping the result in case of any overflow."
    },
    {
      "name": "static func &+= (inout UInt8, UInt8)",
      "desc": "Adds two values and stores the result in the left-hand-side variable, wrapping any overflow."
    },
    {
      "name": "static func &- (UInt8, UInt8) -> UInt8",
      "desc": "Returns the difference of the two given values, wrapping the result in case of any overflow."
    },
    {
      "name": "static func &-= (inout UInt8, UInt8)",
      "desc": "Subtracts the second value from the first and stores the difference in the left-hand-side variable, wrapping any overflow."
    },
    {
      "name": "static func &<< <Other>(UInt8, Other) -> UInt8",
      "desc": "Returns the result of shifting a value’s binary representation the specified number of digits to the left, masking the shift amount to the type’s bit width."
    },
    {
      "name": "static func &<< (UInt8, UInt8) -> UInt8",
      "desc": "Returns the result of shifting a value’s binary representation the specified number of digits to the left, masking the shift amount to the type’s bit width."
    },
    {
      "name": "static func &<<= (inout UInt8, UInt8)",
      "desc": "Returns the result of shifting a value’s binary representation the specified number of digits to the left, masking the shift amount to the type’s bit width, and stores the result in the left-hand-side variable."
    },
    {
      "name": "static func &<<= <Other>(inout UInt8, Other)",
      "desc": "Returns the result of shifting a value’s binary representation the specified number of digits to the left, masking the shift amount to the type’s bit width, and stores the result in the left-hand-side variable."
    },
    {
      "name": "static func &= (inout UInt8, UInt8)",
      "desc": "Stores the result of performing a bitwise AND operation on the two given values in the left-hand-side variable."
    },
    {
      "name": "static func &>> <Other>(UInt8, Other) -> UInt8",
      "desc": "Returns the result of shifting a value’s binary representation the specified number of digits to the right, masking the shift amount to the type’s bit width."
    },
    {
      "name": "static func &>> (UInt8, UInt8) -> UInt8",
      "desc": "Returns the result of shifting a value’s binary representation the specified number of digits to the right, masking the shift amount to the type’s bit width."
    },
    {
      "name": "static func &>>= (inout UInt8, UInt8)",
      "desc": "Calculates the result of shifting a value’s binary representation the specified number of digits to the right, masking the shift amount to the type’s bit width, and stores the result in the left-hand-side variable."
    },
    {
      "name": "static func &>>= <Other>(inout UInt8, Other)",
      "desc": "Calculates the result of shifting a value’s binary representation the specified number of digits to the right, masking the shift amount to the type’s bit width, and stores the result in the left-hand-side variable."
    },
    {
      "name": "static func * (UInt8, UInt8) -> UInt8",
      "desc": "Multiplies two values and produces their product."
    },
    {
      "name": "static func *= (inout UInt8, UInt8)",
      "desc": "Multiplies two values and stores the result in the left-hand-side variable."
    },
    {
      "name": "static func + (UInt8) -> UInt8",
      "desc": "Returns the given number unchanged."
    },
    {
      "name": "static func + (UInt8, UInt8) -> UInt8",
      "desc": "Adds two values and produces their sum."
    },
    {
      "name": "static func += (inout UInt8, UInt8)",
      "desc": "Adds two values and stores the result in the left-hand-side variable."
    },
    {
      "name": "static func - (UInt8, UInt8) -> UInt8",
      "desc": "Subtracts one value from another and produces their difference."
    },
    {
      "name": "static func -= (inout UInt8, UInt8)",
      "desc": "Subtracts the second value from the first and stores the difference in the left-hand-side variable."
    },
    {
      "name": "static func ... (UInt8) -> PartialRangeFrom<UInt8>",
      "desc": "Returns a partial range extending upward from a lower bound."
    },
    {
      "name": "static func ... (UInt8) -> PartialRangeThrough<UInt8>",
      "desc": "Returns a partial range up to, and including, its upper bound."
    },
    {
      "name": "static func ... (UInt8, UInt8) -> ClosedRange<UInt8>",
      "desc": "Returns a closed range that contains both of its bounds."
    },
    {
      "name": "static func ..< (UInt8) -> PartialRangeUpTo<UInt8>",
      "desc": "Returns a partial range up to, but not including, its upper bound."
    },
    {
      "name": "static func ..< (UInt8, UInt8) -> Range<UInt8>",
      "desc": "Returns a half-open range that contains its lower bound but not its upper bound."
    },
    {
      "name": "static func / (UInt8, UInt8) -> UInt8",
      "desc": "Returns the quotient of dividing the first value by the second."
    },
    {
      "name": "static func /= (inout UInt8, UInt8)",
      "desc": "Divides the first value by the second and stores the quotient in the left-hand-side variable."
    },
    {
      "name": "static func < <Other>(UInt8, Other) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument."
    },
    {
      "name": "static func < (UInt8, UInt8) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument."
    },
    {
      "name": "static func << <Other>(UInt8, Other) -> UInt8",
      "desc": "Returns the result of shifting a value’s binary representation the specified number of digits to the left."
    },
    {
      "name": "static func << <RHS>(UInt8, RHS) -> UInt8",
      "desc": "Returns the result of shifting a value’s binary representation the specified number of digits to the left."
    },
    {
      "name": "static func <<= <Other>(inout UInt8, Other)",
      "desc": "Stores the result of shifting a value’s binary representation the specified number of digits to the left in the left-hand-side variable."
    },
    {
      "name": "static func <= <Other>(UInt8, Other) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument."
    },
    {
      "name": "static func <= (UInt8, UInt8) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument."
    },
    {
      "name": "static func == <Other>(UInt8, Other) -> Bool",
      "desc": "Returns a Boolean value indicating whether the two given values are equal."
    },
    {
      "name": "static func == (UInt8, UInt8) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are equal."
    },
    {
      "name": "static func > <Other>(UInt8, Other) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument."
    },
    {
      "name": "static func > (UInt8, UInt8) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument."
    },
    {
      "name": "static func >= <Other>(UInt8, Other) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument."
    },
    {
      "name": "static func >= (UInt8, UInt8) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument."
    },
    {
      "name": "static func >> <Other>(UInt8, Other) -> UInt8",
      "desc": "Returns the result of shifting a value’s binary representation the specified number of digits to the right."
    },
    {
      "name": "static func >> <RHS>(UInt8, RHS) -> UInt8",
      "desc": "Returns the result of shifting a value’s binary representation the specified number of digits to the right."
    },
    {
      "name": "static func >>= <Other>(inout UInt8, Other)",
      "desc": "Stores the result of shifting a value’s binary representation the specified number of digits to the right in the left-hand-side variable."
    },
    {
      "name": "static func ^ (UInt8, UInt8) -> UInt8",
      "desc": "Returns the result of performing a bitwise XOR operation on the two given values."
    },
    {
      "name": "static func ^= (inout UInt8, UInt8)",
      "desc": "Stores the result of performing a bitwise XOR operation on the two given values in the left-hand-side variable."
    },
    {
      "name": "static func | (UInt8, UInt8) -> UInt8",
      "desc": "Returns the result of performing a bitwise OR operation on the two given values."
    },
    {
      "name": "static func |= (inout UInt8, UInt8)",
      "desc": "Stores the result of performing a bitwise OR operation on the two given values in the left-hand-side variable."
    },
    {
      "name": "static func ~ (UInt8) -> UInt8",
      "desc": "Returns the inverse of the bits set in the argument."
    },
    {
      "name": "struct UInt8.SIMD16Storage",
      "desc": "Storage for a vector of 16 integers."
    },
    {
      "name": "struct UInt8.SIMD2Storage",
      "desc": "Storage for a vector of two integers."
    },
    {
      "name": "struct UInt8.SIMD32Storage",
      "desc": "Storage for a vector of 32 integers."
    },
    {
      "name": "struct UInt8.SIMD4Storage",
      "desc": "Storage for a vector of four integers."
    },
    {
      "name": "struct UInt8.SIMD64Storage",
      "desc": "Storage for a vector of 64 integers."
    },
    {
      "name": "struct UInt8.SIMD8Storage",
      "desc": "Storage for a vector of eight integers."
    },
    {
      "name": "struct UInt8.Words",
      "desc": "A type that represents the words of this integer."
    }
  ],
  "declaration": "@frozen struct UInt8",
  "conformsTo": [
    "BNNSScalar",
    "CKRecordValueProtocol",
    "CVarArg",
    "CustomReflectable",
    "Decodable",
    "Encodable",
    "FixedWidthInteger",
    "Hashable",
    "SIMDScalar",
    "UnsignedInteger",
    "vDSP_IntegerConvertable"
  ]
}