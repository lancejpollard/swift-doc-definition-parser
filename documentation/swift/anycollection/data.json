{
  "path": "/documentation/swift/anycollection",
  "type": "Generic Structure",
  "name": "AnyCollection",
  "desc": "A type-erased wrapper over any collection with indices that support forward traversal.",
  "items": [
    {
      "name": "typealias AnyCollection.Index",
      "desc": "A type that represents a position in the collection."
    },
    {
      "name": "typealias AnyCollection.Indices",
      "desc": "A type that represents the indices that are valid for subscripting the collection, in ascending order."
    },
    {
      "name": "typealias AnyCollection.Iterator",
      "desc": "A type that provides the collection’s iteration interface and encapsulates its iteration state."
    },
    {
      "name": "typealias AnyCollection.SubSequence",
      "desc": "A collection representing a contiguous subrange of this collection’s elements. The subsequence shares indices with the original collection."
    },
    {
      "name": "init(AnyCollection<Element>)",
      "desc": "Creates an AnyCollection having the same underlying collection as other."
    },
    {
      "name": "init(AnyRandomAccessCollection<Element>)",
      "desc": "Creates an AnyCollection having the same underlying collection as other."
    },
    {
      "name": "init(AnyBidirectionalCollection<Element>)",
      "desc": "Creates an AnyCollection having the same underlying collection as other."
    },
    {
      "name": "init<C>(C)",
      "desc": "Creates a type-erased collection that wraps the given collection."
    },
    {
      "name": "init<C>(C)",
      "desc": "Creates a type-erased collection that wraps the given collection."
    },
    {
      "name": "init<C>(C)",
      "desc": "Creates a type-erased collection that wraps the given collection."
    },
    {
      "name": "var count: Int",
      "desc": "The number of elements."
    },
    {
      "name": "var endIndex: AnyCollection<Element>.Index",
      "desc": "The collection’s “past the end” position—that is, the position one greater than the last valid subscript argument."
    },
    {
      "name": "var first: Element?",
      "desc": "The first element of the collection."
    },
    {
      "name": "var indices: DefaultIndices<AnyCollection<Element>>",
      "desc": "The indices that are valid for subscripting the collection, in ascending order."
    },
    {
      "name": "var isEmpty: Bool",
      "desc": "A Boolean value indicating whether the collection is empty."
    },
    {
      "name": "var lazy: LazySequence<AnyCollection<Element>>",
      "desc": "A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily."
    },
    {
      "name": "var startIndex: AnyCollection<Element>.Index",
      "desc": "The position of the first element in a non-empty collection."
    },
    {
      "name": "var underestimatedCount: Int",
      "desc": "A value less than or equal to the number of elements in the sequence, calculated nondestructively."
    },
    {
      "name": "func allSatisfy((Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate."
    },
    {
      "name": "func compactMap<ElementOfResult>((Element) -> ElementOfResult?) -> [ElementOfResult]",
      "desc": "Returns an array containing the non-nil results of calling the given transformation with each element of this sequence."
    },
    {
      "name": "func contains(Element) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence contains the given element."
    },
    {
      "name": "func contains(where: (Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate."
    },
    {
      "name": "func distance(from: AnyCollection<Element>.Index, to: AnyCollection<Element>.Index) -> Int",
      "desc": "Returns the distance between two indices."
    },
    {
      "name": "func drop(while: (Element) -> Bool) -> AnyCollection<Element>"
    },
    {
      "name": "func dropFirst(Int) -> AnyCollection<Element>"
    },
    {
      "name": "func dropLast(Int) -> AnyCollection<Element>"
    },
    {
      "name": "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
      "desc": "Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order."
    },
    {
      "name": "func elementsEqual<OtherSequence>(OtherSequence, by: (Element, OtherSequence.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test."
    },
    {
      "name": "func enumerated() -> EnumeratedSequence<AnyCollection<Element>>",
      "desc": "Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence."
    },
    {
      "name": "func filter((Element) -> Bool) -> [Element]"
    },
    {
      "name": "func first(where: (Element) -> Bool) -> Element?",
      "desc": "Returns the first element of the sequence that satisfies the given predicate."
    },
    {
      "name": "func firstIndex(of: Element) -> AnyIndex?",
      "desc": "Returns the first index where the specified value appears in the collection."
    },
    {
      "name": "func firstIndex(where: (Element) -> Bool) -> AnyIndex?",
      "desc": "Returns the first index in which an element of the collection satisfies the given predicate."
    },
    {
      "name": "func flatMap<SegmentOfResult>((Element) -> SegmentOfResult) -> [SegmentOfResult.Element]",
      "desc": "Returns an array containing the concatenated results of calling the given transformation with each element of this sequence."
    },
    {
      "name": "func forEach((Element) -> Void)"
    },
    {
      "name": "func formIndex(inout AnyCollection<Element>.Index, offsetBy: Int)"
    },
    {
      "name": "func formIndex(inout AnyCollection<Element>.Index, offsetBy: Int, limitedBy: AnyCollection<Element>.Index) -> Bool"
    },
    {
      "name": "func formIndex(after: inout AnyCollection<Element>.Index)",
      "desc": "Replaces the given index with its successor."
    },
    {
      "name": "func index(AnyCollection<Element>.Index, offsetBy: Int) -> AnyCollection<Element>.Index",
      "desc": "Returns an index that is the specified distance from the given index."
    },
    {
      "name": "func index(AnyCollection<Element>.Index, offsetBy: Int, limitedBy: AnyCollection<Element>.Index) -> AnyCollection<Element>.Index?",
      "desc": "Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index."
    },
    {
      "name": "func index(after: AnyCollection<Element>.Index) -> AnyCollection<Element>.Index",
      "desc": "Returns the position immediately after the given index."
    },
    {
      "name": "func joined() -> FlattenSequence<AnyCollection<Element>>",
      "desc": "Returns the elements of this sequence of sequences, concatenated."
    },
    {
      "name": "func joined<Separator>(separator: Separator) -> JoinedSequence<AnyCollection<Element>>",
      "desc": "Returns the concatenated elements of this sequence of sequences, inserting the given separator between each element."
    },
    {
      "name": "func joined(separator: String) -> String",
      "desc": "Returns a new string by concatenating the elements of the sequence, adding the given separator between each element."
    },
    {
      "name": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements."
    },
    {
      "name": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Element, Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements."
    },
    {
      "name": "func makeIterator() -> AnyCollection<Element>.Iterator",
      "desc": "Returns an iterator over the elements of this collection."
    },
    {
      "name": "func map<T>((Element) -> T) -> [T]"
    },
    {
      "name": "func max() -> Element?",
      "desc": "Returns the maximum element in the sequence."
    },
    {
      "name": "func max(by: (Element, Element) -> Bool) -> Element?",
      "desc": "Returns the maximum element in the sequence, using the given predicate as the comparison between elements."
    },
    {
      "name": "func min() -> Element?",
      "desc": "Returns the minimum element in the sequence."
    },
    {
      "name": "func min(by: (Element, Element) -> Bool) -> Element?",
      "desc": "Returns the minimum element in the sequence, using the given predicate as the comparison between elements."
    },
    {
      "name": "func popFirst() -> Element?",
      "desc": "Removes and returns the first element of the collection."
    },
    {
      "name": "func prefix(Int) -> AnyCollection<Element>"
    },
    {
      "name": "func prefix(through: AnyIndex) -> AnyCollection<Element>",
      "desc": "Returns a subsequence from the start of the collection through the specified position."
    },
    {
      "name": "func prefix(upTo: AnyIndex) -> AnyCollection<Element>",
      "desc": "Returns a subsequence from the start of the collection up to, but not including, the specified position."
    },
    {
      "name": "func prefix(while: (Element) -> Bool) -> AnyCollection<Element>"
    },
    {
      "name": "func randomElement() -> Element?",
      "desc": "Returns a random element of the collection."
    },
    {
      "name": "func randomElement<T>(using: inout T) -> Element?",
      "desc": "Returns a random element of the collection, using the given generator as a source for randomness."
    },
    {
      "name": "func reduce<Result>(Result, (Result, Element) -> Result) -> Result",
      "desc": "Returns the result of combining the elements of the sequence using the given closure."
    },
    {
      "name": "func reduce<Result>(into: Result, (inout Result, Element) -> ()) -> Result",
      "desc": "Returns the result of combining the elements of the sequence using the given closure."
    },
    {
      "name": "func removeFirst() -> Element",
      "desc": "Removes and returns the first element of the collection."
    },
    {
      "name": "func removeFirst(Int)",
      "desc": "Removes the specified number of elements from the beginning of the collection."
    },
    {
      "name": "func reversed() -> [Element]",
      "desc": "Returns an array containing the elements of this sequence in reverse order."
    },
    {
      "name": "func shuffled() -> [Element]",
      "desc": "Returns the elements of the sequence, shuffled."
    },
    {
      "name": "func shuffled<T>(using: inout T) -> [Element]",
      "desc": "Returns the elements of the sequence, shuffled using the given generator as a source for randomness."
    },
    {
      "name": "func sorted() -> [Element]",
      "desc": "Returns the elements of the sequence, sorted."
    },
    {
      "name": "func sorted(by: (Element, Element) -> Bool) -> [Element]",
      "desc": "Returns the elements of the sequence, sorted using the given predicate as the comparison between elements."
    },
    {
      "name": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Element) -> Bool) -> [AnyCollection<Element>]",
      "desc": "Returns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
    },
    {
      "name": "func split(separator: Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [AnyCollection<Element>]",
      "desc": "Returns the longest possible subsequences of the collection, in order, around elements equal to the given element."
    },
    {
      "name": "func split(separator: Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Element>]",
      "desc": "Returns the longest possible subsequences of the sequence, in order, around elements equal to the given element."
    },
    {
      "name": "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
      "desc": "Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence."
    },
    {
      "name": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Element, PossiblePrefix.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test."
    },
    {
      "name": "func suffix(Int) -> AnyCollection<Element>"
    },
    {
      "name": "func suffix(from: AnyIndex) -> AnyCollection<Element>",
      "desc": "Returns a subsequence from the specified position to the end of the collection."
    },
    {
      "name": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Element>) -> R) -> R?",
      "desc": "Executes a closure on the sequence’s contiguous storage."
    },
    {
      "name": "subscript(Range<AnyCollection<Element>.Index>) -> AnyCollection<Element>.SubSequence",
      "desc": "Accesses a contiguous subrange of the collection’s elements."
    },
    {
      "name": "subscript(AnyCollection<Element>.Index) -> Element",
      "desc": "Accesses the element indicated by position."
    },
    {
      "name": "subscript<R>(R) -> AnyCollection<Element>",
      "desc": "Accesses the contiguous subrange of the collection’s elements specified by a range expression."
    },
    {
      "name": "subscript((UnboundedRange_) -> ()) -> AnyCollection<Element>"
    }
  ],
  "declaration": "@frozen struct AnyCollection<Element>",
  "conformsTo": [
    "Collection"
  ]
}