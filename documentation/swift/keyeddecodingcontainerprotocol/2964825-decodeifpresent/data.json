{
  "path": "/documentation/swift/keyeddecodingcontainerprotocol/2964825-decodeifpresent",
  "type": "Instance Method",
  "name": "decodeIfPresent(_:forKey:)",
  "desc": "Decodes a value of the given type for the given key, if present.Required. Default implementations provided.",
  "items": [
    {
      "name": "func decodeIfPresent(String.Type, forKey: Self.Key) -> String?"
    },
    {
      "name": "func decodeIfPresent(Bool.Type, forKey: Self.Key) -> Bool?"
    },
    {
      "name": "func decodeIfPresent(Double.Type, forKey: Self.Key) -> Double?"
    },
    {
      "name": "func decodeIfPresent(Float.Type, forKey: Self.Key) -> Float?"
    },
    {
      "name": "func decodeIfPresent(Int.Type, forKey: Self.Key) -> Int?"
    },
    {
      "name": "func decodeIfPresent(UInt.Type, forKey: Self.Key) -> UInt?"
    },
    {
      "name": "func decodeIfPresent(Int8.Type, forKey: Self.Key) -> Int8?"
    },
    {
      "name": "func decodeIfPresent(Int16.Type, forKey: Self.Key) -> Int16?"
    },
    {
      "name": "func decodeIfPresent(Int32.Type, forKey: Self.Key) -> Int32?"
    },
    {
      "name": "func decodeIfPresent(Int64.Type, forKey: Self.Key) -> Int64?"
    },
    {
      "name": "func decodeIfPresent(UInt8.Type, forKey: Self.Key) -> UInt8?"
    },
    {
      "name": "func decodeIfPresent(UInt16.Type, forKey: Self.Key) -> UInt16?"
    },
    {
      "name": "func decodeIfPresent(UInt32.Type, forKey: Self.Key) -> UInt32?"
    },
    {
      "name": "func decodeIfPresent(UInt64.Type, forKey: Self.Key) -> UInt64?"
    },
    {
      "name": "func decodeIfPresent<T>(T.Type, forKey: Self.Key) -> T?"
    }
  ],
  "declaration": "func decodeIfPresent(_ type: Bool.Type, forKey key: Self.Key) throws -> Bool?"
}