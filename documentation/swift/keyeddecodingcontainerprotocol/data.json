{
  "path": "/documentation/swift/keyeddecodingcontainerprotocol",
  "type": "Protocol",
  "name": "KeyedDecodingContainerProtocol",
  "desc": "A type that provides a view into a decoderâ€™s storage and is used to hold the encoded properties of a decodable type in a keyed manner.",
  "items": [
    {
      "name": "associatedtype Key"
    },
    {
      "name": "var allKeys: [Self.Key]",
      "desc": "All the keys the Decoder has for this container."
    },
    {
      "name": "var codingPath: [CodingKey]",
      "desc": "The path of coding keys taken to get to this point in decoding."
    },
    {
      "name": "func contains(Self.Key) -> Bool",
      "desc": "Returns a Boolean value indicating whether the decoder contains a value associated with the given key."
    },
    {
      "name": "func decode(Float.Type, forKey: Self.Key) -> Float",
      "desc": "Decodes a value of the given type for the given key."
    },
    {
      "name": "func decode(UInt16.Type, forKey: Self.Key) -> UInt16",
      "desc": "Decodes a value of the given type for the given key."
    },
    {
      "name": "func decode(Bool.Type, forKey: Self.Key) -> Bool",
      "desc": "Decodes a value of the given type for the given key."
    },
    {
      "name": "func decode(Int16.Type, forKey: Self.Key) -> Int16",
      "desc": "Decodes a value of the given type for the given key."
    },
    {
      "name": "func decode(Int8.Type, forKey: Self.Key) -> Int8",
      "desc": "Decodes a value of the given type for the given key."
    },
    {
      "name": "func decode(String.Type, forKey: Self.Key) -> String",
      "desc": "Decodes a value of the given type for the given key."
    },
    {
      "name": "func decode(Double.Type, forKey: Self.Key) -> Double",
      "desc": "Decodes a value of the given type for the given key."
    },
    {
      "name": "func decode(UInt.Type, forKey: Self.Key) -> UInt",
      "desc": "Decodes a value of the given type for the given key."
    },
    {
      "name": "func decode(UInt8.Type, forKey: Self.Key) -> UInt8",
      "desc": "Decodes a value of the given type for the given key."
    },
    {
      "name": "func decode(Int32.Type, forKey: Self.Key) -> Int32",
      "desc": "Decodes a value of the given type for the given key."
    },
    {
      "name": "func decode(Int.Type, forKey: Self.Key) -> Int",
      "desc": "Decodes a value of the given type for the given key."
    },
    {
      "name": "func decode<T>(T.Type, forKey: Self.Key) -> T",
      "desc": "Decodes a value of the given type for the given key."
    },
    {
      "name": "func decode(UInt32.Type, forKey: Self.Key) -> UInt32",
      "desc": "Decodes a value of the given type for the given key."
    },
    {
      "name": "func decode(UInt64.Type, forKey: Self.Key) -> UInt64",
      "desc": "Decodes a value of the given type for the given key."
    },
    {
      "name": "func decode(Int64.Type, forKey: Self.Key) -> Int64",
      "desc": "Decodes a value of the given type for the given key."
    },
    {
      "name": "func decodeIfPresent(String.Type, forKey: Self.Key) -> String?",
      "desc": "Decodes a value of the given type for the given key, if present."
    },
    {
      "name": "func decodeIfPresent(Bool.Type, forKey: Self.Key) -> Bool?",
      "desc": "Decodes a value of the given type for the given key, if present."
    },
    {
      "name": "func decodeIfPresent(Double.Type, forKey: Self.Key) -> Double?",
      "desc": "Decodes a value of the given type for the given key, if present."
    },
    {
      "name": "func decodeIfPresent(Float.Type, forKey: Self.Key) -> Float?",
      "desc": "Decodes a value of the given type for the given key, if present."
    },
    {
      "name": "func decodeIfPresent(Int.Type, forKey: Self.Key) -> Int?",
      "desc": "Decodes a value of the given type for the given key, if present."
    },
    {
      "name": "func decodeIfPresent(UInt.Type, forKey: Self.Key) -> UInt?",
      "desc": "Decodes a value of the given type for the given key, if present."
    },
    {
      "name": "func decodeIfPresent(Int8.Type, forKey: Self.Key) -> Int8?",
      "desc": "Decodes a value of the given type for the given key, if present."
    },
    {
      "name": "func decodeIfPresent(Int16.Type, forKey: Self.Key) -> Int16?",
      "desc": "Decodes a value of the given type for the given key, if present."
    },
    {
      "name": "func decodeIfPresent(Int32.Type, forKey: Self.Key) -> Int32?",
      "desc": "Decodes a value of the given type for the given key, if present."
    },
    {
      "name": "func decodeIfPresent(Int64.Type, forKey: Self.Key) -> Int64?",
      "desc": "Decodes a value of the given type for the given key, if present."
    },
    {
      "name": "func decodeIfPresent(UInt8.Type, forKey: Self.Key) -> UInt8?",
      "desc": "Decodes a value of the given type for the given key, if present."
    },
    {
      "name": "func decodeIfPresent(UInt16.Type, forKey: Self.Key) -> UInt16?",
      "desc": "Decodes a value of the given type for the given key, if present."
    },
    {
      "name": "func decodeIfPresent(UInt32.Type, forKey: Self.Key) -> UInt32?",
      "desc": "Decodes a value of the given type for the given key, if present."
    },
    {
      "name": "func decodeIfPresent(UInt64.Type, forKey: Self.Key) -> UInt64?",
      "desc": "Decodes a value of the given type for the given key, if present."
    },
    {
      "name": "func decodeIfPresent<T>(T.Type, forKey: Self.Key) -> T?",
      "desc": "Decodes a value of the given type for the given key, if present."
    },
    {
      "name": "func decodeNil(forKey: Self.Key) -> Bool",
      "desc": "Decodes a null value for the given key."
    },
    {
      "name": "func nestedContainer<NestedKey>(keyedBy: NestedKey.Type, forKey: Self.Key) -> KeyedDecodingContainer<NestedKey>",
      "desc": "Returns the data stored for the given key as represented in a container keyed by the given key type."
    },
    {
      "name": "func nestedUnkeyedContainer(forKey: Self.Key) -> UnkeyedDecodingContainer",
      "desc": "Returns the data stored for the given key as represented in an unkeyed container."
    },
    {
      "name": "func superDecoder() -> Decoder",
      "desc": "Returns a Decoder instance for decoding super from the container associated with the default super key."
    },
    {
      "name": "func superDecoder(forKey: Self.Key) -> Decoder",
      "desc": "Returns a Decoder instance for decoding super from the container associated with the given key."
    }
  ],
  "declaration": "protocol KeyedDecodingContainerProtocol"
}