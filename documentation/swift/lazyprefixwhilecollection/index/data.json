{
  "path": "/documentation/swift/lazyprefixwhilecollection/index",
  "type": "Structure",
  "name": "LazyPrefixWhileCollection.Index",
  "desc": "A position in a LazyPrefixWhileCollection or LazyPrefixWhileBidirectionalCollection instance.",
  "items": [
    {
      "name": "var hashValue: Int",
      "desc": "The hash value."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of this value by feeding them into the given hasher."
    },
    {
      "name": "static func != (LazyPrefixWhileSequence<Base>.Index, LazyPrefixWhileSequence<Base>.Index) -> Bool"
    },
    {
      "name": "static func ... (LazyPrefixWhileSequence<Base>.Index) -> PartialRangeFrom<LazyPrefixWhileSequence<Base>.Index>",
      "desc": "Returns a partial range extending upward from a lower bound."
    },
    {
      "name": "static func ... (LazyPrefixWhileSequence<Base>.Index) -> PartialRangeThrough<LazyPrefixWhileSequence<Base>.Index>",
      "desc": "Returns a partial range up to, and including, its upper bound."
    },
    {
      "name": "static func ... (LazyPrefixWhileSequence<Base>.Index, LazyPrefixWhileSequence<Base>.Index) -> ClosedRange<LazyPrefixWhileSequence<Base>.Index>",
      "desc": "Returns a closed range that contains both of its bounds."
    },
    {
      "name": "static func ..< (LazyPrefixWhileSequence<Base>.Index) -> PartialRangeUpTo<LazyPrefixWhileSequence<Base>.Index>",
      "desc": "Returns a partial range up to, but not including, its upper bound."
    },
    {
      "name": "static func ..< (LazyPrefixWhileSequence<Base>.Index, LazyPrefixWhileSequence<Base>.Index) -> Range<LazyPrefixWhileSequence<Base>.Index>",
      "desc": "Returns a half-open range that contains its lower bound but not its upper bound."
    },
    {
      "name": "static func < (LazyPrefixWhileCollection<Base>.Index, LazyPrefixWhileCollection<Base>.Index) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument."
    },
    {
      "name": "static func <= (LazyPrefixWhileSequence<Base>.Index, LazyPrefixWhileSequence<Base>.Index) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument."
    },
    {
      "name": "static func == (LazyPrefixWhileCollection<Base>.Index, LazyPrefixWhileCollection<Base>.Index) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are equal."
    },
    {
      "name": "static func > (LazyPrefixWhileSequence<Base>.Index, LazyPrefixWhileSequence<Base>.Index) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument."
    },
    {
      "name": "static func >= (LazyPrefixWhileSequence<Base>.Index, LazyPrefixWhileSequence<Base>.Index) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument."
    }
  ],
  "declaration": "@frozen struct Index",
  "conformsTo": [
    "Comparable",
    "Hashable"
  ]
}