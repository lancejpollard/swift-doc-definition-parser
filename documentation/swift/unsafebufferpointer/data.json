{
  "path": "/documentation/swift/unsafebufferpointer",
  "type": "Generic Structure",
  "name": "UnsafeBufferPointer",
  "desc": "A nonowning collection interface to a buffer of elements stored contiguously in memory.",
  "items": [
    {
      "name": "typealias UnsafeBufferPointer.Index",
      "desc": "A type that represents a position in the collection."
    },
    {
      "name": "typealias UnsafeBufferPointer.Indices",
      "desc": "A type that represents the indices that are valid for subscripting the collection, in ascending order."
    },
    {
      "name": "typealias UnsafeBufferPointer.Regions",
      "desc": "Available when Element is UInt8."
    },
    {
      "name": "typealias UnsafeBufferPointer.SubSequence",
      "desc": "A collection representing a contiguous subrange of this collection’s elements. The subsequence shares indices with the original collection."
    },
    {
      "name": "init(AudioBuffer)"
    },
    {
      "name": "init(UnsafeMutableBufferPointer<Element>)",
      "desc": "Creates an immutable typed buffer pointer referencing the same memory as the given mutable buffer pointer."
    },
    {
      "name": "init(MLMultiArray)"
    },
    {
      "name": "init(rebasing: Slice<UnsafeMutableBufferPointer<Element>>)",
      "desc": "Creates a buffer over the same memory as the given buffer slice."
    },
    {
      "name": "init(rebasing: Slice<UnsafeBufferPointer<Element>>)",
      "desc": "Creates a buffer over the same memory as the given buffer slice."
    },
    {
      "name": "init(start: UnsafePointer<Element>?, count: Int)",
      "desc": "Creates a new buffer pointer over the specified number of contiguous instances beginning at the given pointer."
    },
    {
      "name": "var baseAddress: UnsafePointer<Element>?",
      "desc": "A pointer to the first element of the buffer."
    },
    {
      "name": "let count: Int",
      "desc": "The number of elements in the buffer."
    },
    {
      "name": "var debugDescription: String",
      "desc": "A textual representation of the buffer, suitable for debugging."
    },
    {
      "name": "var endIndex: Int",
      "desc": "The “past the end” position—that is, the position one greater than the last valid subscript argument."
    },
    {
      "name": "var first: Element?",
      "desc": "The first element of the collection."
    },
    {
      "name": "var indices: UnsafeBufferPointer<Element>.Indices",
      "desc": "The indices that are valid for subscripting the collection, in ascending order."
    },
    {
      "name": "var isEmpty: Bool",
      "desc": "A Boolean value indicating whether the collection is empty."
    },
    {
      "name": "var last: Element?",
      "desc": "The last element of the collection."
    },
    {
      "name": "var lazy: LazySequence<UnsafeBufferPointer<Element>>",
      "desc": "A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily."
    },
    {
      "name": "var regions: CollectionOfOne<UnsafeBufferPointer<UInt8>>",
      "desc": "Available when Element is UInt8."
    },
    {
      "name": "var startIndex: Int",
      "desc": "The index of the first element in a nonempty buffer."
    },
    {
      "name": "var underestimatedCount: Int",
      "desc": "A value less than or equal to the number of elements in the collection."
    },
    {
      "name": "func allSatisfy((Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate."
    },
    {
      "name": "func compactMap<ElementOfResult>((Element) -> ElementOfResult?) -> [ElementOfResult]",
      "desc": "Returns an array containing the non-nil results of calling the given transformation with each element of this sequence."
    },
    {
      "name": "func contains(Element) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence contains the given element."
    },
    {
      "name": "func contains(where: (Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate."
    },
    {
      "name": "func deallocate()",
      "desc": "Deallocates the memory block previously allocated at this buffer pointer’s base address."
    },
    {
      "name": "func difference<C>(from: C) -> CollectionDifference<Element>",
      "desc": "Returns the difference needed to produce this collection’s ordered elements from the given collection."
    },
    {
      "name": "func difference<C>(from: C, by: (C.Element, Element) -> Bool) -> CollectionDifference<Element>",
      "desc": "Returns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test."
    },
    {
      "name": "func distance(from: Int, to: Int) -> Int",
      "desc": "Returns the distance between two indices."
    },
    {
      "name": "func drop(while: (Element) -> Bool) -> Slice<UnsafeBufferPointer<Element>>",
      "desc": "Returns a subsequence by skipping elements while predicate returns true and returning the remaining elements."
    },
    {
      "name": "func dropFirst(Int) -> Slice<UnsafeBufferPointer<Element>>",
      "desc": "Returns a subsequence containing all but the given number of initial elements."
    },
    {
      "name": "func dropLast(Int) -> Slice<UnsafeBufferPointer<Element>>",
      "desc": "Returns a subsequence containing all but the specified number of final elements."
    },
    {
      "name": "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
      "desc": "Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order."
    },
    {
      "name": "func elementsEqual<OtherSequence>(OtherSequence, by: (Element, OtherSequence.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test."
    },
    {
      "name": "func enumerated() -> EnumeratedSequence<UnsafeBufferPointer<Element>>",
      "desc": "Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence."
    },
    {
      "name": "func filter((Element) -> Bool) -> [Element]",
      "desc": "Returns an array containing, in order, the elements of the sequence that satisfy the given predicate."
    },
    {
      "name": "func first(where: (Element) -> Bool) -> Element?",
      "desc": "Returns the first element of the sequence that satisfies the given predicate."
    },
    {
      "name": "func firstIndex(of: Element) -> Int?",
      "desc": "Returns the first index where the specified value appears in the collection."
    },
    {
      "name": "func firstIndex(where: (Element) -> Bool) -> Int?",
      "desc": "Returns the first index in which an element of the collection satisfies the given predicate."
    },
    {
      "name": "func flatMap<SegmentOfResult>((Element) -> SegmentOfResult) -> [SegmentOfResult.Element]",
      "desc": "Returns an array containing the concatenated results of calling the given transformation with each element of this sequence."
    },
    {
      "name": "func forEach((Element) -> Void)",
      "desc": "Calls the given closure on each element in the sequence in the same order as a for-in loop."
    },
    {
      "name": "func formIndex(inout Int, offsetBy: Int)",
      "desc": "Offsets the given index by the specified distance."
    },
    {
      "name": "func formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool",
      "desc": "Offsets the given index by the specified distance, or so that it equals the given limiting index."
    },
    {
      "name": "func formIndex(after: inout Int)",
      "desc": "Replaces the given index with its successor."
    },
    {
      "name": "func formIndex(before: inout Int)",
      "desc": "Replaces the given index with its predecessor."
    },
    {
      "name": "func index(Int, offsetBy: Int) -> Int",
      "desc": "Returns an index that is the specified distance from the given index."
    },
    {
      "name": "func index(Int, offsetBy: Int, limitedBy: Int) -> Int?",
      "desc": "Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index."
    },
    {
      "name": "func index(after: Int) -> Int",
      "desc": "Returns the position immediately after the given index."
    },
    {
      "name": "func index(before: Int) -> Int",
      "desc": "Returns the position immediately before the given index."
    },
    {
      "name": "func joined() -> FlattenSequence<UnsafeBufferPointer<Element>>",
      "desc": "Returns the elements of this sequence of sequences, concatenated."
    },
    {
      "name": "func joined<Separator>(separator: Separator) -> JoinedSequence<UnsafeBufferPointer<Element>>",
      "desc": "Returns the concatenated elements of this sequence of sequences, inserting the given separator between each element."
    },
    {
      "name": "func joined(separator: String) -> String",
      "desc": "Returns a new string by concatenating the elements of the sequence, adding the given separator between each element."
    },
    {
      "name": "func joined(separator: String) -> String",
      "desc": "Returns a new string by concatenating the elements of the sequence, adding the given separator between each element."
    },
    {
      "name": "func last(where: (Element) -> Bool) -> Element?",
      "desc": "Returns the last element of the sequence that satisfies the given predicate."
    },
    {
      "name": "func lastIndex(of: Element) -> Int?",
      "desc": "Returns the last index where the specified value appears in the collection."
    },
    {
      "name": "func lastIndex(where: (Element) -> Bool) -> Int?",
      "desc": "Returns the index of the last element in the collection that matches the given predicate."
    },
    {
      "name": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements."
    },
    {
      "name": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Element, Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements."
    },
    {
      "name": "func makeIterator() -> UnsafeBufferPointer<Element>.Iterator",
      "desc": "Returns an iterator over the elements of this buffer."
    },
    {
      "name": "func map<T>((Element) -> T) -> [T]",
      "desc": "Returns an array containing the results of mapping the given closure over the sequence’s elements."
    },
    {
      "name": "func max() -> Element?",
      "desc": "Returns the maximum element in the sequence."
    },
    {
      "name": "func max(by: (Element, Element) -> Bool) -> Element?",
      "desc": "Returns the maximum element in the sequence, using the given predicate as the comparison between elements."
    },
    {
      "name": "func min() -> Element?",
      "desc": "Returns the minimum element in the sequence."
    },
    {
      "name": "func min(by: (Element, Element) -> Bool) -> Element?",
      "desc": "Returns the minimum element in the sequence, using the given predicate as the comparison between elements."
    },
    {
      "name": "func prefix(Int) -> Slice<UnsafeBufferPointer<Element>>",
      "desc": "Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection."
    },
    {
      "name": "func prefix(through: Int) -> Slice<UnsafeBufferPointer<Element>>",
      "desc": "Returns a subsequence from the start of the collection through the specified position."
    },
    {
      "name": "func prefix(upTo: Int) -> Slice<UnsafeBufferPointer<Element>>",
      "desc": "Returns a subsequence from the start of the collection up to, but not including, the specified position."
    },
    {
      "name": "func prefix(while: (Element) -> Bool) -> Slice<UnsafeBufferPointer<Element>>",
      "desc": "Returns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements."
    },
    {
      "name": "func randomElement() -> Element?",
      "desc": "Returns a random element of the collection."
    },
    {
      "name": "func randomElement<T>(using: inout T) -> Element?",
      "desc": "Returns a random element of the collection, using the given generator as a source for randomness."
    },
    {
      "name": "func reduce<Result>(Result, (Result, Element) -> Result) -> Result",
      "desc": "Returns the result of combining the elements of the sequence using the given closure."
    },
    {
      "name": "func reduce<Result>(into: Result, (inout Result, Element) -> ()) -> Result",
      "desc": "Returns the result of combining the elements of the sequence using the given closure."
    },
    {
      "name": "func reversed() -> ReversedCollection<UnsafeBufferPointer<Element>>",
      "desc": "Returns a view presenting the elements of the collection in reverse order."
    },
    {
      "name": "func shuffled() -> [Element]",
      "desc": "Returns the elements of the sequence, shuffled."
    },
    {
      "name": "func shuffled<T>(using: inout T) -> [Element]",
      "desc": "Returns the elements of the sequence, shuffled using the given generator as a source for randomness."
    },
    {
      "name": "func sorted() -> [Element]",
      "desc": "Returns the elements of the sequence, sorted."
    },
    {
      "name": "func sorted(by: (Element, Element) -> Bool) -> [Element]",
      "desc": "Returns the elements of the sequence, sorted using the given predicate as the comparison between elements."
    },
    {
      "name": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Element) -> Bool) -> [Slice<UnsafeBufferPointer<Element>>]",
      "desc": "Returns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
    },
    {
      "name": "func split(separator: Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Slice<UnsafeBufferPointer<Element>>]",
      "desc": "Returns the longest possible subsequences of the collection, in order, around elements equal to the given element."
    },
    {
      "name": "func split(separator: Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Element>]",
      "desc": "Returns the longest possible subsequences of the sequence, in order, around elements equal to the given element."
    },
    {
      "name": "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
      "desc": "Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence."
    },
    {
      "name": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Element, PossiblePrefix.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test."
    },
    {
      "name": "func suffix(Int) -> Slice<UnsafeBufferPointer<Element>>",
      "desc": "Returns a subsequence, up to the given maximum length, containing the final elements of the collection."
    },
    {
      "name": "func suffix(from: Int) -> Slice<UnsafeBufferPointer<Element>>",
      "desc": "Returns a subsequence from the specified position to the end of the collection."
    },
    {
      "name": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Element>) -> R) -> R?",
      "desc": "Executes a closure on the sequence’s contiguous storage."
    },
    {
      "name": "func withMemoryRebound<T, Result>(to: T.Type, (UnsafeBufferPointer<T>) -> Result) -> Result",
      "desc": "Executes the given closure while temporarily binding the memory referenced by this buffer to the given type."
    },
    {
      "name": "func withUnsafeBytes<R>((UnsafeRawBufferPointer) -> R) -> R",
      "desc": "Available when Element is UInt8."
    },
    {
      "name": "subscript(Int) -> Element",
      "desc": "Accesses the element at the specified position."
    },
    {
      "name": "subscript<R>(R) -> Slice<UnsafeBufferPointer<Element>>",
      "desc": "Accesses the contiguous subrange of the collection’s elements specified by a range expression."
    },
    {
      "name": "subscript((UnboundedRange_) -> ()) -> Slice<UnsafeBufferPointer<Element>>"
    },
    {
      "name": "subscript(Range<Int>) -> Slice<UnsafeBufferPointer<Element>>",
      "desc": "Accesses a contiguous subrange of the buffer’s elements."
    },
    {
      "name": "struct UnsafeBufferPointer.Iterator",
      "desc": "An iterator for the elements in the buffer referenced by an UnsafeBufferPointer or UnsafeMutableBufferPointer instance."
    }
  ],
  "declaration": "@frozen struct UnsafeBufferPointer<Element>",
  "conformsTo": [
    "AccelerateBuffer",
    "Collection",
    "ContiguousBytes",
    "CustomDebugStringConvertible",
    "DataProtocol",
    "RandomAccessCollection",
    "Sequence"
  ]
}