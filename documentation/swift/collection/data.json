{
  "path": "/documentation/swift/collection",
  "type": "Protocol",
  "name": "Collection",
  "desc": "A sequence whose elements can be traversed multiple times, nondestructively, and accessed by an indexed subscript.",
  "items": [
    {
      "name": "subscript(Self.Index) -> Self.Element",
      "desc": "Accesses the element at the specified position."
    },
    {
      "name": "func popFirst() -> Self.Element?",
      "desc": "Removes and returns the first element of the collection."
    },
    {
      "name": "func removeFirst() -> Self.Element",
      "desc": "Removes and returns the first element of the collection."
    },
    {
      "name": "func removeFirst(Int)",
      "desc": "Removes the specified number of elements from the beginning of the collection."
    },
    {
      "name": "var startIndex: Self.Index",
      "desc": "The position of the first element in a nonempty collection."
    },
    {
      "name": "var endIndex: Self.Index",
      "desc": "The collection’s “past the end” position—that is, the position one greater than the last valid subscript argument."
    },
    {
      "name": "var indices: Self.Indices",
      "desc": "The indices that are valid for subscripting the collection, in ascending order."
    },
    {
      "name": "func index(after: Self.Index) -> Self.Index",
      "desc": "Returns the position immediately after the given index."
    },
    {
      "name": "func formIndex(inout Self.Index, offsetBy: Int)",
      "desc": "Offsets the given index by the specified distance."
    },
    {
      "name": "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
      "desc": "Offsets the given index by the specified distance, or so that it equals the given limiting index."
    },
    {
      "name": "associatedtype Element"
    },
    {
      "name": "associatedtype Index",
      "desc": "A type that represents a position in the collection."
    },
    {
      "name": "associatedtype Indices",
      "desc": "A type that represents the indices that are valid for subscripting the collection, in ascending order."
    },
    {
      "name": "associatedtype Iterator",
      "desc": "A type that provides the collection’s iteration interface and encapsulates its iteration state."
    },
    {
      "name": "associatedtype SubSequence",
      "desc": "A collection representing a contiguous subrange of this collection’s elements. The subsequence shares indices with the original collection."
    },
    {
      "name": "func makeIterator() -> Self.Iterator",
      "desc": "Returns an iterator over the elements of the collection."
    },
    {
      "name": "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
      "desc": "Returns the longest possible subsequences of the collection, in order, around elements equal to the given element."
    },
    {
      "name": "var count: Int",
      "desc": "The number of elements in the collection."
    },
    {
      "name": "var first: Self.Element?",
      "desc": "The first element of the collection."
    },
    {
      "name": "var isEmpty: Bool",
      "desc": "A Boolean value indicating whether the collection is empty."
    },
    {
      "name": "func distance(from: Self.Index, to: Self.Index) -> Int",
      "desc": "Returns the distance between two indices."
    },
    {
      "name": "func drop(while: (Self.Element) -> Bool) -> Self.SubSequence",
      "desc": "Returns a subsequence by skipping elements while predicate returns true and returning the remaining elements."
    },
    {
      "name": "func dropFirst(Int) -> Self.SubSequence",
      "desc": "Returns a subsequence containing all but the given number of initial elements."
    },
    {
      "name": "func dropLast(Int) -> Self.SubSequence",
      "desc": "Returns a subsequence containing all but the specified number of final elements."
    },
    {
      "name": "func firstIndex(of: Self.Element) -> Self.Index?",
      "desc": "Returns the first index where the specified value appears in the collection."
    },
    {
      "name": "func firstIndex(where: (Self.Element) -> Bool) -> Self.Index?",
      "desc": "Returns the first index in which an element of the collection satisfies the given predicate."
    },
    {
      "name": "func formIndex(after: inout Self.Index)",
      "desc": "Replaces the given index with its successor."
    },
    {
      "name": "func index(Self.Index, offsetBy: Int) -> Self.Index",
      "desc": "Returns an index that is the specified distance from the given index."
    },
    {
      "name": "func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?",
      "desc": "Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index."
    },
    {
      "name": "func map<T>((Self.Element) -> T) -> [T]",
      "desc": "Returns an array containing the results of mapping the given closure over the sequence’s elements."
    },
    {
      "name": "func prefix(Int) -> Self.SubSequence",
      "desc": "Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection."
    },
    {
      "name": "func prefix(through: Self.Index) -> Self.SubSequence",
      "desc": "Returns a subsequence from the start of the collection through the specified position."
    },
    {
      "name": "func prefix(upTo: Self.Index) -> Self.SubSequence",
      "desc": "Returns a subsequence from the start of the collection up to, but not including, the specified position."
    },
    {
      "name": "func prefix(while: (Self.Element) -> Bool) -> Self.SubSequence",
      "desc": "Returns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements."
    },
    {
      "name": "func randomElement() -> Self.Element?",
      "desc": "Returns a random element of the collection."
    },
    {
      "name": "func randomElement<T>(using: inout T) -> Self.Element?",
      "desc": "Returns a random element of the collection, using the given generator as a source for randomness."
    },
    {
      "name": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) -> Bool) -> [Self.SubSequence]",
      "desc": "Returns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
    },
    {
      "name": "func suffix(Int) -> Self.SubSequence",
      "desc": "Returns a subsequence, up to the given maximum length, containing the final elements of the collection."
    },
    {
      "name": "func suffix(from: Self.Index) -> Self.SubSequence",
      "desc": "Returns a subsequence from the specified position to the end of the collection."
    },
    {
      "name": "subscript(Range<Self.Index>) -> Self.SubSequence",
      "desc": "Accesses a contiguous subrange of the collection’s elements."
    }
  ],
  "declaration": "protocol Collection",
  "inheritsFrom": [
    "Sequence"
  ]
}