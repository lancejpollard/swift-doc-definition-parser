{
  "path": "/documentation/swift/string/unicodescalarview",
  "type": "Structure",
  "name": "String.UnicodeScalarView",
  "desc": "A view of a string’s contents as a collection of Unicode scalar values.",
  "items": [
    {
      "name": "typealias String.UnicodeScalarView.Index",
      "desc": "A type that represents a position in the collection."
    },
    {
      "name": "typealias String.UnicodeScalarView.Element",
      "desc": "A type representing the sequence’s elements."
    },
    {
      "name": "typealias String.UnicodeScalarView.Indices",
      "desc": "A type that represents the indices that are valid for subscripting the collection, in ascending order."
    },
    {
      "name": "typealias String.UnicodeScalarView.SubSequence",
      "desc": "A collection representing a contiguous subrange of this collection’s elements. The subsequence shares indices with the original collection."
    },
    {
      "name": "init()",
      "desc": "Creates an empty view instance."
    },
    {
      "name": "init<S>(S)",
      "desc": "Creates a new instance of a collection containing the elements of a sequence."
    },
    {
      "name": "init(repeating: Unicode.Scalar, count: Int)",
      "desc": "Creates a new collection containing the specified number of a single, repeated value."
    },
    {
      "name": "var count: Int",
      "desc": "The number of elements in the collection."
    },
    {
      "name": "var customMirror: Mirror",
      "desc": "Returns a mirror that reflects the Unicode scalars view of a string."
    },
    {
      "name": "var debugDescription: String",
      "desc": "A textual representation of this instance, suitable for debugging."
    },
    {
      "name": "var description: String",
      "desc": "A textual representation of this instance."
    },
    {
      "name": "var endIndex: String.UnicodeScalarView.Index",
      "desc": "The “past the end” position—that is, the position one greater than the last valid subscript argument."
    },
    {
      "name": "var first: Unicode.Scalar?",
      "desc": "The first element of the collection."
    },
    {
      "name": "var indices: DefaultIndices<String.UnicodeScalarView>",
      "desc": "The indices that are valid for subscripting the collection, in ascending order."
    },
    {
      "name": "var isEmpty: Bool",
      "desc": "A Boolean value indicating whether the collection is empty."
    },
    {
      "name": "var last: Unicode.Scalar?",
      "desc": "The last element of the collection."
    },
    {
      "name": "var lazy: LazySequence<String.UnicodeScalarView>",
      "desc": "A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily."
    },
    {
      "name": "var startIndex: String.UnicodeScalarView.Index",
      "desc": "The position of the first Unicode scalar value if the string is nonempty."
    },
    {
      "name": "var underestimatedCount: Int",
      "desc": "A value less than or equal to the number of elements in the collection."
    },
    {
      "name": "func allSatisfy((Unicode.Scalar) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate."
    },
    {
      "name": "func append(Unicode.Scalar)",
      "desc": "Appends the given Unicode scalar to the view."
    },
    {
      "name": "func append<S>(contentsOf: S)",
      "desc": "Appends the Unicode scalar values in the given sequence to the view."
    },
    {
      "name": "func append<S>(contentsOf: S)",
      "desc": "Adds the elements of a sequence or collection to the end of this collection."
    },
    {
      "name": "func applying(CollectionDifference<Unicode.Scalar>) -> String.UnicodeScalarView?",
      "desc": "Applies the given difference to this collection."
    },
    {
      "name": "func compactMap<ElementOfResult>((Unicode.Scalar) -> ElementOfResult?) -> [ElementOfResult]",
      "desc": "Returns an array containing the non-nil results of calling the given transformation with each element of this sequence."
    },
    {
      "name": "func contains(Unicode.Scalar) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence contains the given element."
    },
    {
      "name": "func contains(where: (Unicode.Scalar) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate."
    },
    {
      "name": "func difference<C>(from: C) -> CollectionDifference<Unicode.Scalar>",
      "desc": "Returns the difference needed to produce this collection’s ordered elements from the given collection."
    },
    {
      "name": "func difference<C>(from: C, by: (C.Element, Unicode.Scalar) -> Bool) -> CollectionDifference<Unicode.Scalar>",
      "desc": "Returns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test."
    },
    {
      "name": "func distance(from: String.UnicodeScalarView.Index, to: String.UnicodeScalarView.Index) -> Int",
      "desc": "Returns the distance between two indices."
    },
    {
      "name": "func drop(while: (Unicode.Scalar) -> Bool) -> Substring.UnicodeScalarView",
      "desc": "Returns a subsequence by skipping elements while predicate returns true and returning the remaining elements."
    },
    {
      "name": "func dropFirst(Int) -> Substring.UnicodeScalarView",
      "desc": "Returns a subsequence containing all but the given number of initial elements."
    },
    {
      "name": "func dropLast(Int) -> Substring.UnicodeScalarView",
      "desc": "Returns a subsequence containing all but the specified number of final elements."
    },
    {
      "name": "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
      "desc": "Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order."
    },
    {
      "name": "func elementsEqual<OtherSequence>(OtherSequence, by: (Unicode.Scalar, OtherSequence.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test."
    },
    {
      "name": "func enumerated() -> EnumeratedSequence<String.UnicodeScalarView>",
      "desc": "Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence."
    },
    {
      "name": "func filter((Unicode.Scalar) -> Bool) -> String.UnicodeScalarView",
      "desc": "Returns a new collection of the same type containing, in order, the elements of the original collection that satisfy the given predicate."
    },
    {
      "name": "func first(where: (Unicode.Scalar) -> Bool) -> Unicode.Scalar?",
      "desc": "Returns the first element of the sequence that satisfies the given predicate."
    },
    {
      "name": "func firstIndex(of: Unicode.Scalar) -> String.Index?",
      "desc": "Returns the first index where the specified value appears in the collection."
    },
    {
      "name": "func firstIndex(where: (Unicode.Scalar) -> Bool) -> String.Index?",
      "desc": "Returns the first index in which an element of the collection satisfies the given predicate."
    },
    {
      "name": "func flatMap<SegmentOfResult>((Unicode.Scalar) -> SegmentOfResult) -> [SegmentOfResult.Element]",
      "desc": "Returns an array containing the concatenated results of calling the given transformation with each element of this sequence."
    },
    {
      "name": "func forEach((Unicode.Scalar) -> Void)",
      "desc": "Calls the given closure on each element in the sequence in the same order as a for-in loop."
    },
    {
      "name": "func formIndex(inout String.Index, offsetBy: Int)",
      "desc": "Offsets the given index by the specified distance."
    },
    {
      "name": "func formIndex(inout String.Index, offsetBy: Int, limitedBy: String.Index) -> Bool",
      "desc": "Offsets the given index by the specified distance, or so that it equals the given limiting index."
    },
    {
      "name": "func formIndex(after: inout String.Index)",
      "desc": "Replaces the given index with its successor."
    },
    {
      "name": "func formIndex(before: inout String.Index)",
      "desc": "Replaces the given index with its predecessor."
    },
    {
      "name": "func index(String.Index, offsetBy: Int) -> String.Index",
      "desc": "Returns an index that is the specified distance from the given index."
    },
    {
      "name": "func index(String.Index, offsetBy: Int, limitedBy: String.Index) -> String.Index?",
      "desc": "Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index."
    },
    {
      "name": "func index(after: String.UnicodeScalarView.Index) -> String.UnicodeScalarView.Index",
      "desc": "Returns the next consecutive location after i."
    },
    {
      "name": "func index(before: String.UnicodeScalarView.Index) -> String.UnicodeScalarView.Index",
      "desc": "Returns the previous consecutive location before i."
    },
    {
      "name": "func insert(Unicode.Scalar, at: String.Index)",
      "desc": "Inserts a new element into the collection at the specified position."
    },
    {
      "name": "func insert<C>(contentsOf: C, at: String.Index)",
      "desc": "Inserts the elements of a sequence into the collection at the specified position."
    },
    {
      "name": "func last(where: (Unicode.Scalar) -> Bool) -> Unicode.Scalar?",
      "desc": "Returns the last element of the sequence that satisfies the given predicate."
    },
    {
      "name": "func lastIndex(of: Unicode.Scalar) -> String.Index?",
      "desc": "Returns the last index where the specified value appears in the collection."
    },
    {
      "name": "func lastIndex(where: (Unicode.Scalar) -> Bool) -> String.Index?",
      "desc": "Returns the index of the last element in the collection that matches the given predicate."
    },
    {
      "name": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements."
    },
    {
      "name": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Unicode.Scalar, Unicode.Scalar) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements."
    },
    {
      "name": "func makeIterator() -> String.UnicodeScalarView.Iterator",
      "desc": "Returns an iterator over the elements of the collection."
    },
    {
      "name": "func map<T>((Unicode.Scalar) -> T) -> [T]",
      "desc": "Returns an array containing the results of mapping the given closure over the sequence’s elements."
    },
    {
      "name": "func max() -> Unicode.Scalar?",
      "desc": "Returns the maximum element in the sequence."
    },
    {
      "name": "func max(by: (Unicode.Scalar, Unicode.Scalar) -> Bool) -> Unicode.Scalar?",
      "desc": "Returns the maximum element in the sequence, using the given predicate as the comparison between elements."
    },
    {
      "name": "func min() -> Unicode.Scalar?",
      "desc": "Returns the minimum element in the sequence."
    },
    {
      "name": "func min(by: (Unicode.Scalar, Unicode.Scalar) -> Bool) -> Unicode.Scalar?",
      "desc": "Returns the minimum element in the sequence, using the given predicate as the comparison between elements."
    },
    {
      "name": "func popLast() -> Unicode.Scalar?",
      "desc": "Removes and returns the last element of the collection."
    },
    {
      "name": "func prefix(Int) -> Substring.UnicodeScalarView",
      "desc": "Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection."
    },
    {
      "name": "func prefix(through: String.Index) -> Substring.UnicodeScalarView",
      "desc": "Returns a subsequence from the start of the collection through the specified position."
    },
    {
      "name": "func prefix(upTo: String.Index) -> Substring.UnicodeScalarView",
      "desc": "Returns a subsequence from the start of the collection up to, but not including, the specified position."
    },
    {
      "name": "func prefix(while: (Unicode.Scalar) -> Bool) -> Substring.UnicodeScalarView",
      "desc": "Returns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements."
    },
    {
      "name": "func randomElement() -> Unicode.Scalar?",
      "desc": "Returns a random element of the collection."
    },
    {
      "name": "func randomElement<T>(using: inout T) -> Unicode.Scalar?",
      "desc": "Returns a random element of the collection, using the given generator as a source for randomness."
    },
    {
      "name": "func reduce<Result>(Result, (Result, Unicode.Scalar) -> Result) -> Result",
      "desc": "Returns the result of combining the elements of the sequence using the given closure."
    },
    {
      "name": "func reduce<Result>(into: Result, (inout Result, Unicode.Scalar) -> ()) -> Result",
      "desc": "Returns the result of combining the elements of the sequence using the given closure."
    },
    {
      "name": "func remove(at: String.Index) -> Unicode.Scalar",
      "desc": "Removes and returns the element at the specified position."
    },
    {
      "name": "func removeAll(keepingCapacity: Bool)",
      "desc": "Removes all elements from the collection."
    },
    {
      "name": "func removeAll(where: (Unicode.Scalar) -> Bool)",
      "desc": "Removes all the elements that satisfy the given predicate."
    },
    {
      "name": "func removeFirst() -> Unicode.Scalar",
      "desc": "Removes and returns the first element of the collection."
    },
    {
      "name": "func removeFirst(Int)",
      "desc": "Removes the specified number of elements from the beginning of the collection."
    },
    {
      "name": "func removeLast() -> Unicode.Scalar",
      "desc": "Removes and returns the last element of the collection."
    },
    {
      "name": "func removeLast(Int)",
      "desc": "Removes the specified number of elements from the end of the collection."
    },
    {
      "name": "func removeSubrange(Range<String.Index>)",
      "desc": "Removes the elements in the specified subrange from the collection."
    },
    {
      "name": "func removeSubrange<R>(R)",
      "desc": "Removes the elements in the specified subrange from the collection."
    },
    {
      "name": "func replaceSubrange<C>(Range<String.UnicodeScalarView.Index>, with: C)",
      "desc": "Replaces the elements within the specified bounds with the given Unicode scalar values."
    },
    {
      "name": "func replaceSubrange<C, R>(R, with: C)",
      "desc": "Replaces the specified subrange of elements with the given collection."
    },
    {
      "name": "func reserveCapacity(Int)",
      "desc": "Reserves enough space in the view’s underlying storage to store the specified number of ASCII characters."
    },
    {
      "name": "func reversed() -> ReversedCollection<String.UnicodeScalarView>",
      "desc": "Returns a view presenting the elements of the collection in reverse order."
    },
    {
      "name": "func shuffled() -> [Unicode.Scalar]",
      "desc": "Returns the elements of the sequence, shuffled."
    },
    {
      "name": "func shuffled<T>(using: inout T) -> [Unicode.Scalar]",
      "desc": "Returns the elements of the sequence, shuffled using the given generator as a source for randomness."
    },
    {
      "name": "func sorted() -> [Unicode.Scalar]",
      "desc": "Returns the elements of the sequence, sorted."
    },
    {
      "name": "func sorted(by: (Unicode.Scalar, Unicode.Scalar) -> Bool) -> [Unicode.Scalar]",
      "desc": "Returns the elements of the sequence, sorted using the given predicate as the comparison between elements."
    },
    {
      "name": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Unicode.Scalar) -> Bool) -> [Substring.UnicodeScalarView]",
      "desc": "Returns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
    },
    {
      "name": "func split(separator: Unicode.Scalar, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Substring.UnicodeScalarView]",
      "desc": "Returns the longest possible subsequences of the collection, in order, around elements equal to the given element."
    },
    {
      "name": "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
      "desc": "Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence."
    },
    {
      "name": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Unicode.Scalar, PossiblePrefix.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test."
    },
    {
      "name": "func suffix(Int) -> Substring.UnicodeScalarView",
      "desc": "Returns a subsequence, up to the given maximum length, containing the final elements of the collection."
    },
    {
      "name": "func suffix(from: String.Index) -> Substring.UnicodeScalarView",
      "desc": "Returns a subsequence from the specified position to the end of the collection."
    },
    {
      "name": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Unicode.Scalar>) -> R) -> R?",
      "desc": "Executes a closure on the sequence’s contiguous storage."
    },
    {
      "name": "subscript(String.UnicodeScalarView.Index) -> Unicode.Scalar",
      "desc": "Accesses the Unicode scalar value at the given position."
    },
    {
      "name": "subscript(Range<String.UnicodeScalarView.Index>) -> String.UnicodeScalarView.SubSequence",
      "desc": "Accesses a contiguous subrange of the collection’s elements."
    },
    {
      "name": "subscript<R>(R) -> Substring.UnicodeScalarView",
      "desc": "Accesses the contiguous subrange of the collection’s elements specified by a range expression."
    },
    {
      "name": "subscript((UnboundedRange_) -> ()) -> Substring.UnicodeScalarView"
    },
    {
      "name": "static func + <Other>(Other, String.UnicodeScalarView) -> String.UnicodeScalarView",
      "desc": "Creates a new collection by concatenating the elements of a sequence and a collection."
    },
    {
      "name": "static func + <Other>(String.UnicodeScalarView, Other) -> String.UnicodeScalarView",
      "desc": "Creates a new collection by concatenating the elements of a collection and a sequence."
    },
    {
      "name": "static func + <Other>(String.UnicodeScalarView, Other) -> String.UnicodeScalarView",
      "desc": "Creates a new collection by concatenating the elements of two collections."
    },
    {
      "name": "static func += <Other>(inout String.UnicodeScalarView, Other)",
      "desc": "Appends the elements of a sequence to a range-replaceable collection."
    },
    {
      "name": "struct String.UnicodeScalarView.Iterator",
      "desc": "A type that provides the collection’s iteration interface and encapsulates its iteration state."
    }
  ],
  "declaration": "@frozen struct UnicodeScalarView",
  "conformsTo": [
    "BidirectionalCollection",
    "CustomDebugStringConvertible",
    "CustomReflectable",
    "CustomStringConvertible",
    "RangeReplaceableCollection",
    "Sendable"
  ]
}