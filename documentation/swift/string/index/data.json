{
  "path": "/documentation/swift/string/index",
  "type": "Structure",
  "name": "String.Index",
  "desc": "A position of a character or code unit in a string.",
  "items": [
    {
      "name": "init?(String.Index, within: String.UTF16View)",
      "desc": "Creates an index in the given UTF-16 view that corresponds exactly to the specified string position."
    },
    {
      "name": "init?(String.Index, within: String.UTF8View)",
      "desc": "Creates an index in the given UTF-8 view that corresponds exactly to the specified UTF16View position."
    },
    {
      "name": "init?(String.Index, within: String)",
      "desc": "Creates an index in the given string that corresponds exactly to the specified position."
    },
    {
      "name": "init?(String.Index, within: String.UnicodeScalarView)",
      "desc": "Creates an index in the given Unicode scalars view that corresponds exactly to the specified UTF16View position."
    },
    {
      "name": "init?<S>(String.Index, within: S)",
      "desc": "Creates an index in the given string that corresponds exactly to the specified position."
    },
    {
      "name": "init?<S>(AttributedString.Index, within: S)"
    },
    {
      "name": "init<S>(utf16Offset: Int, in: S)",
      "desc": "Creates a new index at the specified UTF-16 code unit offset"
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of this value by feeding them into the given hasher."
    },
    {
      "name": "func samePosition(in: String) -> String.Index?",
      "desc": "Returns the position in the given string that corresponds exactly to this index."
    },
    {
      "name": "func samePosition(in: String.UTF8View) -> String.UTF8View.Index?",
      "desc": "Returns the position in the given UTF-8 view that corresponds exactly to this index."
    },
    {
      "name": "func samePosition(in: String.UnicodeScalarView) -> String.UnicodeScalarIndex?",
      "desc": "Returns the position in the given view of Unicode scalars that corresponds exactly to this index."
    },
    {
      "name": "func samePosition(in: String.UTF16View) -> String.UTF16View.Index?",
      "desc": "Returns the position in the given UTF-16 view that corresponds exactly to this index."
    },
    {
      "name": "func utf16Offset<S>(in: S) -> Int",
      "desc": "The UTF-16 code unit offset corresponding to this Index"
    },
    {
      "name": "static func != (String.Index, String.Index) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are not equal."
    },
    {
      "name": "static func ... (String.Index) -> PartialRangeFrom<String.Index>",
      "desc": "Returns a partial range extending upward from a lower bound."
    },
    {
      "name": "static func ... (String.Index) -> PartialRangeThrough<String.Index>",
      "desc": "Returns a partial range up to, and including, its upper bound."
    },
    {
      "name": "static func ... (String.Index, String.Index) -> ClosedRange<String.Index>",
      "desc": "Returns a closed range that contains both of its bounds."
    },
    {
      "name": "static func ..< (String.Index) -> PartialRangeUpTo<String.Index>",
      "desc": "Returns a partial range up to, but not including, its upper bound."
    },
    {
      "name": "static func ..< (String.Index, String.Index) -> Range<String.Index>",
      "desc": "Returns a half-open range that contains its lower bound but not its upper bound."
    },
    {
      "name": "static func < (String.Index, String.Index) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument."
    },
    {
      "name": "static func <= (String.Index, String.Index) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument."
    },
    {
      "name": "static func == (String.Index, String.Index) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are equal."
    },
    {
      "name": "static func > (String.Index, String.Index) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument."
    },
    {
      "name": "static func >= (String.Index, String.Index) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument."
    }
  ],
  "declaration": "@frozen struct Index",
  "conformsTo": [
    "Comparable",
    "Equatable",
    "Hashable",
    "Sendable"
  ]
}