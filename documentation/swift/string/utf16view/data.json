{
  "path": "/documentation/swift/string/utf16view",
  "type": "Structure",
  "name": "String.UTF16View",
  "desc": "A view of a string’s contents as a collection of UTF-16 code units.",
  "items": [
    {
      "name": "typealias String.UTF16View.Index",
      "desc": "A type that represents a position in the collection."
    },
    {
      "name": "typealias String.UTF16View.Element",
      "desc": "A type representing the sequence’s elements."
    },
    {
      "name": "typealias String.UTF16View.Indices",
      "desc": "A type that represents the indices that are valid for subscripting the collection, in ascending order."
    },
    {
      "name": "typealias String.UTF16View.SubSequence",
      "desc": "A collection representing a contiguous subrange of this collection’s elements. The subsequence shares indices with the original collection."
    },
    {
      "name": "var count: Int",
      "desc": "The number of elements in the collection."
    },
    {
      "name": "var customMirror: Mirror",
      "desc": "Returns a mirror that reflects the UTF-16 view of a string."
    },
    {
      "name": "var debugDescription: String",
      "desc": "A textual representation of this instance, suitable for debugging."
    },
    {
      "name": "var description: String",
      "desc": "A textual representation of this instance."
    },
    {
      "name": "var endIndex: String.UTF16View.Index",
      "desc": "The “past the end” position—that is, the position one greater than the last valid subscript argument."
    },
    {
      "name": "var first: UTF16.CodeUnit?",
      "desc": "The first element of the collection."
    },
    {
      "name": "var indices: DefaultIndices<String.UTF16View>",
      "desc": "The indices that are valid for subscripting the collection, in ascending order."
    },
    {
      "name": "var isEmpty: Bool",
      "desc": "A Boolean value indicating whether the collection is empty."
    },
    {
      "name": "var last: UTF16.CodeUnit?",
      "desc": "The last element of the collection."
    },
    {
      "name": "var lazy: LazySequence<String.UTF16View>",
      "desc": "A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily."
    },
    {
      "name": "var startIndex: String.UTF16View.Index",
      "desc": "The position of the first code unit if the String is nonempty; identical to endIndex otherwise."
    },
    {
      "name": "var underestimatedCount: Int",
      "desc": "A value less than or equal to the number of elements in the collection."
    },
    {
      "name": "func allSatisfy((UTF16.CodeUnit) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate."
    },
    {
      "name": "func compactMap<ElementOfResult>((UTF16.CodeUnit) -> ElementOfResult?) -> [ElementOfResult]",
      "desc": "Returns an array containing the non-nil results of calling the given transformation with each element of this sequence."
    },
    {
      "name": "func contains(UTF16.CodeUnit) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence contains the given element."
    },
    {
      "name": "func contains(where: (UTF16.CodeUnit) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate."
    },
    {
      "name": "func difference<C>(from: C) -> CollectionDifference<UTF16.CodeUnit>",
      "desc": "Returns the difference needed to produce this collection’s ordered elements from the given collection."
    },
    {
      "name": "func difference<C>(from: C, by: (C.Element, UTF16.CodeUnit) -> Bool) -> CollectionDifference<UTF16.CodeUnit>",
      "desc": "Returns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test."
    },
    {
      "name": "func distance(from: String.UTF16View.Index, to: String.UTF16View.Index) -> Int",
      "desc": "Returns the distance between two indices."
    },
    {
      "name": "func drop(while: (UTF16.CodeUnit) -> Bool) -> Substring.UTF16View",
      "desc": "Returns a subsequence by skipping elements while predicate returns true and returning the remaining elements."
    },
    {
      "name": "func dropFirst(Int) -> Substring.UTF16View",
      "desc": "Returns a subsequence containing all but the given number of initial elements."
    },
    {
      "name": "func dropLast(Int) -> Substring.UTF16View",
      "desc": "Returns a subsequence containing all but the specified number of final elements."
    },
    {
      "name": "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
      "desc": "Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order."
    },
    {
      "name": "func elementsEqual<OtherSequence>(OtherSequence, by: (UTF16.CodeUnit, OtherSequence.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test."
    },
    {
      "name": "func enumerated() -> EnumeratedSequence<String.UTF16View>",
      "desc": "Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence."
    },
    {
      "name": "func filter((UTF16.CodeUnit) -> Bool) -> [UTF16.CodeUnit]",
      "desc": "Returns an array containing, in order, the elements of the sequence that satisfy the given predicate."
    },
    {
      "name": "func first(where: (UTF16.CodeUnit) -> Bool) -> UTF16.CodeUnit?",
      "desc": "Returns the first element of the sequence that satisfies the given predicate."
    },
    {
      "name": "func firstIndex(of: UTF16.CodeUnit) -> String.Index?",
      "desc": "Returns the first index where the specified value appears in the collection."
    },
    {
      "name": "func firstIndex(where: (UTF16.CodeUnit) -> Bool) -> String.Index?",
      "desc": "Returns the first index in which an element of the collection satisfies the given predicate."
    },
    {
      "name": "func flatMap<SegmentOfResult>((UTF16.CodeUnit) -> SegmentOfResult) -> [SegmentOfResult.Element]",
      "desc": "Returns an array containing the concatenated results of calling the given transformation with each element of this sequence."
    },
    {
      "name": "func forEach((UTF16.CodeUnit) -> Void)",
      "desc": "Calls the given closure on each element in the sequence in the same order as a for-in loop."
    },
    {
      "name": "func formIndex(inout String.Index, offsetBy: Int)",
      "desc": "Offsets the given index by the specified distance."
    },
    {
      "name": "func formIndex(inout String.Index, offsetBy: Int, limitedBy: String.Index) -> Bool",
      "desc": "Offsets the given index by the specified distance, or so that it equals the given limiting index."
    },
    {
      "name": "func formIndex(after: inout String.Index)",
      "desc": "Replaces the given index with its successor."
    },
    {
      "name": "func formIndex(before: inout String.Index)",
      "desc": "Replaces the given index with its predecessor."
    },
    {
      "name": "func index(String.UTF16View.Index, offsetBy: Int) -> String.UTF16View.Index",
      "desc": "Returns an index that is the specified distance from the given index."
    },
    {
      "name": "func index(String.UTF16View.Index, offsetBy: Int, limitedBy: String.UTF16View.Index) -> String.UTF16View.Index?",
      "desc": "Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index."
    },
    {
      "name": "func index(after: String.UTF16View.Index) -> String.UTF16View.Index",
      "desc": "Returns the position immediately after the given index."
    },
    {
      "name": "func index(before: String.UTF16View.Index) -> String.UTF16View.Index",
      "desc": "Returns the position immediately before the given index."
    },
    {
      "name": "func last(where: (UTF16.CodeUnit) -> Bool) -> UTF16.CodeUnit?",
      "desc": "Returns the last element of the sequence that satisfies the given predicate."
    },
    {
      "name": "func lastIndex(of: UTF16.CodeUnit) -> String.Index?",
      "desc": "Returns the last index where the specified value appears in the collection."
    },
    {
      "name": "func lastIndex(where: (UTF16.CodeUnit) -> Bool) -> String.Index?",
      "desc": "Returns the index of the last element in the collection that matches the given predicate."
    },
    {
      "name": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements."
    },
    {
      "name": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (UTF16.CodeUnit, UTF16.CodeUnit) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements."
    },
    {
      "name": "func makeIterator() -> String.UTF16View.Iterator",
      "desc": "Returns an iterator over the elements of the collection."
    },
    {
      "name": "func map<T>((UTF16.CodeUnit) -> T) -> [T]",
      "desc": "Returns an array containing the results of mapping the given closure over the sequence’s elements."
    },
    {
      "name": "func max() -> UTF16.CodeUnit?",
      "desc": "Returns the maximum element in the sequence."
    },
    {
      "name": "func max(by: (UTF16.CodeUnit, UTF16.CodeUnit) -> Bool) -> UTF16.CodeUnit?",
      "desc": "Returns the maximum element in the sequence, using the given predicate as the comparison between elements."
    },
    {
      "name": "func min() -> UTF16.CodeUnit?",
      "desc": "Returns the minimum element in the sequence."
    },
    {
      "name": "func min(by: (UTF16.CodeUnit, UTF16.CodeUnit) -> Bool) -> UTF16.CodeUnit?",
      "desc": "Returns the minimum element in the sequence, using the given predicate as the comparison between elements."
    },
    {
      "name": "func prefix(Int) -> Substring.UTF16View",
      "desc": "Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection."
    },
    {
      "name": "func prefix(through: String.Index) -> Substring.UTF16View",
      "desc": "Returns a subsequence from the start of the collection through the specified position."
    },
    {
      "name": "func prefix(upTo: String.Index) -> Substring.UTF16View",
      "desc": "Returns a subsequence from the start of the collection up to, but not including, the specified position."
    },
    {
      "name": "func prefix(while: (UTF16.CodeUnit) -> Bool) -> Substring.UTF16View",
      "desc": "Returns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements."
    },
    {
      "name": "func randomElement() -> UTF16.CodeUnit?",
      "desc": "Returns a random element of the collection."
    },
    {
      "name": "func randomElement<T>(using: inout T) -> UTF16.CodeUnit?",
      "desc": "Returns a random element of the collection, using the given generator as a source for randomness."
    },
    {
      "name": "func reduce<Result>(Result, (Result, UTF16.CodeUnit) -> Result) -> Result",
      "desc": "Returns the result of combining the elements of the sequence using the given closure."
    },
    {
      "name": "func reduce<Result>(into: Result, (inout Result, UTF16.CodeUnit) -> ()) -> Result",
      "desc": "Returns the result of combining the elements of the sequence using the given closure."
    },
    {
      "name": "func reversed() -> ReversedCollection<String.UTF16View>",
      "desc": "Returns a view presenting the elements of the collection in reverse order."
    },
    {
      "name": "func shuffled() -> [UTF16.CodeUnit]",
      "desc": "Returns the elements of the sequence, shuffled."
    },
    {
      "name": "func shuffled<T>(using: inout T) -> [UTF16.CodeUnit]",
      "desc": "Returns the elements of the sequence, shuffled using the given generator as a source for randomness."
    },
    {
      "name": "func sorted() -> [UTF16.CodeUnit]",
      "desc": "Returns the elements of the sequence, sorted."
    },
    {
      "name": "func sorted(by: (UTF16.CodeUnit, UTF16.CodeUnit) -> Bool) -> [UTF16.CodeUnit]",
      "desc": "Returns the elements of the sequence, sorted using the given predicate as the comparison between elements."
    },
    {
      "name": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (UTF16.CodeUnit) -> Bool) -> [Substring.UTF16View]",
      "desc": "Returns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
    },
    {
      "name": "func split(separator: UTF16.CodeUnit, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Substring.UTF16View]",
      "desc": "Returns the longest possible subsequences of the collection, in order, around elements equal to the given element."
    },
    {
      "name": "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
      "desc": "Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence."
    },
    {
      "name": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (UTF16.CodeUnit, PossiblePrefix.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test."
    },
    {
      "name": "func suffix(Int) -> Substring.UTF16View",
      "desc": "Returns a subsequence, up to the given maximum length, containing the final elements of the collection."
    },
    {
      "name": "func suffix(from: String.Index) -> Substring.UTF16View",
      "desc": "Returns a subsequence from the specified position to the end of the collection."
    },
    {
      "name": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<UTF16.CodeUnit>) -> R) -> R?",
      "desc": "Executes a closure on the sequence’s contiguous storage."
    },
    {
      "name": "subscript(Range<String.UTF16View.Index>) -> Substring.UTF16View",
      "desc": "Accesses a contiguous subrange of the collection’s elements."
    },
    {
      "name": "subscript(String.UTF16View.Index) -> UTF16.CodeUnit",
      "desc": "Accesses the code unit at the given position."
    },
    {
      "name": "subscript((UnboundedRange_) -> ()) -> Substring.UTF16View"
    },
    {
      "name": "subscript<R>(R) -> Substring.UTF16View",
      "desc": "Accesses the contiguous subrange of the collection’s elements specified by a range expression."
    },
    {
      "name": "struct String.UTF16View.Iterator",
      "desc": "A type that provides the collection’s iteration interface and encapsulates its iteration state."
    }
  ],
  "declaration": "@frozen struct UTF16View",
  "conformsTo": [
    "BidirectionalCollection",
    "CustomDebugStringConvertible",
    "CustomReflectable",
    "CustomStringConvertible",
    "Sendable"
  ]
}