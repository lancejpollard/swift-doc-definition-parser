{
  "path": "/documentation/swift/unsafecontinuation",
  "type": "Generic Structure",
  "name": "UnsafeContinuation",
  "desc": "A mechanism to interface between synchronous and asynchronous code, without correctness checking.",
  "items": [
    {
      "name": "func resume()",
      "desc": "Resume the task that’s awaiting the continuation by returning."
    },
    {
      "name": "func resume(returning: T)",
      "desc": "Resume the task that’s awaiting the continuation by returning the given value."
    },
    {
      "name": "func resume(returning: T)",
      "desc": "Resume the task that’s awaiting the continuation by returning the given value."
    },
    {
      "name": "func resume(throwing: E)",
      "desc": "Resume the task that’s awaiting the continuation by throwing the given error."
    },
    {
      "name": "func resume(with: Result<T, E>)",
      "desc": "Resume the task that’s awaiting the continuation by returning or throwing the given result value."
    },
    {
      "name": "func resume<Er>(with: Result<T, Er>)",
      "desc": "Resume the task that’s awaiting the continuation by returning or throwing the given result value."
    }
  ],
  "declaration": "@frozen struct UnsafeContinuation<T, E> where E : Error"
}