{
  "path": "/documentation/swift/rawrepresentable",
  "type": "Protocol",
  "name": "RawRepresentable",
  "desc": "A type that can be converted to and from an associated raw value.",
  "items": [
    {
      "name": "init?(rawValue: Self.RawValue)",
      "desc": "Creates a new instance with the specified raw value."
    },
    {
      "name": "var rawValue: Self.RawValue",
      "desc": "The corresponding value of the raw type."
    },
    {
      "name": "associatedtype RawValue",
      "desc": "The raw type that can be used to represent all values of the conforming type."
    },
    {
      "name": "func == <T>(T, T) -> Bool",
      "desc": "Returns a Boolean value indicating whether the two arguments are equal."
    },
    {
      "name": "func != <T>(T, T) -> Bool",
      "desc": "Returns a Boolean value indicating whether the two arguments are not equal."
    },
    {
      "name": "func != <T>(T, T) -> Bool",
      "desc": "Returns a Boolean value indicating whether the two arguments are not equal."
    },
    {
      "name": "init(from: Decoder)",
      "desc": "Creates a new instance by decoding from the given decoder, when the type’s RawValue is String."
    },
    {
      "name": "init(from: Decoder)",
      "desc": "Creates a new instance by decoding from the given decoder, when the type’s RawValue is Bool."
    },
    {
      "name": "init(from: Decoder)",
      "desc": "Creates a new instance by decoding from the given decoder, when the type’s RawValue is Double."
    },
    {
      "name": "init(from: Decoder)",
      "desc": "Creates a new instance by decoding from the given decoder, when the type’s RawValue is Float."
    },
    {
      "name": "init(from: Decoder)",
      "desc": "Creates a new instance by decoding from the given decoder, when the type’s RawValue is Int."
    },
    {
      "name": "init(from: Decoder)",
      "desc": "Creates a new instance by decoding from the given decoder, when the type’s RawValue is UInt."
    },
    {
      "name": "init(from: Decoder)",
      "desc": "Creates a new instance by decoding from the given decoder, when the type’s RawValue is Int8."
    },
    {
      "name": "init(from: Decoder)",
      "desc": "Creates a new instance by decoding from the given decoder, when the type’s RawValue is Int16."
    },
    {
      "name": "init(from: Decoder)",
      "desc": "Creates a new instance by decoding from the given decoder, when the type’s RawValue is Int32."
    },
    {
      "name": "init(from: Decoder)",
      "desc": "Creates a new instance by decoding from the given decoder, when the type’s RawValue is Int64."
    },
    {
      "name": "init(from: Decoder)",
      "desc": "Creates a new instance by decoding from the given decoder, when the type’s RawValue is UInt8."
    },
    {
      "name": "init(from: Decoder)",
      "desc": "Creates a new instance by decoding from the given decoder, when the type’s RawValue is UInt16."
    },
    {
      "name": "init(from: Decoder)",
      "desc": "Creates a new instance by decoding from the given decoder, when the type’s RawValue is UInt32."
    },
    {
      "name": "init(from: Decoder)",
      "desc": "Creates a new instance by decoding from the given decoder, when the type’s RawValue is UInt64."
    },
    {
      "name": "func encode(to: Encoder)",
      "desc": "Encodes this value into the given encoder, when the type’s RawValue is String."
    },
    {
      "name": "func encode(to: Encoder)",
      "desc": "Encodes this value into the given encoder, when the type’s RawValue is Bool."
    },
    {
      "name": "func encode(to: Encoder)",
      "desc": "Encodes this value into the given encoder, when the type’s RawValue is Double."
    },
    {
      "name": "func encode(to: Encoder)",
      "desc": "Encodes this value into the given encoder, when the type’s RawValue is Float."
    },
    {
      "name": "func encode(to: Encoder)",
      "desc": "Encodes this value into the given encoder, when the type’s RawValue is Int."
    },
    {
      "name": "func encode(to: Encoder)",
      "desc": "Encodes this value into the given encoder, when the type’s RawValue is UInt."
    },
    {
      "name": "func encode(to: Encoder)",
      "desc": "Encodes this value into the given encoder, when the type’s RawValue is Int8."
    },
    {
      "name": "func encode(to: Encoder)",
      "desc": "Encodes this value into the given encoder, when the type’s RawValue is Int16."
    },
    {
      "name": "func encode(to: Encoder)",
      "desc": "Encodes this value into the given encoder, when the type’s RawValue is Int32."
    },
    {
      "name": "func encode(to: Encoder)",
      "desc": "Encodes this value into the given encoder, when the type’s RawValue is Int64."
    },
    {
      "name": "func encode(to: Encoder)",
      "desc": "Encodes this value into the given encoder, when the type’s RawValue is UInt8."
    },
    {
      "name": "func encode(to: Encoder)",
      "desc": "Encodes this value into the given encoder, when the type’s RawValue is UInt16."
    },
    {
      "name": "func encode(to: Encoder)",
      "desc": "Encodes this value into the given encoder, when the type’s RawValue is UInt32."
    },
    {
      "name": "func encode(to: Encoder)",
      "desc": "Encodes this value into the given encoder, when the type’s RawValue is UInt64."
    },
    {
      "name": "init?<T>(codingKey: T)",
      "desc": "Available when Self conforms to CodingKeyRepresentable and RawValue is String."
    },
    {
      "name": "init?<T>(codingKey: T)",
      "desc": "Available when Self conforms to CodingKeyRepresentable and RawValue is Int."
    },
    {
      "name": "var codingKey: CodingKey",
      "desc": "Available when Self conforms to CodingKeyRepresentable and RawValue is String."
    },
    {
      "name": "var codingKey: CodingKey",
      "desc": "Available when Self conforms to CodingKeyRepresentable and RawValue is Int."
    },
    {
      "name": "var hashValue: Int",
      "desc": "Available when Self conforms to Hashable and RawValue conforms to Hashable."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Available when Self conforms to Hashable and RawValue conforms to Hashable."
    }
  ],
  "declaration": "protocol RawRepresentable"
}