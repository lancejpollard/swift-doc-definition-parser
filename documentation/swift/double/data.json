{
  "path": "/documentation/swift/double",
  "type": "Structure",
  "name": "Double",
  "desc": "A double-precision, floating-point value type.",
  "items": [
    {
      "name": "init<Source>(Source)",
      "desc": "Creates a new value, rounded to the closest possible representation."
    },
    {
      "name": "init(Int)",
      "desc": "Creates a new value, rounded to the closest possible representation."
    },
    {
      "name": "init?<S>(S)",
      "desc": "Creates a new instance from the given string."
    },
    {
      "name": "init?(Substring)"
    },
    {
      "name": "init<Source>(Source)",
      "desc": "Creates a new instance from the given value, rounded to the closest possible representation."
    },
    {
      "name": "init(Double)",
      "desc": "Creates a new instance initialized to the given value."
    },
    {
      "name": "init(Float)",
      "desc": "Creates a new instance that approximates the given value."
    },
    {
      "name": "init(Float16)",
      "desc": "Creates a new instance that approximates the given value."
    },
    {
      "name": "init(Float80)",
      "desc": "Creates a new instance that approximates the given value."
    },
    {
      "name": "init(CGFloat)",
      "desc": "Creates a new instance initialized to the given value."
    },
    {
      "name": "init(sign: FloatingPointSign, exponent: Int, significand: Double)",
      "desc": "Creates a new value from the given sign, exponent, and significand."
    },
    {
      "name": "init(signOf: Double, magnitudeOf: Double)",
      "desc": "Creates a new floating-point value using the sign of one value and the magnitude of another."
    },
    {
      "name": "init<Source>(Source)",
      "desc": "Creates a new value, rounded to the closest possible representation."
    },
    {
      "name": "init(truncating: NSNumber)"
    },
    {
      "name": "init?<Source>(exactly: Source)",
      "desc": "Creates a new instance from the given value, if it can be represented exactly."
    },
    {
      "name": "init?<Source>(exactly: Source)",
      "desc": "Creates a new value, if the given integer can be represented exactly."
    },
    {
      "name": "init?<Source>(exactly: Source)",
      "desc": "Creates a new value, if the given integer can be represented exactly."
    },
    {
      "name": "init?(exactly: Double)",
      "desc": "Creates a new instance initialized to the given value, if it can be represented without rounding."
    },
    {
      "name": "init?(exactly: Float)",
      "desc": "Creates a new instance initialized to the given value, if it can be represented without rounding."
    },
    {
      "name": "init?(exactly: Float16)",
      "desc": "Creates a new instance initialized to the given value, if it can be represented without rounding."
    },
    {
      "name": "init?(exactly: Float80)",
      "desc": "Creates a new instance initialized to the given value, if it can be represented without rounding."
    },
    {
      "name": "init?(exactly: NSNumber)"
    },
    {
      "name": "static func random(in: Range<Double>) -> Double",
      "desc": "Returns a random value within the specified range."
    },
    {
      "name": "static func random<T>(in: Range<Double>, using: inout T) -> Double",
      "desc": "Returns a random value within the specified range, using the given generator as a source for randomness."
    },
    {
      "name": "static func random(in: ClosedRange<Double>) -> Double",
      "desc": "Returns a random value within the specified range."
    },
    {
      "name": "static func random<T>(in: ClosedRange<Double>, using: inout T) -> Double",
      "desc": "Returns a random value within the specified range, using the given generator as a source for randomness."
    },
    {
      "name": "func addingProduct(Double, Double) -> Double",
      "desc": "Returns the result of adding the product of the two given values to this value, computed without intermediate rounding."
    },
    {
      "name": "func addProduct(Double, Double)",
      "desc": "Adds the product of the two given values to this value in place, computed without intermediate rounding."
    },
    {
      "name": "func squareRoot() -> Double",
      "desc": "Returns the square root of the value, rounded to a representable value."
    },
    {
      "name": "func formSquareRoot()",
      "desc": "Replaces this value with its square root, rounded to a representable value."
    },
    {
      "name": "func remainder(dividingBy: Double) -> Double",
      "desc": "Returns the remainder of this value divided by the given value."
    },
    {
      "name": "func formRemainder(dividingBy: Double)",
      "desc": "Replaces this value with the remainder of itself divided by the given value."
    },
    {
      "name": "func truncatingRemainder(dividingBy: Double) -> Double",
      "desc": "Returns the remainder of this value divided by the given value using truncating division."
    },
    {
      "name": "func formTruncatingRemainder(dividingBy: Double)",
      "desc": "Replaces this value with the remainder of itself divided by the given value using truncating division."
    },
    {
      "name": "func scale(by: Double)"
    },
    {
      "name": "func negate()",
      "desc": "Replaces this value with its additive inverse."
    },
    {
      "name": "func rounded() -> Double",
      "desc": "Returns this value rounded to an integral value using “schoolbook rounding.”"
    },
    {
      "name": "func rounded(FloatingPointRoundingRule) -> Double",
      "desc": "Returns this value rounded to an integral value using the specified rounding rule."
    },
    {
      "name": "func round()",
      "desc": "Rounds this value to an integral value using “schoolbook rounding.”"
    },
    {
      "name": "func round(FloatingPointRoundingRule)",
      "desc": "Rounds the value to an integral value using the specified rounding rule."
    },
    {
      "name": "func isEqual(to: Double) -> Bool",
      "desc": "Returns a Boolean value indicating whether this instance is equal to the given value."
    },
    {
      "name": "func isLess(than: Double) -> Bool",
      "desc": "Returns a Boolean value indicating whether this instance is less than the given value."
    },
    {
      "name": "func isLessThanOrEqualTo(Double) -> Bool",
      "desc": "Returns a Boolean value indicating whether this instance is less than or equal to the given value."
    },
    {
      "name": "func isTotallyOrdered(belowOrEqualTo: Double) -> Bool",
      "desc": "Returns a Boolean value indicating whether this instance should precede or tie positions with the given value in an ascending sort."
    },
    {
      "name": "static func minimum(Double, Double) -> Double",
      "desc": "Returns the lesser of the two given values."
    },
    {
      "name": "static func minimumMagnitude(Double, Double) -> Double",
      "desc": "Returns the value with lesser magnitude."
    },
    {
      "name": "static func maximum(Double, Double) -> Double",
      "desc": "Returns the greater of the two given values."
    },
    {
      "name": "static func maximumMagnitude(Double, Double) -> Double",
      "desc": "Returns the value with greater magnitude."
    },
    {
      "name": "var magnitude: Double",
      "desc": "The magnitude of this value."
    },
    {
      "name": "var magnitudeSquared: Double"
    },
    {
      "name": "var sign: FloatingPointSign",
      "desc": "The sign of the floating-point value."
    },
    {
      "name": "typealias Double.Magnitude",
      "desc": "A type that can represent the absolute value of any possible value of the conforming type."
    },
    {
      "name": "var ulp: Double",
      "desc": "The unit in the last place of this value."
    },
    {
      "name": "var significand: Double",
      "desc": "The significand of the floating-point value."
    },
    {
      "name": "var exponent: Int",
      "desc": "The exponent of the floating-point value."
    },
    {
      "name": "var nextUp: Double",
      "desc": "The least representable value that compares greater than this value."
    },
    {
      "name": "var nextDown: Double",
      "desc": "The greatest representable value that compares less than this value."
    },
    {
      "name": "var binade: Double",
      "desc": "The floating-point value with the same sign and exponent as this value, but with a significand of 1.0."
    },
    {
      "name": "static var pi: Double",
      "desc": "The mathematical constant pi."
    },
    {
      "name": "static var infinity: Double",
      "desc": "Positive infinity."
    },
    {
      "name": "static var greatestFiniteMagnitude: Double",
      "desc": "The greatest finite number representable by this type."
    },
    {
      "name": "static var nan: Double",
      "desc": "A quiet NaN (“not a number”)."
    },
    {
      "name": "static var signalingNaN: Double",
      "desc": "A signaling NaN (“not a number”)."
    },
    {
      "name": "static var ulpOfOne: Double",
      "desc": "The unit in the last place of 1.0."
    },
    {
      "name": "static var leastNonzeroMagnitude: Double",
      "desc": "The least positive number."
    },
    {
      "name": "static var leastNormalMagnitude: Double",
      "desc": "The least positive normal number."
    },
    {
      "name": "static var zero: Double",
      "desc": "The zero value."
    },
    {
      "name": "var bitPattern: UInt64",
      "desc": "The bit pattern of the value’s encoding."
    },
    {
      "name": "var significandBitPattern: UInt64",
      "desc": "The raw encoding of the value’s significand field."
    },
    {
      "name": "var significandWidth: Int",
      "desc": "The number of bits required to represent the value’s significand."
    },
    {
      "name": "var exponentBitPattern: UInt",
      "desc": "The raw encoding of the value’s exponent field."
    },
    {
      "name": "static var significandBitCount: Int",
      "desc": "The available number of fractional significand bits."
    },
    {
      "name": "static var exponentBitCount: Int",
      "desc": "The number of bits used to represent the type’s exponent."
    },
    {
      "name": "static var radix: Int",
      "desc": "The radix, or base of exponentiation, for a floating-point type."
    },
    {
      "name": "init(bitPattern: UInt64)",
      "desc": "Creates a new value with the given bit pattern."
    },
    {
      "name": "init(sign: FloatingPointSign, exponentBitPattern: UInt, significandBitPattern: UInt64)",
      "desc": "Creates a new instance from the specified sign and bit patterns."
    },
    {
      "name": "init(nan: Double.RawSignificand, signaling: Bool)",
      "desc": "Creates a NaN (“not a number”) value with the specified payload."
    },
    {
      "name": "typealias Double.Exponent",
      "desc": "A type that can represent any written exponent."
    },
    {
      "name": "typealias Double.RawSignificand",
      "desc": "A type that represents the encoded significand of a value."
    },
    {
      "name": "typealias Double.RawExponent",
      "desc": "A type that represents the encoded exponent of a value."
    },
    {
      "name": "var isZero: Bool",
      "desc": "A Boolean value indicating whether the instance is equal to zero."
    },
    {
      "name": "var isFinite: Bool",
      "desc": "A Boolean value indicating whether this instance is finite."
    },
    {
      "name": "var isInfinite: Bool",
      "desc": "A Boolean value indicating whether the instance is infinite."
    },
    {
      "name": "var isNaN: Bool",
      "desc": "A Boolean value indicating whether the instance is NaN (“not a number”)."
    },
    {
      "name": "var isSignalingNaN: Bool",
      "desc": "A Boolean value indicating whether the instance is a signaling NaN."
    },
    {
      "name": "var isNormal: Bool",
      "desc": "A Boolean value indicating whether this instance is normal."
    },
    {
      "name": "var isSubnormal: Bool",
      "desc": "A Boolean value indicating whether the instance is subnormal."
    },
    {
      "name": "var isCanonical: Bool",
      "desc": "A Boolean value indicating whether the instance’s representation is in its canonical form."
    },
    {
      "name": "var floatingPointClass: FloatingPointClassification",
      "desc": "The classification of this value."
    },
    {
      "name": "func encode(to: Encoder)",
      "desc": "Encodes this value into the given encoder."
    },
    {
      "name": "init(from: Decoder)",
      "desc": "Creates a new instance by decoding from the given decoder."
    },
    {
      "name": "static func ..< (Double, Double) -> Range<Double>",
      "desc": "Returns a half-open range that contains its lower bound but not its upper bound."
    },
    {
      "name": "static func ... (Double, Double) -> ClosedRange<Double>",
      "desc": "Returns a closed range that contains both of its bounds."
    },
    {
      "name": "var description: String",
      "desc": "A textual representation of the value."
    },
    {
      "name": "var debugDescription: String",
      "desc": "A textual representation of the value, suitable for debugging."
    },
    {
      "name": "var customMirror: Mirror",
      "desc": "A mirror that reflects the Double instance."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of this value by feeding them into the given hasher."
    },
    {
      "name": "init?(from: MLDataValue)",
      "desc": "Creates a double from another double wrapped in a data value."
    },
    {
      "name": "var dataValue: MLDataValue",
      "desc": "The double wrapped in a data value."
    },
    {
      "name": "static var dataValueType: MLDataValue.ValueType",
      "desc": "The underlying type a double uses when it wraps itself in a data value."
    },
    {
      "name": "init()",
      "desc": "Creates a value initialized to zero."
    },
    {
      "name": "init(floatLiteral: Double)",
      "desc": "Creates an instance initialized to the specified floating-point value."
    },
    {
      "name": "init(integerLiteral: Int64)",
      "desc": "Creates an instance initialized to the specified integer value."
    },
    {
      "name": "init(integerLiteral: Double)",
      "desc": "Creates an instance initialized to the specified integer value."
    },
    {
      "name": "typealias Double.FloatLiteralType",
      "desc": "A type that represents a floating-point literal."
    },
    {
      "name": "typealias Double.IntegerLiteralType",
      "desc": "A type that represents an integer literal."
    },
    {
      "name": "func advanced(by: Double) -> Double",
      "desc": "Returns a value that is offset the specified distance from this value."
    },
    {
      "name": "func distance(to: Double) -> Double",
      "desc": "Returns the distance from this value to the given value, expressed as a stride."
    },
    {
      "name": "typealias Double.Stride",
      "desc": "A type that represents the distance between two values."
    },
    {
      "name": "func write<Target>(to: inout Target)",
      "desc": "Writes a textual representation of this instance into the given output stream."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value."
    },
    {
      "name": "typealias Double.SIMDMaskScalar"
    },
    {
      "name": "struct Double.SIMD2Storage",
      "desc": "Storage for a vector of two floating-point values."
    },
    {
      "name": "struct Double.SIMD4Storage",
      "desc": "Storage for a vector of four floating-point values."
    },
    {
      "name": "struct Double.SIMD8Storage",
      "desc": "Storage for a vector of eight floating-point values."
    },
    {
      "name": "struct Double.SIMD16Storage",
      "desc": "Storage for a vector of 16 floating-point values."
    },
    {
      "name": "struct Double.SIMD32Storage",
      "desc": "Storage for a vector of 32 floating-point values."
    },
    {
      "name": "struct Double.SIMD64Storage",
      "desc": "Storage for a vector of 64 floating-point values."
    },
    {
      "name": "typealias Double.BiquadFunctions"
    },
    {
      "name": "typealias Double.DFTFunctions"
    },
    {
      "name": "typealias Double.DiscreteFourierTransformFunctions"
    },
    {
      "name": "static var mlMultiArrayDataType: MLMultiArrayDataType"
    },
    {
      "name": "static var multiArrayDataType: MLMultiArrayDataType"
    }
  ],
  "declaration": "Declaration@frozen struct Double",
  "conformsTo": [
    "AnimatableData",
    "BinaryFloatingPoint",
    "BindableData",
    "CKRecordValueProtocol",
    "CustomDebugStringConvertible",
    "CustomReflectable",
    "CustomStringConvertible",
    "Decodable",
    "Encodable",
    "ExpressibleByIntegerLiteral",
    "Hashable",
    "LosslessStringConvertible",
    "MLDataValueConvertible",
    "MLShapedArrayScalar",
    "SIMDScalar",
    "Strideable",
    "TextOutputStreamable",
    "VectorArithmetic",
    "vDSP_DiscreteFourierTransformable",
    "vDSP_FloatingPointBiquadFilterable",
    "vDSP_FloatingPointConvertable",
    "vDSP_FloatingPointDiscreteFourierTransformable",
    "vDSP_FloatingPointGeneratable"
  ]
}