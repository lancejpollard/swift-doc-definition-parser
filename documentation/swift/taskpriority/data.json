{
  "path": "/documentation/swift/taskpriority",
  "type": "Structure",
  "name": "TaskPriority",
  "desc": "The priority of a task.",
  "items": [
    {
      "name": "typealias TaskPriority.RawValue",
      "desc": "The raw type that can be used to represent all values of the conforming type."
    },
    {
      "name": "init(from: Decoder)",
      "desc": "Creates a new instance by decoding from the given decoder, when the type’s RawValue is UInt8."
    },
    {
      "name": "init(rawValue: UInt8)",
      "desc": "Creates a new instance with the specified raw value."
    },
    {
      "name": "var rawValue: UInt8",
      "desc": "The corresponding value of the raw type."
    },
    {
      "name": "static let background: TaskPriority"
    },
    {
      "name": "static let high: TaskPriority"
    },
    {
      "name": "static let low: TaskPriority"
    },
    {
      "name": "static var medium: TaskPriority"
    },
    {
      "name": "static let userInitiated: TaskPriority"
    },
    {
      "name": "static let utility: TaskPriority"
    },
    {
      "name": "func encode(to: Encoder)",
      "desc": "Encodes this value into the given encoder, when the type’s RawValue is UInt8."
    },
    {
      "name": "static func != (TaskPriority, TaskPriority) -> Bool"
    },
    {
      "name": "static func ... (TaskPriority) -> PartialRangeFrom<TaskPriority>",
      "desc": "Returns a partial range extending upward from a lower bound."
    },
    {
      "name": "static func ... (TaskPriority) -> PartialRangeThrough<TaskPriority>",
      "desc": "Returns a partial range up to, and including, its upper bound."
    },
    {
      "name": "static func ... (TaskPriority, TaskPriority) -> ClosedRange<TaskPriority>",
      "desc": "Returns a closed range that contains both of its bounds."
    },
    {
      "name": "static func ..< (TaskPriority) -> PartialRangeUpTo<TaskPriority>",
      "desc": "Returns a partial range up to, but not including, its upper bound."
    },
    {
      "name": "static func ..< (TaskPriority, TaskPriority) -> Range<TaskPriority>",
      "desc": "Returns a half-open range that contains its lower bound but not its upper bound."
    },
    {
      "name": "static func < (TaskPriority, TaskPriority) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument."
    },
    {
      "name": "static func <= (TaskPriority, TaskPriority) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument."
    },
    {
      "name": "static func == (TaskPriority, TaskPriority) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are equal."
    },
    {
      "name": "static func > (TaskPriority, TaskPriority) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument."
    },
    {
      "name": "static func >= (TaskPriority, TaskPriority) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument."
    }
  ],
  "declaration": "struct TaskPriority",
  "conformsTo": [
    "Comparable",
    "Equatable",
    "RawRepresentable",
    "Sendable"
  ]
}