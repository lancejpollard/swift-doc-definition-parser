{
  "path": "/documentation/swift/reversedcollection/index",
  "type": "Structure",
  "name": "ReversedCollection.Index",
  "desc": "An index that traverses the same positions as an underlying index, with inverted traversal direction.",
  "items": [
    {
      "name": "init(Base.Index)",
      "desc": "Creates a new index into a reversed collection for the position before the specified index."
    },
    {
      "name": "let base: Base.Index",
      "desc": "The position after this position in the underlying collection."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of this value by feeding them into the given hasher."
    },
    {
      "name": "static func != (ReversedCollection<Base>.Index, ReversedCollection<Base>.Index) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are not equal."
    },
    {
      "name": "static func ... (ReversedCollection<Base>.Index) -> PartialRangeFrom<ReversedCollection<Base>.Index>",
      "desc": "Returns a partial range extending upward from a lower bound."
    },
    {
      "name": "static func ... (ReversedCollection<Base>.Index) -> PartialRangeThrough<ReversedCollection<Base>.Index>",
      "desc": "Returns a partial range up to, and including, its upper bound."
    },
    {
      "name": "static func ... (ReversedCollection<Base>.Index, ReversedCollection<Base>.Index) -> ClosedRange<ReversedCollection<Base>.Index>",
      "desc": "Returns a closed range that contains both of its bounds."
    },
    {
      "name": "static func ..< (ReversedCollection<Base>.Index) -> PartialRangeUpTo<ReversedCollection<Base>.Index>",
      "desc": "Returns a partial range up to, but not including, its upper bound."
    },
    {
      "name": "static func ..< (ReversedCollection<Base>.Index, ReversedCollection<Base>.Index) -> Range<ReversedCollection<Base>.Index>",
      "desc": "Returns a half-open range that contains its lower bound but not its upper bound."
    },
    {
      "name": "static func < (ReversedCollection<Base>.Index, ReversedCollection<Base>.Index) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument."
    },
    {
      "name": "static func <= (ReversedCollection<Base>.Index, ReversedCollection<Base>.Index) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument."
    },
    {
      "name": "static func == (ReversedCollection<Base>.Index, ReversedCollection<Base>.Index) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are equal."
    },
    {
      "name": "static func > (ReversedCollection<Base>.Index, ReversedCollection<Base>.Index) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument."
    },
    {
      "name": "static func >= (ReversedCollection<Base>.Index, ReversedCollection<Base>.Index) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument."
    }
  ],
  "declaration": "@frozen struct Index",
  "conformsTo": [
    "Comparable",
    "Hashable"
  ]
}