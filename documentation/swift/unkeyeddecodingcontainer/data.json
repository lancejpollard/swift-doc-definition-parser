{
  "path": "/documentation/swift/unkeyeddecodingcontainer",
  "type": "Protocol",
  "name": "UnkeyedDecodingContainer",
  "desc": "A type that provides a view into a decoderâ€™s storage and is used to hold the encoded properties of a decodable type sequentially, without keys.",
  "items": [
    {
      "name": "var codingPath: [CodingKey]",
      "desc": "The path of coding keys taken to get to this point in decoding."
    },
    {
      "name": "var count: Int?",
      "desc": "The number of elements contained within this container."
    },
    {
      "name": "var currentIndex: Int",
      "desc": "The current decoding index of the container (i.e. the index of the next element to be decoded.) Incremented after every successful decode call."
    },
    {
      "name": "var isAtEnd: Bool",
      "desc": "A Boolean value indicating whether there are no more elements left to be decoded in the container."
    },
    {
      "name": "func decode(Int64.Type) -> Int64",
      "desc": "Decodes a value of the given type."
    },
    {
      "name": "func decode(UInt64.Type) -> UInt64",
      "desc": "Decodes a value of the given type."
    },
    {
      "name": "func decode(UInt32.Type) -> UInt32",
      "desc": "Decodes a value of the given type."
    },
    {
      "name": "func decode<T>(T.Type) -> T",
      "desc": "Decodes a value of the given type."
    },
    {
      "name": "func decode(Double.Type) -> Double",
      "desc": "Decodes a value of the given type."
    },
    {
      "name": "func decode(String.Type) -> String",
      "desc": "Decodes a value of the given type."
    },
    {
      "name": "func decode(Int32.Type) -> Int32",
      "desc": "Decodes a value of the given type."
    },
    {
      "name": "func decode(Int.Type) -> Int",
      "desc": "Decodes a value of the given type."
    },
    {
      "name": "func decode(UInt8.Type) -> UInt8",
      "desc": "Decodes a value of the given type."
    },
    {
      "name": "func decode(UInt16.Type) -> UInt16",
      "desc": "Decodes a value of the given type."
    },
    {
      "name": "func decode(Int8.Type) -> Int8",
      "desc": "Decodes a value of the given type."
    },
    {
      "name": "func decode(UInt.Type) -> UInt",
      "desc": "Decodes a value of the given type."
    },
    {
      "name": "func decode(Int16.Type) -> Int16",
      "desc": "Decodes a value of the given type."
    },
    {
      "name": "func decode(Bool.Type) -> Bool",
      "desc": "Decodes a value of the given type."
    },
    {
      "name": "func decode(Float.Type) -> Float",
      "desc": "Decodes a value of the given type."
    },
    {
      "name": "func decode<T>(T.Type, configuration: T.DecodingConfiguration) -> T"
    },
    {
      "name": "func decode<T, C>(T.Type, configuration: C.Type) -> T"
    },
    {
      "name": "func decodeIfPresent(String.Type) -> String?",
      "desc": "Decodes a value of the given type, if present."
    },
    {
      "name": "func decodeIfPresent(Bool.Type) -> Bool?",
      "desc": "Decodes a value of the given type, if present."
    },
    {
      "name": "func decodeIfPresent(Double.Type) -> Double?",
      "desc": "Decodes a value of the given type, if present."
    },
    {
      "name": "func decodeIfPresent(Float.Type) -> Float?",
      "desc": "Decodes a value of the given type, if present."
    },
    {
      "name": "func decodeIfPresent(Int.Type) -> Int?",
      "desc": "Decodes a value of the given type, if present."
    },
    {
      "name": "func decodeIfPresent(UInt.Type) -> UInt?",
      "desc": "Decodes a value of the given type, if present."
    },
    {
      "name": "func decodeIfPresent(Int8.Type) -> Int8?",
      "desc": "Decodes a value of the given type, if present."
    },
    {
      "name": "func decodeIfPresent(Int16.Type) -> Int16?",
      "desc": "Decodes a value of the given type, if present."
    },
    {
      "name": "func decodeIfPresent(Int32.Type) -> Int32?",
      "desc": "Decodes a value of the given type, if present."
    },
    {
      "name": "func decodeIfPresent(Int64.Type) -> Int64?",
      "desc": "Decodes a value of the given type, if present."
    },
    {
      "name": "func decodeIfPresent(UInt8.Type) -> UInt8?",
      "desc": "Decodes a value of the given type, if present."
    },
    {
      "name": "func decodeIfPresent(UInt16.Type) -> UInt16?",
      "desc": "Decodes a value of the given type, if present."
    },
    {
      "name": "func decodeIfPresent(UInt32.Type) -> UInt32?",
      "desc": "Decodes a value of the given type, if present."
    },
    {
      "name": "func decodeIfPresent(UInt64.Type) -> UInt64?",
      "desc": "Decodes a value of the given type, if present."
    },
    {
      "name": "func decodeIfPresent<T>(T.Type) -> T?",
      "desc": "Decodes a value of the given type, if present."
    },
    {
      "name": "func decodeIfPresent<T>(T.Type, configuration: T.DecodingConfiguration) -> T?"
    },
    {
      "name": "func decodeIfPresent<T, C>(T.Type, configuration: C.Type) -> T?"
    },
    {
      "name": "func decodeNil() -> Bool",
      "desc": "Decodes a null value."
    },
    {
      "name": "func nestedContainer<NestedKey>(keyedBy: NestedKey.Type) -> KeyedDecodingContainer<NestedKey>",
      "desc": "Decodes a nested container keyed by the given type."
    },
    {
      "name": "func nestedUnkeyedContainer() -> UnkeyedDecodingContainer",
      "desc": "Decodes an unkeyed nested container."
    },
    {
      "name": "func superDecoder() -> Decoder",
      "desc": "Decodes a nested container and returns a Decoder instance for decoding super from that container."
    }
  ],
  "declaration": "protocol UnkeyedDecodingContainer"
}