{
  "path": "/documentation/swift/dictionary/keys",
  "type": "Structure",
  "name": "Dictionary.Keys",
  "desc": "A view of a dictionary’s keys.",
  "items": [
    {
      "name": "typealias Dictionary.Keys.Element",
      "desc": "A type representing the sequence’s elements."
    },
    {
      "name": "typealias Dictionary.Keys.Index",
      "desc": "A type that represents a position in the collection."
    },
    {
      "name": "typealias Dictionary.Keys.Indices",
      "desc": "A type that represents the indices that are valid for subscripting the collection, in ascending order."
    },
    {
      "name": "typealias Dictionary.Keys.SubSequence",
      "desc": "A collection representing a contiguous subrange of this collection’s elements. The subsequence shares indices with the original collection."
    },
    {
      "name": "var count: Int",
      "desc": "The number of keys in the dictionary."
    },
    {
      "name": "var debugDescription: String",
      "desc": "A textual representation of this instance, suitable for debugging."
    },
    {
      "name": "var description: String",
      "desc": "A textual representation of this instance."
    },
    {
      "name": "var endIndex: Dictionary<Key, Value>.Index",
      "desc": "The collection’s “past the end” position—that is, the position one greater than the last valid subscript argument."
    },
    {
      "name": "var first: Key?",
      "desc": "The first element of the collection."
    },
    {
      "name": "var indices: DefaultIndices<Dictionary<Key, Value>.Keys>",
      "desc": "The indices that are valid for subscripting the collection, in ascending order."
    },
    {
      "name": "var isEmpty: Bool",
      "desc": "A Boolean value indicating whether the collection is empty."
    },
    {
      "name": "var lazy: LazySequence<Dictionary<Key, Value>.Keys>",
      "desc": "A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily."
    },
    {
      "name": "var startIndex: Dictionary<Key, Value>.Index",
      "desc": "The position of the first element in a nonempty collection."
    },
    {
      "name": "var underestimatedCount: Int",
      "desc": "A value less than or equal to the number of elements in the collection."
    },
    {
      "name": "func allSatisfy((Key) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate."
    },
    {
      "name": "func compactMap<ElementOfResult>((Key) -> ElementOfResult?) -> [ElementOfResult]",
      "desc": "Returns an array containing the non-nil results of calling the given transformation with each element of this sequence."
    },
    {
      "name": "func contains(Key) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence contains the given element."
    },
    {
      "name": "func contains(where: (Key) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate."
    },
    {
      "name": "func distance(from: Dictionary<Key, Value>.Index, to: Dictionary<Key, Value>.Index) -> Int",
      "desc": "Returns the distance between two indices."
    },
    {
      "name": "func drop(while: (Key) -> Bool) -> Slice<Dictionary<Key, Value>.Keys>",
      "desc": "Returns a subsequence by skipping elements while predicate returns true and returning the remaining elements."
    },
    {
      "name": "func dropFirst(Int) -> Slice<Dictionary<Key, Value>.Keys>",
      "desc": "Returns a subsequence containing all but the given number of initial elements."
    },
    {
      "name": "func dropLast(Int) -> Slice<Dictionary<Key, Value>.Keys>",
      "desc": "Returns a subsequence containing all but the specified number of final elements."
    },
    {
      "name": "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
      "desc": "Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order."
    },
    {
      "name": "func elementsEqual<OtherSequence>(OtherSequence, by: (Key, OtherSequence.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test."
    },
    {
      "name": "func enumerated() -> EnumeratedSequence<Dictionary<Key, Value>.Keys>",
      "desc": "Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence."
    },
    {
      "name": "func filter((Key) -> Bool) -> [Key]",
      "desc": "Returns an array containing, in order, the elements of the sequence that satisfy the given predicate."
    },
    {
      "name": "func first(where: (Key) -> Bool) -> Key?",
      "desc": "Returns the first element of the sequence that satisfies the given predicate."
    },
    {
      "name": "func firstIndex(of: Key) -> Dictionary<Key, Value>.Index?",
      "desc": "Returns the first index where the specified value appears in the collection."
    },
    {
      "name": "func firstIndex(where: (Key) -> Bool) -> Dictionary<Key, Value>.Index?",
      "desc": "Returns the first index in which an element of the collection satisfies the given predicate."
    },
    {
      "name": "func flatMap<SegmentOfResult>((Key) -> SegmentOfResult) -> [SegmentOfResult.Element]",
      "desc": "Returns an array containing the concatenated results of calling the given transformation with each element of this sequence."
    },
    {
      "name": "func forEach((Key) -> Void)",
      "desc": "Calls the given closure on each element in the sequence in the same order as a for-in loop."
    },
    {
      "name": "func formIndex(inout Dictionary<Key, Value>.Index, offsetBy: Int)",
      "desc": "Offsets the given index by the specified distance."
    },
    {
      "name": "func formIndex(inout Dictionary<Key, Value>.Index, offsetBy: Int, limitedBy: Dictionary<Key, Value>.Index) -> Bool",
      "desc": "Offsets the given index by the specified distance, or so that it equals the given limiting index."
    },
    {
      "name": "func formIndex(after: inout Dictionary<Key, Value>.Index)",
      "desc": "Replaces the given index with its successor."
    },
    {
      "name": "func index(Dictionary<Key, Value>.Index, offsetBy: Int) -> Dictionary<Key, Value>.Index",
      "desc": "Returns an index that is the specified distance from the given index."
    },
    {
      "name": "func index(Dictionary<Key, Value>.Index, offsetBy: Int, limitedBy: Dictionary<Key, Value>.Index) -> Dictionary<Key, Value>.Index?",
      "desc": "Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index."
    },
    {
      "name": "func index(after: Dictionary<Key, Value>.Index) -> Dictionary<Key, Value>.Index",
      "desc": "Returns the position immediately after the given index."
    },
    {
      "name": "func joined() -> FlattenSequence<Dictionary<Key, Value>.Keys>",
      "desc": "Returns the elements of this sequence of sequences, concatenated."
    },
    {
      "name": "func joined<Separator>(separator: Separator) -> JoinedSequence<Dictionary<Key, Value>.Keys>",
      "desc": "Returns the concatenated elements of this sequence of sequences, inserting the given separator between each element."
    },
    {
      "name": "func joined(separator: String) -> String",
      "desc": "Returns a new string by concatenating the elements of the sequence, adding the given separator between each element."
    },
    {
      "name": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements."
    },
    {
      "name": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Key, Key) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements."
    },
    {
      "name": "func makeIterator() -> Dictionary<Key, Value>.Keys.Iterator",
      "desc": "Returns an iterator over the elements of the collection."
    },
    {
      "name": "func map<T>((Key) -> T) -> [T]",
      "desc": "Returns an array containing the results of mapping the given closure over the sequence’s elements."
    },
    {
      "name": "func max() -> Key?",
      "desc": "Returns the maximum element in the sequence."
    },
    {
      "name": "func max(by: (Key, Key) -> Bool) -> Key?",
      "desc": "Returns the maximum element in the sequence, using the given predicate as the comparison between elements."
    },
    {
      "name": "func min() -> Key?",
      "desc": "Returns the minimum element in the sequence."
    },
    {
      "name": "func min(by: (Key, Key) -> Bool) -> Key?",
      "desc": "Returns the minimum element in the sequence, using the given predicate as the comparison between elements."
    },
    {
      "name": "func prefix(Int) -> Slice<Dictionary<Key, Value>.Keys>",
      "desc": "Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection."
    },
    {
      "name": "func prefix(through: Dictionary<Key, Value>.Index) -> Slice<Dictionary<Key, Value>.Keys>",
      "desc": "Returns a subsequence from the start of the collection through the specified position."
    },
    {
      "name": "func prefix(upTo: Dictionary<Key, Value>.Index) -> Slice<Dictionary<Key, Value>.Keys>",
      "desc": "Returns a subsequence from the start of the collection up to, but not including, the specified position."
    },
    {
      "name": "func prefix(while: (Key) -> Bool) -> Slice<Dictionary<Key, Value>.Keys>",
      "desc": "Returns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements."
    },
    {
      "name": "func randomElement() -> Key?",
      "desc": "Returns a random element of the collection."
    },
    {
      "name": "func randomElement<T>(using: inout T) -> Key?",
      "desc": "Returns a random element of the collection, using the given generator as a source for randomness."
    },
    {
      "name": "func reduce<Result>(Result, (Result, Key) -> Result) -> Result",
      "desc": "Returns the result of combining the elements of the sequence using the given closure."
    },
    {
      "name": "func reduce<Result>(into: Result, (inout Result, Key) -> ()) -> Result",
      "desc": "Returns the result of combining the elements of the sequence using the given closure."
    },
    {
      "name": "func reversed() -> [Key]",
      "desc": "Returns an array containing the elements of this sequence in reverse order."
    },
    {
      "name": "func shuffled() -> [Key]",
      "desc": "Returns the elements of the sequence, shuffled."
    },
    {
      "name": "func shuffled<T>(using: inout T) -> [Key]",
      "desc": "Returns the elements of the sequence, shuffled using the given generator as a source for randomness."
    },
    {
      "name": "func sorted() -> [Key]",
      "desc": "Returns the elements of the sequence, sorted."
    },
    {
      "name": "func sorted(by: (Key, Key) -> Bool) -> [Key]",
      "desc": "Returns the elements of the sequence, sorted using the given predicate as the comparison between elements."
    },
    {
      "name": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Key) -> Bool) -> [Slice<Dictionary<Key, Value>.Keys>]",
      "desc": "Returns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
    },
    {
      "name": "func split(separator: Key, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Slice<Dictionary<Key, Value>.Keys>]",
      "desc": "Returns the longest possible subsequences of the collection, in order, around elements equal to the given element."
    },
    {
      "name": "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
      "desc": "Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence."
    },
    {
      "name": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Key, PossiblePrefix.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test."
    },
    {
      "name": "func suffix(Int) -> Slice<Dictionary<Key, Value>.Keys>",
      "desc": "Returns a subsequence, up to the given maximum length, containing the final elements of the collection."
    },
    {
      "name": "func suffix(from: Dictionary<Key, Value>.Index) -> Slice<Dictionary<Key, Value>.Keys>",
      "desc": "Returns a subsequence from the specified position to the end of the collection."
    },
    {
      "name": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Key>) -> R) -> R?",
      "desc": "Executes a closure on the sequence’s contiguous storage."
    },
    {
      "name": "subscript(Dictionary<Key, Value>.Index) -> Dictionary<Key, Value>.Keys.Element",
      "desc": "Accesses the element at the specified position."
    },
    {
      "name": "subscript(Range<Dictionary<Key, Value>.Index>) -> Slice<Dictionary<Key, Value>.Keys>",
      "desc": "Accesses a contiguous subrange of the collection’s elements."
    },
    {
      "name": "subscript((UnboundedRange_) -> ()) -> Slice<Dictionary<Key, Value>.Keys>"
    },
    {
      "name": "subscript<R>(R) -> Slice<Dictionary<Key, Value>.Keys>",
      "desc": "Accesses the contiguous subrange of the collection’s elements specified by a range expression."
    },
    {
      "name": "static func != (Dictionary<Key, Value>.Keys, Dictionary<Key, Value>.Keys) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are not equal."
    },
    {
      "name": "static func == (Dictionary<Key, Value>.Keys, Dictionary<Key, Value>.Keys) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are equal."
    },
    {
      "name": "struct Dictionary.Keys.Iterator",
      "desc": "A type that provides the collection’s iteration interface and encapsulates its iteration state."
    }
  ],
  "declaration": "@frozen struct Keys",
  "conformsTo": [
    "Collection",
    "CustomDebugStringConvertible",
    "CustomStringConvertible",
    "Equatable"
  ]
}