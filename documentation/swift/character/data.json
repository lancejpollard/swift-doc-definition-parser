{
  "path": "/documentation/swift/character",
  "type": "Structure",
  "name": "Character",
  "desc": "A single extended grapheme cluster that approximates a user-perceived character.",
  "items": [
    {
      "name": "init(String)",
      "desc": "Creates a character from a single-character string."
    },
    {
      "name": "func write<Target>(to: inout Target)",
      "desc": "Writes the character into the given output stream."
    },
    {
      "name": "static func == (Character, Character) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are equal."
    },
    {
      "name": "static func != (Character, Character) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are not equal."
    },
    {
      "name": "static func < (Character, Character) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument."
    },
    {
      "name": "static func <= (Character, Character) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument."
    },
    {
      "name": "static func > (Character, Character) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument."
    },
    {
      "name": "static func >= (Character, Character) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument."
    },
    {
      "name": "init(Unicode.Scalar)",
      "desc": "Creates a character containing the given Unicode scalar value."
    },
    {
      "name": "var unicodeScalars: Character.UnicodeScalarView"
    },
    {
      "name": "typealias Character.UnicodeScalarView"
    },
    {
      "name": "var isASCII: Bool",
      "desc": "A Boolean value indicating whether this is an ASCII character."
    },
    {
      "name": "var asciiValue: UInt8?",
      "desc": "The ASCII encoding value of this character, if it is an ASCII character."
    },
    {
      "name": "var isLetter: Bool",
      "desc": "A Boolean value indicating whether this character is a letter."
    },
    {
      "name": "var isPunctuation: Bool",
      "desc": "A Boolean value indicating whether this character represents punctuation."
    },
    {
      "name": "var isNewline: Bool",
      "desc": "A Boolean value indicating whether this character represents a newline."
    },
    {
      "name": "var isWhitespace: Bool",
      "desc": "A Boolean value indicating whether this character represents whitespace, including newlines."
    },
    {
      "name": "var isSymbol: Bool",
      "desc": "A Boolean value indicating whether this character represents a symbol."
    },
    {
      "name": "var isMathSymbol: Bool",
      "desc": "A Boolean value indicating whether this character represents a symbol that naturally appears in mathematical contexts."
    },
    {
      "name": "var isCurrencySymbol: Bool",
      "desc": "A Boolean value indicating whether this character represents a currency symbol."
    },
    {
      "name": "var isCased: Bool",
      "desc": "A Boolean value indicating whether this character changes under any form of case conversion."
    },
    {
      "name": "var isUppercase: Bool",
      "desc": "A Boolean value indicating whether this character is considered uppercase."
    },
    {
      "name": "func uppercased() -> String",
      "desc": "Returns an uppercased version of this character."
    },
    {
      "name": "var isLowercase: Bool",
      "desc": "A Boolean value indicating whether this character is considered lowercase."
    },
    {
      "name": "func lowercased() -> String",
      "desc": "Returns a lowercased version of this character."
    },
    {
      "name": "var isNumber: Bool",
      "desc": "A Boolean value indicating whether this character represents a number."
    },
    {
      "name": "var isWholeNumber: Bool",
      "desc": "A Boolean value indicating whether this character represents a whole number."
    },
    {
      "name": "var wholeNumberValue: Int?",
      "desc": "The numeric value this character represents, if it represents a whole number."
    },
    {
      "name": "var isHexDigit: Bool",
      "desc": "A Boolean value indicating whether this character represents a hexadecimal digit."
    },
    {
      "name": "var hexDigitValue: Int?",
      "desc": "The numeric value this character represents, if it is a hexadecimal digit."
    },
    {
      "name": "static func ..< (Character, Character) -> Range<Character>",
      "desc": "Returns a half-open range that contains its lower bound but not its upper bound."
    },
    {
      "name": "static func ... (Character, Character) -> ClosedRange<Character>",
      "desc": "Returns a closed range that contains both of its bounds."
    },
    {
      "name": "static func ..< (Character) -> PartialRangeUpTo<Character>",
      "desc": "Returns a partial range up to, but not including, its upper bound."
    },
    {
      "name": "static func ... (Character) -> PartialRangeThrough<Character>",
      "desc": "Returns a partial range up to, and including, its upper bound."
    },
    {
      "name": "static func ... (Character) -> PartialRangeFrom<Character>",
      "desc": "Returns a partial range extending upward from a lower bound."
    },
    {
      "name": "var description: String",
      "desc": "A textual representation of this instance."
    },
    {
      "name": "var debugDescription: String",
      "desc": "A textual representation of the character, suitable for debugging."
    },
    {
      "name": "var customMirror: Mirror",
      "desc": "A mirror that reflects the Character instance."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of this value by feeding them into the given hasher."
    },
    {
      "name": "init(extendedGraphemeClusterLiteral: Character)",
      "desc": "Creates a character with the specified value."
    },
    {
      "name": "init(unicodeScalarLiteral: Character)",
      "desc": "Creates an instance initialized to the given value."
    },
    {
      "name": "typealias Character.ExtendedGraphemeClusterLiteralType",
      "desc": "A type that represents an extended grapheme cluster literal."
    },
    {
      "name": "typealias Character.UTF16View",
      "desc": "A view of a character’s contents as a collection of UTF-16 code units. See String.UTF16View for more information"
    },
    {
      "name": "typealias Character.UTF8View",
      "desc": "A view of a character’s contents as a collection of UTF-8 code units. See String.UTF8View for more information"
    },
    {
      "name": "typealias Character.UnicodeScalarLiteralType",
      "desc": "A type that represents a Unicode scalar literal."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value."
    },
    {
      "name": "var utf16: Character.UTF16View",
      "desc": "A UTF-16 encoding of self."
    },
    {
      "name": "var utf8: Character.UTF8View",
      "desc": "A UTF-8 encoding of self."
    }
  ],
  "declaration": "@frozen struct Character",
  "conformsTo": [
    "Comparable",
    "CustomDebugStringConvertible",
    "CustomReflectable",
    "CustomStringConvertible",
    "Equatable",
    "ExpressibleByExtendedGraphemeClusterLiteral",
    "Hashable",
    "Sendable",
    "TextOutputStreamable"
  ]
}