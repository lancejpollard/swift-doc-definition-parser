{
  "path": "/documentation/swift/keyeddecodingcontainer",
  "type": "Generic Structure",
  "name": "KeyedDecodingContainer",
  "desc": "A concrete container that provides a view into a decoderâ€™s storage, making the encoded properties of a decodable type accessible by keys.",
  "items": [
    {
      "name": "typealias KeyedDecodingContainer.Key"
    },
    {
      "name": "init<Container>(Container)",
      "desc": "Creates a new instance with the given container."
    },
    {
      "name": "var allKeys: [KeyedDecodingContainer<K>.Key]",
      "desc": "All the keys the decoder has for this container."
    },
    {
      "name": "var codingPath: [CodingKey]",
      "desc": "The path of coding keys taken to get to this point in decoding."
    },
    {
      "name": "func contains(KeyedDecodingContainer<K>.Key) -> Bool",
      "desc": "Returns a Boolean value indicating whether the decoder contains a value associated with the given key."
    },
    {
      "name": "func decode(Double.Type, forKey: KeyedDecodingContainer<K>.Key) -> Double",
      "desc": "Decodes a value of the given type for the given key."
    },
    {
      "name": "func decode(UInt64.Type, forKey: KeyedDecodingContainer<K>.Key) -> UInt64",
      "desc": "Decodes a value of the given type for the given key."
    },
    {
      "name": "func decode(Int64.Type, forKey: KeyedDecodingContainer<K>.Key) -> Int64",
      "desc": "Decodes a value of the given type for the given key."
    },
    {
      "name": "func decode(UInt16.Type, forKey: KeyedDecodingContainer<K>.Key) -> UInt16",
      "desc": "Decodes a value of the given type for the given key."
    },
    {
      "name": "func decode(String.Type, forKey: KeyedDecodingContainer<K>.Key) -> String",
      "desc": "Decodes a value of the given type for the given key."
    },
    {
      "name": "func decode(Int32.Type, forKey: KeyedDecodingContainer<K>.Key) -> Int32",
      "desc": "Decodes a value of the given type for the given key."
    },
    {
      "name": "func decode(Bool.Type, forKey: KeyedDecodingContainer<K>.Key) -> Bool",
      "desc": "Decodes a value of the given type for the given key."
    },
    {
      "name": "func decode<T>(T.Type, forKey: KeyedDecodingContainer<K>.Key) -> T",
      "desc": "Decodes a value of the given type for the given key."
    },
    {
      "name": "func decode(UInt8.Type, forKey: KeyedDecodingContainer<K>.Key) -> UInt8",
      "desc": "Decodes a value of the given type for the given key."
    },
    {
      "name": "func decode(UInt32.Type, forKey: KeyedDecodingContainer<K>.Key) -> UInt32",
      "desc": "Decodes a value of the given type for the given key."
    },
    {
      "name": "func decode(Int8.Type, forKey: KeyedDecodingContainer<K>.Key) -> Int8",
      "desc": "Decodes a value of the given type for the given key."
    },
    {
      "name": "func decode(Float.Type, forKey: KeyedDecodingContainer<K>.Key) -> Float",
      "desc": "Decodes a value of the given type for the given key."
    },
    {
      "name": "func decode(Int.Type, forKey: KeyedDecodingContainer<K>.Key) -> Int",
      "desc": "Decodes a value of the given type for the given key."
    },
    {
      "name": "func decode(Int16.Type, forKey: KeyedDecodingContainer<K>.Key) -> Int16",
      "desc": "Decodes a value of the given type for the given key."
    },
    {
      "name": "func decode(UInt.Type, forKey: KeyedDecodingContainer<K>.Key) -> UInt",
      "desc": "Decodes a value of the given type for the given key."
    },
    {
      "name": "func decode<T, C>(CodableConfiguration<T?, C>.Type, forKey: KeyedDecodingContainer<K>.Key) -> CodableConfiguration<T?, C>"
    },
    {
      "name": "func decode<T>(T.Type, forKey: KeyedDecodingContainer<K>.Key, configuration: T.DecodingConfiguration) -> T"
    },
    {
      "name": "func decode<T, C>(T.Type, forKey: KeyedDecodingContainer<K>.Key, configuration: C.Type) -> T"
    },
    {
      "name": "func decodeIfPresent(Int.Type, forKey: KeyedDecodingContainer<K>.Key) -> Int?",
      "desc": "Decodes a value of the given type for the given key, if present."
    },
    {
      "name": "func decodeIfPresent(Bool.Type, forKey: KeyedDecodingContainer<K>.Key) -> Bool?",
      "desc": "Decodes a value of the given type for the given key, if present."
    },
    {
      "name": "func decodeIfPresent(String.Type, forKey: KeyedDecodingContainer<K>.Key) -> String?",
      "desc": "Decodes a value of the given type for the given key, if present."
    },
    {
      "name": "func decodeIfPresent(UInt32.Type, forKey: KeyedDecodingContainer<K>.Key) -> UInt32?",
      "desc": "Decodes a value of the given type for the given key, if present."
    },
    {
      "name": "func decodeIfPresent(UInt16.Type, forKey: KeyedDecodingContainer<K>.Key) -> UInt16?",
      "desc": "Decodes a value of the given type for the given key, if present."
    },
    {
      "name": "func decodeIfPresent(UInt64.Type, forKey: KeyedDecodingContainer<K>.Key) -> UInt64?",
      "desc": "Decodes a value of the given type for the given key, if present."
    },
    {
      "name": "func decodeIfPresent(UInt.Type, forKey: KeyedDecodingContainer<K>.Key) -> UInt?",
      "desc": "Decodes a value of the given type for the given key, if present."
    },
    {
      "name": "func decodeIfPresent(Int64.Type, forKey: KeyedDecodingContainer<K>.Key) -> Int64?",
      "desc": "Decodes a value of the given type for the given key, if present."
    },
    {
      "name": "func decodeIfPresent(UInt8.Type, forKey: KeyedDecodingContainer<K>.Key) -> UInt8?",
      "desc": "Decodes a value of the given type for the given key, if present."
    },
    {
      "name": "func decodeIfPresent(Int8.Type, forKey: KeyedDecodingContainer<K>.Key) -> Int8?",
      "desc": "Decodes a value of the given type for the given key, if present."
    },
    {
      "name": "func decodeIfPresent(Int32.Type, forKey: KeyedDecodingContainer<K>.Key) -> Int32?",
      "desc": "Decodes a value of the given type for the given key, if present."
    },
    {
      "name": "func decodeIfPresent<T>(T.Type, forKey: KeyedDecodingContainer<K>.Key) -> T?",
      "desc": "Decodes a value of the given type for the given key, if present."
    },
    {
      "name": "func decodeIfPresent(Double.Type, forKey: KeyedDecodingContainer<K>.Key) -> Double?",
      "desc": "Decodes a value of the given type for the given key, if present."
    },
    {
      "name": "func decodeIfPresent(Float.Type, forKey: KeyedDecodingContainer<K>.Key) -> Float?",
      "desc": "Decodes a value of the given type for the given key, if present."
    },
    {
      "name": "func decodeIfPresent(Int16.Type, forKey: KeyedDecodingContainer<K>.Key) -> Int16?",
      "desc": "Decodes a value of the given type for the given key, if present."
    },
    {
      "name": "func decodeIfPresent(Int16.Type, forKey: K) -> Int16?"
    },
    {
      "name": "func decodeIfPresent(Double.Type, forKey: K) -> Double?"
    },
    {
      "name": "func decodeIfPresent(Int32.Type, forKey: K) -> Int32?"
    },
    {
      "name": "func decodeIfPresent(UInt64.Type, forKey: K) -> UInt64?"
    },
    {
      "name": "func decodeIfPresent(UInt16.Type, forKey: K) -> UInt16?"
    },
    {
      "name": "func decodeIfPresent(String.Type, forKey: K) -> String?"
    },
    {
      "name": "func decodeIfPresent(Int64.Type, forKey: K) -> Int64?"
    },
    {
      "name": "func decodeIfPresent(Float.Type, forKey: K) -> Float?"
    },
    {
      "name": "func decodeIfPresent<T>(T.Type, forKey: K) -> T?"
    },
    {
      "name": "func decodeIfPresent(UInt32.Type, forKey: K) -> UInt32?"
    },
    {
      "name": "func decodeIfPresent(Int8.Type, forKey: K) -> Int8?"
    },
    {
      "name": "func decodeIfPresent(UInt.Type, forKey: K) -> UInt?"
    },
    {
      "name": "func decodeIfPresent(Bool.Type, forKey: K) -> Bool?"
    },
    {
      "name": "func decodeIfPresent(UInt8.Type, forKey: K) -> UInt8?"
    },
    {
      "name": "func decodeIfPresent(Int.Type, forKey: K) -> Int?"
    },
    {
      "name": "func decodeIfPresent<T>(T.Type, forKey: KeyedDecodingContainer<K>.Key, configuration: T.DecodingConfiguration) -> T?"
    },
    {
      "name": "func decodeIfPresent<T, C>(T.Type, forKey: KeyedDecodingContainer<K>.Key, configuration: C.Type) -> T?"
    },
    {
      "name": "func decodeNil(forKey: KeyedDecodingContainer<K>.Key) -> Bool",
      "desc": "Decodes a null value for the given key."
    },
    {
      "name": "func nestedContainer<NestedKey>(keyedBy: NestedKey.Type, forKey: KeyedDecodingContainer<K>.Key) -> KeyedDecodingContainer<NestedKey>",
      "desc": "Returns the data stored for the given key as represented in a container keyed by the given key type."
    },
    {
      "name": "func nestedUnkeyedContainer(forKey: KeyedDecodingContainer<K>.Key) -> UnkeyedDecodingContainer",
      "desc": "Returns the data stored for the given key as represented in an unkeyed container."
    },
    {
      "name": "func superDecoder() -> Decoder",
      "desc": "Returns a Decoder instance for decoding super from the container associated with the default super key."
    },
    {
      "name": "func superDecoder(forKey: KeyedDecodingContainer<K>.Key) -> Decoder",
      "desc": "Returns a Decoder instance for decoding super from the container associated with the given key."
    }
  ],
  "declaration": "struct KeyedDecodingContainer<K> where K : CodingKey",
  "conformsTo": [
    "KeyedDecodingContainerProtocol"
  ]
}