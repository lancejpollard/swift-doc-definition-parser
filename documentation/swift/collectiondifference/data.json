{
  "path": "/documentation/swift/collectiondifference",
  "type": "Generic Structure",
  "name": "CollectionDifference",
  "desc": "A collection of insertions and removals that describe the difference between two ordered collection states.",
  "items": [
    {
      "name": "typealias CollectionDifference.Element",
      "desc": "A type representing the sequence’s elements."
    },
    {
      "name": "typealias CollectionDifference.Indices",
      "desc": "A type that represents the indices that are valid for subscripting the collection, in ascending order."
    },
    {
      "name": "typealias CollectionDifference.Iterator",
      "desc": "A type that provides the collection’s iteration interface and encapsulates its iteration state."
    },
    {
      "name": "typealias CollectionDifference.SubSequence",
      "desc": "A collection representing a contiguous subrange of this collection’s elements. The subsequence shares indices with the original collection."
    },
    {
      "name": "init?<Changes>(Changes)",
      "desc": "Creates a new collection difference from a collection of changes."
    },
    {
      "name": "init(from: Decoder)",
      "desc": "Creates a new instance by decoding from the given decoder."
    },
    {
      "name": "var count: Int",
      "desc": "The number of elements in the collection."
    },
    {
      "name": "var endIndex: CollectionDifference<ChangeElement>.Index",
      "desc": "The collection’s “past the end” position—that is, the position one greater than the last valid subscript argument."
    },
    {
      "name": "var first: Change?",
      "desc": "The first element of the collection."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value."
    },
    {
      "name": "var indices: DefaultIndices<CollectionDifference<ChangeElement>>",
      "desc": "The indices that are valid for subscripting the collection, in ascending order."
    },
    {
      "name": "let insertions: [CollectionDifference<ChangeElement>.Change]",
      "desc": "The insertions contained by this difference, from lowest offset to highest."
    },
    {
      "name": "var isEmpty: Bool",
      "desc": "A Boolean value indicating whether the collection is empty."
    },
    {
      "name": "var lazy: LazySequence<CollectionDifference<ChangeElement>>",
      "desc": "A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily."
    },
    {
      "name": "let removals: [CollectionDifference<ChangeElement>.Change]",
      "desc": "The removals contained by this difference, from lowest offset to highest."
    },
    {
      "name": "var startIndex: CollectionDifference<ChangeElement>.Index",
      "desc": "The position of the first element in a nonempty collection."
    },
    {
      "name": "var underestimatedCount: Int",
      "desc": "A value less than or equal to the number of elements in the collection."
    },
    {
      "name": "func allSatisfy((Change) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate."
    },
    {
      "name": "func compactMap<ElementOfResult>((Change) -> ElementOfResult?) -> [ElementOfResult]",
      "desc": "Returns an array containing the non-nil results of calling the given transformation with each element of this sequence."
    },
    {
      "name": "func contains(Change) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence contains the given element."
    },
    {
      "name": "func contains(where: (Change) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate."
    },
    {
      "name": "func distance(from: CollectionDifference<ChangeElement>.Index, to: CollectionDifference<ChangeElement>.Index) -> Int",
      "desc": "Returns the distance between two indices."
    },
    {
      "name": "func drop(while: (Change) -> Bool) -> Slice<CollectionDifference<ChangeElement>>",
      "desc": "Returns a subsequence by skipping elements while predicate returns true and returning the remaining elements."
    },
    {
      "name": "func dropFirst(Int) -> Slice<CollectionDifference<ChangeElement>>",
      "desc": "Returns a subsequence containing all but the given number of initial elements."
    },
    {
      "name": "func dropLast(Int) -> Slice<CollectionDifference<ChangeElement>>",
      "desc": "Returns a subsequence containing all but the specified number of final elements."
    },
    {
      "name": "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
      "desc": "Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order."
    },
    {
      "name": "func elementsEqual<OtherSequence>(OtherSequence, by: (Change, OtherSequence.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test."
    },
    {
      "name": "func encode(to: Encoder)",
      "desc": "Encodes this value into the given encoder."
    },
    {
      "name": "func enumerated() -> EnumeratedSequence<CollectionDifference<ChangeElement>>",
      "desc": "Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence."
    },
    {
      "name": "func filter((Change) -> Bool) -> [Change]",
      "desc": "Returns an array containing, in order, the elements of the sequence that satisfy the given predicate."
    },
    {
      "name": "func first(where: (Change) -> Bool) -> Change?",
      "desc": "Returns the first element of the sequence that satisfies the given predicate."
    },
    {
      "name": "func firstIndex(of: Change) -> Index?",
      "desc": "Returns the first index where the specified value appears in the collection."
    },
    {
      "name": "func firstIndex(where: (Change) -> Bool) -> Index?",
      "desc": "Returns the first index in which an element of the collection satisfies the given predicate."
    },
    {
      "name": "func flatMap<SegmentOfResult>((Change) -> SegmentOfResult) -> [SegmentOfResult.Element]",
      "desc": "Returns an array containing the concatenated results of calling the given transformation with each element of this sequence."
    },
    {
      "name": "func forEach((Change) -> Void)",
      "desc": "Calls the given closure on each element in the sequence in the same order as a for-in loop."
    },
    {
      "name": "func formIndex(inout CollectionDifference<ChangeElement>.Index, offsetBy: Int)"
    },
    {
      "name": "func formIndex(inout Index, offsetBy: Int, limitedBy: Index) -> Bool",
      "desc": "Offsets the given index by the specified distance, or so that it equals the given limiting index."
    },
    {
      "name": "func formIndex(after: inout Index)",
      "desc": "Replaces the given index with its successor."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of this value by feeding them into the given hasher."
    },
    {
      "name": "func index(Index, offsetBy: Int) -> Index",
      "desc": "Returns an index that is the specified distance from the given index."
    },
    {
      "name": "func index(Index, offsetBy: Int, limitedBy: Index) -> Index?",
      "desc": "Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index."
    },
    {
      "name": "func index(after: CollectionDifference<ChangeElement>.Index) -> CollectionDifference<ChangeElement>.Index",
      "desc": "Returns the position immediately after the given index."
    },
    {
      "name": "func index(before: CollectionDifference<ChangeElement>.Index) -> CollectionDifference<ChangeElement>.Index"
    },
    {
      "name": "func inferringMoves() -> CollectionDifference<ChangeElement>",
      "desc": "Returns a new collection difference with associations between individual elements that have been removed and inserted only once."
    },
    {
      "name": "func inverse() -> CollectionDifference<ChangeElement>"
    },
    {
      "name": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Change, Change) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements."
    },
    {
      "name": "func makeIterator() -> IndexingIterator<CollectionDifference<ChangeElement>>",
      "desc": "Returns an iterator over the elements of the collection."
    },
    {
      "name": "func map<T>((Change) -> T) -> [T]",
      "desc": "Returns an array containing the results of mapping the given closure over the sequence’s elements."
    },
    {
      "name": "func max(by: (Change, Change) -> Bool) -> Change?",
      "desc": "Returns the maximum element in the sequence, using the given predicate as the comparison between elements."
    },
    {
      "name": "func min(by: (Change, Change) -> Bool) -> Change?",
      "desc": "Returns the minimum element in the sequence, using the given predicate as the comparison between elements."
    },
    {
      "name": "func prefix(Int) -> Slice<CollectionDifference<ChangeElement>>",
      "desc": "Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection."
    },
    {
      "name": "func prefix(through: Index) -> Slice<CollectionDifference<ChangeElement>>",
      "desc": "Returns a subsequence from the start of the collection through the specified position."
    },
    {
      "name": "func prefix(upTo: Index) -> Slice<CollectionDifference<ChangeElement>>",
      "desc": "Returns a subsequence from the start of the collection up to, but not including, the specified position."
    },
    {
      "name": "func prefix(while: (Change) -> Bool) -> Slice<CollectionDifference<ChangeElement>>",
      "desc": "Returns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements."
    },
    {
      "name": "func randomElement() -> Change?",
      "desc": "Returns a random element of the collection."
    },
    {
      "name": "func randomElement<T>(using: inout T) -> Change?",
      "desc": "Returns a random element of the collection, using the given generator as a source for randomness."
    },
    {
      "name": "func reduce<Result>(Result, (Result, Change) -> Result) -> Result",
      "desc": "Returns the result of combining the elements of the sequence using the given closure."
    },
    {
      "name": "func reduce<Result>(into: Result, (inout Result, Change) -> ()) -> Result",
      "desc": "Returns the result of combining the elements of the sequence using the given closure."
    },
    {
      "name": "func reversed() -> [Change]",
      "desc": "Returns an array containing the elements of this sequence in reverse order."
    },
    {
      "name": "func shuffled() -> [Change]",
      "desc": "Returns the elements of the sequence, shuffled."
    },
    {
      "name": "func shuffled<T>(using: inout T) -> [Change]",
      "desc": "Returns the elements of the sequence, shuffled using the given generator as a source for randomness."
    },
    {
      "name": "func sorted(by: (Change, Change) -> Bool) -> [Change]",
      "desc": "Returns the elements of the sequence, sorted using the given predicate as the comparison between elements."
    },
    {
      "name": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Change) -> Bool) -> [Slice<CollectionDifference<ChangeElement>>]",
      "desc": "Returns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
    },
    {
      "name": "func split(separator: Change, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Change>]",
      "desc": "Returns the longest possible subsequences of the sequence, in order, around elements equal to the given element."
    },
    {
      "name": "func split(separator: Change, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Slice<CollectionDifference<ChangeElement>>]",
      "desc": "Returns the longest possible subsequences of the collection, in order, around elements equal to the given element."
    },
    {
      "name": "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
      "desc": "Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence."
    },
    {
      "name": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Change, PossiblePrefix.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test."
    },
    {
      "name": "func suffix(Int) -> Slice<CollectionDifference<ChangeElement>>",
      "desc": "Returns a subsequence, up to the given maximum length, containing the final elements of the collection."
    },
    {
      "name": "func suffix(from: Index) -> Slice<CollectionDifference<ChangeElement>>",
      "desc": "Returns a subsequence from the specified position to the end of the collection."
    },
    {
      "name": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Change>) -> R) -> R?",
      "desc": "Executes a closure on the sequence’s contiguous storage."
    },
    {
      "name": "subscript<R>(R) -> Slice<CollectionDifference<ChangeElement>>",
      "desc": "Accesses the contiguous subrange of the collection’s elements specified by a range expression."
    },
    {
      "name": "subscript((UnboundedRange_) -> ()) -> Slice<CollectionDifference<ChangeElement>>"
    },
    {
      "name": "subscript(Range<Index>) -> Slice<CollectionDifference<ChangeElement>>",
      "desc": "Accesses a contiguous subrange of the collection’s elements."
    },
    {
      "name": "subscript(CollectionDifference<ChangeElement>.Index) -> CollectionDifference<ChangeElement>.Element",
      "desc": "Accesses the element at the specified position."
    },
    {
      "name": "static func != (CollectionDifference<ChangeElement>, CollectionDifference<ChangeElement>) -> Bool",
      "desc": "Available when ChangeElement conforms to Equatable."
    },
    {
      "name": "static func == (CollectionDifference<ChangeElement>, CollectionDifference<ChangeElement>) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are equal."
    },
    {
      "name": "struct CollectionDifference.Index",
      "desc": "The position of a collection difference."
    },
    {
      "name": "enum CollectionDifference.Change",
      "desc": "A single change to a collection."
    }
  ],
  "declaration": "struct CollectionDifference<ChangeElement>",
  "conformsTo": [
    "Collection",
    "Decodable",
    "Encodable",
    "Equatable",
    "Hashable"
  ]
}