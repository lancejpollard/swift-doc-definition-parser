{
  "path": "/documentation/swift/fixedwidthinteger",
  "type": "Protocol",
  "name": "FixedWidthInteger",
  "desc": "An integer type that uses a fixed size for every instance.",
  "items": [
    {
      "name": "init?<S>(S, radix: Int)",
      "desc": "Creates a new integer value from the given string and radix."
    },
    {
      "name": "init(bigEndian: Self)",
      "desc": "Creates an integer from its big-endian representation, changing the byte order if necessary."
    },
    {
      "name": "init(littleEndian: Self)",
      "desc": "Creates an integer from its little-endian representation, changing the byte order if necessary."
    },
    {
      "name": "var bigEndian: Self",
      "desc": "The big-endian representation of this integer."
    },
    {
      "name": "var byteSwapped: Self",
      "desc": "A representation of this integer with the byte order swapped."
    },
    {
      "name": "var leadingZeroBitCount: Int",
      "desc": "The number of leading zeros in this value’s binary representation."
    },
    {
      "name": "var littleEndian: Self",
      "desc": "The little-endian representation of this integer."
    },
    {
      "name": "var nonzeroBitCount: Int",
      "desc": "The number of bits equal to 1 in this value’s binary representation."
    },
    {
      "name": "static var bitWidth: Int",
      "desc": "The number of bits used for the underlying binary representation of values of this type."
    },
    {
      "name": "static var max: Self",
      "desc": "The maximum representable integer in this type."
    },
    {
      "name": "static var min: Self",
      "desc": "The minimum representable integer in this type."
    },
    {
      "name": "func addingReportingOverflow(Self) -> (partialValue: Self, overflow: Bool)",
      "desc": "Returns the sum of this value and the given value, along with a Boolean value indicating whether overflow occurred in the operation."
    },
    {
      "name": "func dividedReportingOverflow(by: Self) -> (partialValue: Self, overflow: Bool)",
      "desc": "Returns the quotient obtained by dividing this value by the given value, along with a Boolean value indicating whether overflow occurred in the operation."
    },
    {
      "name": "func dividingFullWidth((high: Self, low: Self.Magnitude)) -> (quotient: Self, remainder: Self)",
      "desc": "Returns a tuple containing the quotient and remainder obtained by dividing the given value by this value."
    },
    {
      "name": "func multipliedFullWidth(by: Self) -> (high: Self, low: Self.Magnitude)",
      "desc": "Returns a tuple containing the high and low parts of the result of multiplying this value by the given value."
    },
    {
      "name": "func multipliedReportingOverflow(by: Self) -> (partialValue: Self, overflow: Bool)",
      "desc": "Returns the product of this value and the given value, along with a Boolean value indicating whether overflow occurred in the operation."
    },
    {
      "name": "func remainderReportingOverflow(dividingBy: Self) -> (partialValue: Self, overflow: Bool)",
      "desc": "Returns the remainder after dividing this value by the given value, along with a Boolean value indicating whether overflow occurred during division."
    },
    {
      "name": "func subtractingReportingOverflow(Self) -> (partialValue: Self, overflow: Bool)",
      "desc": "Returns the difference obtained by subtracting the given value from this value, along with a Boolean value indicating whether overflow occurred in the operation."
    },
    {
      "name": "static func random(in: ClosedRange<Self>) -> Self",
      "desc": "Returns a random value within the specified range."
    },
    {
      "name": "static func random(in: Range<Self>) -> Self",
      "desc": "Returns a random value within the specified range."
    },
    {
      "name": "static func random<T>(in: ClosedRange<Self>, using: inout T) -> Self",
      "desc": "Returns a random value within the specified range, using the given generator as a source for randomness."
    },
    {
      "name": "static func random<T>(in: Range<Self>, using: inout T) -> Self",
      "desc": "Returns a random value within the specified range, using the given generator as a source for randomness."
    },
    {
      "name": "static func &* (Self, Self) -> Self",
      "desc": "Returns the product of the two given values, wrapping the result in case of any overflow."
    },
    {
      "name": "static func &*= (inout Self, Self)",
      "desc": "Multiplies two values and stores the result in the left-hand-side variable, wrapping any overflow."
    },
    {
      "name": "static func &+ (Self, Self) -> Self",
      "desc": "Returns the sum of the two given values, wrapping the result in case of any overflow."
    },
    {
      "name": "static func &+= (inout Self, Self)",
      "desc": "Adds two values and stores the result in the left-hand-side variable, wrapping any overflow."
    },
    {
      "name": "static func &- (Self, Self) -> Self",
      "desc": "Returns the difference of the two given values, wrapping the result in case of any overflow."
    },
    {
      "name": "static func &-= (inout Self, Self)",
      "desc": "Subtracts the second value from the first and stores the difference in the left-hand-side variable, wrapping any overflow."
    },
    {
      "name": "static func &<< (Self, Self) -> Self",
      "desc": "Returns the result of shifting a value’s binary representation the specified number of digits to the left, masking the shift amount to the type’s bit width."
    },
    {
      "name": "static func &<<= (inout Self, Self)",
      "desc": "Returns the result of shifting a value’s binary representation the specified number of digits to the left, masking the shift amount to the type’s bit width, and stores the result in the left-hand-side variable."
    },
    {
      "name": "static func &>> (Self, Self) -> Self",
      "desc": "Returns the result of shifting a value’s binary representation the specified number of digits to the right, masking the shift amount to the type’s bit width."
    },
    {
      "name": "static func &>>= (inout Self, Self)",
      "desc": "Calculates the result of shifting a value’s binary representation the specified number of digits to the right, masking the shift amount to the type’s bit width, and stores the result in the left-hand-side variable."
    }
  ],
  "declaration": "protocol FixedWidthInteger where Self.Magnitude : FixedWidthInteger, Self.Magnitude : UnsignedInteger, Self.Stride : FixedWidthInteger, Self.Stride : SignedInteger",
  "inheritsFrom": [
    "BinaryInteger",
    "LosslessStringConvertible"
  ]
}