{
  "path": "/documentation/swift/int",
  "type": "Structure",
  "name": "Int",
  "desc": "A signed integer value type.",
  "items": [
    {
      "name": "init<T>(T)",
      "desc": "Creates a new instance from the given integer."
    },
    {
      "name": "init?<T>(exactly: T)",
      "desc": "Creates a new instance from the given integer, if it can be represented exactly."
    },
    {
      "name": "init<Other>(clamping: Other)",
      "desc": "Creates a new instance with the representable value that’s closest to the given integer."
    },
    {
      "name": "init<T>(truncatingIfNeeded: T)",
      "desc": "Creates a new instance from the bit pattern of the given instance by truncating or sign-extending if needed to fit this type."
    },
    {
      "name": "init(bitPattern: UInt)",
      "desc": "Creates a new instance with the same memory representation as the given value."
    },
    {
      "name": "init?(exactly: NSNumber)"
    },
    {
      "name": "init(truncating: NSNumber)"
    },
    {
      "name": "init<T>(T)",
      "desc": "Creates an integer from the given floating-point value, rounding toward zero. Any fractional part of the value passed as source is removed."
    },
    {
      "name": "init(Double)",
      "desc": "Creates an integer from the given floating-point value, rounding toward zero."
    },
    {
      "name": "init(Float)",
      "desc": "Creates an integer from the given floating-point value, rounding toward zero."
    },
    {
      "name": "init(CGFloat)",
      "desc": "Creates an integer from the given floating-point value, rounding toward zero."
    },
    {
      "name": "init(Float16)",
      "desc": "Creates an integer from the given floating-point value, rounding toward zero."
    },
    {
      "name": "init(Float80)",
      "desc": "Creates an integer from the given floating-point value, rounding toward zero."
    },
    {
      "name": "init?<T>(exactly: T)",
      "desc": "Creates an integer from the given floating-point value, if it can be represented exactly."
    },
    {
      "name": "init?(exactly: Double)",
      "desc": "Creates an integer from the given floating-point value, if it can be represented exactly."
    },
    {
      "name": "init?(exactly: Float)",
      "desc": "Creates an integer from the given floating-point value, if it can be represented exactly."
    },
    {
      "name": "init?(exactly: Float16)",
      "desc": "Creates an integer from the given floating-point value, if it can be represented exactly."
    },
    {
      "name": "init?(exactly: Float80)",
      "desc": "Creates an integer from the given floating-point value, if it can be represented exactly."
    },
    {
      "name": "init?(String)",
      "desc": "Creates a new integer value from the given string."
    },
    {
      "name": "init?<S>(S, radix: Int)",
      "desc": "Creates a new integer value from the given string and radix."
    },
    {
      "name": "static func random(in: Range<Int>) -> Int",
      "desc": "Returns a random value within the specified range."
    },
    {
      "name": "static func random<T>(in: Range<Int>, using: inout T) -> Int",
      "desc": "Returns a random value within the specified range, using the given generator as a source for randomness."
    },
    {
      "name": "static func random(in: ClosedRange<Int>) -> Int",
      "desc": "Returns a random value within the specified range."
    },
    {
      "name": "static func random<T>(in: ClosedRange<Int>, using: inout T) -> Int",
      "desc": "Returns a random value within the specified range, using the given generator as a source for randomness."
    },
    {
      "name": "func negate()",
      "desc": "Replaces this value with its additive inverse."
    },
    {
      "name": "func quotientAndRemainder(dividingBy: Int) -> (quotient: Int, remainder: Int)",
      "desc": "Returns the quotient and remainder of this value divided by the given value."
    },
    {
      "name": "func isMultiple(of: Int) -> Bool",
      "desc": "Returns true if this value is a multiple of the given value, and false otherwise."
    },
    {
      "name": "func addingReportingOverflow(Int) -> (partialValue: Int, overflow: Bool)",
      "desc": "Returns the sum of this value and the given value, along with a Boolean value indicating whether overflow occurred in the operation."
    },
    {
      "name": "func subtractingReportingOverflow(Int) -> (partialValue: Int, overflow: Bool)",
      "desc": "Returns the difference obtained by subtracting the given value from this value, along with a Boolean value indicating whether overflow occurred in the operation."
    },
    {
      "name": "func multipliedReportingOverflow(by: Int) -> (partialValue: Int, overflow: Bool)",
      "desc": "Returns the product of this value and the given value, along with a Boolean value indicating whether overflow occurred in the operation."
    },
    {
      "name": "func dividedReportingOverflow(by: Int) -> (partialValue: Int, overflow: Bool)",
      "desc": "Returns the quotient obtained by dividing this value by the given value, along with a Boolean value indicating whether overflow occurred in the operation."
    },
    {
      "name": "func remainderReportingOverflow(dividingBy: Int) -> (partialValue: Int, overflow: Bool)",
      "desc": "Returns the remainder after dividing this value by the given value, along with a Boolean value indicating whether overflow occurred during division."
    },
    {
      "name": "func multipliedFullWidth(by: Int) -> (high: Int, low: Int.Magnitude)",
      "desc": "Returns a tuple containing the high and low parts of the result of multiplying this value by the given value."
    },
    {
      "name": "func dividingFullWidth((high: Int, low: Int.Magnitude)) -> (quotient: Int, remainder: Int)",
      "desc": "Returns a tuple containing the quotient and remainder of dividing the given value by this value."
    },
    {
      "name": "var magnitude: UInt",
      "desc": "The magnitude of this value."
    },
    {
      "name": "typealias Int.Magnitude",
      "desc": "A type that can represent the absolute value of any possible value of this type."
    },
    {
      "name": "func abs<T>(T) -> T",
      "desc": "Returns the absolute value of the given number."
    },
    {
      "name": "func signum() -> Int",
      "desc": "Returns -1 if this value is negative and 1 if it’s positive; otherwise, 0."
    },
    {
      "name": "static var zero: Int",
      "desc": "The zero value."
    },
    {
      "name": "static var min: Int",
      "desc": "The minimum representable integer in this type."
    },
    {
      "name": "static var max: Int",
      "desc": "The maximum representable integer in this type."
    },
    {
      "name": "static var isSigned: Bool",
      "desc": "A Boolean value indicating whether this type is a signed integer type."
    },
    {
      "name": "var byteSwapped: Int",
      "desc": "A representation of this integer with the byte order swapped."
    },
    {
      "name": "var littleEndian: Int",
      "desc": "The little-endian representation of this integer."
    },
    {
      "name": "var bigEndian: Int",
      "desc": "The big-endian representation of this integer."
    },
    {
      "name": "init(littleEndian: Int)",
      "desc": "Creates an integer from its little-endian representation, changing the byte order if necessary."
    },
    {
      "name": "init(bigEndian: Int)",
      "desc": "Creates an integer from its big-endian representation, changing the byte order if necessary."
    },
    {
      "name": "static var bitWidth: Int",
      "desc": "The number of bits used for the underlying binary representation of values of this type."
    },
    {
      "name": "var bitWidth: Int",
      "desc": "The number of bits in the binary representation of this value."
    },
    {
      "name": "var nonzeroBitCount: Int",
      "desc": "The number of bits equal to 1 in this value’s binary representation."
    },
    {
      "name": "var leadingZeroBitCount: Int",
      "desc": "The number of leading zeros in this value’s binary representation."
    },
    {
      "name": "var trailingZeroBitCount: Int",
      "desc": "The number of trailing zeros in this value’s binary representation."
    },
    {
      "name": "var words: Int.Words",
      "desc": "A collection containing the words of this value’s binary representation, in order from the least significant to most significant."
    },
    {
      "name": "struct Int.Words",
      "desc": "A type that represents the words of this integer."
    },
    {
      "name": "init<P>(bitPattern: P?)",
      "desc": "Creates a new value with the bit pattern of the given pointer."
    },
    {
      "name": "init(bitPattern: ObjectIdentifier)",
      "desc": "Creates an integer that captures the full value of the given object identifier."
    },
    {
      "name": "init(bitPattern: OpaquePointer?)",
      "desc": "Creates a new value with the bit pattern of the given pointer."
    },
    {
      "name": "func encode(to: Encoder)",
      "desc": "Encodes this value into the given encoder."
    },
    {
      "name": "init(from: Decoder)",
      "desc": "Creates a new instance by decoding from the given decoder."
    },
    {
      "name": "var description: String",
      "desc": "A textual representation of this value."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of this value by feeding them into the given hasher."
    },
    {
      "name": "var customMirror: Mirror",
      "desc": "A mirror that reflects the Int instance."
    },
    {
      "name": "init?(from: MLDataValue)",
      "desc": "Creates an integer from another integer wrapped in a data value."
    },
    {
      "name": "var dataValue: MLDataValue",
      "desc": "The integer wrapped in a data value."
    },
    {
      "name": "var identifierValue: MLDataValue",
      "desc": "The integer value of the unique identifier wrapped in a data value."
    },
    {
      "name": "static var dataValueType: MLDataValue.ValueType",
      "desc": "The underlying type an integer uses when it wraps itself in a data value."
    },
    {
      "name": "init()",
      "desc": "Creates a new value equal to zero."
    },
    {
      "name": "init(integerLiteral: Int)",
      "desc": "Creates an instance initialized to the specified integer value."
    },
    {
      "name": "typealias Int.IntegerLiteralType",
      "desc": "A type that represents an integer literal."
    },
    {
      "name": "func distance(to: Int) -> Int",
      "desc": "Returns the distance from this value to the given value, expressed as a stride."
    },
    {
      "name": "func advanced(by: Int) -> Int",
      "desc": "Returns a value that is offset the specified distance from this value."
    },
    {
      "name": "typealias Int.Stride",
      "desc": "A type that represents the distance between two values."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value."
    },
    {
      "name": "typealias Int.SIMDMaskScalar"
    },
    {
      "name": "struct Int.SIMD2Storage",
      "desc": "Storage for a vector of two integers."
    },
    {
      "name": "struct Int.SIMD4Storage",
      "desc": "Storage for a vector of four integers."
    },
    {
      "name": "struct Int.SIMD8Storage",
      "desc": "Storage for a vector of eight integers."
    },
    {
      "name": "struct Int.SIMD16Storage",
      "desc": "Storage for a vector of 16 integers."
    },
    {
      "name": "struct Int.SIMD32Storage",
      "desc": "Storage for a vector of 32 integers."
    },
    {
      "name": "struct Int.SIMD64Storage",
      "desc": "Storage for a vector of 64 integers."
    },
    {
      "name": "init?<T>(codingKey: T)"
    },
    {
      "name": "var codingKey: CodingKey"
    }
  ],
  "declaration": "Declaration@frozen struct Int",
  "conformsTo": [
    "BindableData",
    "CKRecordValueProtocol",
    "CVarArg",
    "CodingKeyRepresentable",
    "CustomReflectable",
    "Decodable",
    "Encodable",
    "FixedWidthInteger",
    "Hashable",
    "MLDataValueConvertible",
    "MLIdentifier",
    "SIMDScalar",
    "SignedInteger"
  ]
}