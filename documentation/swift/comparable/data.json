{
  "path": "/documentation/swift/comparable",
  "type": "Protocol",
  "name": "Comparable",
  "desc": "A type that can be compared using the relational operators <, <=, >=, and >.",
  "items": [
    {
      "name": "static func < (Self, Self) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument."
    },
    {
      "name": "static func <= (Self, Self) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument."
    },
    {
      "name": "static func > (Self, Self) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument."
    },
    {
      "name": "static func >= (Self, Self) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument."
    },
    {
      "name": "static func ..< (Self, Self) -> Range<Self>",
      "desc": "Returns a half-open range that contains its lower bound but not its upper bound."
    },
    {
      "name": "static func ... (Self, Self) -> ClosedRange<Self>",
      "desc": "Returns a closed range that contains both of its bounds."
    },
    {
      "name": "static func ... (Self) -> PartialRangeFrom<Self>",
      "desc": "Returns a partial range extending upward from a lower bound."
    },
    {
      "name": "static func ... (Self) -> PartialRangeThrough<Self>",
      "desc": "Returns a partial range up to, and including, its upper bound."
    },
    {
      "name": "static func ..< (Self) -> PartialRangeUpTo<Self>",
      "desc": "Returns a partial range up to, but not including, its upper bound."
    },
    {
      "name": "func < ((), ()) -> Bool",
      "desc": "Returns a Boolean value indicating whether the first tuple is ordered before the second in a lexicographical ordering."
    },
    {
      "name": "func < <A, B>((A, B), (A, B)) -> Bool",
      "desc": "Returns a Boolean value indicating whether the first tuple is ordered before the second in a lexicographical ordering."
    },
    {
      "name": "func < <A, B, C>((A, B, C), (A, B, C)) -> Bool",
      "desc": "Returns a Boolean value indicating whether the first tuple is ordered before the second in a lexicographical ordering."
    },
    {
      "name": "func < <A, B, C, D>((A, B, C, D), (A, B, C, D)) -> Bool",
      "desc": "Returns a Boolean value indicating whether the first tuple is ordered before the second in a lexicographical ordering."
    },
    {
      "name": "func < <A, B, C, D, E>((A, B, C, D, E), (A, B, C, D, E)) -> Bool",
      "desc": "Returns a Boolean value indicating whether the first tuple is ordered before the second in a lexicographical ordering."
    },
    {
      "name": "func < <A, B, C, D, E, F>((A, B, C, D, E, F), (A, B, C, D, E, F)) -> Bool",
      "desc": "Returns a Boolean value indicating whether the first tuple is ordered before the second in a lexicographical ordering."
    },
    {
      "name": "func <= ((), ()) -> Bool",
      "desc": "Returns a Boolean value indicating whether the first tuple is ordered before or the same as the second in a lexicographical ordering."
    },
    {
      "name": "func <= <A, B>((A, B), (A, B)) -> Bool",
      "desc": "Returns a Boolean value indicating whether the first tuple is ordered before or the same as the second in a lexicographical ordering."
    },
    {
      "name": "func <= <A, B, C>((A, B, C), (A, B, C)) -> Bool",
      "desc": "Returns a Boolean value indicating whether the first tuple is ordered before or the same as the second in a lexicographical ordering."
    },
    {
      "name": "func <= <A, B, C, D>((A, B, C, D), (A, B, C, D)) -> Bool",
      "desc": "Returns a Boolean value indicating whether the first tuple is ordered before or the same as the second in a lexicographical ordering."
    },
    {
      "name": "func <= <A, B, C, D, E>((A, B, C, D, E), (A, B, C, D, E)) -> Bool",
      "desc": "Returns a Boolean value indicating whether the first tuple is ordered before or the same as the second in a lexicographical ordering."
    },
    {
      "name": "func <= <A, B, C, D, E, F>((A, B, C, D, E, F), (A, B, C, D, E, F)) -> Bool",
      "desc": "Returns a Boolean value indicating whether the first tuple is ordered before or the same as the second in a lexicographical ordering."
    },
    {
      "name": "func > ((), ()) -> Bool",
      "desc": "Returns a Boolean value indicating whether the first tuple is ordered after the second in a lexicographical ordering."
    },
    {
      "name": "func > <A, B>((A, B), (A, B)) -> Bool",
      "desc": "Returns a Boolean value indicating whether the first tuple is ordered after the second in a lexicographical ordering."
    },
    {
      "name": "func > <A, B, C>((A, B, C), (A, B, C)) -> Bool",
      "desc": "Returns a Boolean value indicating whether the first tuple is ordered after the second in a lexicographical ordering."
    },
    {
      "name": "func > <A, B, C, D>((A, B, C, D), (A, B, C, D)) -> Bool",
      "desc": "Returns a Boolean value indicating whether the first tuple is ordered after the second in a lexicographical ordering."
    },
    {
      "name": "func > <A, B, C, D, E>((A, B, C, D, E), (A, B, C, D, E)) -> Bool",
      "desc": "Returns a Boolean value indicating whether the first tuple is ordered after the second in a lexicographical ordering."
    },
    {
      "name": "func > <A, B, C, D, E, F>((A, B, C, D, E, F), (A, B, C, D, E, F)) -> Bool",
      "desc": "Returns a Boolean value indicating whether the first tuple is ordered after the second in a lexicographical ordering."
    },
    {
      "name": "func >= ((), ()) -> Bool",
      "desc": "Returns a Boolean value indicating whether the first tuple is ordered after or the same as the second in a lexicographical ordering."
    },
    {
      "name": "func >= <A, B>((A, B), (A, B)) -> Bool",
      "desc": "Returns a Boolean value indicating whether the first tuple is ordered after or the same as the second in a lexicographical ordering."
    },
    {
      "name": "func >= <A, B, C>((A, B, C), (A, B, C)) -> Bool",
      "desc": "Returns a Boolean value indicating whether the first tuple is ordered after or the same as the second in a lexicographical ordering."
    },
    {
      "name": "func >= <A, B, C, D>((A, B, C, D), (A, B, C, D)) -> Bool",
      "desc": "Returns a Boolean value indicating whether the first tuple is ordered after or the same as the second in a lexicographical ordering."
    },
    {
      "name": "func >= <A, B, C, D, E>((A, B, C, D, E), (A, B, C, D, E)) -> Bool",
      "desc": "Returns a Boolean value indicating whether the first tuple is ordered after or the same as the second in a lexicographical ordering."
    },
    {
      "name": "func >= <A, B, C, D, E, F>((A, B, C, D, E, F), (A, B, C, D, E, F)) -> Bool",
      "desc": "Returns a Boolean value indicating whether the first tuple is ordered after or the same as the second in a lexicographical ordering."
    }
  ],
  "declaration": "protocol Comparable",
  "inheritsFrom": [
    "Equatable"
  ]
}