{
  "path": "/documentation/swift/slice",
  "type": "Generic Structure",
  "name": "Slice",
  "desc": "A view into a subsequence of elements of another collection.",
  "items": [
    {
      "name": "typealias Slice.Element",
      "desc": "A type representing the sequence’s elements."
    },
    {
      "name": "typealias Slice.Index",
      "desc": "A type that represents a position in the collection."
    },
    {
      "name": "typealias Slice.Indices",
      "desc": "A type that represents the indices that are valid for subscripting the collection, in ascending order."
    },
    {
      "name": "typealias Slice.Iterator",
      "desc": "A type that provides the collection’s iteration interface and encapsulates its iteration state."
    },
    {
      "name": "typealias Slice.Elements",
      "desc": "A Sequence that can contain the same elements as this one, possibly with a simpler type."
    },
    {
      "name": "typealias Slice.Regions",
      "desc": "Available when Base conforms to DataProtocol."
    },
    {
      "name": "typealias Slice.SubSequence",
      "desc": "A collection representing a contiguous subrange of this collection’s elements. The subsequence shares indices with the original collection."
    },
    {
      "name": "init()",
      "desc": "Creates a new, empty collection."
    },
    {
      "name": "init<S>(S)",
      "desc": "Creates a new instance of a collection containing the elements of a sequence."
    },
    {
      "name": "init<S>(S)",
      "desc": "Creates a new instance of a collection containing the elements of a sequence."
    },
    {
      "name": "init(base: Base, bounds: Range<Base.Index>)",
      "desc": "Creates a view into the given collection that allows access to elements within the specified range."
    },
    {
      "name": "init(repeating: Base.Element, count: Int)",
      "desc": "Creates a new collection containing the specified number of a single, repeated value."
    },
    {
      "name": "var base: Base",
      "desc": "The underlying collection of the slice."
    },
    {
      "name": "var count: Int",
      "desc": "The number of elements in the collection."
    },
    {
      "name": "var elements: Slice<Base>",
      "desc": "Identical to self."
    },
    {
      "name": "var endIndex: Slice<Base>.Index",
      "desc": "The collection’s “past the end” position—that is, the position one greater than the last valid subscript argument."
    },
    {
      "name": "var first: Base.Element?",
      "desc": "The first element of the collection."
    },
    {
      "name": "var indices: DefaultIndices<Slice<Base>>",
      "desc": "The indices that are valid for subscripting the collection, in ascending order."
    },
    {
      "name": "var indices: Slice<Base>.Indices",
      "desc": "The indices that are valid for subscripting the collection, in ascending order."
    },
    {
      "name": "var isEmpty: Bool",
      "desc": "A Boolean value indicating whether the collection is empty."
    },
    {
      "name": "var last: Base.Element?",
      "desc": "The last element of the collection."
    },
    {
      "name": "var lazy: LazySequence<Slice<Base>>",
      "desc": "A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily."
    },
    {
      "name": "var lazy: LazySequence<Slice<Base>>",
      "desc": "Available when Base conforms to LazySequenceProtocol."
    },
    {
      "name": "var lazy: Slice<Base>",
      "desc": "Available when Base conforms to LazySequenceProtocol."
    },
    {
      "name": "var regions: [Base.Regions.Element.SubSequence]",
      "desc": "Available when Base conforms to DataProtocol."
    },
    {
      "name": "var startIndex: Slice<Base>.Index",
      "desc": "The position of the first element in a nonempty collection."
    },
    {
      "name": "var underestimatedCount: Int",
      "desc": "A value less than or equal to the number of elements in the collection."
    },
    {
      "name": "func allSatisfy((Base.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate."
    },
    {
      "name": "func append(Base.Element)",
      "desc": "Adds an element to the end of the collection."
    },
    {
      "name": "func append<S>(contentsOf: S)",
      "desc": "Adds the elements of a sequence or collection to the end of this collection."
    },
    {
      "name": "func applying(CollectionDifference<Base.Element>) -> Slice<Base>?",
      "desc": "Applies the given difference to this collection."
    },
    {
      "name": "func compactMap<ElementOfResult>((Base.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Slice<Base>, ElementOfResult?>>, ElementOfResult>",
      "desc": "Returns the non-nil results of mapping the given transformation over this sequence."
    },
    {
      "name": "func compactMap<ElementOfResult>((Base.Element) -> ElementOfResult?) -> [ElementOfResult]",
      "desc": "Returns an array containing the non-nil results of calling the given transformation with each element of this sequence."
    },
    {
      "name": "func contains(Base.Element) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence contains the given element."
    },
    {
      "name": "func contains(where: (Base.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate."
    },
    {
      "name": "func difference<C>(from: C) -> CollectionDifference<Base.Element>",
      "desc": "Returns the difference needed to produce this collection’s ordered elements from the given collection."
    },
    {
      "name": "func difference<C>(from: C, by: (C.Element, Base.Element) -> Bool) -> CollectionDifference<Base.Element>",
      "desc": "Returns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test."
    },
    {
      "name": "func distance(from: Slice<Base>.Index, to: Slice<Base>.Index) -> Int",
      "desc": "Returns the distance between two indices."
    },
    {
      "name": "func drop(while: (Base.Element) -> Bool) -> Slice<Base>",
      "desc": "Returns a subsequence by skipping elements while predicate returns true and returning the remaining elements."
    },
    {
      "name": "func dropFirst(Int) -> Slice<Base>",
      "desc": "Returns a subsequence containing all but the given number of initial elements."
    },
    {
      "name": "func dropLast(Int) -> Slice<Base>",
      "desc": "Returns a subsequence containing all but the specified number of final elements."
    },
    {
      "name": "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
      "desc": "Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order."
    },
    {
      "name": "func elementsEqual<OtherSequence>(OtherSequence, by: (Base.Element, OtherSequence.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test."
    },
    {
      "name": "func enumerated() -> EnumeratedSequence<Slice<Base>>",
      "desc": "Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence."
    },
    {
      "name": "func filter((Base.Element) -> Bool) -> [Base.Element]",
      "desc": "Returns an array containing, in order, the elements of the sequence that satisfy the given predicate."
    },
    {
      "name": "func first(where: (Base.Element) -> Bool) -> Base.Element?",
      "desc": "Returns the first element of the sequence that satisfies the given predicate."
    },
    {
      "name": "func firstIndex(of: Base.Element) -> Base.Index?",
      "desc": "Returns the first index where the specified value appears in the collection."
    },
    {
      "name": "func firstIndex(where: (Base.Element) -> Bool) -> Base.Index?",
      "desc": "Returns the first index in which an element of the collection satisfies the given predicate."
    },
    {
      "name": "func flatMap<SegmentOfResult>((Base.Element) -> SegmentOfResult) -> [SegmentOfResult.Element]",
      "desc": "Returns an array containing the concatenated results of calling the given transformation with each element of this sequence."
    },
    {
      "name": "func flatMap<SegmentOfResult>((Base.Element) -> SegmentOfResult) -> LazySequence<FlattenSequence<LazyMapSequence<Slice<Base>, SegmentOfResult>>>",
      "desc": "Returns the concatenated results of mapping the given transformation over this sequence."
    },
    {
      "name": "func forEach((Base.Element) -> Void)",
      "desc": "Calls the given closure on each element in the sequence in the same order as a for-in loop."
    },
    {
      "name": "func formIndex(inout Base.Index, offsetBy: Int)",
      "desc": "Offsets the given index by the specified distance."
    },
    {
      "name": "func formIndex(inout Base.Index, offsetBy: Int, limitedBy: Base.Index) -> Bool",
      "desc": "Offsets the given index by the specified distance, or so that it equals the given limiting index."
    },
    {
      "name": "func formIndex(after: inout Slice<Base>.Index)",
      "desc": "Replaces the given index with its successor."
    },
    {
      "name": "func formIndex(before: inout Slice<Base>.Index)",
      "desc": "Replaces the given index with its predecessor."
    },
    {
      "name": "func index(Slice<Base>.Index, offsetBy: Int) -> Slice<Base>.Index",
      "desc": "Returns an index that is the specified distance from the given index."
    },
    {
      "name": "func index(Slice<Base>.Index, offsetBy: Int, limitedBy: Slice<Base>.Index) -> Slice<Base>.Index?",
      "desc": "Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index."
    },
    {
      "name": "func index(after: Slice<Base>.Index) -> Slice<Base>.Index",
      "desc": "Returns the position immediately after the given index."
    },
    {
      "name": "func index(before: Slice<Base>.Index) -> Slice<Base>.Index",
      "desc": "Returns the position immediately before the given index."
    },
    {
      "name": "func insert(Base.Element, at: Slice<Base>.Index)",
      "desc": "Available when Base conforms to BidirectionalCollection and RangeReplaceableCollection."
    },
    {
      "name": "func insert(Base.Element, at: Slice<Base>.Index)",
      "desc": "Inserts a new element into the collection at the specified position."
    },
    {
      "name": "func insert(Base.Element, at: Base.Index)",
      "desc": "Inserts a new element into the collection at the specified position."
    },
    {
      "name": "func insert<S>(contentsOf: S, at: Slice<Base>.Index)",
      "desc": "Inserts the elements of a sequence into the collection at the specified position."
    },
    {
      "name": "func insert<S>(contentsOf: S, at: Slice<Base>.Index)",
      "desc": "Available when Base conforms to BidirectionalCollection and RangeReplaceableCollection."
    },
    {
      "name": "func insert<C>(contentsOf: C, at: Base.Index)",
      "desc": "Inserts the elements of a sequence into the collection at the specified position."
    },
    {
      "name": "func joined() -> FlattenSequence<Slice<Base>>",
      "desc": "Returns the elements of this sequence of sequences, concatenated."
    },
    {
      "name": "func joined() -> LazySequence<FlattenSequence<Slice<Base>>>",
      "desc": "Returns a lazy sequence that concatenates the elements of this sequence of sequences."
    },
    {
      "name": "func joined<Separator>(separator: Separator) -> JoinedSequence<Slice<Base>>",
      "desc": "Returns the concatenated elements of this sequence of sequences, inserting the given separator between each element."
    },
    {
      "name": "func joined(separator: String) -> String",
      "desc": "Returns a new string by concatenating the elements of the sequence, adding the given separator between each element."
    },
    {
      "name": "func joined(separator: String) -> String",
      "desc": "Returns a new string by concatenating the elements of the sequence, adding the given separator between each element."
    },
    {
      "name": "func last(where: (Base.Element) -> Bool) -> Base.Element?",
      "desc": "Returns the last element of the sequence that satisfies the given predicate."
    },
    {
      "name": "func lastIndex(of: Base.Element) -> Base.Index?",
      "desc": "Returns the last index where the specified value appears in the collection."
    },
    {
      "name": "func lastIndex(where: (Base.Element) -> Bool) -> Base.Index?",
      "desc": "Returns the index of the last element in the collection that matches the given predicate."
    },
    {
      "name": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements."
    },
    {
      "name": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Base.Element, Base.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements."
    },
    {
      "name": "func makeIterator() -> IndexingIterator<Slice<Base>>",
      "desc": "Returns an iterator over the elements of the collection."
    },
    {
      "name": "func map<U>((Base.Element) -> U) -> LazyMapSequence<Slice<Base>, U>",
      "desc": "Returns a LazyMapSequence over this Sequence. The elements of the result are computed lazily, each time they are read, by calling transform function on a base element."
    },
    {
      "name": "func map<T>((Base.Element) -> T) -> [T]",
      "desc": "Returns an array containing the results of mapping the given closure over the sequence’s elements."
    },
    {
      "name": "func max() -> Base.Element?",
      "desc": "Returns the maximum element in the sequence."
    },
    {
      "name": "func max(by: (Base.Element, Base.Element) -> Bool) -> Base.Element?",
      "desc": "Returns the maximum element in the sequence, using the given predicate as the comparison between elements."
    },
    {
      "name": "func min() -> Base.Element?",
      "desc": "Returns the minimum element in the sequence."
    },
    {
      "name": "func min(by: (Base.Element, Base.Element) -> Bool) -> Base.Element?",
      "desc": "Returns the minimum element in the sequence, using the given predicate as the comparison between elements."
    },
    {
      "name": "func partition(by: (Base.Element) -> Bool) -> Base.Index",
      "desc": "Reorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don’t match."
    },
    {
      "name": "func popFirst() -> Base.Element?",
      "desc": "Removes and returns the first element of the collection."
    },
    {
      "name": "func popLast() -> Base.Element?",
      "desc": "Removes and returns the last element of the collection."
    },
    {
      "name": "func popLast() -> Base.Element?",
      "desc": "Removes and returns the last element of the collection."
    },
    {
      "name": "func prefix(Int) -> Slice<Base>",
      "desc": "Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection."
    },
    {
      "name": "func prefix(through: Base.Index) -> Slice<Base>",
      "desc": "Returns a subsequence from the start of the collection through the specified position."
    },
    {
      "name": "func prefix(upTo: Base.Index) -> Slice<Base>",
      "desc": "Returns a subsequence from the start of the collection up to, but not including, the specified position."
    },
    {
      "name": "func prefix(while: (Base.Element) -> Bool) -> Slice<Base>",
      "desc": "Returns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements."
    },
    {
      "name": "func randomElement() -> Base.Element?",
      "desc": "Returns a random element of the collection."
    },
    {
      "name": "func randomElement<T>(using: inout T) -> Base.Element?",
      "desc": "Returns a random element of the collection, using the given generator as a source for randomness."
    },
    {
      "name": "func reduce<Result>(Result, (Result, Base.Element) -> Result) -> Result",
      "desc": "Returns the result of combining the elements of the sequence using the given closure."
    },
    {
      "name": "func reduce<Result>(into: Result, (inout Result, Base.Element) -> ()) -> Result",
      "desc": "Returns the result of combining the elements of the sequence using the given closure."
    },
    {
      "name": "func remove(at: Base.Index) -> Base.Element",
      "desc": "Removes and returns the element at the specified position."
    },
    {
      "name": "func remove(at: Slice<Base>.Index) -> Base.Element",
      "desc": "Available when Base conforms to BidirectionalCollection and RangeReplaceableCollection."
    },
    {
      "name": "func remove(at: Slice<Base>.Index) -> Base.Element",
      "desc": "Removes and returns the element at the specified position."
    },
    {
      "name": "func removeAll(keepingCapacity: Bool)",
      "desc": "Removes all elements from the collection."
    },
    {
      "name": "func removeAll(where: (Base.Element) -> Bool)",
      "desc": "Removes all the elements that satisfy the given predicate."
    },
    {
      "name": "func removeFirst() -> Base.Element",
      "desc": "Removes and returns the first element of the collection."
    },
    {
      "name": "func removeFirst() -> Base.Element",
      "desc": "Removes and returns the first element of the collection."
    },
    {
      "name": "func removeFirst(Int)",
      "desc": "Removes the specified number of elements from the beginning of the collection."
    },
    {
      "name": "func removeFirst(Int)",
      "desc": "Removes the specified number of elements from the beginning of the collection."
    },
    {
      "name": "func removeLast() -> Base.Element",
      "desc": "Removes and returns the last element of the collection."
    },
    {
      "name": "func removeLast() -> Base.Element",
      "desc": "Removes and returns the last element of the collection."
    },
    {
      "name": "func removeLast(Int)",
      "desc": "Removes the given number of elements from the end of the collection."
    },
    {
      "name": "func removeLast(Int)",
      "desc": "Removes the specified number of elements from the end of the collection."
    },
    {
      "name": "func removeSubrange<R>(R)",
      "desc": "Removes the elements in the specified subrange from the collection."
    },
    {
      "name": "func removeSubrange(Range<Base.Index>)",
      "desc": "Removes the elements in the specified subrange from the collection."
    },
    {
      "name": "func removeSubrange(Range<Slice<Base>.Index>)",
      "desc": "Available when Base conforms to BidirectionalCollection and RangeReplaceableCollection."
    },
    {
      "name": "func removeSubrange(Range<Slice<Base>.Index>)",
      "desc": "Removes the specified subrange of elements from the collection."
    },
    {
      "name": "func replaceSubrange<C>(Range<Slice<Base>.Index>, with: C)",
      "desc": "Replaces the specified subrange of elements with the given collection."
    },
    {
      "name": "func replaceSubrange<C>(Range<Slice<Base>.Index>, with: C)",
      "desc": "Available when Base conforms to BidirectionalCollection and RangeReplaceableCollection."
    },
    {
      "name": "func replaceSubrange<C, R>(R, with: C)",
      "desc": "Replaces the specified subrange of elements with the given collection."
    },
    {
      "name": "func reserveCapacity(Int)",
      "desc": "Prepares the collection to store the specified number of elements, when doing so is appropriate for the underlying type."
    },
    {
      "name": "func reverse()",
      "desc": "Reverses the elements of the collection in place."
    },
    {
      "name": "func reversed() -> [Base.Element]",
      "desc": "Returns an array containing the elements of this sequence in reverse order."
    },
    {
      "name": "func shuffle()",
      "desc": "Shuffles the collection in place."
    },
    {
      "name": "func shuffle<T>(using: inout T)",
      "desc": "Shuffles the collection in place, using the given generator as a source for randomness."
    },
    {
      "name": "func shuffled() -> [Base.Element]",
      "desc": "Returns the elements of the sequence, shuffled."
    },
    {
      "name": "func shuffled<T>(using: inout T) -> [Base.Element]",
      "desc": "Returns the elements of the sequence, shuffled using the given generator as a source for randomness."
    },
    {
      "name": "func sort()",
      "desc": "Sorts the collection in place."
    },
    {
      "name": "func sort(by: (Base.Element, Base.Element) -> Bool)",
      "desc": "Sorts the collection in place, using the given predicate as the comparison between elements."
    },
    {
      "name": "func sorted() -> [Base.Element]",
      "desc": "Returns the elements of the sequence, sorted."
    },
    {
      "name": "func sorted(by: (Base.Element, Base.Element) -> Bool) -> [Base.Element]",
      "desc": "Returns the elements of the sequence, sorted using the given predicate as the comparison between elements."
    },
    {
      "name": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Base.Element) -> Bool) -> [Slice<Base>]",
      "desc": "Returns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
    },
    {
      "name": "func split(separator: Base.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Slice<Base>]",
      "desc": "Returns the longest possible subsequences of the collection, in order, around elements equal to the given element."
    },
    {
      "name": "func split(separator: Base.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Base.Element>]",
      "desc": "Returns the longest possible subsequences of the sequence, in order, around elements equal to the given element."
    },
    {
      "name": "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
      "desc": "Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence."
    },
    {
      "name": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Base.Element, PossiblePrefix.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test."
    },
    {
      "name": "func suffix(Int) -> Slice<Base>",
      "desc": "Returns a subsequence, up to the given maximum length, containing the final elements of the collection."
    },
    {
      "name": "func suffix(from: Base.Index) -> Slice<Base>",
      "desc": "Returns a subsequence from the specified position to the end of the collection."
    },
    {
      "name": "func swapAt(Base.Index, Base.Index)",
      "desc": "Exchanges the values at the specified indices of the collection."
    },
    {
      "name": "func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Base.Element>) -> R) -> R?",
      "desc": "Executes a closure on the collection’s contiguous storage."
    },
    {
      "name": "func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Slice<Base>.Element>) -> R) -> R?",
      "desc": "Executes a closure on the collection’s contiguous storage."
    },
    {
      "name": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Base.Element>) -> R) -> R?",
      "desc": "Executes a closure on the sequence’s contiguous storage."
    },
    {
      "name": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Slice<Base>.Element>) -> R) -> R?",
      "desc": "Executes a closure on the sequence’s contiguous storage."
    },
    {
      "name": "func withUnsafeBytes<ResultType>((UnsafeRawBufferPointer) -> ResultType) -> ResultType",
      "desc": "Available when Base conforms to ContiguousBytes."
    },
    {
      "name": "subscript(Slice<Base>.Index) -> Base.Element",
      "desc": "Accesses the element at the specified position."
    },
    {
      "name": "subscript(Slice<Base>.Index) -> Base.Element",
      "desc": "Accesses the element at the specified position."
    },
    {
      "name": "subscript<R>(R) -> Slice<Base>",
      "desc": "Available when Base conforms to MutableCollection."
    },
    {
      "name": "subscript((UnboundedRange_) -> ()) -> Slice<Base>",
      "desc": "Available when Base conforms to MutableCollection."
    },
    {
      "name": "subscript(Range<Base.Index>) -> Slice<Slice<Base>>",
      "desc": "Accesses a contiguous subrange of the collection’s elements."
    },
    {
      "name": "subscript<R>(R) -> Slice<Base>",
      "desc": "Accesses the contiguous subrange of the collection’s elements specified by a range expression."
    },
    {
      "name": "subscript((UnboundedRange_) -> ()) -> Slice<Base>"
    },
    {
      "name": "subscript(Range<Base.Index>) -> Slice<Slice<Base>>",
      "desc": "Accesses a contiguous subrange of the collection’s elements."
    },
    {
      "name": "subscript(Range<Slice<Base>.Index>) -> Slice<Base>",
      "desc": "Accesses a contiguous subrange of the collection’s elements."
    },
    {
      "name": "subscript(Range<Slice<Base>.Index>) -> Slice<Base>",
      "desc": "Accesses a contiguous subrange of the collection’s elements."
    },
    {
      "name": "static func + <Other>(Other, Slice<Base>) -> Slice<Base>",
      "desc": "Creates a new collection by concatenating the elements of a sequence and a collection."
    },
    {
      "name": "static func + <Other>(Slice<Base>, Other) -> Slice<Base>",
      "desc": "Creates a new collection by concatenating the elements of a collection and a sequence."
    },
    {
      "name": "static func + <Other>(Slice<Base>, Other) -> Slice<Base>",
      "desc": "Creates a new collection by concatenating the elements of two collections."
    },
    {
      "name": "static func += <Other>(inout Slice<Base>, Other)",
      "desc": "Appends the elements of a sequence to a range-replaceable collection."
    }
  ],
  "declaration": "@frozen struct Slice<Base> where Base : Collection",
  "conformsTo": [
    "AccelerateBuffer",
    "AccelerateMutableBuffer",
    "BidirectionalCollection",
    "Collection",
    "ContiguousBytes",
    "DataProtocol",
    "LazySequenceProtocol",
    "MutableCollection",
    "RangeReplaceableCollection"
  ]
}