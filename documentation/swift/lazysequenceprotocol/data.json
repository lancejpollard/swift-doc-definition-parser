{
  "path": "/documentation/swift/lazysequenceprotocol",
  "type": "Protocol",
  "name": "LazySequenceProtocol",
  "desc": "A sequence on which normally-eager sequence operations are implemented lazily.",
  "items": [
    {
      "name": "associatedtype Elements",
      "desc": "A Sequence that can contain the same elements as this one, possibly with a simpler type."
    },
    {
      "name": "var elements: Self.Elements",
      "desc": "A sequence containing the same elements as this one, possibly with a simpler type."
    },
    {
      "name": "var lazy: LazySequence<Self.Elements>"
    },
    {
      "name": "var lazy: Self.Elements",
      "desc": "Available when Elements conforms to LazySequenceProtocol."
    },
    {
      "name": "func compactMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>",
      "desc": "Returns the non-nil results of mapping the given transformation over this sequence."
    },
    {
      "name": "func drop(while: (Self.Elements.Element) -> Bool) -> LazyDropWhileSequence<Self.Elements>",
      "desc": "Returns a lazy sequence that skips any initial elements that satisfy predicate."
    },
    {
      "name": "func filter((Self.Elements.Element) -> Bool) -> LazyFilterSequence<Self.Elements>",
      "desc": "Returns the elements of self that satisfy isIncluded."
    },
    {
      "name": "func flatMap<SegmentOfResult>((Self.Elements.Element) -> SegmentOfResult) -> LazySequence<FlattenSequence<LazyMapSequence<Self.Elements, SegmentOfResult>>>",
      "desc": "Returns the concatenated results of mapping the given transformation over this sequence."
    },
    {
      "name": "func joined() -> LazySequence<FlattenSequence<Self.Elements>>",
      "desc": "Returns a lazy sequence that concatenates the elements of this sequence of sequences."
    },
    {
      "name": "func map<U>((Self.Element) -> U) -> LazyMapSequence<Self.Elements, U>",
      "desc": "Returns a LazyMapSequence over this Sequence. The elements of the result are computed lazily, each time they are read, by calling transform function on a base element."
    },
    {
      "name": "func prefix(while: (Self.Elements.Element) -> Bool) -> LazyPrefixWhileSequence<Self.Elements>",
      "desc": "Returns a lazy sequence of the initial consecutive elements that satisfy predicate."
    }
  ],
  "declaration": "protocol LazySequenceProtocol",
  "inheritsFrom": [
    "Sequence"
  ]
}