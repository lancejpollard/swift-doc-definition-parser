{
  "path": "/documentation/swift/floatingpointroundingrule",
  "type": "Enumeration",
  "name": "FloatingPointRoundingRule",
  "desc": "A rule for rounding a floating-point number.",
  "items": [
    {
      "name": "case awayFromZero",
      "desc": "Round to the closest allowed value whose magnitude is greater than or equal to that of the source."
    },
    {
      "name": "case down",
      "desc": "Round to the closest allowed value that is less than or equal to the source."
    },
    {
      "name": "case toNearestOrAwayFromZero",
      "desc": "Round to the closest allowed value; if two values are equally close, the one with greater magnitude is chosen."
    },
    {
      "name": "case toNearestOrEven",
      "desc": "Round to the closest allowed value; if two values are equally close, the even one is chosen."
    },
    {
      "name": "case towardZero",
      "desc": "Round to the closest allowed value whose magnitude is less than or equal to that of the source."
    },
    {
      "name": "case up",
      "desc": "Round to the closest allowed value that is greater than or equal to the source."
    },
    {
      "name": "init(from: Decoder)"
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value."
    },
    {
      "name": "func encode(to: Encoder)"
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of this value by feeding them into the given hasher."
    },
    {
      "name": "static func != (FloatingPointRoundingRule, FloatingPointRoundingRule) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are not equal."
    },
    {
      "name": "static func == (FloatingPointRoundingRule, FloatingPointRoundingRule) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are equal."
    }
  ],
  "declaration": "enum FloatingPointRoundingRule",
  "conformsTo": [
    "Decodable",
    "Encodable",
    "Sendable"
  ]
}