{
  "path": "/documentation/swift/rangereplaceablecollection",
  "type": "Protocol",
  "name": "RangeReplaceableCollection",
  "desc": "A collection that supports replacement of an arbitrary subrange of elements with the elements of another collection.",
  "items": [
    {
      "name": "init()",
      "desc": "Creates a new, empty collection."
    },
    {
      "name": "func insert<S>(contentsOf: S, at: Self.Index)",
      "desc": "Inserts the elements of a sequence into the collection at the specified position."
    },
    {
      "name": "associatedtype SubSequence"
    },
    {
      "name": "init<S>(S)",
      "desc": "Creates a new instance of a collection containing the elements of a sequence."
    },
    {
      "name": "init(repeating: Self.Element, count: Int)",
      "desc": "Creates a new collection containing the specified number of a single, repeated value."
    },
    {
      "name": "func append(Self.Element)",
      "desc": "Adds an element to the end of the collection."
    },
    {
      "name": "func append<S>(contentsOf: S)",
      "desc": "Adds the elements of a sequence or collection to the end of this collection."
    },
    {
      "name": "func applying(CollectionDifference<Self.Element>) -> Self?",
      "desc": "Applies the given difference to this collection."
    },
    {
      "name": "func filter((Self.Element) -> Bool) -> Self",
      "desc": "Returns a new collection of the same type containing, in order, the elements of the original collection that satisfy the given predicate."
    },
    {
      "name": "func insert(Self.Element, at: Self.Index)",
      "desc": "Inserts a new element into the collection at the specified position."
    },
    {
      "name": "func popLast() -> Self.Element?",
      "desc": "Removes and returns the last element of the collection."
    },
    {
      "name": "func popLast() -> Self.Element?",
      "desc": "Removes and returns the last element of the collection."
    },
    {
      "name": "func remove(at: Self.Index) -> Self.Element",
      "desc": "Removes and returns the element at the specified position."
    },
    {
      "name": "func remove(atOffsets: IndexSet)",
      "desc": "Available when Self conforms to MutableCollection."
    },
    {
      "name": "func removeAll(keepingCapacity: Bool)",
      "desc": "Removes all elements from the collection."
    },
    {
      "name": "func removeAll(where: (Self.Element) -> Bool)",
      "desc": "Removes all the elements that satisfy the given predicate."
    },
    {
      "name": "func removeFirst() -> Self.Element",
      "desc": "Removes and returns the first element of the collection."
    },
    {
      "name": "func removeFirst(Int)",
      "desc": "Removes the specified number of elements from the beginning of the collection."
    },
    {
      "name": "func removeLast() -> Self.Element",
      "desc": "Removes and returns the last element of the collection."
    },
    {
      "name": "func removeLast() -> Self.Element",
      "desc": "Removes and returns the last element of the collection."
    },
    {
      "name": "func removeLast(Int)",
      "desc": "Removes the specified number of elements from the end of the collection."
    },
    {
      "name": "func removeLast(Int)",
      "desc": "Removes the specified number of elements from the end of the collection."
    },
    {
      "name": "func removeSubrange(Range<Self.Index>)",
      "desc": "Removes the specified subrange of elements from the collection."
    },
    {
      "name": "func replaceSubrange<C>(Range<Self.Index>, with: C)",
      "desc": "Replaces the specified subrange of elements with the given collection."
    },
    {
      "name": "func reserveCapacity(Int)",
      "desc": "Prepares the collection to store the specified number of elements, when doing so is appropriate for the underlying type."
    },
    {
      "name": "subscript(Range<Self.Index>) -> Self.SubSequence"
    },
    {
      "name": "subscript(Self.Index) -> Self.Element"
    },
    {
      "name": "static func + <Other>(Other, Self) -> Self",
      "desc": "Creates a new collection by concatenating the elements of a sequence and a collection."
    },
    {
      "name": "static func + <Other>(Self, Other) -> Self",
      "desc": "Creates a new collection by concatenating the elements of a collection and a sequence."
    },
    {
      "name": "static func + <Other>(Self, Other) -> Self",
      "desc": "Creates a new collection by concatenating the elements of two collections."
    },
    {
      "name": "static func += <Other>(inout Self, Other)",
      "desc": "Appends the elements of a sequence to a range-replaceable collection."
    }
  ],
  "declaration": "protocol RangeReplaceableCollection where Self.SubSequence : RangeReplaceableCollection",
  "inheritsFrom": [
    "Collection"
  ]
}