{
  "path": "/documentation/automator/amerror",
  "type": "Structure",
  "name": "AMError",
  "desc": "An Automator error.",
  "items": [
    {
      "name": "var errorCode: Int",
      "desc": "The error code associated with the Automator error."
    },
    {
      "name": "var errorUserInfo: [String : Any]",
      "desc": "A dictionary for providing additional details about the error."
    },
    {
      "name": "var localizedDescription: String",
      "desc": "A string containing the localized description of the error."
    },
    {
      "name": "static var workflowActionsNotLoadedError: AMError.Code",
      "desc": "An error that indicates one of the actions of the workflow couldn’t be loaded."
    },
    {
      "name": "static var workflowNewerActionVersionError: AMError.Code",
      "desc": "An error that indicates an action in a workflow is newer than the installed action."
    },
    {
      "name": "static var workflowNewerVersionError: AMError.Code",
      "desc": "An error that indicates an attempt to open a workflow document that was saved with a newer version of Automator."
    },
    {
      "name": "static var workflowNoEnabledActionsError: AMError.Code",
      "desc": "An error that indicates there are no enabled actions in the workflow."
    },
    {
      "name": "static var workflowOlderActionVersionError: AMError.Code",
      "desc": "An error that indicates an action in a workflow is older than the installed action."
    },
    {
      "name": "static var workflowPropertyListInvalidError: AMError.Code",
      "desc": "An error that indicates an attempt to open a workflow document whose property list couldn’t be read."
    },
    {
      "name": "static var userCanceledError: AMError.Code",
      "desc": "An error that indicates the user cancelled."
    },
    {
      "name": "static var actionApplicationResourceError: AMError.Code",
      "desc": "An error that indicates an app required by the action is not found."
    },
    {
      "name": "static var actionApplicationVersionResourceError: AMError.Code",
      "desc": "An error that indicates an app required by the action is the wrong version."
    },
    {
      "name": "static var actionArchitectureMismatchError: AMError.Code",
      "desc": "An error that indicates the action’s binary is not compatible with the current processor."
    },
    {
      "name": "static var actionExceptionError: AMError.Code",
      "desc": "An error that indicates an action encounters an exception while running."
    },
    {
      "name": "static var actionExecutionError: AMError.Code",
      "desc": "An error that indicates an action encounters an error while running (reason unknown)."
    },
    {
      "name": "static var actionFailedGatekeeperError: AMError.Code",
      "desc": "An error that indicates the action doesn’t meet the Gatekeeper security policy."
    },
    {
      "name": "static var actionFileResourceError: AMError.Code",
      "desc": "An error that indicates a file required by the action is not found."
    },
    {
      "name": "static var actionInitializationError: AMError.Code",
      "desc": "An error that indicates Automator is unable to initialize an action (reason unknown)."
    },
    {
      "name": "static var actionInsufficientDataError: AMError.Code",
      "desc": "An error that indicates the action requires input data to run, but none was supplied."
    },
    {
      "name": "static var actionIsDeprecatedError: AMError.Code",
      "desc": "An error that indicates the action has been deprecated."
    },
    {
      "name": "static var actionLicenseResourceError: AMError.Code",
      "desc": "An error that indicates a license required by the action was not found."
    },
    {
      "name": "static var actionLinkError: AMError.Code",
      "desc": "An error that indicates the action’s executable failed to load due to linking issues."
    },
    {
      "name": "static var actionLoadError: AMError.Code",
      "desc": "An error that indicates the action’s executable failed to load."
    },
    {
      "name": "static var actionMalwareError: AMError.Code",
      "desc": "An error that indicates the action has been identified as malware by XProtect."
    },
    {
      "name": "static var actionNotLoadableError: AMError.Code",
      "desc": "An error that indicates the action’s executable is of a type that is not loadable in the current process."
    },
    {
      "name": "static var actionPropertyListInvalidError: AMError.Code",
      "desc": "An error that indicates the property list for an action is invalid."
    },
    {
      "name": "static var actionQuarantineError: AMError.Code",
      "desc": "An error that indicates action has been quarantined by XProtect, the antimalware system on the Mac."
    },
    {
      "name": "static var actionRequiredActionResourceError: AMError.Code",
      "desc": "An error that indicates an action required by the action is not loaded."
    },
    {
      "name": "static var actionRuntimeMismatchError: AMError.Code",
      "desc": "An error that indicates an attempt was made to load an action that is not compiled in a way that is compatible with the current app."
    },
    {
      "name": "static var actionSignatureCorruptError: AMError.Code",
      "desc": "An error that indicates developer signature for this action is corrupted."
    },
    {
      "name": "static var actionThirdPartyActionsNotAllowedError: AMError.Code",
      "desc": "An error that indicates the action is a third party action, and loading it has not been allowed by the user."
    },
    {
      "name": "static var actionXPCError: AMError.Code",
      "desc": "An error that indicates the remote process running the action has crashed."
    },
    {
      "name": "static var actionXProtectError: AMError.Code",
      "desc": "An error that indicates XProtect is unable to successfully analyze the action."
    },
    {
      "name": "static var noSuchActionError: AMError.Code",
      "desc": "An error that indicates the action could not be located on the system."
    },
    {
      "name": "static var conversionFailedError: AMError.Code",
      "desc": "An error that occurs when, for example, the converter encounters an error converting data from one type to another."
    },
    {
      "name": "static var conversionNoDataError: AMError.Code",
      "desc": "An error that occurs when the converter determines that the conversion, though possible, would produce a nil result."
    },
    {
      "name": "static var conversionNotPossibleError: AMError.Code",
      "desc": "An error that occurs when the converter determines that it is unable to convert from one data type to another."
    },
    {
      "name": "enum AMError.Code",
      "desc": "Automator error codes."
    },
    {
      "name": "static var errorDomain: String",
      "desc": "The error domain that identifies an error as an Automator error."
    },
    {
      "name": "var AMAutomatorErrorDomain: String",
      "desc": "A string that identifies the Automator error domain."
    },
    {
      "name": "static func != (AMError, AMError) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are not equal."
    },
    {
      "name": "init(Code, userInfo: [String : Any])"
    },
    {
      "name": "var code: Code"
    },
    {
      "name": "var hashValue: Int"
    },
    {
      "name": "var userInfo: [String : Any]"
    },
    {
      "name": "func hash(into: inout Hasher)"
    },
    {
      "name": "static func == (AMError, AMError) -> Bool"
    }
  ],
  "declaration": "struct AMError"
}