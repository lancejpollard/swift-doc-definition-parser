{
  "path": "/documentation/automator/amerror/code",
  "type": "Enumeration",
  "name": "AMError.Code",
  "desc": "Automator error codes.",
  "items": [
    {
      "name": "case workflowActionsNotLoadedError",
      "desc": "An error that indicates one of the actions of the workflow couldn't be loaded."
    },
    {
      "name": "case workflowNewerActionVersionError",
      "desc": "An error that indicates an action in a workflow is newer than the installed action."
    },
    {
      "name": "case workflowNewerVersionError",
      "desc": "An error that indicates an attempt to open a workflow document that was saved with a newer version of Automator."
    },
    {
      "name": "case workflowNoEnabledActionsError",
      "desc": "An error that indicates there are no enabled actions in the workflow."
    },
    {
      "name": "case workflowOlderActionVersionError",
      "desc": "An error that indicates an action in a workflow is older than the installed action."
    },
    {
      "name": "case workflowPropertyListInvalidError",
      "desc": "An error that indicates an attempt to open a workflow document whose property list couldn't be read."
    },
    {
      "name": "case userCanceledError",
      "desc": "An error that indicates the user cancelled."
    },
    {
      "name": "case actionApplicationResourceError",
      "desc": "An error that indicates an app required by the action is not found."
    },
    {
      "name": "case actionApplicationVersionResourceError",
      "desc": "An error that indicates an app required by the action is the wrong version."
    },
    {
      "name": "case actionArchitectureMismatchError",
      "desc": "An error that indicates the action's binary is not compatible with the current processor."
    },
    {
      "name": "case actionExceptionError",
      "desc": "An error that indicates an action encounters an exception while running."
    },
    {
      "name": "case actionExecutionError",
      "desc": "An error that indicates an action encounters an error while running (reason unknown)."
    },
    {
      "name": "case actionFailedGatekeeperError",
      "desc": "An error that indicates the action doesnâ€™t meet the Gatekeeper security policy."
    },
    {
      "name": "case actionFileResourceError",
      "desc": "An error that indicates a file required by the action is not found."
    },
    {
      "name": "case actionInitializationError",
      "desc": "An error that indicates Automator is unable to initialize an action (reason unknown)."
    },
    {
      "name": "case actionInsufficientDataError",
      "desc": "An error that indicates the action requires input data to run, but none was supplied."
    },
    {
      "name": "case actionIsDeprecatedError",
      "desc": "An error that indicates the action has been deprecated."
    },
    {
      "name": "case actionLicenseResourceError",
      "desc": "An error that indicates a license required by the action was not found."
    },
    {
      "name": "case actionLinkError",
      "desc": "An error that indicates the action's executable failed to load due to linking issues."
    },
    {
      "name": "case actionLoadError",
      "desc": "An error that indicates the action's executable failed to load."
    },
    {
      "name": "case actionMalwareError",
      "desc": "An error that indicates the action has been identified as malware by XProtect."
    },
    {
      "name": "case actionNotLoadableError",
      "desc": "An error that indicates the action's executable is of a type that is not loadable in the current process."
    },
    {
      "name": "case actionPropertyListInvalidError",
      "desc": "An error that indicates the property list for an action is invalid."
    },
    {
      "name": "case actionQuarantineError",
      "desc": "An error that indicates action has been quarantined by XProtect, the antimalware system on the Mac."
    },
    {
      "name": "case actionRequiredActionResourceError",
      "desc": "An error that indicates an action required by the action is not loaded."
    },
    {
      "name": "case actionRuntimeMismatchError",
      "desc": "An error that indicates an attempt was made to load an action that is not compiled in a way that is compatible with the current app."
    },
    {
      "name": "case actionSignatureCorruptError",
      "desc": "An error that indicates developer signature for this action is corrupted."
    },
    {
      "name": "case actionThirdPartyActionsNotAllowedError",
      "desc": "An error that indicates the action is a third party action, and loading it has not been allowed by the user."
    },
    {
      "name": "case actionXPCError",
      "desc": "An error that indicates the remote process running the action has crashed."
    },
    {
      "name": "case actionXProtectError",
      "desc": "An error that indicates XProtect is unable to successfully analyze the action."
    },
    {
      "name": "case noSuchActionError",
      "desc": "An error that indicates the action could not be located on the system."
    },
    {
      "name": "case conversionFailedError",
      "desc": "An error that occurs when, for example, the converter encounters an error converting data from one type to another."
    },
    {
      "name": "case conversionNoDataError",
      "desc": "An error that occurs when the converter determines that the conversion, though possible, would produce a nil result."
    },
    {
      "name": "case conversionNotPossibleError",
      "desc": "An error that occurs when the converter determines that it is unable to convert from one data type to another."
    }
  ],
  "declaration": "enum AMError.Code : Int, _ErrorCodeProtocol, @unchecked Sendable",
  "conformsTo": [
    "Sendable"
  ]
}