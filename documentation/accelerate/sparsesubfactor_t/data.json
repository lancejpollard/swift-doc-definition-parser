{
  "path": "/documentation/accelerate/sparsesubfactor_t",
  "type": "Structure",
  "name": "SparseSubfactor_t",
  "desc": "Constants that define the subfactor of a factorization.",
  "items": [
    {
      "name": "var SparseSubfactorInvalid: SparseSubfactor_t",
      "desc": "An invalid subfactor that indicates the requested type is incompatible with the supplied factorization or the system has destroyed it."
    },
    {
      "name": "var SparseSubfactorP: SparseSubfactor_t",
      "desc": "A permutation subfactor that’s valid for all factorization types."
    },
    {
      "name": "var SparseSubfactorS: SparseSubfactor_t",
      "desc": "A diagonal scaling subfactor that’s valid for Cholesky and LDLᵀ only."
    },
    {
      "name": "var SparseSubfactorL: SparseSubfactor_t",
      "desc": "An L factor subfactor that’s valid for Cholesky and LDLᵀ only."
    },
    {
      "name": "var SparseSubfactorD: SparseSubfactor_t",
      "desc": "A D factor subfactor that’s valid for LDLᵀonly."
    },
    {
      "name": "var SparseSubfactorPLPS: SparseSubfactor_t",
      "desc": "A half-solve subfactor that’s valid for Cholesky and LDLᵀ only."
    },
    {
      "name": "var SparseSubfactorQ: SparseSubfactor_t",
      "desc": "A Q factor subfactor that’s valid for QR only."
    },
    {
      "name": "var SparseSubfactorR: SparseSubfactor_t",
      "desc": "An R factor subfactor that’s valid for QR and Cholesky AᵀA only."
    },
    {
      "name": "var SparseSubfactorRP: SparseSubfactor_t",
      "desc": "A half-solve subfactor that’s valid for QR and Cholesky AᵀA only."
    },
    {
      "name": "init(UInt8)"
    },
    {
      "name": "init(rawValue: UInt8)"
    },
    {
      "name": "var rawValue: UInt8"
    }
  ],
  "declaration": "struct SparseSubfactor_t",
  "conformsTo": [
    "Equatable",
    "RawRepresentable"
  ]
}