{
  "path": "/documentation/accelerate/simd_char32",
  "type": "Type Alias",
  "name": "simd_char32",
  "desc": "A vector of thirty-two 8-bit signed integer elements.",
  "items": [
    {
      "name": "func simd_make_char32(simd_char2) -> simd_char32",
      "desc": "Returns a new vector from the specified two-element vector, and other elements set to zero."
    },
    {
      "name": "func simd_make_char32(simd_char3) -> simd_char32",
      "desc": "Returns a new vector from the specified three-element vector, and other elements set to zero."
    },
    {
      "name": "func simd_make_char32(simd_char4) -> simd_char32",
      "desc": "Returns a new vector from the specified four-element vector, and other elements set to zero."
    },
    {
      "name": "func simd_make_char32(simd_char8) -> simd_char32",
      "desc": "Returns a new vector from the specified eight-element vector, and other elements set to zero."
    },
    {
      "name": "func simd_make_char32(simd_char16) -> simd_char32",
      "desc": "Returns a new vector from the specified sixteen-element vector, and other elements set to zero."
    },
    {
      "name": "func simd_make_char32(simd_char32) -> simd_char32",
      "desc": "Returns a new vector from the specified vector."
    },
    {
      "name": "func simd_make_char32(simd_char64) -> simd_char32",
      "desc": "Returns a new vector by truncating the specified sixty four-element vector."
    },
    {
      "name": "func simd_make_char32(simd_char16, simd_char16) -> simd_char32",
      "desc": "Returns a new vector from the specified vectors."
    },
    {
      "name": "func vector32(simd_char16, simd_char16) -> simd_char32",
      "desc": "Returns a new vector from the specified vectors."
    },
    {
      "name": "func simd_make_char32_undef(simd_char2) -> simd_char32",
      "desc": "Returns a new vector from the specified two-element vector, and other elements undefined."
    },
    {
      "name": "func simd_make_char32_undef(simd_char3) -> simd_char32",
      "desc": "Returns a new vector from the specified three-element vector, and other elements undefined."
    },
    {
      "name": "func simd_make_char32_undef(simd_char4) -> simd_char32",
      "desc": "Returns a new vector from the specified four-element vector, and other elements undefined."
    },
    {
      "name": "func simd_make_char32_undef(simd_char8) -> simd_char32",
      "desc": "Returns a new vector from the specified eight-element vector, and other elements undefined."
    },
    {
      "name": "func simd_make_char32_undef(simd_char16) -> simd_char32",
      "desc": "Returns a new vector from the specified sixteen-element vector, and other elements undefined."
    },
    {
      "name": "func simd_make_char32(CChar) -> simd_char32",
      "desc": "Returns a new vector with the first element set to a scalar value, and other elements set to zero."
    },
    {
      "name": "func simd_make_char32_undef(CChar) -> simd_char32",
      "desc": "Returns a new vector with the first element set to a scalar value, and other elements undefined."
    },
    {
      "name": "func simd_char(simd_char32) -> simd_char32",
      "desc": "Returns a new vector from the specified vector of 8-bit, signed integer elements."
    },
    {
      "name": "func simd_char(simd_uchar32) -> simd_char32",
      "desc": "Returns a new vector from the specified vector of 8-bit, unsigned integer elements."
    },
    {
      "name": "func simd_char(simd_short32) -> simd_char32",
      "desc": "Returns a new vector from the specified vector of 16-bit, signed integer elements."
    },
    {
      "name": "func simd_char(simd_ushort32) -> simd_char32",
      "desc": "Returns a new vector from the specified vector of 16-bit, unsigned integer elements."
    },
    {
      "name": "func simd_char_sat(simd_char32) -> simd_char32",
      "desc": "Returns a new vector from the specified vector of 8-bit, signed integer elements."
    },
    {
      "name": "func simd_char_sat(simd_uchar32) -> simd_char32",
      "desc": "Returns a new vector from the specified vector of 8-bit, unsigned integer elements."
    },
    {
      "name": "func simd_char_sat(simd_short32) -> simd_char32",
      "desc": "Returns a new vector from the specified vector of 16-bit, signed integer elements."
    },
    {
      "name": "func simd_char_sat(simd_ushort32) -> simd_char32",
      "desc": "Returns a new vector from the specified vector of 16-bit, unsigned integer elements."
    },
    {
      "name": "func simd_abs(simd_char32) -> simd_char32",
      "desc": "Returns the absolute value of each element in a vector."
    },
    {
      "name": "func simd_clamp(simd_char32, simd_char32, simd_char32) -> simd_char32",
      "desc": "Returns each element in a vector clamped to a specified range."
    },
    {
      "name": "func simd_equal(simd_char32, simd_char32) -> simd_bool",
      "desc": "Returns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
    },
    {
      "name": "func simd_reduce_min(simd_char32) -> CChar",
      "desc": "Returns the miniumum value in a vector."
    },
    {
      "name": "func simd_reduce_max(simd_char32) -> CChar",
      "desc": "Returns the maximum value in a vector."
    },
    {
      "name": "func simd_reduce_add(simd_char32) -> CChar",
      "desc": "Returns the sum of all elements in a vector."
    },
    {
      "name": "func simd_min(simd_char32, simd_char32) -> simd_char32",
      "desc": "Returns the minimum value of each element in a vector."
    },
    {
      "name": "func simd_max(simd_char32, simd_char32) -> simd_char32",
      "desc": "Returns the maximum value of each element in a vector."
    },
    {
      "name": "func simd_any(simd_char32) -> simd_bool"
    },
    {
      "name": "func simd_all(simd_char32) -> simd_bool"
    },
    {
      "name": "func simd_bitselect(simd_char32, simd_char32, simd_char32) -> simd_char32",
      "desc": "Returns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
    },
    {
      "name": "typealias vector_char32"
    }
  ],
  "declaration": "typealias simd_char32 = SIMD32<CChar>"
}