{
  "path": "/documentation/accelerate/simd_quatf",
  "type": "Structure",
  "name": "simd_quatf",
  "desc": "A single-precision quaternion.",
  "items": [
    {
      "name": "init()",
      "desc": "Creates a new quaternion."
    },
    {
      "name": "init(vector: simd_float4)",
      "desc": "Creates a new quaternion from a four-element vector."
    },
    {
      "name": "init(simd_float3x3)",
      "desc": "Creates a new quaternion from a 3 x 3 rotation matrix."
    },
    {
      "name": "init(simd_float4x4)",
      "desc": "Creates a new quaternion from a 4 x 4 rotation matrix."
    },
    {
      "name": "init(angle: Float, axis: SIMD3<Float>)",
      "desc": "Creates a new quaternion with an action that’s a rotation about an axis."
    },
    {
      "name": "init(from: SIMD3<Float>, to: SIMD3<Float>)",
      "desc": "Creates a new quaternion with an action that’s a rotation between two vectors."
    },
    {
      "name": "init(ix: Float, iy: Float, iz: Float, r: Float)",
      "desc": "Creates a new quaternion from four scalar values that specify the imaginary and real parts."
    },
    {
      "name": "init(real: Float, imag: SIMD3<Float>)",
      "desc": "Creates a new quaternion from a scalar real part and a vector imaginary part."
    },
    {
      "name": "var angle: Float",
      "desc": "The angle, in radians, by which the quaternion's action rotates."
    },
    {
      "name": "var axis: SIMD3<Float>",
      "desc": "The normalized axis about which the quaternion's action rotates."
    },
    {
      "name": "var conjugate: simd_quatf",
      "desc": "The conjugate of the quaternion."
    },
    {
      "name": "var imag: SIMD3<Float>",
      "desc": "The imaginary part of the quaternion."
    },
    {
      "name": "var real: Float",
      "desc": "The real part of the quaternion."
    },
    {
      "name": "var inverse: simd_quatf",
      "desc": "The inverse of the quaternion."
    },
    {
      "name": "var length: Float",
      "desc": "The length of the quaternion."
    },
    {
      "name": "var normalized: simd_quatf",
      "desc": "The unit quaternion of the quaternion."
    },
    {
      "name": "var vector: simd_float4",
      "desc": "The underlying vector of the quaternion."
    },
    {
      "name": "var debugDescription: String",
      "desc": "A representation of the quaternion that's suitable for debugging."
    },
    {
      "name": "func simd_quaternion(Float, Float, Float, Float) -> simd_quatf",
      "desc": "Returns a new quaternion from 4 scalar values."
    },
    {
      "name": "func simd_quaternion(Float, simd_float3) -> simd_quatf",
      "desc": "Returns a new quaternion from a scalar value and a three-element vector."
    },
    {
      "name": "func simd_quaternion(UnsafePointer<Float>!) -> simd_quatf",
      "desc": "Returns a new quaternion from a pointer to scalar values."
    },
    {
      "name": "func simd_quaternion(simd_float3, simd_float3) -> simd_quatf",
      "desc": "Returns a new quaternion from 2 three-element vectors."
    },
    {
      "name": "func simd_quaternion(simd_float3x3) -> simd_quatf",
      "desc": "Returns a new quaternion from a 3 x 3 matrix."
    },
    {
      "name": "func simd_quaternion(simd_float4) -> simd_quatf",
      "desc": "Returns a new quaternion from a four-element vector."
    },
    {
      "name": "func simd_quaternion(simd_float4x4) -> simd_quatf",
      "desc": "Returns a new quaternion from a 4 x 4 matrix."
    },
    {
      "name": "func simd_add(simd_quatf, simd_quatf) -> simd_quatf",
      "desc": "Returns the sum of two quaternions."
    },
    {
      "name": "func simd_mul(simd_quatf, simd_quatf) -> simd_quatf",
      "desc": "Returns the product of two quaternions."
    },
    {
      "name": "func simd_mul(Float, simd_quatf) -> simd_quatf"
    },
    {
      "name": "func simd_mul(simd_quatf, Float) -> simd_quatf"
    },
    {
      "name": "func simd_sub(simd_quatf, simd_quatf) -> simd_quatf",
      "desc": "Returns the difference between two quaternions."
    },
    {
      "name": "func simd_act(simd_quatf, simd_float3) -> simd_float3",
      "desc": "Returns a vector rotated by a quaternion."
    },
    {
      "name": "func simd_angle(simd_quatf) -> Float",
      "desc": "Returns the angle by which a quaternion rotates."
    },
    {
      "name": "func simd_axis(simd_quatf) -> simd_float3",
      "desc": "Returns the axis about which a quaternion rotates."
    },
    {
      "name": "func simd_bezier(simd_quatf, simd_quatf, simd_quatf, simd_quatf, Float) -> simd_quatf",
      "desc": "Returns the spherical cubic Bezier interpolation between quaternions."
    },
    {
      "name": "func simd_conjugate(simd_quatf) -> simd_quatf",
      "desc": "Returns the conjugate of a quaternion."
    },
    {
      "name": "func simd_imag(simd_quatf) -> simd_float3",
      "desc": "Returns the imaginary (vector) part of a quaternion."
    },
    {
      "name": "func simd_negate(simd_quatf) -> simd_quatf",
      "desc": "Returns the negation of a quaternion."
    },
    {
      "name": "func simd_real(simd_quatf) -> Float",
      "desc": "Returns the real (scalar) part of a quaternion."
    },
    {
      "name": "func simd_slerp(simd_quatf, simd_quatf, Float) -> simd_quatf",
      "desc": "Returns a spherical linearly interpolated value along the shortest arc between two quaternions."
    },
    {
      "name": "func simd_slerp_longest(simd_quatf, simd_quatf, Float) -> simd_quatf",
      "desc": "Returns a spherical linearly interpolated value along the longest arc between two quaternions."
    },
    {
      "name": "func simd_spline(simd_quatf, simd_quatf, simd_quatf, simd_quatf, Float) -> simd_quatf",
      "desc": "Returns an interpolated value between two quaternions along a spherical cubic spline."
    },
    {
      "name": "func simd_dot(simd_quatf, simd_quatf) -> Float",
      "desc": "Returns the dot product of two quaternions."
    },
    {
      "name": "func dot(simd_quatf, simd_quatf) -> Float"
    },
    {
      "name": "func simd_length(simd_quatf) -> Float",
      "desc": "Returns the length of a quaternion."
    },
    {
      "name": "func simd_normalize(simd_quatf) -> simd_quatf",
      "desc": "Returns a quaternion pointing in the same direction as the supplied quaternion with a length of 1."
    },
    {
      "name": "func exp(simd_quatf) -> simd_quatf"
    },
    {
      "name": "func log(simd_quatf) -> simd_quatf"
    },
    {
      "name": "func simd_inverse(simd_quatf) -> simd_quatf",
      "desc": "Returns the inverse of a quaternion."
    },
    {
      "name": "func act(SIMD3<Float>) -> SIMD3<Float>",
      "desc": "Returns the specified vector rotated by the quaternion."
    },
    {
      "name": "static func * (Float, simd_quatf) -> simd_quatf"
    },
    {
      "name": "static func * (simd_quatf, Float) -> simd_quatf"
    },
    {
      "name": "static func * (simd_quatf, simd_quatf) -> simd_quatf"
    },
    {
      "name": "static func *= (inout simd_quatf, Float)"
    },
    {
      "name": "static func *= (inout simd_quatf, simd_quatf)"
    },
    {
      "name": "static func + (simd_quatf, simd_quatf) -> simd_quatf"
    },
    {
      "name": "static func += (inout simd_quatf, simd_quatf)"
    },
    {
      "name": "static func - (simd_quatf) -> simd_quatf"
    },
    {
      "name": "static func - (simd_quatf, simd_quatf) -> simd_quatf"
    },
    {
      "name": "static func -= (inout simd_quatf, simd_quatf)"
    },
    {
      "name": "static func / (simd_quatf, simd_quatf) -> simd_quatf"
    },
    {
      "name": "static func / (simd_quatf, Float) -> simd_quatf"
    },
    {
      "name": "static func /= (inout simd_quatf, Float)"
    },
    {
      "name": "static func /= (inout simd_quatf, simd_quatf)"
    },
    {
      "name": "static func == (simd_quatf, simd_quatf) -> Bool"
    }
  ],
  "declaration": "struct simd_quatf",
  "conformsTo": [
    "AnimatableData",
    "BindableData",
    "CustomDebugStringConvertible",
    "Equatable"
  ]
}