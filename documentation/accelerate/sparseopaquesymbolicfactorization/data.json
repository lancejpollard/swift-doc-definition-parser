{
  "path": "/documentation/accelerate/sparseopaquesymbolicfactorization",
  "type": "Structure",
  "name": "SparseOpaqueSymbolicFactorization",
  "desc": "A semi-opaque type that represents symbolic matrix factorization.",
  "items": [
    {
      "name": "init()"
    },
    {
      "name": "init(status: SparseStatus_t, rowCount: Int32, columnCount: Int32, attributes: SparseAttributes_t, blockSize: UInt8, type: SparseFactorization_t, factorization: UnsafeMutableRawPointer?, workspaceSize_Float: Int, workspaceSize_Double: Int, factorSize_Float: Int, factorSize_Double: Int)",
      "desc": "Creates an opaque symbolic factorization."
    },
    {
      "name": "var status: SparseStatus_t",
      "desc": "The status of the factorization."
    },
    {
      "name": "struct SparseStatus_t",
      "desc": "Constants that describe the status of a factorization."
    },
    {
      "name": "var type: SparseFactorization_t",
      "desc": "The factorization type."
    },
    {
      "name": "var factorization: UnsafeMutableRawPointer?",
      "desc": "A pointer to a private internal representation of the symbolic factor."
    },
    {
      "name": "struct SparseFactorization_t",
      "desc": "Constants that define the factorization type."
    },
    {
      "name": "var attributes: SparseAttributes_t",
      "desc": "The attributes of the factorization."
    },
    {
      "name": "struct SparseAttributes_t",
      "desc": "A structure that represents the attributes of a matrix."
    },
    {
      "name": "var blockSize: UInt8",
      "desc": "The block size."
    },
    {
      "name": "var columnCount: Int32",
      "desc": "The number of columns."
    },
    {
      "name": "var rowCount: Int32",
      "desc": "The number of rows."
    },
    {
      "name": "var workspaceSize_Double: Int",
      "desc": "Size, in bytes, of workspace required to perform numerical factorization in Double."
    },
    {
      "name": "var workspaceSize_Float: Int",
      "desc": "Size, in bytes, of workspace required to perform numerical factorization in Float."
    },
    {
      "name": "var factorSize_Double: Int",
      "desc": "Minimum size, in bytes, required to store numerical factors in Double."
    },
    {
      "name": "var factorSize_Float: Int",
      "desc": "Minimum size, in bytes, required to store numerical factors in Float."
    }
  ],
  "declaration": "struct SparseOpaqueSymbolicFactorization"
}