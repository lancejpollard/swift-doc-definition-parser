{
  "path": "/documentation/accelerate/vdsp-snv",
  "type": "Enumeration",
  "name": "vDSP",
  "desc": "An enumeration that acts as a namespace for Swift overlays to vDSP.",
  "items": [
    {
      "name": "static func absolute<U>(U) -> [Double]",
      "desc": "Returns the absolute value of each element in the supplied double-precision vector."
    },
    {
      "name": "static func absolute<U>(U) -> [Float]",
      "desc": "Returns the absolute value of each element in the supplied single-precision vector."
    },
    {
      "name": "static func absolute<V>(DSPSplitComplex, result: inout V)",
      "desc": "Calculates the absolute value of each element in the supplied single-precision complex vector."
    },
    {
      "name": "static func absolute<V>(DSPDoubleSplitComplex, result: inout V)",
      "desc": "Calculates the absolute value of each element in the supplied double-precision complex vector."
    },
    {
      "name": "static func absolute<U, V>(U, result: inout V)",
      "desc": "Calculates the absolute value of each element in the supplied double-precision vector."
    },
    {
      "name": "static func absolute<U, V>(U, result: inout V)",
      "desc": "Calculates the absolute value of each element in the supplied single-precision vector."
    },
    {
      "name": "static func add<U>(Double, U) -> [Double]",
      "desc": "Returns the double-precision elementwise sum of a vector and a scalar value."
    },
    {
      "name": "static func add<T, U>(T, U) -> [Double]",
      "desc": "Returns the double-precision elementwise sum of the supplied vectors."
    },
    {
      "name": "static func add<U>(Float, U) -> [Float]",
      "desc": "Returns the single-precision elementwise sum of a vector and a scalar value."
    },
    {
      "name": "static func add<T, U>(T, U) -> [Float]",
      "desc": "Returns the single-precision elementwise sum of the supplied vectors."
    },
    {
      "name": "static func add<U, V>(Double, U, result: inout V)",
      "desc": "Calculates the double-precision elementwise sum of a vector and a scalar value."
    },
    {
      "name": "static func add<U, V>(Float, U, result: inout V)",
      "desc": "Calculates the single-precision elementwise sum of a vector and a scalar value."
    },
    {
      "name": "static func add<T, U, V>(T, U, result: inout V)",
      "desc": "Calculates the double-precision elementwise sum of the supplied vectors."
    },
    {
      "name": "static func add<T, U, V>(T, U, result: inout V)",
      "desc": "Calculates the single-precision elementwise sum of the supplied vectors."
    },
    {
      "name": "static func add(DSPSplitComplex, to: DSPSplitComplex, count: Int, result: inout DSPSplitComplex)",
      "desc": "Calculates the single-precision elementwise sum of the supplied complex vectors."
    },
    {
      "name": "static func add(DSPDoubleSplitComplex, to: DSPDoubleSplitComplex, count: Int, result: inout DSPDoubleSplitComplex)",
      "desc": "Calculates the double-precision elementwise sum of the supplied complex vectors."
    },
    {
      "name": "static func add<U>(multiplication: (a: U, b: Double), Double) -> [Double]",
      "desc": "Returns the double-precision elementwise product of a scalar and a vector, added to a scalar."
    },
    {
      "name": "static func add<T, U>(multiplication: (a: T, b: Double), U) -> [Double]",
      "desc": "Returns the double-precision elementwise product of a scalar and a vector, added to a vector."
    },
    {
      "name": "static func add<T, U>(multiplication: (a: T, b: U), Double) -> [Double]",
      "desc": "Returns the double-precision elementwise product of a vector and a vector, added to a scalar."
    },
    {
      "name": "static func add<S, T, U>(multiplication: (a: S, b: T), U) -> [Double]",
      "desc": "Returns the double-precision elementwise product of a vector and a vector, added to a vector."
    },
    {
      "name": "static func add<U>(multiplication: (a: U, b: Float), Float) -> [Float]",
      "desc": "Returns the single-precision elementwise product of a scalar and a vector, added to a scalar."
    },
    {
      "name": "static func add<T, U>(multiplication: (a: T, b: Float), U) -> [Float]",
      "desc": "Returns the single-precision elementwise product of a scalar and a vector, added to a vector."
    },
    {
      "name": "static func add<T, U>(multiplication: (a: T, b: U), Float) -> [Float]",
      "desc": "Returns the single-precision elementwise product of a vector and a vector, added to a scalar."
    },
    {
      "name": "static func add<S, T, U>(multiplication: (a: S, b: T), U) -> [Float]",
      "desc": "Returns the single-precision elementwise product of a vector and a vector, added to a vector."
    },
    {
      "name": "static func add<U, V>(multiplication: (a: U, b: Double), Double, result: inout V)",
      "desc": "Calculates the double-precision elementwise product of a scalar and a vector, added to a scalar."
    },
    {
      "name": "static func add<T, U, V>(multiplication: (a: T, b: Double), U, result: inout V)",
      "desc": "Calculates the double-precision elementwise product of a scalar and a vector, added to a vector."
    },
    {
      "name": "static func add<U, V>(multiplication: (a: U, b: Float), Float, result: inout V)",
      "desc": "Calculates the single-precision elementwise product of a scalar and a vector, added to a scalar."
    },
    {
      "name": "static func add<T, U, V>(multiplication: (a: T, b: Float), U, result: inout V)",
      "desc": "Calculates the single-precision elementwise product of a scalar and a vector, added to a vector."
    },
    {
      "name": "static func add<T, U, V>(multiplication: (a: T, b: U), Double, result: inout V)",
      "desc": "Calculates the double-precision elementwise product of a vector and a vector, added to a scalar."
    },
    {
      "name": "static func add<T, U, V>(multiplication: (a: T, b: U), Float, result: inout V)",
      "desc": "Calculates the single-precision elementwise product of a vector and a vector, added to a scalar."
    },
    {
      "name": "static func add<S, T, U, V>(multiplication: (a: S, b: T), U, result: inout V)",
      "desc": "Calculates the double-precision elementwise product of a vector and a vector, added to a vector."
    },
    {
      "name": "static func add<S, T, U, V>(multiplication: (a: S, b: T), U, result: inout V)",
      "desc": "Calculates the single-precision elementwise product of a vector and a vector, added to a vector."
    },
    {
      "name": "static func add<T, U>(multiplication: (a: T, b: Double), multiplication: (c: U, d: Double)) -> [Double]",
      "desc": "Returns the double-precision elementwise product of a scalar and a vector, added to a second product of a scalar and a vector."
    },
    {
      "name": "static func add<R, S, T, U>(multiplication: (a: R, b: S), multiplication: (c: T, d: U)) -> [Double]",
      "desc": "Returns the double-precision elementwise product of a vector and a vector, added to a second product of a vector and a vector."
    },
    {
      "name": "static func add<T, U>(multiplication: (a: T, b: Float), multiplication: (c: U, d: Float)) -> [Float]",
      "desc": "Returns the single-precision elementwise product of a scalar and a vector, added to a second product of a scalar and a vector."
    },
    {
      "name": "static func add<R, S, T, U>(multiplication: (a: R, b: S), multiplication: (c: T, d: U)) -> [Float]",
      "desc": "Returns the single-precision elementwise product of a vector and a vector, added to a second product of a vector and a vector."
    },
    {
      "name": "static func add<T, U, V>(multiplication: (a: T, b: Double), multiplication: (c: U, d: Double), result: inout V)",
      "desc": "Calculates the double-precision elementwise product of a scalar and a vector, added to a second product of a scalar and a vector."
    },
    {
      "name": "static func add<T, U, V>(multiplication: (a: T, b: Float), multiplication: (c: U, d: Float), result: inout V)",
      "desc": "Calculates the single-precision elementwise product of a scalar and a vector, added to a second product of a scalar and a vector."
    },
    {
      "name": "static func add<R, S, T, U, V>(multiplication: (a: R, b: S), multiplication: (c: T, d: U), result: inout V)",
      "desc": "Calculates the double-precision elementwise product of a vector and a vector, added to a second product of a vector and a vector."
    },
    {
      "name": "static func add<R, S, T, U, V>(multiplication: (a: R, b: S), multiplication: (c: T, d: U), result: inout V)",
      "desc": "Calculates the single-precision elementwise product of a vector and a vector, added to a second product of a vector and a vector."
    },
    {
      "name": "static func addSubtract<S, T, U, V>(S, T, addResult: inout U, subtractResult: inout V)",
      "desc": "Calculates the double-precision elementwise sum and difference of the supplied vectors."
    },
    {
      "name": "static func addSubtract<S, T, U, V>(S, T, addResult: inout U, subtractResult: inout V)",
      "desc": "Calculates the single-precision elementwise sum and difference of the supplied vectors."
    },
    {
      "name": "static func amplitudeToDecibels<U>(U, zeroReference: Double) -> [Double]",
      "desc": "Returns double-precision amplitude values converted to decibel values."
    },
    {
      "name": "static func amplitudeToDecibels<U>(U, zeroReference: Float) -> [Float]",
      "desc": "Returns single-precision amplitude values converted to decibels."
    },
    {
      "name": "static func clear<V>(inout V)",
      "desc": "Populates a double-precision vector with zeros."
    },
    {
      "name": "static func clear<V>(inout V)",
      "desc": "Populates a single-precision vector with zeros."
    },
    {
      "name": "static func clip<U>(U, to: ClosedRange<Double>) -> [Double]",
      "desc": "Returns the elements of a double-precision vector clipped to the specified range."
    },
    {
      "name": "static func clip<U>(U, to: ClosedRange<Float>) -> [Float]",
      "desc": "Returns the elements of a single-precision vector clipped to the specified range."
    },
    {
      "name": "static func clip<U, V>(U, to: ClosedRange<Double>, result: inout V)",
      "desc": "Calculates the elements of a double-precision vector clipped to the specified range."
    },
    {
      "name": "static func clip<U, V>(U, to: ClosedRange<Float>, result: inout V)",
      "desc": "Calculates the elements of a single-precision vector clipped to the specified range."
    },
    {
      "name": "static func conjugate(DSPSplitComplex, count: Int, result: inout DSPSplitComplex)",
      "desc": "Calculates the complex conjugate of the values in a single-precision vector."
    },
    {
      "name": "static func conjugate(DSPDoubleSplitComplex, count: Int, result: inout DSPDoubleSplitComplex)",
      "desc": "Calculates the complex conjugate of the values in a double-precision vector."
    },
    {
      "name": "static func convert<U, V>(amplitude: U, toDecibels: inout V, zeroReference: Double)",
      "desc": "Converts double-precision amplitude values to decibel values."
    },
    {
      "name": "static func convert<U, V>(amplitude: U, toDecibels: inout V, zeroReference: Float)",
      "desc": "Converts single-precision amplitude values to decibel values."
    },
    {
      "name": "static func convert(interleavedComplexVector: [DSPDoubleComplex], toSplitComplexVector: inout DSPDoubleSplitComplex)",
      "desc": "Converts the contents of an interleaved double-precision complex vector to a split complex vector."
    },
    {
      "name": "static func convert(interleavedComplexVector: [DSPComplex], toSplitComplexVector: inout DSPSplitComplex)",
      "desc": "Converts the contents of an interleaved single-precision complex vector to a split complex vector."
    },
    {
      "name": "static func convert<U, V>(polarCoordinates: U, toRectangularCoordinates: inout V)",
      "desc": "Converts double-precision polar coordinates to rectangular coordinates."
    },
    {
      "name": "static func convert<U, V>(polarCoordinates: U, toRectangularCoordinates: inout V)",
      "desc": "Converts single-precision polar coordinates to rectangular coordinates."
    },
    {
      "name": "static func convert<U, V>(power: U, toDecibels: inout V, zeroReference: Double)",
      "desc": "Converts double-precision power values to decibel values."
    },
    {
      "name": "static func convert<U, V>(power: U, toDecibels: inout V, zeroReference: Float)",
      "desc": "Converts single-precision power values to decibel values."
    },
    {
      "name": "static func convert<U, V>(rectangularCoordinates: U, toPolarCoordinates: inout V)",
      "desc": "Converts double-precision rectangular coordinates to polar coordinates."
    },
    {
      "name": "static func convert<U, V>(rectangularCoordinates: U, toPolarCoordinates: inout V)",
      "desc": "Converts single-precision rectangular coordinates to polar coordinates."
    },
    {
      "name": "static func convert(splitComplexVector: DSPDoubleSplitComplex, toInterleavedComplexVector: inout [DSPDoubleComplex])",
      "desc": "Converts the contents of a split double-precision complex vector to an interleaved vector."
    },
    {
      "name": "static func convert(splitComplexVector: DSPSplitComplex, toInterleavedComplexVector: inout [DSPComplex])",
      "desc": "Converts the contents of a split single-precision complex vector to an interleaved vector."
    },
    {
      "name": "static func convertElements<U, V>(of: U, to: inout V)",
      "desc": "Converts double-precision values to single-precision values."
    },
    {
      "name": "static func convertElements<U, V>(of: U, to: inout V)",
      "desc": "Converts single-precision values to double-precision values."
    },
    {
      "name": "static func convertElements<U, V>(of: U, to: inout V)",
      "desc": "Converts 8-bit signed integers to double-precision values."
    },
    {
      "name": "static func convertElements<U, V>(of: U, to: inout V)",
      "desc": "Converts 8-bit signed integers to single-precision values."
    },
    {
      "name": "static func convertElements<U, V>(of: U, to: inout V)",
      "desc": "Converts 16-bit signed integers to double-precision values."
    },
    {
      "name": "static func convertElements<U, V>(of: U, to: inout V)",
      "desc": "Converts 16-bit signed integers to single-precision values."
    },
    {
      "name": "static func convertElements<U, V>(of: U, to: inout V)",
      "desc": "Converts 32-bit signed integers to double-precision values."
    },
    {
      "name": "static func convertElements<U, V>(of: U, to: inout V)",
      "desc": "Converts 32-bit signed integers to single-precision values."
    },
    {
      "name": "static func convertElements<U, V>(of: U, to: inout V)",
      "desc": "Converts 8-bit unsigned integers to double-precision values."
    },
    {
      "name": "static func convertElements<U, V>(of: U, to: inout V)",
      "desc": "Converts 8-bit unsigned integers to single-precision values."
    },
    {
      "name": "static func convertElements<U, V>(of: U, to: inout V)",
      "desc": "Converts 16-bit unsigned integers to double-precision values."
    },
    {
      "name": "static func convertElements<U, V>(of: U, to: inout V)",
      "desc": "Converts 16-bit unsigned integers to single-precision values."
    },
    {
      "name": "static func convertElements<U, V>(of: U, to: inout V)",
      "desc": "Converts 32-bit unsigned integers to double-precision values."
    },
    {
      "name": "static func convertElements<U, V>(of: U, to: inout V)",
      "desc": "Converts 32-bit unsigned integers to single-precision values."
    },
    {
      "name": "static func convertElements<U, V>(of: U, to: inout V, rounding: vDSP.RoundingMode)",
      "desc": "Converts double-precision values to 8-bit signed integers."
    },
    {
      "name": "static func convertElements<U, V>(of: U, to: inout V, rounding: vDSP.RoundingMode)",
      "desc": "Converts double-precision values to 16-bit signed integers."
    },
    {
      "name": "static func convertElements<U, V>(of: U, to: inout V, rounding: vDSP.RoundingMode)",
      "desc": "Converts double-precision values to 32-bit signed integers."
    },
    {
      "name": "static func convertElements<U, V>(of: U, to: inout V, rounding: vDSP.RoundingMode)",
      "desc": "Converts double-precision values to 8-bit unsigned integers."
    },
    {
      "name": "static func convertElements<U, V>(of: U, to: inout V, rounding: vDSP.RoundingMode)",
      "desc": "Converts double-precision values to 16-bit unsigned integers."
    },
    {
      "name": "static func convertElements<U, V>(of: U, to: inout V, rounding: vDSP.RoundingMode)",
      "desc": "Converts double-precision values to 32-bit unsigned integers."
    },
    {
      "name": "static func convertElements<U, V>(of: U, to: inout V, rounding: vDSP.RoundingMode)",
      "desc": "Converts single-precision values to 8-bit signed integers."
    },
    {
      "name": "static func convertElements<U, V>(of: U, to: inout V, rounding: vDSP.RoundingMode)",
      "desc": "Converts single-precision values to 16-bit signed integers."
    },
    {
      "name": "static func convertElements<U, V>(of: U, to: inout V, rounding: vDSP.RoundingMode)",
      "desc": "Converts single-precision values to 32-bit signed integers."
    },
    {
      "name": "static func convertElements<U, V>(of: U, to: inout V, rounding: vDSP.RoundingMode)",
      "desc": "Converts single-precision values to 8-bit unsigned integers."
    },
    {
      "name": "static func convertElements<U, V>(of: U, to: inout V, rounding: vDSP.RoundingMode)",
      "desc": "Converts single-precision values to 16-bit unsigned integers."
    },
    {
      "name": "static func convertElements<U, V>(of: U, to: inout V, rounding: vDSP.RoundingMode)",
      "desc": "Converts single-precision values to 32-bit unsigned integers."
    },
    {
      "name": "static func convolve<T, U>(T, rowCount: Int, columnCount: Int, with3x3Kernel: U) -> [Double]",
      "desc": "Returns the 2D convolution of a double-precision vector with a 3 x 3 kernel."
    },
    {
      "name": "static func convolve<T, U>(T, rowCount: Int, columnCount: Int, with3x3Kernel: U) -> [Float]",
      "desc": "Returns the 2D convolution of a single-precision vector with a 3 x 3 kernel."
    },
    {
      "name": "static func convolve<T, U, V>(T, rowCount: Int, columnCount: Int, with3x3Kernel: U, result: inout V)",
      "desc": "Calculates the 2D convolution of a double-precision vector with a 3 x 3 kernel."
    },
    {
      "name": "static func convolve<T, U, V>(T, rowCount: Int, columnCount: Int, with3x3Kernel: U, result: inout V)",
      "desc": "Calculates the 2D convolution of a single-precision vector with a 3 x 3 kernel."
    },
    {
      "name": "static func convolve<T, U>(T, rowCount: Int, columnCount: Int, with5x5Kernel: U) -> [Double]",
      "desc": "Returns the 2D convolution of a double-precision vector with a 5 x 5 kernel."
    },
    {
      "name": "static func convolve<T, U>(T, rowCount: Int, columnCount: Int, with5x5Kernel: U) -> [Float]",
      "desc": "Returns the 2D convolution of a single-precision vector with a 5 x 5 kernel."
    },
    {
      "name": "static func convolve<T, U, V>(T, rowCount: Int, columnCount: Int, with5x5Kernel: U, result: inout V)",
      "desc": "Calculates the 2D convolution of a double-precision vector with a 5 x 5 kernel."
    },
    {
      "name": "static func convolve<T, U, V>(T, rowCount: Int, columnCount: Int, with5x5Kernel: U, result: inout V)",
      "desc": "Calculates the 2D convolution of a single-precision vector with a 5 x 5 kernel."
    },
    {
      "name": "static func convolve<T, U>(T, rowCount: Int, columnCount: Int, withKernel: U, kernelRowCount: Int, kernelColumnCount: Int) -> [Double]",
      "desc": "Returns the 2D convolution of a double-precision vector with an arbitrarily sized kernel."
    },
    {
      "name": "static func convolve<T, U>(T, rowCount: Int, columnCount: Int, withKernel: U, kernelRowCount: Int, kernelColumnCount: Int) -> [Float]",
      "desc": "Returns the 2D convolution of a single-precision vector with an arbitrarily sized kernel."
    },
    {
      "name": "static func convolve<T, U, V>(T, rowCount: Int, columnCount: Int, withKernel: U, kernelRowCount: Int, kernelColumnCount: Int, result: inout V)",
      "desc": "Calculates the 2D convolution of a double-precision vector with an arbitrarily sized kernel."
    },
    {
      "name": "static func convolve<T, U, V>(T, rowCount: Int, columnCount: Int, withKernel: U, kernelRowCount: Int, kernelColumnCount: Int, result: inout V)",
      "desc": "Calculates the 2D convolution of a single-precision vector with an arbitrarily sized kernel."
    },
    {
      "name": "static func convolve<T, U>(T, withKernel: U) -> [Double]",
      "desc": "Returns the 1D convolution of a double-precision vector."
    },
    {
      "name": "static func convolve<T, U>(T, withKernel: U) -> [Float]",
      "desc": "Returns the 1D convolution of a single-precision vector."
    },
    {
      "name": "static func convolve<T, U, V>(T, withKernel: U, result: inout V)",
      "desc": "Calculates the 1D convolution of a double-precision vector."
    },
    {
      "name": "static func convolve<T, U, V>(T, withKernel: U, result: inout V)",
      "desc": "Calculates the 1D convolution of a single-precision vector."
    },
    {
      "name": "static func copy(DSPSplitComplex, to: inout DSPSplitComplex, count: Int)",
      "desc": "Copies a complex single-precision vector."
    },
    {
      "name": "static func copy(DSPDoubleSplitComplex, to: inout DSPDoubleSplitComplex, count: Int)",
      "desc": "Copies a complex double-precision vector."
    },
    {
      "name": "static func correlate<T, U>(T, withKernel: U) -> [Double]",
      "desc": "Returns the correlation of a double-precision signal vector and a filter vector."
    },
    {
      "name": "static func correlate<T, U>(T, withKernel: U) -> [Float]",
      "desc": "Returns the correlation of a single-precision signal vector and a filter vector."
    },
    {
      "name": "static func correlate<T, U, V>(T, withKernel: U, result: inout V)",
      "desc": "Calculates the correlation of a double-precision signal vector and a filter vector."
    },
    {
      "name": "static func correlate<T, U, V>(T, withKernel: U, result: inout V)",
      "desc": "Calculates the correlation of a single-precision signal vector and a filter vector."
    },
    {
      "name": "static func countZeroCrossings<U>(U) -> UInt",
      "desc": "Returns the number of zero crossings in a double-precision vector."
    },
    {
      "name": "static func countZeroCrossings<U>(U) -> UInt",
      "desc": "Returns the number of zero crossings in a single-precision vector."
    },
    {
      "name": "static func distanceSquared<U, V>(U, V) -> Double",
      "desc": "Returns the double-precision distance squared between two points in n-dimensional space."
    },
    {
      "name": "static func distanceSquared<U, V>(U, V) -> Float",
      "desc": "Returns the single-precision distance squared between two points in n-dimensional space."
    },
    {
      "name": "static func divide<U>(Double, U) -> [Double]",
      "desc": "Returns the double-precision elementwise division of a scalar by a vector."
    },
    {
      "name": "static func divide<U>(U, Double) -> [Double]",
      "desc": "Returns the double-precision elementwise division of a vector by a scalar."
    },
    {
      "name": "static func divide<T, U>(T, U) -> [Double]",
      "desc": "Returns the double-precision elementwise division of a vector by a vector."
    },
    {
      "name": "static func divide<U>(Float, U) -> [Float]",
      "desc": "Returns the single-precision elementwise division of a scalar by a vector."
    },
    {
      "name": "static func divide<U>(U, Float) -> [Float]",
      "desc": "Returns the single-precision elementwise division of a vector by a scalar."
    },
    {
      "name": "static func divide<T, U>(T, U) -> [Float]",
      "desc": "Returns the single-precision elementwise division of a vector by a vector."
    },
    {
      "name": "static func divide<U, V>(Double, U, result: inout V)",
      "desc": "Calculates the double-precision elementwise division of a scalar by a vector."
    },
    {
      "name": "static func divide<U, V>(Float, U, result: inout V)",
      "desc": "Calculates the single-precision elementwise division of a scalar by a vector."
    },
    {
      "name": "static func divide<U, V>(U, Double, result: inout V)",
      "desc": "Calculates the double-precision elementwise division of a vector by a scalar."
    },
    {
      "name": "static func divide<U, V>(U, Float, result: inout V)",
      "desc": "Calculates the single-precision elementwise division of a vector by a scalar."
    },
    {
      "name": "static func divide<T, U, V>(T, U, result: inout V)",
      "desc": "Calculates the double-precision elementwise division of a vector by a vector."
    },
    {
      "name": "static func divide<T, U, V>(T, U, result: inout V)",
      "desc": "Calculates the single-precision elementwise division of a vector by a vector."
    },
    {
      "name": "static func divide(DSPSplitComplex, by: DSPSplitComplex, count: Int, result: inout DSPSplitComplex)",
      "desc": "Calculates the single-precision elementwise division of a complex vector by a complex vector."
    },
    {
      "name": "static func divide(DSPDoubleSplitComplex, by: DSPDoubleSplitComplex, count: Int, result: inout DSPDoubleSplitComplex)",
      "desc": "Calculates the double-precision elementwise division of a complex vector by a complex vector."
    },
    {
      "name": "static func divide<U>(DSPSplitComplex, by: U, result: inout DSPSplitComplex)",
      "desc": "Calculates the single-precision elementwise division of a complex vector by a real vector."
    },
    {
      "name": "static func divide<U>(DSPDoubleSplitComplex, by: U, result: inout DSPDoubleSplitComplex)",
      "desc": "Calculates the double-precision elementwise division of a complex vector by a complex vector."
    },
    {
      "name": "static func doubleToFloat<U>(U) -> [Float]",
      "desc": "Returns double-precision values converted to single-precision values."
    },
    {
      "name": "static func downsample<T, U>(U, decimationFactor: Int, filter: T) -> [Double]",
      "desc": "Returns the downsampled double-precision vector."
    },
    {
      "name": "static func downsample<T, U>(U, decimationFactor: Int, filter: T) -> [Float]",
      "desc": "Returns the downsampled single-precision vector."
    },
    {
      "name": "static func downsample<T, U, V>(U, decimationFactor: Int, filter: T, result: inout V)",
      "desc": "Calculates the downsampled double-precision vector."
    },
    {
      "name": "static func downsample<T, U, V>(U, decimationFactor: Int, filter: T, result: inout V)",
      "desc": "Calculates the downsampled single-precision vector."
    },
    {
      "name": "static func evaluatePolynomial<U>(usingCoefficients: [Double], withVariables: U) -> [Double]",
      "desc": "Returns a double-precision evaluated polynomial using specified coefficients and independent variables."
    },
    {
      "name": "static func evaluatePolynomial<U>(usingCoefficients: [Float], withVariables: U) -> [Float]",
      "desc": "Returns a single-precision evaluated polynomial using specified coefficients and independent variables."
    },
    {
      "name": "static func evaluatePolynomial<U, V>(usingCoefficients: [Double], withVariables: U, result: inout V)",
      "desc": "Evaluates a double-precision polynomial using specified coefficients and independent variables."
    },
    {
      "name": "static func evaluatePolynomial<U, V>(usingCoefficients: [Float], withVariables: U, result: inout V)",
      "desc": "Evaluates a single-precision polynomial using specified coefficients and independent variables."
    },
    {
      "name": "static func fill<V>(inout V, with: Double)",
      "desc": "Populates a double-precision vector with a specified scalar value."
    },
    {
      "name": "static func fill<V>(inout V, with: Float)",
      "desc": "Populates a single-precision vector with a specified scalar value."
    },
    {
      "name": "static func floatToDouble<U>(U) -> [Double]",
      "desc": "Returns single-precision values converted to double-precision values."
    },
    {
      "name": "static func floatingPointToInteger<T, U>(T, integerType: U.Type, rounding: vDSP.RoundingMode) -> [U]",
      "desc": "Returns double-precision values converted to integer values."
    },
    {
      "name": "static func floatingPointToInteger<T, U>(T, integerType: U.Type, rounding: vDSP.RoundingMode) -> [U]",
      "desc": "Returns single-precision values converted to integer values."
    },
    {
      "name": "static func formRamp<V>(in: ClosedRange<Double>, result: inout V)",
      "desc": "Populates a double-precision vector with monotonically incrementing or decrementing values within a specified range."
    },
    {
      "name": "static func formRamp<V>(in: ClosedRange<Float>, result: inout V)",
      "desc": "Populates a single-precision vector with monotonically incrementing or decrementing values within a specified range."
    },
    {
      "name": "static func formRamp<V>(withInitialValue: Double, increment: Double, result: inout V)",
      "desc": "Populates a double-precision vector with monotonically incrementing or decrementing values."
    },
    {
      "name": "static func formRamp<V>(withInitialValue: Float, increment: Float, result: inout V)",
      "desc": "Populates a single-precision vector with monotonically incrementing or decrementing values."
    },
    {
      "name": "static func formRamp<U, V>(withInitialValue: inout Double, multiplyingBy: U, increment: Double, result: inout V)",
      "desc": "Populates a double-precision vector with monotonically incrementing or decrementing values, and multiplies that vector by a source vector."
    },
    {
      "name": "static func formRamp<U, V>(withInitialValue: inout Float, multiplyingBy: U, increment: Float, result: inout V)",
      "desc": "Populates a single-precision vector with monotonically incrementing or decrementing values, and multiplies that vector by a source vector."
    },
    {
      "name": "static func formStereoRamp<U, V>(withInitialValue: inout Double, multiplyingBy: U, U, increment: Double, results: inout V, inout V)",
      "desc": "Populates two single-precision vectors that contain stereo monotonically incrementing or decrementing values multiplied by two source vectors."
    },
    {
      "name": "static func formStereoRamp<U, V>(withInitialValue: inout Float, multiplyingBy: U, U, increment: Float, results: inout V, inout V)",
      "desc": "Populates two single-precision vectors that contain stereo monotonically incrementing or decrementing values multiplied by two source vectors."
    },
    {
      "name": "static func formWindow<V>(usingSequence: vDSP.WindowSequence, result: inout V, isHalfWindow: Bool)",
      "desc": "Populates a double-precision vector with a specified window."
    },
    {
      "name": "static func formWindow<V>(usingSequence: vDSP.WindowSequence, result: inout V, isHalfWindow: Bool)",
      "desc": "Populates a single-precision vector with a specified window."
    },
    {
      "name": "static func hypot<U, V>(U, V) -> [Double]",
      "desc": "Returns the double-precision hypotenuse of right-angled triangles with sides that are the lengths of corresponding elements of vectors x and y."
    },
    {
      "name": "static func hypot<U, V>(U, V) -> [Float]",
      "desc": "Returns the single-precision hypotenuse of right-angled triangles with sides that are the lengths of corresponding elements of vectors x and y."
    },
    {
      "name": "static func hypot<T, U, V>(T, U, result: inout V)",
      "desc": "Calculates the double-precision hypotenuse of right-angled triangles with sides that are the lengths of corresponding elements of vectors x and y."
    },
    {
      "name": "static func hypot<T, U, V>(T, U, result: inout V)",
      "desc": "Calculates the single-precision hypotenuse of right-angled triangles with sides that are the lengths of corresponding elements of vectors x and y."
    },
    {
      "name": "static func hypot<R, S, T, U>(x0: R, x1: S, y0: T, y1: U) -> [Double]",
      "desc": "Returns the double-precision hypotenuse of right-angled triangles with sides that are the differences of corresponding elements of vectors x0, x1, and y0, y1."
    },
    {
      "name": "static func hypot<R, S, T, U>(x0: R, x1: S, y0: T, y1: U) -> [Float]",
      "desc": "Returns the single-precision hypotenuse of right-angled triangles with sides that are the differences of corresponding elements of vectors x0, x1, and y0, y1."
    },
    {
      "name": "static func hypot<R, S, T, U, V>(x0: R, x1: S, y0: T, y1: U, result: inout V)",
      "desc": "Calculates the double-precision hypotenuse of right-angled triangles with sides that are the differences of corresponding elements of vectors x0, x1, and y0, y1."
    },
    {
      "name": "static func hypot<R, S, T, U, V>(x0: R, x1: S, y0: T, y1: U, result: inout V)",
      "desc": "Calculates the single-precision hypotenuse of right-angled triangles with sides that are the differences of corresponding elements of vectors x0, x1, and y0, y1."
    },
    {
      "name": "static func indexOfMaximum<U>(U) -> (UInt, Double)",
      "desc": "Returns the maximum element, and its index, of a double-precision vector."
    },
    {
      "name": "static func indexOfMaximum<U>(U) -> (UInt, Float)",
      "desc": "Returns the maximum element, and its index, of a signal-precision vector."
    },
    {
      "name": "static func indexOfMaximumMagnitude<U>(U) -> (UInt, Double)",
      "desc": "Returns the maximum magnitude element, and its index, of a double-precision vector."
    },
    {
      "name": "static func indexOfMaximumMagnitude<U>(U) -> (UInt, Float)",
      "desc": "Returns the maximum magnitude element, and its index, of a single-precision vector."
    },
    {
      "name": "static func indexOfMinimum<U>(U) -> (UInt, Double)",
      "desc": "Returns the minimum element, and its index, of a double-precision vector."
    },
    {
      "name": "static func indexOfMinimum<U>(U) -> (UInt, Float)",
      "desc": "Returns the minimum element, and its index, of a single-precision vector."
    },
    {
      "name": "static func integerToFloatingPoint<T, U>(T, floatingPointType: U.Type) -> [U]",
      "desc": "Returns a vector of signed 8-bit integers converted to floating-point values."
    },
    {
      "name": "static func integerToFloatingPoint<T, U>(T, floatingPointType: U.Type) -> [U]",
      "desc": "Returns a vector of signed 16-bit integers converted to floating-point values."
    },
    {
      "name": "static func integerToFloatingPoint<T, U>(T, floatingPointType: U.Type) -> [U]",
      "desc": "Returns a vector of signed 32-bit integers converted to floating-point values."
    },
    {
      "name": "static func integerToFloatingPoint<T, U>(T, floatingPointType: U.Type) -> [U]",
      "desc": "Returns a vector of unsigned 8-bit integers converted to floating-point values."
    },
    {
      "name": "static func integerToFloatingPoint<T, U>(T, floatingPointType: U.Type) -> [U]",
      "desc": "Returns a vector of unsigned 16-bit integers converted to floating-point values."
    },
    {
      "name": "static func integerToFloatingPoint<T, U>(T, floatingPointType: U.Type) -> [U]",
      "desc": "Returns a vector of unsigned 32-bit integers converted floating-point values."
    },
    {
      "name": "static func integrate<U>(U, using: vDSP.IntegrationRule, stepSize: Double) -> [Double]",
      "desc": "Returns the integration of a double-precision vector using the specified rule."
    },
    {
      "name": "static func integrate<U>(U, using: vDSP.IntegrationRule, stepSize: Float) -> [Float]",
      "desc": "Returns the integration of a single-precision vector using the specified rule."
    },
    {
      "name": "static func integrate<U, V>(U, using: vDSP.IntegrationRule, stepSize: Double, result: inout V)",
      "desc": "Performs the integration of a double-precision using the specified rule."
    },
    {
      "name": "static func integrate<U, V>(U, using: vDSP.IntegrationRule, stepSize: Float, result: inout V)",
      "desc": "Performs the integration of a single-precision using the specified rule."
    },
    {
      "name": "static func invertedClip<U>(U, to: ClosedRange<Double>) -> [Double]",
      "desc": "Returns a double-precision vector that’s inverted-clipped to the specified range."
    },
    {
      "name": "static func invertedClip<U>(U, to: ClosedRange<Float>) -> [Float]",
      "desc": "Returns a single-precision vector that’s inverted-clipped to the specified range."
    },
    {
      "name": "static func invertedClip<U, V>(U, to: ClosedRange<Double>, result: inout V)",
      "desc": "Calculates a double-precision vector that’s inverted-clipped to the specified range."
    },
    {
      "name": "static func invertedClip<U, V>(U, to: ClosedRange<Float>, result: inout V)",
      "desc": "Calculates a single-precision vector that’s inverted-clipped to the specified range."
    },
    {
      "name": "static func limit<U>(U, limit: Double, withOutputConstant: Double) -> [Double]",
      "desc": "Returns the double-precision vector test limit."
    },
    {
      "name": "static func limit<U>(U, limit: Float, withOutputConstant: Float) -> [Float]",
      "desc": "Returns the single-precision vector test limit."
    },
    {
      "name": "static func limit<U, V>(U, limit: Double, withOutputConstant: Double, result: inout V)",
      "desc": "Calculates the double-precision vector test limit."
    },
    {
      "name": "static func limit<U, V>(U, limit: Float, withOutputConstant: Float, result: inout V)",
      "desc": "Calculates the single-precision vector test limit."
    },
    {
      "name": "static func linearInterpolate<T, U>(T, U, using: Double) -> [Double]",
      "desc": "Returns the linear interpolation between the supplied double-precision vectors."
    },
    {
      "name": "static func linearInterpolate<T, U>(T, U, using: Float) -> [Float]",
      "desc": "Returns the linear interpolation between the supplied single-precision vectors."
    },
    {
      "name": "static func linearInterpolate<T, U, V>(T, U, using: Double, result: inout V)",
      "desc": "Calculates the linear interpolation between the supplied double-precision vectors."
    },
    {
      "name": "static func linearInterpolate<T, U, V>(T, U, using: Float, result: inout V)",
      "desc": "Calculates the linear interpolation between the supplied single-precision vectors."
    },
    {
      "name": "static func linearInterpolate<T, U>(elementsOf: T, using: U) -> [Double]",
      "desc": "Returns the interpolation between the neighboring elements of a double-precision vector."
    },
    {
      "name": "static func linearInterpolate<T, U>(elementsOf: T, using: U) -> [Float]",
      "desc": "Returns the interpolation between the neighboring elements of a single-precision vector."
    },
    {
      "name": "static func linearInterpolate<T, U, V>(elementsOf: T, using: U, result: inout V)",
      "desc": "Calculates the interpolation between the neighboring elements of a double-precision vector."
    },
    {
      "name": "static func linearInterpolate<T, U, V>(elementsOf: T, using: U, result: inout V)",
      "desc": "Calculates the interpolation between the neighboring elements of a single-precision vector."
    },
    {
      "name": "static func maximum<U>(U) -> Double",
      "desc": "Returns the maximum element of a double-precision vector."
    },
    {
      "name": "static func maximum<U>(U) -> Float",
      "desc": "Returns the maximum element of a single-precision vector."
    },
    {
      "name": "static func maximum<U>(U, U) -> [Double]",
      "desc": "Returns a double-precision array containing the maximum of the corresponding values of two vectors."
    },
    {
      "name": "static func maximum<U>(U, U) -> [Float]",
      "desc": "Returns a single-precision array containing the maximum of the corresponding values of two vectors."
    },
    {
      "name": "static func maximum<U, V>(U, U, result: inout V)",
      "desc": "Calculates the maximum of the corresponding double-precision values of two vectors."
    },
    {
      "name": "static func maximum<U, V>(U, U, result: inout V)",
      "desc": "Calculates the maximum of the corresponding single-precision values of two vectors."
    },
    {
      "name": "static func maximumMagnitude<U>(U) -> Double",
      "desc": "Returns the maximum magnitude element of a double-precision vector."
    },
    {
      "name": "static func maximumMagnitude<U>(U) -> Float",
      "desc": "Returns the maximum magnitude element of a single-precision vector."
    },
    {
      "name": "static func mean<U>(U) -> Double",
      "desc": "Returns the double-precision vector mean."
    },
    {
      "name": "static func mean<U>(U) -> Float",
      "desc": "Returns the single-precision vector mean."
    },
    {
      "name": "static func meanMagnitude<U>(U) -> Double",
      "desc": "Returns the double-precision vector mean magnitude."
    },
    {
      "name": "static func meanMagnitude<U>(U) -> Float",
      "desc": "Returns the single-precision vector mean magnitude."
    },
    {
      "name": "static func meanSquare<U>(U) -> Double",
      "desc": "Returns the double-precision vector mean square."
    },
    {
      "name": "static func meanSquare<U>(U) -> Float",
      "desc": "Returns the single-precision vector mean square."
    },
    {
      "name": "static func minimum<U>(U) -> Double",
      "desc": "Returns the minimum element of a double-precision vector."
    },
    {
      "name": "static func minimum<U>(U) -> Float",
      "desc": "Returns the minimum element of a single-precision vector."
    },
    {
      "name": "static func minimum<U>(U, U) -> [Double]",
      "desc": "Returns a double-precision array containing the minimum of the corresponding values of two vectors."
    },
    {
      "name": "static func minimum<U>(U, U) -> [Float]",
      "desc": "Returns a single-precision array containing the minimum of the corresponding values of two vectors."
    },
    {
      "name": "static func minimum<U, V>(U, U, result: inout V)",
      "desc": "Calculates the double-precision minimum of the corresponding values of two vectors."
    },
    {
      "name": "static func minimum<U, V>(U, U, result: inout V)",
      "desc": "Calculates the single-precision minimum of the corresponding values of two vectors."
    },
    {
      "name": "static func multiply<U>(Double, U) -> [Double]",
      "desc": "Returns the double-precision elementwise product of a vector and a scalar value."
    },
    {
      "name": "static func multiply<T, U>(T, U) -> [Double]",
      "desc": "Returns the double-precision elementwise product of a vector and a vector."
    },
    {
      "name": "static func multiply<U>(Float, U) -> [Float]",
      "desc": "Returns the single-precision elementwise product of a vector and a scalar value."
    },
    {
      "name": "static func multiply<T, U>(T, U) -> [Float]",
      "desc": "Returns the single-precision elementwise product of a vector and a vector."
    },
    {
      "name": "static func multiply<U, V>(Double, U, result: inout V)",
      "desc": "Calculates the double-precision elementwise product of a vector and a vector."
    },
    {
      "name": "static func multiply<U, V>(Float, U, result: inout V)",
      "desc": "Calculates the single-precision elementwise product of a vector and a vector."
    },
    {
      "name": "static func multiply<T, U, V>(T, U, result: inout V)",
      "desc": "Calculates the double-precision elementwise product of a vector and a vector."
    },
    {
      "name": "static func multiply<T, U, V>(T, U, result: inout V)",
      "desc": "Calculates the single-precision elementwise product of a vector and a vector."
    },
    {
      "name": "static func multiply(DSPSplitComplex, by: DSPSplitComplex, count: Int, useConjugate: Bool, result: inout DSPSplitComplex)",
      "desc": "Calculates the product of two complex single-precision vectors, optionally conjugating one of them."
    },
    {
      "name": "static func multiply(DSPDoubleSplitComplex, by: DSPDoubleSplitComplex, count: Int, useConjugate: Bool, result: inout DSPDoubleSplitComplex)",
      "desc": "Calculates the elementwise product of two complex double-precision vectors, optionally conjugating one of them."
    },
    {
      "name": "static func multiply<U>(DSPSplitComplex, by: U, result: inout DSPSplitComplex)",
      "desc": "Calculates the double-precision elementwise product of a complex vector and a real vector."
    },
    {
      "name": "static func multiply<U>(DSPDoubleSplitComplex, by: U, result: inout DSPDoubleSplitComplex)",
      "desc": "Calculates the single-precision elementwise product of a complex vector and a real vector."
    },
    {
      "name": "static func multiply<T, U>(addition: (a: T, b: U), Double) -> [Double]",
      "desc": "Returns the double-precision elementwise product of the sum of two vectors and a scalar value."
    },
    {
      "name": "static func multiply<S, T, U>(addition: (a: S, b: T), U) -> [Double]",
      "desc": "Returns the double-precision elementwise product of the sum of two vectors and a vector."
    },
    {
      "name": "static func multiply<T, U>(addition: (a: T, b: U), Float) -> [Float]",
      "desc": "Returns the single-precision elementwise product of the sum of two vectors and a scalar value."
    },
    {
      "name": "static func multiply<S, T, U>(addition: (a: S, b: T), U) -> [Float]",
      "desc": "Returns the single-precision elementwise product of the sum of two vectors and a vector."
    },
    {
      "name": "static func multiply<T, U, V>(addition: (a: T, b: U), Double, result: inout V)",
      "desc": "Calculates the double-precision elementwise product of the sum of two vectors and a scalar value."
    },
    {
      "name": "static func multiply<T, U, V>(addition: (a: T, b: U), Float, result: inout V)",
      "desc": "Calculates the single-precision elementwise product of the sum of two vectors and a scalar value."
    },
    {
      "name": "static func multiply<S, T, U, V>(addition: (a: S, b: T), U, result: inout V)",
      "desc": "Calculates the double-precision elementwise product of the sum of two vectors and a vector."
    },
    {
      "name": "static func multiply<S, T, U, V>(addition: (a: S, b: T), U, result: inout V)",
      "desc": "Calculates the single-precision elementwise product of the sum of two vectors and a vector."
    },
    {
      "name": "static func multiply<S, T, U>(addition: (a: S, b: T), addition: (c: U, d: U)) -> [Double]",
      "desc": "Returns the double-precision elementwise product of two elementwise vector-vector sums."
    },
    {
      "name": "static func multiply<S, T, U>(addition: (a: S, b: T), addition: (c: U, d: U)) -> [Float]",
      "desc": "Returns the single-precision elementwise product of two elementwise vector-vector sums."
    },
    {
      "name": "static func multiply<S, T, U, V>(addition: (a: S, b: T), addition: (c: U, d: U), result: inout V)",
      "desc": "Calculates the double-precision elementwise product of two elementwise vector-vector sums."
    },
    {
      "name": "static func multiply<S, T, U, V>(addition: (a: S, b: T), addition: (c: U, d: U), result: inout V)",
      "desc": "Returns the single-precision elementwise product of two elementwise vector-vector sums."
    },
    {
      "name": "static func multiply<R, S, T, U>(addition: (a: R, b: S), subtraction: (c: T, d: U)) -> [Double]",
      "desc": "Returns the double-precision elementwise product of an elementwise vector-vector sum and an elementwise vector-vector difference."
    },
    {
      "name": "static func multiply<R, S, T, U>(addition: (a: R, b: S), subtraction: (c: T, d: U)) -> [Float]",
      "desc": "Returns the single-precision elementwise product of an elementwise vector-vector sum and an elementwise vector-vector difference."
    },
    {
      "name": "static func multiply<R, S, T, U, V>(addition: (a: R, b: S), subtraction: (c: T, d: U), result: inout V)",
      "desc": "Calculates the double-precision elementwise product of an elementwise vector-vector sum and an elementwise vector-vector difference."
    },
    {
      "name": "static func multiply<R, S, T, U, V>(addition: (a: R, b: S), subtraction: (c: T, d: U), result: inout V)",
      "desc": "Calculates the single-precision elementwise product of an elementwise vector-vector sum and an elementwise vector-vector difference."
    },
    {
      "name": "static func multiply<T, U>(subtraction: (a: T, b: U), Double) -> [Double]",
      "desc": "Returns the double-precision elementwise product of the difference of two vectors and a scalar value."
    },
    {
      "name": "static func multiply<S, T, U>(subtraction: (a: S, b: T), U) -> [Double]",
      "desc": "Returns the double-precision elementwise product of the difference of two vectors and a vector."
    },
    {
      "name": "static func multiply<T, U>(subtraction: (a: T, b: U), Float) -> [Float]",
      "desc": "Returns the single-precision elementwise product of the difference of two vectors and a scalar value."
    },
    {
      "name": "static func multiply<S, T, U>(subtraction: (a: S, b: T), U) -> [Float]",
      "desc": "Returns the single-precision elementwise product of the difference of two vectors and a vector."
    },
    {
      "name": "static func multiply<T, U, V>(subtraction: (a: T, b: U), Double, result: inout V)",
      "desc": "Calculates the double-precision elementwise product of the difference of two vectors and a scalar value."
    },
    {
      "name": "static func multiply<T, U, V>(subtraction: (a: T, b: U), Float, result: inout V)",
      "desc": "Calculates the single-precision elementwise product of the difference of two vectors and a scalar value."
    },
    {
      "name": "static func multiply<S, T, U, V>(subtraction: (a: S, b: T), U, result: inout V)",
      "desc": "Calculates the double-precision elementwise product of the difference of two vectors and a vector."
    },
    {
      "name": "static func multiply<S, T, U, V>(subtraction: (a: S, b: T), U, result: inout V)",
      "desc": "Calculates the single-precision elementwise product of the difference of two vectors and a vector."
    },
    {
      "name": "static func multiply<R, S, T, U>(subtraction: (a: R, b: S), subtraction: (c: T, d: U)) -> [Double]",
      "desc": "Returns the double-precision elementwise product of two elementwise vector-vector differences."
    },
    {
      "name": "static func multiply<R, S, T, U>(subtraction: (a: R, b: S), subtraction: (c: T, d: U)) -> [Float]",
      "desc": "Returns the single-precision elementwise product of two elementwise vector-vector differences."
    },
    {
      "name": "static func multiply<R, S, T, U, V>(subtraction: (a: R, b: S), subtraction: (c: T, d: U), result: inout V)",
      "desc": "Calculates the double-precision elementwise product of two elementwise vector-vector differences."
    },
    {
      "name": "static func multiply<R, S, T, U, V>(subtraction: (a: R, b: S), subtraction: (c: T, d: U), result: inout V)",
      "desc": "Calculates the single-precision elementwise product of two elementwise vector-vector differences."
    },
    {
      "name": "static func negative<U>(U) -> [Double]",
      "desc": "Returns a double-precision array containing the negative values of the supplied vector."
    },
    {
      "name": "static func negative<U>(U) -> [Float]",
      "desc": "Returns a single-precision array containing the negative values of the supplied vector."
    },
    {
      "name": "static func negative<U, V>(U, result: inout V)",
      "desc": "Calculates the negative values of the supplied double-precision vector."
    },
    {
      "name": "static func negative<U, V>(U, result: inout V)",
      "desc": "Calculates the negative values of the supplied single-precision vector."
    },
    {
      "name": "static func negativeAbsolute<U>(U) -> [Double]",
      "desc": "Returns a double-precision array containing the negative absolute values of the supplied vector."
    },
    {
      "name": "static func negativeAbsolute<U>(U) -> [Float]",
      "desc": "Returns a single-precision array containing the negative absolute values of the supplied vector."
    },
    {
      "name": "static func negativeAbsolute<U, V>(U, result: inout V)",
      "desc": "Calculates the negative absolute values of the supplied double-precision vector."
    },
    {
      "name": "static func negativeAbsolute<U, V>(U, result: inout V)",
      "desc": "Calculates the negative absolute values of the supplied single-precision vector."
    },
    {
      "name": "static func phase<V>(DSPSplitComplex, result: inout V)",
      "desc": "Calculates the single-precision element-wise phase values, in radians, of the supplied complex vector."
    },
    {
      "name": "static func phase<V>(DSPDoubleSplitComplex, result: inout V)",
      "desc": "Calculates the double-precision element-wise phase values, in radians, of the supplied complex vector."
    },
    {
      "name": "static func polarToRectangular<U>(U) -> [Double]",
      "desc": "Returns double-precision polar coordinates converted to rectangular coordinates."
    },
    {
      "name": "static func polarToRectangular<U>(U) -> [Float]",
      "desc": "Returns single-precision polar coordinates converted to rectangular coordinates."
    },
    {
      "name": "static func powerToDecibels<U>(U, zeroReference: Double) -> [Double]",
      "desc": "Returns double-precision power values converted to decibel values."
    },
    {
      "name": "static func powerToDecibels<U>(U, zeroReference: Float) -> [Float]",
      "desc": "Returns single-precision power values converted to decibel values."
    },
    {
      "name": "static func ramp(in: ClosedRange<Double>, count: Int) -> [Double]",
      "desc": "Returns a double-precision vector that contains monotonically incrementing or decrementing values within a specified range."
    },
    {
      "name": "static func ramp(in: ClosedRange<Float>, count: Int) -> [Float]",
      "desc": "Returns a single-precision vector that contains monotonically incrementing or decrementing values within a specified range."
    },
    {
      "name": "static func ramp(withInitialValue: Double, increment: Double, count: Int) -> [Double]",
      "desc": "Returns a double-precision vector that contains monotonically incrementing or decrementing values."
    },
    {
      "name": "static func ramp(withInitialValue: Float, increment: Float, count: Int) -> [Float]",
      "desc": "Returns a single-precision vector that contains monotonically incrementing or decrementing values."
    },
    {
      "name": "static func ramp<U>(withInitialValue: inout Double, multiplyingBy: U, increment: Double) -> [Double]",
      "desc": "Returns a double-precision vector that contains monotonically incrementing or decrementing values, and multiplies that vector by a source vector."
    },
    {
      "name": "static func ramp<U>(withInitialValue: inout Float, multiplyingBy: U, increment: Float) -> [Float]",
      "desc": "Returns a single-precision vector that contains monotonically incrementing or decrementing values, and multiplies that vector by a source vector."
    },
    {
      "name": "static func rectangularToPolar<U>(U) -> [Double]",
      "desc": "Returns double-precision rectangular coordinates converted to polar coordinates."
    },
    {
      "name": "static func rectangularToPolar<U>(U) -> [Float]",
      "desc": "Returns single-precision rectangular coordinates converted to polar coordinates."
    },
    {
      "name": "static func reverse<V>(inout V)",
      "desc": "Reverses a vector of double-precision values in-place."
    },
    {
      "name": "static func reverse<V>(inout V)",
      "desc": "Reverses a vector of single-precision values in-place."
    },
    {
      "name": "static func rootMeanSquare<U>(U) -> Double",
      "desc": "Returns double-precision vector root mean square."
    },
    {
      "name": "static func rootMeanSquare<U>(U) -> Float",
      "desc": "Returns single-precision vector root mean square."
    },
    {
      "name": "static func signedSquare<U>(U) -> [Double]",
      "desc": "Returns a double-precision array containing the signed square of each element in the supplied vector."
    },
    {
      "name": "static func signedSquare<U>(U) -> [Float]",
      "desc": "Returns a single-precision array containing the signed square of each element in the supplied vector."
    },
    {
      "name": "static func signedSquare<U, V>(U, result: inout V)",
      "desc": "Calculates the signed square of each element in the supplied double-precision vector."
    },
    {
      "name": "static func signedSquare<U, V>(U, result: inout V)",
      "desc": "Calculates the signed square of each element in the supplied single-precision vector."
    },
    {
      "name": "static func slidingWindowSum<U>(U, usingWindowLength: Int) -> [Double]",
      "desc": "Returns the double-precision sliding window sum of a vector."
    },
    {
      "name": "static func slidingWindowSum<U>(U, usingWindowLength: Int) -> [Float]",
      "desc": "Returns the single-precision sliding window sum of a vector."
    },
    {
      "name": "static func slidingWindowSum<U, V>(U, usingWindowLength: Int, result: inout V)",
      "desc": "Calculates the double-precision sliding window sum of a vector."
    },
    {
      "name": "static func slidingWindowSum<U, V>(U, usingWindowLength: Int, result: inout V)",
      "desc": "Calculates the single-precision sliding window sum of a vector."
    },
    {
      "name": "static func sort<V>(inout V, sortOrder: vDSP.SortOrder)",
      "desc": "Sorts a vector of double-precision values in-place."
    },
    {
      "name": "static func sort<V>(inout V, sortOrder: vDSP.SortOrder)",
      "desc": "Sorts a vector of single-precision values in-place."
    },
    {
      "name": "static func square<U>(U) -> [Double]",
      "desc": "Returns a double-precision array containing the square of each element in the supplied vector."
    },
    {
      "name": "static func square<U>(U) -> [Float]",
      "desc": "Returns a single-precision array containing the square of each element in the supplied vector."
    },
    {
      "name": "static func square<U, V>(U, result: inout V)",
      "desc": "Calculates the square of each element in the supplied double-precision vector."
    },
    {
      "name": "static func square<U, V>(U, result: inout V)",
      "desc": "Calculates the square of each element in the supplied single-precision vector."
    },
    {
      "name": "static func squareMagnitudes<V>(DSPSplitComplex, result: inout V)",
      "desc": "Calculates the square magnitude of each element in the supplied single-precision complex vector."
    },
    {
      "name": "static func squareMagnitudes<V>(DSPDoubleSplitComplex, result: inout V)",
      "desc": "Calculates the square magnitude of each element in the supplied double-precision complex vector."
    },
    {
      "name": "static func stereoRamp<U>(withInitialValue: inout Double, multiplyingBy: U, U, increment: Double) -> (firstOutput: [Double], secondOutput: [Double])",
      "desc": "Returns two double-precision vectors that contain stereo monotonically incrementing or decrementing values multiplied by two source vectors."
    },
    {
      "name": "static func stereoRamp<U>(withInitialValue: inout Float, multiplyingBy: U, U, increment: Float) -> (firstOutput: [Float], secondOutput: [Float])",
      "desc": "Returns two single-precision vectors that contain stereo monotonically incrementing or decrementing values multiplied by two source vectors."
    },
    {
      "name": "static func subtract<T, U>(U, T) -> [Double]",
      "desc": "Returns the double-precision elementwise subtraction of a vector from a vector."
    },
    {
      "name": "static func subtract<T, U>(U, T) -> [Float]",
      "desc": "Returns the single-precision elementwise subtraction of a vector from a vector."
    },
    {
      "name": "static func subtract<T, U, V>(U, T, result: inout V)",
      "desc": "Calculates the double-precision elementwise subtraction of a vector from a vector."
    },
    {
      "name": "static func subtract<T, U, V>(U, T, result: inout V)",
      "desc": "Calculates the single-precision elementwise subtraction of a vector from a vector."
    },
    {
      "name": "static func subtract(DSPSplitComplex, from: DSPSplitComplex, count: Int, result: inout DSPSplitComplex)",
      "desc": "Calculates the single-precision elementwise subtraction of a complex vector from a complex vector."
    },
    {
      "name": "static func subtract(DSPDoubleSplitComplex, from: DSPDoubleSplitComplex, count: Int, result: inout DSPDoubleSplitComplex)",
      "desc": "Calculates the double-precision elementwise subtraction of a complex vector from a complex vector."
    },
    {
      "name": "static func subtract<T, U>(multiplication: (a: U, b: Double), T) -> [Double]",
      "desc": "Returns the double-precision elementwise subtraction of a vector from the elementwise product of a vector and a scalar value."
    },
    {
      "name": "static func subtract<S, T, U>(multiplication: (a: T, b: U), S) -> [Double]",
      "desc": "Returns the double-precision elementwise subtraction of a vector from the elementwise product of a vector and a vector."
    },
    {
      "name": "static func subtract<T, U>(multiplication: (a: U, b: Float), T) -> [Float]",
      "desc": "Returns the single-precision elementwise subtraction of a vector from the elementwise product of a vector and a scalar value."
    },
    {
      "name": "static func subtract<S, T, U>(multiplication: (a: T, b: U), S) -> [Float]",
      "desc": "Returns the single-precision elementwise subtraction of a vector from the elementwise product of a vector and a vector."
    },
    {
      "name": "static func subtract<T, U, V>(multiplication: (a: U, b: Double), T, result: inout V)",
      "desc": "Calculates the double-precision elementwise subtraction of a vector from the elementwise product of a vector and a scalar value."
    },
    {
      "name": "static func subtract<T, U, V>(multiplication: (a: U, b: Float), T, result: inout V)",
      "desc": "Calculates the single-precision elementwise subtraction of a vector from the elementwise product of a vector and a scalar value."
    },
    {
      "name": "static func subtract<S, T, U, V>(multiplication: (a: T, b: U), S, result: inout V)",
      "desc": "Calculates the double-precision elementwise subtraction of a vector from the elementwise product of a vector and a vector."
    },
    {
      "name": "static func subtract<S, T, U, V>(multiplication: (a: T, b: U), S, result: inout V)",
      "desc": "Calculates the single-precision elementwise subtraction of a vector from the elementwise product of a vector and a vector."
    },
    {
      "name": "static func subtract<R, S, T, U>(multiplication: (a: T, b: U), multiplication: (c: R, d: S)) -> [Double]",
      "desc": "Returns the double-precision elementwise subtraction of an elementwise vector-vector product from a second elementwise vector-vector product."
    },
    {
      "name": "static func subtract<R, S, T, U>(multiplication: (a: T, b: U), multiplication: (c: R, d: S)) -> [Float]",
      "desc": "Returns the single-precision elementwise subtraction of an elementwise vector-vector product from a second elementwise vector-vector product."
    },
    {
      "name": "static func subtract<R, S, T, U, V>(multiplication: (a: T, b: U), multiplication: (c: R, d: S), result: inout V)",
      "desc": "Calculates the double-precision elementwise subtraction of an elementwise vector-vector product from a second elementwise vector-vector product."
    },
    {
      "name": "static func subtract<R, S, T, U, V>(multiplication: (a: T, b: U), multiplication: (c: R, d: S), result: inout V)",
      "desc": "Calculates the single-precision elementwise subtraction of an elementwise vector-vector product from a second elementwise vector-vector product."
    },
    {
      "name": "static func sum<U>(U) -> Double",
      "desc": "Returns the double-precision vector sum."
    },
    {
      "name": "static func sum<U>(U) -> Float",
      "desc": "Returns the single-precision vector sum."
    },
    {
      "name": "static func sumAndSumOfSquares<U>(U) -> (elementsSum: Double, squaresSum: Double)",
      "desc": "Returns the double-precision vector sum and sum of squares."
    },
    {
      "name": "static func sumAndSumOfSquares<U>(U) -> (elementsSum: Float, squaresSum: Float)",
      "desc": "Returns the single-precision vector sum and sum of squares."
    },
    {
      "name": "static func sumOfMagnitudes<U>(U) -> Double",
      "desc": "Returns the double-precision vector sum of magnitudes."
    },
    {
      "name": "static func sumOfMagnitudes<U>(U) -> Float",
      "desc": "Returns the single-precision vector sum of magnitudes."
    },
    {
      "name": "static func sumOfSquares<U>(U) -> Double",
      "desc": "Returns the double-precision vector sum of squares."
    },
    {
      "name": "static func sumOfSquares<U>(U) -> Float",
      "desc": "Returns the single-precision vector sum of squares."
    },
    {
      "name": "static func threshold<U>(U, to: Double, with: vDSP.ThresholdRule<Double>) -> [Double]",
      "desc": "Returns the elements of the supplied double-precision vector after applying a specified thresholding rule."
    },
    {
      "name": "static func threshold<U>(U, to: Float, with: vDSP.ThresholdRule<Float>) -> [Float]",
      "desc": "Returns the elements of the supplied single-precision vector after applying a specified thresholding rule."
    },
    {
      "name": "static func threshold<U, V>(U, to: Double, with: vDSP.ThresholdRule<Double>, result: inout V)",
      "desc": "Calculates the elements of the supplied double-precision vector after applying a specified thresholding rule."
    },
    {
      "name": "static func threshold<U, V>(U, to: Float, with: vDSP.ThresholdRule<Float>, result: inout V)",
      "desc": "Calculates the elements of the supplied single-precision vector after applying a specified thresholding rule."
    },
    {
      "name": "static func trunc<U>(U) -> [Double]",
      "desc": "Returns a double-precision array containing each element in the supplied vector truncated to a fraction."
    },
    {
      "name": "static func trunc<U>(U) -> [Float]",
      "desc": "Returns a single-precision array containing each element in the supplied vector truncated to a fraction."
    },
    {
      "name": "static func trunc<U, V>(U, result: inout V)",
      "desc": "Calculates each element in the supplied double-precision vector truncated to a fraction."
    },
    {
      "name": "static func trunc<U, V>(U, result: inout V)",
      "desc": "Calculates each element in the supplied single-precision vector truncated to a fraction."
    },
    {
      "name": "static func twoPoleTwoZeroFilter<U>(U, coefficients: (Double, Double, Double, Double, Double)) -> [Double]",
      "desc": "Returns the result of double-precision, two-pole, two-zero recursive filtering."
    },
    {
      "name": "static func twoPoleTwoZeroFilter<U>(U, coefficients: (Float, Float, Float, Float, Float)) -> [Float]",
      "desc": "Returns the result of single-precision, two-pole, two-zero recursive filtering."
    },
    {
      "name": "static func twoPoleTwoZeroFilter<U, V>(U, coefficients: (Double, Double, Double, Double, Double), result: inout V)",
      "desc": "Performs double-precision, two-pole, two-zero recursive filtering."
    },
    {
      "name": "static func twoPoleTwoZeroFilter<U, V>(U, coefficients: (Float, Float, Float, Float, Float), result: inout V)",
      "desc": "Performs single-precision, two-pole, two-zero recursive filtering."
    },
    {
      "name": "static func window<T>(ofType: T.Type, usingSequence: vDSP.WindowSequence, count: Int, isHalfWindow: Bool) -> [T]",
      "desc": "Returns an array that contains the specified window."
    },
    {
      "name": "static func compress<T, U>(T, gatingVector: U, nonZeroGatingCount: Int?) -> [Double]",
      "desc": "Returns a compressed copy of the specified double-precision vector using the nonzero values in a gating vector."
    },
    {
      "name": "static func compress<T, U>(T, gatingVector: U, nonZeroGatingCount: Int?) -> [Float]",
      "desc": "Returns a compressed copy of the specified single-precision vector using the nonzero values in a gating vector."
    },
    {
      "name": "static func compress<T, U, V>(T, gatingVector: U, result: inout V)",
      "desc": "Compresses the specified double-precision vector using the nonzero values in a gating vector."
    },
    {
      "name": "static func compress<T, U, V>(T, gatingVector: U, result: inout V)",
      "desc": "Compresses the specified single-precision vector using the nonzero values in a gating vector."
    },
    {
      "name": "static func dot<T, U>(T, U) -> Double"
    },
    {
      "name": "static func dot<T, U>(T, U) -> Float"
    },
    {
      "name": "static func gather<T, U>(T, indices: U) -> [Double]",
      "desc": "Returns a gathered copy of the specified double-precision vector using a vector that defines the indices to keep."
    },
    {
      "name": "static func gather<T, U>(T, indices: U) -> [Float]",
      "desc": "Returns a gathered copy of the specified single-precision vector using a vector that defines the indices to keep."
    },
    {
      "name": "static func gather<T, U, V>(T, indices: U, result: inout V)",
      "desc": "Gathers the specified double-precision vector using a vector that defines the indices to keep."
    },
    {
      "name": "static func gather<T, U, V>(T, indices: U, result: inout V)",
      "desc": "Gathers the specified single-precision vector using a vector that defines the indices to keep."
    },
    {
      "name": "static func linearInterpolate<T, U>(lookupTable: T, withOffsets: U, scale: Double, baseOffset: Double) -> [Double]",
      "desc": "Returns the double-precision linearly interpolated values of a lookup table from the specified offsets."
    },
    {
      "name": "static func linearInterpolate<T, U>(lookupTable: T, withOffsets: U, scale: Float, baseOffset: Float) -> [Float]",
      "desc": "Returns the single-precision linearly interpolated values of a lookup table from the specified offsets."
    },
    {
      "name": "static func linearInterpolate<T, U, V>(lookupTable: T, withOffsets: U, scale: Double, baseOffset: Double, result: inout V)",
      "desc": "Computes the double-precision linearly interpolated values of a lookup table from the specified offsets."
    },
    {
      "name": "static func linearInterpolate<T, U, V>(lookupTable: T, withOffsets: U, scale: Float, baseOffset: Float, result: inout V)",
      "desc": "Computes the single-precision linearly interpolated values of a lookup table from the specified offsets."
    },
    {
      "name": "static func linearInterpolate<T, U>(values: T, atIndices: U) -> [Double]",
      "desc": "Returns the double-precision linearly interpolated values of a vector at the specified indices."
    },
    {
      "name": "static func linearInterpolate<T, U>(values: T, atIndices: U) -> [Float]",
      "desc": "Returns the single-precision linearly interpolated values of a vector at the specified indices."
    },
    {
      "name": "static func linearInterpolate<T, U, V>(values: T, atIndices: U, result: inout V)",
      "desc": "Computes the double-precision linearly interpolated values of a vector at the specified indices."
    },
    {
      "name": "static func linearInterpolate<T, U, V>(values: T, atIndices: U, result: inout V)",
      "desc": "Computes the single-precision linearly interpolated values of a vector at the specified indices."
    },
    {
      "name": "static func swapElements<T, U>(inout T, inout U)",
      "desc": "Swaps the elements of two double-precision vectors."
    },
    {
      "name": "static func swapElements<T, U>(inout T, inout U)",
      "desc": "Swaps the elements of two single-precision vectors."
    },
    {
      "name": "static func taperedMerge<T, U>(T, U) -> [Double]",
      "desc": "Returns the result of a tapered merge between two double-precision vectors."
    },
    {
      "name": "static func taperedMerge<T, U>(T, U) -> [Float]",
      "desc": "Returns the result of a tapered merge between two single-precision vectors."
    },
    {
      "name": "static func taperedMerge<T, U, V>(T, U, result: inout V)",
      "desc": "Computes the result of a tapered merge between two double-precision vectors."
    },
    {
      "name": "static func taperedMerge<T, U, V>(T, U, result: inout V)",
      "desc": "Computes the result of a tapered merge between two single-precision vectors."
    },
    {
      "name": "class vDSP.DCT",
      "desc": "A single-precision discrete cosine transform."
    },
    {
      "name": "class vDSP.FFT",
      "desc": "A 1D single- and double-precision fast Fourier transform."
    },
    {
      "name": "class vDSP.FFT2D",
      "desc": "A 2D single- and double-precision fast Fourier transform."
    },
    {
      "name": "class vDSP.DiscreteFourierTransform",
      "desc": "An object that provides forward and inverse discrete Fourier transforms on single- or double-precision collections of interleaved or split-complex data."
    },
    {
      "name": "struct vDSP.Biquad",
      "desc": "A structure that applies biquadratic filters to single- and double-precision signals."
    },
    {
      "name": "struct vDSP.VectorizableDouble",
      "desc": "A structure that represents a double-precision real value for biquadratic filtering and discrete Fourier transforms."
    },
    {
      "name": "struct vDSP.VectorizableFloat",
      "desc": "A structure that represents a single-precision real value for biquadratic filtering and discrete Fourier transforms."
    },
    {
      "name": "struct vDSP.DFTDoublePrecisionInterleavedFunctions"
    },
    {
      "name": "struct vDSP.DFTDoublePrecisionSplitComplexFunctions"
    },
    {
      "name": "struct vDSP.DFTSinglePrecisionInterleavedFunctions"
    },
    {
      "name": "struct vDSP.DFTSinglePrecisionSplitComplexFunctions"
    },
    {
      "name": "enum vDSP.DCTTransformType",
      "desc": "An enumeration that describes the discrete cosine transform types."
    },
    {
      "name": "enum vDSP.DFTTransformType",
      "desc": "Discrete Fourier transform types."
    },
    {
      "name": "enum vDSP.FourierTransformDirection",
      "desc": "Fast Fourier transform directions."
    },
    {
      "name": "enum vDSP.IntegrationRule",
      "desc": "Integration rules."
    },
    {
      "name": "enum vDSP.Radix",
      "desc": "Fast Fourier transform radices."
    },
    {
      "name": "enum vDSP.RoundingMode",
      "desc": "Floating point to integer conversion rounding modes."
    },
    {
      "name": "enum vDSP.SortOrder",
      "desc": "Vector sorting orders."
    },
    {
      "name": "enum vDSP.ThresholdRule",
      "desc": "Vector Threshold Rules."
    },
    {
      "name": "enum vDSP.WindowSequence",
      "desc": "Constants specifying window sequence functions."
    },
    {
      "name": "enum vDSP.DFTError"
    }
  ],
  "declaration": "enum vDSP"
}