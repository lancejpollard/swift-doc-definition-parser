{
  "path": "/documentation/accelerate/vimage/options",
  "type": "Structure",
  "name": "vImage.Options",
  "desc": "Set flags on vImage operations to specify processing options.",
  "items": [
    {
      "name": "static let backgroundColorFill: vImage.Options",
      "desc": "A flag that uses the background color for missing pixels."
    },
    {
      "name": "static let copyInPlace: vImage.Options",
      "desc": "A flag that copies the value of the edge pixel in the source to the destination."
    },
    {
      "name": "static let doNotClamp: vImage.Options",
      "desc": "A flag that disables clamping in some conversions to floating-point formats."
    },
    {
      "name": "static let doNotTile: vImage.Options",
      "desc": "A flag that disables vImage internal tiling routines."
    },
    {
      "name": "static let getTempBufferSize: vImage.Options",
      "desc": "A flag that returns the minimum temporary buffer size for the operation, given the parameters provided."
    },
    {
      "name": "static let hdrContent: vImage.Options",
      "desc": "A flag that uses HDR-aware methods."
    },
    {
      "name": "static let highQualityResampling: vImage.Options",
      "desc": "A flag that uses a higher quality, slower resampling filter for geometry operations."
    },
    {
      "name": "static let imageExtend: vImage.Options",
      "desc": "A flag that extends the edges of the image infinitely."
    },
    {
      "name": "static let leaveAlphaUnchanged: vImage.Options",
      "desc": "A flag that restricts the operation to red, green, and blue channels only."
    },
    {
      "name": "static let noAllocate: vImage.Options",
      "desc": "A flag that prevents vImage from allocating additional storage."
    },
    {
      "name": "static let noFlags: vImage.Options",
      "desc": "A flag that sets the behavior to the default."
    },
    {
      "name": "static let printDiagnosticsToConsole: vImage.Options",
      "desc": "A flag that prints a debug message if the operation fails."
    },
    {
      "name": "static let truncateKernel: vImage.Options",
      "desc": "A flag that uses only the part of the kernel that overlaps the image."
    },
    {
      "name": "typealias vImage.Options.ArrayLiteralElement"
    },
    {
      "name": "typealias vImage.Options.Element"
    },
    {
      "name": "typealias vImage.Options.RawValue"
    },
    {
      "name": "init()",
      "desc": "Creates an empty option set."
    },
    {
      "name": "init<S>(S)",
      "desc": "Creates a new set from a finite sequence of items."
    },
    {
      "name": "init(arrayLiteral: vImage.Options...)",
      "desc": "Creates a set containing the elements of the given array literal."
    },
    {
      "name": "init(rawValue: vImage_Flags)"
    },
    {
      "name": "var flags: vImage_Flags"
    },
    {
      "name": "var isEmpty: Bool",
      "desc": "A Boolean value that indicates whether the set has no elements."
    },
    {
      "name": "let rawValue: vImage_Flags"
    },
    {
      "name": "func contains(vImage.Options) -> Bool",
      "desc": "Returns a Boolean value that indicates whether a given element is a member of the option set."
    },
    {
      "name": "func formIntersection(vImage.Options)",
      "desc": "Removes all elements of this option set that are not also present in the given set."
    },
    {
      "name": "func formSymmetricDifference(vImage.Options)",
      "desc": "Replaces this set with a new set containing all elements contained in either this set or the given set, but not in both."
    },
    {
      "name": "func formUnion(vImage.Options)",
      "desc": "Inserts the elements of another set into this option set."
    },
    {
      "name": "func insert(vImage.Options) -> (inserted: Bool, memberAfterInsert: vImage.Options)",
      "desc": "Adds the given element to the option set if it is not already a member."
    },
    {
      "name": "func intersection(vImage.Options) -> vImage.Options",
      "desc": "Returns a new option set with only the elements contained in both this set and the given set."
    },
    {
      "name": "func isDisjoint(with: vImage.Options) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the set has no members in common with the given set."
    },
    {
      "name": "func isStrictSubset(of: vImage.Options) -> Bool",
      "desc": "Returns a Boolean value that indicates whether this set is a strict subset of the given set."
    },
    {
      "name": "func isStrictSuperset(of: vImage.Options) -> Bool",
      "desc": "Returns a Boolean value that indicates whether this set is a strict superset of the given set."
    },
    {
      "name": "func isSubset(of: vImage.Options) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the set is a subset of another set."
    },
    {
      "name": "func isSuperset(of: vImage.Options) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the set is a superset of the given set."
    },
    {
      "name": "func remove(vImage.Options) -> vImage.Options?",
      "desc": "Removes the given element and all elements subsumed by it."
    },
    {
      "name": "func subtract(vImage.Options)",
      "desc": "Removes the elements of the given set from this set."
    },
    {
      "name": "func subtracting(vImage.Options) -> vImage.Options",
      "desc": "Returns a new set containing the elements of this set that do not occur in the given set."
    },
    {
      "name": "func symmetricDifference(vImage.Options) -> vImage.Options",
      "desc": "Returns a new option set with the elements contained in this set or in the given set, but not in both."
    },
    {
      "name": "func union(vImage.Options) -> vImage.Options",
      "desc": "Returns a new option set of the elements contained in this set, in the given set, or in both."
    },
    {
      "name": "func update(with: vImage.Options) -> vImage.Options?",
      "desc": "Inserts the given element into the set."
    },
    {
      "name": "static func != (vImage.Options, vImage.Options) -> Bool"
    }
  ],
  "declaration": "struct Options",
  "conformsTo": [
    "OptionSet"
  ]
}