{
  "path": "/documentation/accelerate/simd_double2x2",
  "type": "Structure",
  "name": "simd_double2x2",
  "desc": "A matrix of two columns and two rows that contains double-precision values.",
  "items": [
    {
      "name": "init()",
      "desc": "Creates a new matrix."
    },
    {
      "name": "init(Double)",
      "desc": "Creates a new matrix with the specified scalar value on the main diagonal."
    },
    {
      "name": "init(diagonal: SIMD2<Double>)",
      "desc": "Creates a new matrix with the specified vector on the main diagonal."
    },
    {
      "name": "init([SIMD2<Double>])",
      "desc": "Creates a new matrix with the specified columns."
    },
    {
      "name": "init(SIMD2<Double>, SIMD2<Double>)",
      "desc": "Creates a new matrix with the specified vectors as columns."
    },
    {
      "name": "init(columns: (simd_double2, simd_double2))",
      "desc": "Creates a new matrix with the specified columns."
    },
    {
      "name": "init(rows: [SIMD2<Double>])",
      "desc": "Creates a new matrix with the specified rows."
    },
    {
      "name": "let matrix_identity_double2x2: simd_double2x2",
      "desc": "A 2 x 2 identity matrix."
    },
    {
      "name": "var determinant: Double",
      "desc": "The determinant of the matrix."
    },
    {
      "name": "var inverse: simd_double2x2",
      "desc": "The inverse of the matrix."
    },
    {
      "name": "var transpose: double2x2",
      "desc": "The transpose of the matrix."
    },
    {
      "name": "var columns: (simd_double2, simd_double2)",
      "desc": "The columns of the matrix."
    },
    {
      "name": "var debugDescription: String",
      "desc": "A representation of the matrix that is suitable for debugging."
    },
    {
      "name": "func simd_matrix(simd_double2, simd_double2) -> simd_double2x2",
      "desc": "Returns a new matrix with the specified columns."
    },
    {
      "name": "func simd_matrix_from_rows(simd_double2, simd_double2) -> simd_double2x2",
      "desc": "Returns a new matrix with the specified rows."
    },
    {
      "name": "func matrix_from_rows(SIMD2<Double>, SIMD2<Double>) -> simd_double2x2",
      "desc": "Returns a new matrix with the specified vector on the main diagonal."
    },
    {
      "name": "func simd_diagonal_matrix(simd_double2) -> simd_double2x2",
      "desc": "Returns a new matrix with the specified vector on the main diagonal."
    },
    {
      "name": "func simd_add(simd_double2x2, simd_double2x2) -> simd_double2x2",
      "desc": "Returns the sum of two matrices."
    },
    {
      "name": "func simd_sub(simd_double2x2, simd_double2x2) -> simd_double2x2",
      "desc": "Returns the difference of two matrices."
    },
    {
      "name": "func matrix_scale(Double, simd_double2x2) -> simd_double2x2",
      "desc": "Returns the product of a scalar value and a matrix."
    },
    {
      "name": "func simd_mul(Double, simd_double2x2) -> simd_double2x2",
      "desc": "Returns the product of a scalar value and a 2 x 2 matrix."
    },
    {
      "name": "func simd_mul(simd_double2, simd_double2x2) -> simd_double2",
      "desc": "Returns the product of a two-element vector and a 2 x 2 matrix."
    },
    {
      "name": "func matrix_multiply(simd_double2, simd_double2x2) -> simd_double2",
      "desc": "Returns the product of a two-element vector and a 2 x 2 matrix."
    },
    {
      "name": "func simd_mul(simd_double2x2, simd_double2) -> simd_double2",
      "desc": "Returns the product of a 2 x 2 matrix and a two-element vector."
    },
    {
      "name": "func matrix_multiply(simd_double2x2, simd_double2) -> simd_double2",
      "desc": "Returns the product of a 2 x 2 matrix and a two-element vector."
    },
    {
      "name": "func simd_mul(simd_double2x2, simd_double2x2) -> simd_double2x2",
      "desc": "Returns the product of a 2 x 2 matrix and a 2 x 2 matrix."
    },
    {
      "name": "func matrix_multiply(simd_double2x2, simd_double2x2) -> simd_double2x2",
      "desc": "Returns the product of a 2 x 2 matrix and a 2 x 2 matrix."
    },
    {
      "name": "func simd_mul(simd_double3x2, simd_double2x3) -> simd_double2x2",
      "desc": "Returns the product of a 3 x 2 matrix and a 2 x 3 matrix."
    },
    {
      "name": "func matrix_multiply(simd_double3x2, simd_double2x3) -> simd_double2x2",
      "desc": "Returns the product of a 3 x 2 matrix and a 2 x 3 matrix."
    },
    {
      "name": "func simd_mul(simd_double4x2, simd_double2x4) -> simd_double2x2",
      "desc": "Returns the product of a 4 x 2 matrix and a 2 x 4 matrix."
    },
    {
      "name": "func matrix_multiply(simd_double4x2, simd_double2x4) -> simd_double2x2",
      "desc": "Returns the product of a 4 x 2 matrix and a 2 x 4 matrix."
    },
    {
      "name": "func simd_equal(simd_double2x2, simd_double2x2) -> simd_bool",
      "desc": "Returns true if every element in a matrix is exactly equal to the corresponding element in a second matrix."
    },
    {
      "name": "func simd_almost_equal_elements(simd_double2x2, simd_double2x2, Double) -> simd_bool",
      "desc": "Returns true if every element in a matrix is within a specified tolerance to the corresponding element in a second matrix."
    },
    {
      "name": "func simd_almost_equal_elements_relative(simd_double2x2, simd_double2x2, Double) -> simd_bool",
      "desc": "Returns true if every element in a matrix is within a specified double-precision relative tolerance to the corresponding element in a second matrix."
    },
    {
      "name": "func simd_determinant(simd_double2x2) -> Double",
      "desc": "Returns the determinant of the specified matrix."
    },
    {
      "name": "func simd_inverse(simd_double2x2) -> simd_double2x2",
      "desc": "Returns the inverse of the specified matrix."
    },
    {
      "name": "func simd_linear_combination(Double, simd_double2x2, Double, simd_double2x2) -> simd_double2x2",
      "desc": "Returns the linear combination of two scalar values and two matrices."
    },
    {
      "name": "func simd_transpose(simd_double2x2) -> simd_double2x2"
    },
    {
      "name": "subscript(Int) -> SIMD2<Double>",
      "desc": "Accesses the column at the specified position."
    },
    {
      "name": "subscript(Int, Int) -> Double",
      "desc": "Accesses the element at the specified position."
    },
    {
      "name": "typealias double2x2",
      "desc": "A type alias for a double-precision 2 x 2 matrix."
    },
    {
      "name": "typealias matrix_double2x2",
      "desc": "A type alias for a double-precision 2 x 2 matrix."
    },
    {
      "name": "func matrix_invert(simd_double2x2) -> simd_double2x2",
      "desc": "Returns the inverse of the specified matrix."
    },
    {
      "name": "static func * (SIMD2<Double>, simd_double2x2) -> SIMD2<Double>"
    },
    {
      "name": "static func * (simd_double2x2, double4x2) -> double4x2"
    },
    {
      "name": "static func * (Double, simd_double2x2) -> simd_double2x2"
    },
    {
      "name": "static func * (simd_double2x2, double2x2) -> double2x2"
    },
    {
      "name": "static func * (simd_double2x2, double3x2) -> double3x2"
    },
    {
      "name": "static func * (simd_double2x2, Double) -> simd_double2x2"
    },
    {
      "name": "static func * (simd_double2x2, SIMD2<Double>) -> SIMD2<Double>"
    },
    {
      "name": "static func *= (inout simd_double2x2, Double)"
    },
    {
      "name": "static func *= (inout simd_double2x2, double2x2)"
    },
    {
      "name": "static func + (simd_double2x2, simd_double2x2) -> simd_double2x2"
    },
    {
      "name": "static func += (inout simd_double2x2, simd_double2x2)"
    },
    {
      "name": "static func - (simd_double2x2) -> simd_double2x2"
    },
    {
      "name": "static func - (simd_double2x2, simd_double2x2) -> simd_double2x2"
    },
    {
      "name": "static func -= (inout simd_double2x2, simd_double2x2)"
    },
    {
      "name": "static func == (simd_double2x2, simd_double2x2) -> Bool"
    }
  ],
  "declaration": "struct simd_double2x2",
  "conformsTo": [
    "CustomDebugStringConvertible",
    "Equatable"
  ]
}