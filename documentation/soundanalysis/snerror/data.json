{
  "path": "/documentation/soundanalysis/snerror",
  "type": "Structure",
  "name": "SNError",
  "desc": "An error from the Sound Analysis framework.",
  "items": [
    {
      "name": "static var invalidModel: SNError.Code",
      "desc": "An error that indicates the sound classifier’s underlying Core ML model is an invalid model type."
    },
    {
      "name": "static var invalidFormat: SNError.Code",
      "desc": "An error that indicates the audio data’s format isn’t valid."
    },
    {
      "name": "static var invalidFile: SNError.Code",
      "desc": "An error that indicates an audio file is invalid."
    },
    {
      "name": "static var operationFailed: SNError.Code",
      "desc": "An error that occurs when the framework fails to analyze audio."
    },
    {
      "name": "static var unknownError: SNError.Code",
      "desc": "An error that represents a failure that no other error handles."
    },
    {
      "name": "enum SNError.Code",
      "desc": "The enumerated error codes that the Sound Analysis framework produces."
    },
    {
      "name": "var errorCode: Int",
      "desc": "An integer value that represents the error code."
    },
    {
      "name": "var errorUserInfo: [String : Any]",
      "desc": "A dictionary that contains information about the error."
    },
    {
      "name": "var localizedDescription: String",
      "desc": "A localized message that describes the reason for the failure."
    },
    {
      "name": "let SNErrorDomain: String",
      "desc": "A string that identifies the Sound Analysis error domain."
    },
    {
      "name": "static var errorDomain: String",
      "desc": "A statically accessible string that identifies the Sound Analysis error domain."
    },
    {
      "name": "static func == (SNError, SNError) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two errors are equal."
    },
    {
      "name": "static func != (SNError, SNError) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two errors are unequal."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value of the error."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of the error by feeding them into a hasher."
    },
    {
      "name": "init(Code, userInfo: [String : Any])",
      "desc": "Creates an error code with a user information dictionary."
    },
    {
      "name": "var code: Code",
      "desc": "An integer value that represents the error."
    },
    {
      "name": "var userInfo: [String : Any]",
      "desc": "A dictionary that stores custom information."
    }
  ],
  "declaration": "struct SNError"
}