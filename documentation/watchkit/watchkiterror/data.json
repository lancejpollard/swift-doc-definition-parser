{
  "path": "/documentation/watchkit/watchkiterror",
  "type": "Structure",
  "name": "WatchKitError",
  "desc": "An error reported by WatchKit.",
  "items": [
    {
      "name": "init(Code, userInfo: [String : Any])",
      "desc": "Creates a new WatchKit error using the provided code and user info dictionary."
    },
    {
      "name": "static var downloadFailed: WatchKitError.Code",
      "desc": "A download error."
    },
    {
      "name": "static var invalidArgument: WatchKitError.Code",
      "desc": "An invalid argument error."
    },
    {
      "name": "static var mediaPlayerFailed: WatchKitError.Code",
      "desc": "A media player error."
    },
    {
      "name": "static var recordingFailed: WatchKitError.Code",
      "desc": "An audio recording error."
    },
    {
      "name": "static var unknown: WatchKitError.Code",
      "desc": "An unknown error."
    },
    {
      "name": "static var applicationDelegateWatchKitRequestReplyNotCalled: WatchKitError.Code",
      "desc": "An unresponsive delegate error."
    },
    {
      "name": "let WatchKitErrorDomain: String",
      "desc": "The domain for WatchKit errors."
    },
    {
      "name": "static var errorDomain: String",
      "desc": "The domain for WatchKit errors."
    },
    {
      "name": "var errorCode: Int",
      "desc": "The error code."
    },
    {
      "name": "var code: Code",
      "desc": "The error code."
    },
    {
      "name": "enum WatchKitError.Code",
      "desc": "Error codes reported by WatchKit."
    },
    {
      "name": "var errorUserInfo: [String : Any]",
      "desc": "The user info dictionary."
    },
    {
      "name": "var userInfo: [String : Any]",
      "desc": "The user info dictionary."
    },
    {
      "name": "var localizedDescription: String",
      "desc": "A localized description of the error."
    },
    {
      "name": "static func == (WatchKitError, WatchKitError) -> Bool",
      "desc": "Returns a Boolean value indicating whether two errors are the same."
    },
    {
      "name": "static func != (WatchKitError, WatchKitError) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values arenâ€™t equal."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of this value by feeding them into the given hasher."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value."
    }
  ],
  "declaration": "struct WatchKitError"
}