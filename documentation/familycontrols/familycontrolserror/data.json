{
  "path": "/documentation/familycontrols/familycontrolserror",
  "type": "Enumeration",
  "name": "FamilyControlsError",
  "desc": "Errors the Family Controls framework reports.",
  "items": [
    {
      "name": "case invalidAccountType",
      "desc": "The device isn’t signed into a valid iCloud account."
    },
    {
      "name": "case authorizationConflict",
      "desc": "Another authorized app already provides parental controls."
    },
    {
      "name": "case authorizationCanceled",
      "desc": "The parent or guardian canceled a request for authorization."
    },
    {
      "name": "case invalidArgument",
      "desc": "The method’s arguments are invalid."
    },
    {
      "name": "case unavailable",
      "desc": "The system failed to set up the Family Control framework."
    },
    {
      "name": "case restricted",
      "desc": "A restriction prevents your app from using Family Controls on this device."
    },
    {
      "name": "var errorDescription: String?",
      "desc": "A nonlocalized description of the error, suitable for debugging."
    },
    {
      "name": "var errorDescription: String?",
      "desc": "A localized message describing what error occurred."
    },
    {
      "name": "var localizedDescription: String",
      "desc": "Retrieve the localized description for this error."
    },
    {
      "name": "var failureReason: String?",
      "desc": "A localized message describing the reason for the failure."
    },
    {
      "name": "var recoverySuggestion: String?",
      "desc": "A localized message describing how one might recover from the failure."
    },
    {
      "name": "var helpAnchor: String?",
      "desc": "A localized message providing “help” text if the user requests help."
    },
    {
      "name": "static func == (FamilyControlsError, FamilyControlsError) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are equal."
    },
    {
      "name": "static func != (Self, Self) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two error values aren’t equal."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of this value by feeding them into the given hasher."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value."
    },
    {
      "name": "case networkError",
      "desc": "The device must be connected to the network in order to enroll with parental controls."
    }
  ],
  "declaration": "enum FamilyControlsError",
  "conformsTo": [
    "Equatable",
    "Error",
    "Hashable",
    "LocalizedError",
    "Sendable"
  ]
}