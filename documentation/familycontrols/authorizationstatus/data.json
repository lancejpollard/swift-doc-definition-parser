{
  "path": "/documentation/familycontrols/authorizationstatus",
  "type": "Enumeration",
  "name": "AuthorizationStatus",
  "desc": "The status of your app’s authorization to provide parental controls.",
  "items": [
    {
      "name": "case notDetermined",
      "desc": "The app hasn’t requested authorization."
    },
    {
      "name": "case denied",
      "desc": "The parent or guardian denied the request for authorization."
    },
    {
      "name": "case approved",
      "desc": "The parent or guardian approved the request for authorization."
    },
    {
      "name": "var rawValue: Int",
      "desc": "The corresponding value of the raw type."
    },
    {
      "name": "typealias RawValue",
      "desc": "The raw type that can be used to represent all values of the conforming type."
    },
    {
      "name": "var description: String",
      "desc": "A nonlocalized description of the authorization value, suitable for debugging."
    },
    {
      "name": "static func != (Self, Self) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two authorization statuses aren’t equal."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hashed value of the authorization status."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of the authorization status by feeding them into the given hash function."
    },
    {
      "name": "func encode(to: Encoder) throws",
      "desc": "Encodes this value into the given encoder, when the type’s RawValue is Int."
    },
    {
      "name": "init(from: Decoder) throws",
      "desc": "Creates a new instance by decoding from the given decoder, when the type’s RawValue is Int."
    },
    {
      "name": "init?(rawValue: Int)",
      "desc": "Creates a new instance with the specified raw value."
    }
  ],
  "declaration": "enum AuthorizationStatus",
  "conformsTo": [
    "CustomStringConvertible",
    "Decodable",
    "Encodable",
    "Equatable",
    "Hashable",
    "RawRepresentable"
  ]
}