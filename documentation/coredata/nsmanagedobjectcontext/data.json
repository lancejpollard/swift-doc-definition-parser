{
  "path": "/documentation/coredata/nsmanagedobjectcontext",
  "type": "Class",
  "name": "NSManagedObjectContext",
  "desc": "An object space to manipulate and track changes to managed objects.",
  "items": [
    {
      "name": "init(NSManagedObjectContext.ConcurrencyType)",
      "desc": "Creates a context that uses the specified concurrency type."
    },
    {
      "name": "struct NSManagedObjectContext.ConcurrencyType",
      "desc": "The concurrency types to use with a managed object context."
    },
    {
      "name": "enum NSManagedObjectContextConcurrencyType",
      "desc": "The concurrency types you can use with a managed object context."
    },
    {
      "name": "var persistentStoreCoordinator: NSPersistentStoreCoordinator?",
      "desc": "The persistent store coordinator of the context."
    },
    {
      "name": "var parent: NSManagedObjectContext?",
      "desc": "The parent of the context."
    },
    {
      "name": "var name: String?",
      "desc": "The developer-provided name of the context."
    },
    {
      "name": "var userInfo: NSMutableDictionary",
      "desc": "The user information for the context."
    },
    {
      "name": "func fetch(NSFetchRequest<NSFetchRequestResult>) -> [Any]",
      "desc": "Returns an array of objects that meet the criteria of the specified fetch request."
    },
    {
      "name": "func fetch<T>(NSFetchRequest<T>) -> [T]",
      "desc": "Returns an array of items of the specified type that meet the fetch request’s critieria."
    },
    {
      "name": "func count(for: NSFetchRequest<NSFetchRequestResult>) -> Int",
      "desc": "Returns the number of objects the specified request fetches when it executes."
    },
    {
      "name": "func registeredObject(for: NSManagedObjectID) -> NSManagedObject?",
      "desc": "Returns an object that exists in the context."
    },
    {
      "name": "func object(with: NSManagedObjectID) -> NSManagedObject",
      "desc": "Returns either an existing object from the context or a fault that represents that object."
    },
    {
      "name": "func existingObject(with: NSManagedObjectID) -> NSManagedObject",
      "desc": "Returns an existing object from either the context or the persistent store."
    },
    {
      "name": "var registeredObjects: Set<NSManagedObject>",
      "desc": "The set of registered managed objects in the context."
    },
    {
      "name": "func count<T>(for: NSFetchRequest<T>) -> Int",
      "desc": "Returns a count of the objects the specified request fetches when it executes."
    },
    {
      "name": "func execute(NSPersistentStoreRequest) -> NSPersistentStoreResult",
      "desc": "Passes a request to the persistent store without affecting the contents of the managed object context, and returns a persistent store result."
    },
    {
      "name": "func refreshAllObjects()",
      "desc": "Refreshes all of the registered managed objects in the context."
    },
    {
      "name": "var retainsRegisteredObjects: Bool",
      "desc": "A Boolean value that indicates whether the context keeps strong references to all registered managed objects."
    },
    {
      "name": "var shouldDeleteInaccessibleFaults: Bool",
      "desc": "A Boolean value that determines whether the context turns inaccessible faults into deleted objects."
    },
    {
      "name": "var insertedObjects: Set<NSManagedObject>",
      "desc": "The set of objects that have been inserted into the context but not yet saved in a persistent store."
    },
    {
      "name": "var updatedObjects: Set<NSManagedObject>",
      "desc": "The set of objects registered with the context that have uncommitted changes."
    },
    {
      "name": "var deletedObjects: Set<NSManagedObject>",
      "desc": "The set of objects that will be removed from their persistent store during the next save operation."
    },
    {
      "name": "func shouldHandleInaccessibleFault(NSManagedObject, for: NSManagedObjectID, triggeredByProperty: NSPropertyDescription?) -> Bool",
      "desc": "Creates a log of the inaccessible fault."
    },
    {
      "name": "func insert(NSManagedObject)",
      "desc": "Registers an object to be inserted in the context’s persistent store the next time changes are saved."
    },
    {
      "name": "func delete(NSManagedObject)",
      "desc": "Specifies an object that should be removed from its persistent store when changes are committed."
    },
    {
      "name": "func assign(Any, to: NSPersistentStore)",
      "desc": "Specifies the store in which a newly inserted object will be saved."
    },
    {
      "name": "func obtainPermanentIDs(for: [NSManagedObject])",
      "desc": "Converts to permanent IDs the object IDs of the objects in a given array."
    },
    {
      "name": "func detectConflicts(for: NSManagedObject)",
      "desc": "Marks an object for conflict detection."
    },
    {
      "name": "func refresh(NSManagedObject, mergeChanges: Bool)",
      "desc": "Updates the persistent properties of a managed object to use the latest values from the persistent store."
    },
    {
      "name": "func processPendingChanges()",
      "desc": "Forces the context to process changes to the object graph."
    },
    {
      "name": "func observeValue(forKeyPath: String?, of: Any?, change: [String : Any]?, context: UnsafeMutableRawPointer?)",
      "desc": "Allows a context that has registered as an observer of a value to be notified of a change to that value."
    },
    {
      "name": "let NSManagedObjectContextQueryGenerationKey: String",
      "desc": "Constant used to reference the query generation token."
    },
    {
      "name": "class func mergeChanges(fromRemoteContextSave: [AnyHashable : Any], into: [NSManagedObjectContext])",
      "desc": "Handles changes from other processes or from a serialized state."
    },
    {
      "name": "var automaticallyMergesChangesFromParent: Bool",
      "desc": "A Boolean value that indicates whether the context automatically merges changes saved to its persistent store coordinator or parent context."
    },
    {
      "name": "var concurrencyType: NSManagedObjectContextConcurrencyType",
      "desc": "The concurrency type for the context."
    },
    {
      "name": "var mergePolicy: Any",
      "desc": "The merge policy of the context."
    },
    {
      "name": "var queryGenerationToken: NSQueryGenerationToken?",
      "desc": "Returns the token associated with the query generation currently in use by this context."
    },
    {
      "name": "var transactionAuthor: String?",
      "desc": "The author for the context that is used as an identifier in persistent history transactions."
    },
    {
      "name": "func mergeChanges(fromContextDidSave: Notification)",
      "desc": "Merges the changes specified in a given notification."
    },
    {
      "name": "func setQueryGenerationFrom(NSQueryGenerationToken?)",
      "desc": "Sets the query generation this context should use."
    },
    {
      "name": "static let didChangeObjectsNotification: Notification.Name",
      "desc": "A notification that posts when the context completes a save."
    },
    {
      "name": "static let NSManagedObjectContextObjectsDidChange: NSNotification.Name",
      "desc": "A notification of changes made to managed objects associated with this context."
    },
    {
      "name": "static let didSaveObjectsNotification: Notification.Name",
      "desc": "A notification that posts when the context completes a save."
    },
    {
      "name": "static let NSManagedObjectContextDidSave: NSNotification.Name",
      "desc": "A notification that the context completed a save."
    },
    {
      "name": "static let willSaveObjectsNotification: Notification.Name",
      "desc": "A notification that the context is about to save."
    },
    {
      "name": "static let NSManagedObjectContextWillSave: NSNotification.Name",
      "desc": "A notification that the context is about to save."
    },
    {
      "name": "let NSInsertedObjectsKey: String",
      "desc": "A key for the set of objects that were inserted into the context."
    },
    {
      "name": "let NSUpdatedObjectsKey: String",
      "desc": "A key for the set of objects that were updated."
    },
    {
      "name": "let NSDeletedObjectsKey: String",
      "desc": "A key for the set of objects that were marked for deletion during the previous event."
    },
    {
      "name": "let NSRefreshedObjectsKey: String",
      "desc": "A key for the set of objects that were refreshed but were not dirtied in the scope of this context."
    },
    {
      "name": "let NSInvalidatedObjectsKey: String",
      "desc": "A key for the set of objects that were invalidated."
    },
    {
      "name": "let NSInvalidatedAllObjectsKey: String",
      "desc": "A key that specifies that all objects in the context have been invalidated."
    },
    {
      "name": "static let didMergeChangesObjectIDsNotification: Notification.Name",
      "desc": "A notification that a posts when changes to managed objects with the specified object identifiers merge into the context."
    },
    {
      "name": "static let didSaveObjectIDsNotification: Notification.Name",
      "desc": "A notification that posts when the context saves changes."
    },
    {
      "name": "enum NSManagedObjectContext.NotificationKey",
      "desc": "Keys to access details in user info dictionaries of managed object context notifications."
    },
    {
      "name": "func save()",
      "desc": "Attempts to commit unsaved changes to registered objects to the context’s parent store."
    },
    {
      "name": "var hasChanges: Bool",
      "desc": "A Boolean value that indicates whether the context has uncommitted changes."
    },
    {
      "name": "var undoManager: UndoManager?",
      "desc": "The object that provides undo support for the context."
    },
    {
      "name": "func undo()",
      "desc": "Sends an undo message to the context’s undo manager, asking it to reverse the latest uncommitted changes applied to objects in the object graph."
    },
    {
      "name": "func redo()",
      "desc": "Sends a redo message to the context’s undo manager, asking it to reverse the latest undo operation applied to objects in the object graph."
    },
    {
      "name": "func reset()",
      "desc": "Returns the context to its base state."
    },
    {
      "name": "func rollback()",
      "desc": "Removes everything from the undo stack, discards all insertions and deletions, and restores updated objects to their last committed values."
    },
    {
      "name": "var propagatesDeletesAtEndOfEvent: Bool",
      "desc": "A Boolean value that indicates whether the context propagates deletes at the end of the event in which a change was made."
    },
    {
      "name": "var stalenessInterval: TimeInterval",
      "desc": "The maximum length of time that may have elapsed since the store previously fetched data before fulfilling a fault issues a new fetch."
    },
    {
      "name": "func perform(() -> Void)",
      "desc": "Asynchronously performs the specified block on the context’s queue."
    },
    {
      "name": "func performAndWait(() -> Void)",
      "desc": "Synchronously performs the specified block on the context’s queue."
    },
    {
      "name": "enum NSManagedObjectContext.ScheduledTaskType",
      "desc": "The different types of scheduled tasks."
    },
    {
      "name": "func perform<T>(schedule: NSManagedObjectContext.ScheduledTaskType, () -> T) -> T"
    },
    {
      "name": "func performAndWait<T>(() -> T) -> T"
    }
  ],
  "declaration": "class NSManagedObjectContext : NSObject",
  "inheritsFrom": [
    "NSObject"
  ],
  "conformsTo": [
    "NSCoding",
    "NSEditor",
    "NSEditorRegistration",
    "NSLocking"
  ]
}