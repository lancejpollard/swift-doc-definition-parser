{
  "path": "/documentation/coredata/nsattributedescription/attributetype",
  "type": "Structure",
  "name": "NSAttributeDescription.AttributeType",
  "desc": "The types of attributes that Core Data supports.",
  "items": [
    {
      "name": "static let binaryData: NSAttributeDescription.AttributeType",
      "desc": "An attribute that stores binary data."
    },
    {
      "name": "static let boolean: NSAttributeDescription.AttributeType",
      "desc": "An attribute that stores a Boolean value."
    },
    {
      "name": "static let date: NSAttributeDescription.AttributeType",
      "desc": "An attribute that stores a date."
    },
    {
      "name": "static let decimal: NSAttributeDescription.AttributeType",
      "desc": "An attribute that stores a decimal value."
    },
    {
      "name": "static let double: NSAttributeDescription.AttributeType",
      "desc": "An attribute that stores a double value."
    },
    {
      "name": "static let float: NSAttributeDescription.AttributeType",
      "desc": "An attribute that stores a float value."
    },
    {
      "name": "static let integer16: NSAttributeDescription.AttributeType",
      "desc": "An attribute that stores a 16-bit signed integer value."
    },
    {
      "name": "static let integer32: NSAttributeDescription.AttributeType",
      "desc": "An attribute that stores a 32-bit signed integer value."
    },
    {
      "name": "static let integer64: NSAttributeDescription.AttributeType",
      "desc": "An attribute that stores a 64-bit signed integer value."
    },
    {
      "name": "static let objectID: NSAttributeDescription.AttributeType",
      "desc": "An attribute that stores a managed object’s ID."
    },
    {
      "name": "static let string: NSAttributeDescription.AttributeType",
      "desc": "An attribute that stores a string."
    },
    {
      "name": "static let transformable: NSAttributeDescription.AttributeType",
      "desc": "An attribute that derives its value from a value transformer."
    },
    {
      "name": "static let undefined: NSAttributeDescription.AttributeType",
      "desc": "An attribute that doesn’t have an explicit type."
    },
    {
      "name": "static let uri: NSAttributeDescription.AttributeType",
      "desc": "An attribute that stores a uniform resource identifier."
    },
    {
      "name": "static let uuid: NSAttributeDescription.AttributeType",
      "desc": "An attribute that stores a universally unique identifier."
    },
    {
      "name": "init(rawValue: NSAttributeType)",
      "desc": "Creates an attribute type using the specified raw value."
    },
    {
      "name": "var rawValue: NSAttributeType",
      "desc": "The attribute type’s cardinal value."
    },
    {
      "name": "typealias NSAttributeDescription.AttributeType.RawValue",
      "desc": "The type the conforming type uses to represent its values."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The attribute type’s computed hash value."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the components of the attribute type using the provided hasher."
    },
    {
      "name": "static func != (NSAttributeDescription.AttributeType, NSAttributeDescription.AttributeType) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two attribute types are unequal."
    }
  ],
  "declaration": "struct AttributeType",
  "conformsTo": [
    "Equatable",
    "Hashable",
    "RawRepresentable"
  ]
}