{
  "path": "/documentation/cryptokit/insecure/md5digest",
  "type": "Structure",
  "name": "Insecure.MD5Digest",
  "desc": "The output of a MD5 hash.",
  "items": [
    {
      "name": "static var byteCount: Int",
      "desc": "The number of bytes in the MD5 digest."
    },
    {
      "name": "static func == (Insecure.MD5Digest, Insecure.MD5Digest) -> Bool",
      "desc": "Determines whether two digests are equal."
    },
    {
      "name": "static func == <D>(Insecure.MD5Digest, D) -> Bool",
      "desc": "Determines whether a digest is equivalent to a collection of contiguous bytes."
    },
    {
      "name": "static func != (Insecure.MD5Digest, Insecure.MD5Digest) -> Bool",
      "desc": "Determines whether two digests aren’t equal."
    },
    {
      "name": "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
      "desc": "Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order."
    },
    {
      "name": "func elementsEqual<OtherSequence>(OtherSequence, by: (IndexingIterator<Array<UInt8>>.Element, OtherSequence.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test."
    },
    {
      "name": "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
      "desc": "Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence."
    },
    {
      "name": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (IndexingIterator<Array<UInt8>>.Element, PossiblePrefix.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test."
    },
    {
      "name": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements."
    },
    {
      "name": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (IndexingIterator<Array<UInt8>>.Element, IndexingIterator<Array<UInt8>>.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements."
    },
    {
      "name": "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
      "desc": "Provides the relative ordering of two bytes based on the sort order of the comparator."
    },
    {
      "name": "func makeIterator() -> Array<UInt8>.Iterator",
      "desc": "Generates an iterator over the bytes of the digest."
    },
    {
      "name": "typealias Insecure.MD5Digest.Iterator",
      "desc": "A type for the iterator over the digest."
    },
    {
      "name": "typealias Insecure.MD5Digest.Element",
      "desc": "A type for the elements of the digest."
    },
    {
      "name": "func forEach((IndexingIterator<Array<UInt8>>.Element) -> Void)",
      "desc": "Calls the given closure on each element in the sequence in the same order as a for-in loop."
    },
    {
      "name": "func enumerated() -> EnumeratedSequence<Insecure.MD5Digest>",
      "desc": "Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence."
    },
    {
      "name": "var underestimatedCount: Int",
      "desc": "A value less than or equal to the number of elements in the sequence, calculated nondestructively."
    },
    {
      "name": "var publisher: Publishers.Sequence<Insecure.MD5Digest, Never>",
      "desc": "A Combine publisher that publishes digest’s bytes."
    },
    {
      "name": "func contains(IndexingIterator<Array<UInt8>>.Element) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence contains the given element."
    },
    {
      "name": "func contains(where: (IndexingIterator<Array<UInt8>>.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate."
    },
    {
      "name": "func allSatisfy((IndexingIterator<Array<UInt8>>.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate."
    },
    {
      "name": "func first(where: (IndexingIterator<Array<UInt8>>.Element) -> Bool) -> IndexingIterator<Array<UInt8>>.Element?",
      "desc": "Returns the first element of the sequence that satisfies the given predicate."
    },
    {
      "name": "func min() -> IndexingIterator<Array<UInt8>>.Element?",
      "desc": "Returns the minimum element in the sequence."
    },
    {
      "name": "func min(by: (IndexingIterator<Array<UInt8>>.Element, IndexingIterator<Array<UInt8>>.Element) -> Bool) -> IndexingIterator<Array<UInt8>>.Element?",
      "desc": "Returns the minimum element in the sequence, using the given predicate as the comparison between elements."
    },
    {
      "name": "func max() -> IndexingIterator<Array<UInt8>>.Element?",
      "desc": "Returns the maximum element in the sequence."
    },
    {
      "name": "func max(by: (IndexingIterator<Array<UInt8>>.Element, IndexingIterator<Array<UInt8>>.Element) -> Bool) -> IndexingIterator<Array<UInt8>>.Element?",
      "desc": "Returns the maximum element in the sequence, using the given predicate as the comparison between elements."
    },
    {
      "name": "func filter((IndexingIterator<Array<UInt8>>.Element) -> Bool) -> [IndexingIterator<Array<UInt8>>.Element]",
      "desc": "Returns an array containing, in order, the elements of the sequence that satisfy the given predicate."
    },
    {
      "name": "func prefix(Int) -> PrefixSequence<Insecure.MD5Digest>",
      "desc": "Returns a sequence, up to the specified maximum length, containing the initial elements of the sequence."
    },
    {
      "name": "func prefix(while: (IndexingIterator<Array<UInt8>>.Element) -> Bool) -> [IndexingIterator<Array<UInt8>>.Element]",
      "desc": "Returns a sequence containing the initial, consecutive elements that satisfy the given predicate."
    },
    {
      "name": "func suffix(Int) -> [IndexingIterator<Array<UInt8>>.Element]",
      "desc": "Returns a subsequence, up to the given maximum length, containing the final elements of the sequence."
    },
    {
      "name": "func map<T>((IndexingIterator<Array<UInt8>>.Element) -> T) -> [T]",
      "desc": "Returns an array containing the results of mapping the given closure over the sequence’s elements."
    },
    {
      "name": "func flatMap<SegmentOfResult>((IndexingIterator<Array<UInt8>>.Element) -> SegmentOfResult) -> [SegmentOfResult.Element]",
      "desc": "Returns an array containing the concatenated results of calling the given transformation with each element of this sequence."
    },
    {
      "name": "func compactMap<ElementOfResult>((IndexingIterator<Array<UInt8>>.Element) -> ElementOfResult?) -> [ElementOfResult]",
      "desc": "Returns an array containing the non-nil results of calling the given transformation with each element of this sequence."
    },
    {
      "name": "func reduce<Result>(Result, (Result, IndexingIterator<Array<UInt8>>.Element) -> Result) -> Result",
      "desc": "Returns the result of combining the elements of the sequence using the given closure."
    },
    {
      "name": "func reduce<Result>(into: Result, (inout Result, IndexingIterator<Array<UInt8>>.Element) -> ()) -> Result",
      "desc": "Returns the result of combining the elements of the sequence using the given closure."
    },
    {
      "name": "var lazy: LazySequence<Insecure.MD5Digest>",
      "desc": "A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily."
    },
    {
      "name": "func sorted() -> [IndexingIterator<Array<UInt8>>.Element]",
      "desc": "Returns the elements of the sequence, sorted."
    },
    {
      "name": "func sorted(by: (IndexingIterator<Array<UInt8>>.Element, IndexingIterator<Array<UInt8>>.Element) -> Bool) -> [IndexingIterator<Array<UInt8>>.Element]",
      "desc": "Returns the elements of the sequence, sorted using the given predicate as the comparison between elements."
    },
    {
      "name": "func reversed() -> [IndexingIterator<Array<UInt8>>.Element]",
      "desc": "Returns an array containing the elements of this sequence in reverse order."
    },
    {
      "name": "func shuffled() -> [IndexingIterator<Array<UInt8>>.Element]",
      "desc": "Returns the elements of the sequence, shuffled."
    },
    {
      "name": "func shuffled<T>(using: inout T) -> [IndexingIterator<Array<UInt8>>.Element]",
      "desc": "Returns the elements of the sequence, shuffled using the given generator as a source for randomness."
    },
    {
      "name": "func sorted<Comparator>(using: Comparator) -> [IndexingIterator<Array<UInt8>>.Element]",
      "desc": "Returns the sorted bytes of the digest using the comparator you specify."
    },
    {
      "name": "func sorted<S, Comparator>(using: S) -> [IndexingIterator<Array<UInt8>>.Element]",
      "desc": "Sorts a sequence of bytes from the digest using the comparator you specify."
    },
    {
      "name": "func dropFirst(Int) -> DropFirstSequence<Insecure.MD5Digest>",
      "desc": "Returns a sequence containing all but the given number of initial elements."
    },
    {
      "name": "func dropLast(Int) -> [IndexingIterator<Array<UInt8>>.Element]",
      "desc": "Returns a sequence containing all but the given number of final elements."
    },
    {
      "name": "func drop(while: (IndexingIterator<Array<UInt8>>.Element) -> Bool) -> DropWhileSequence<Insecure.MD5Digest>",
      "desc": "Returns a sequence by skipping the initial, consecutive elements that satisfy the given predicate."
    },
    {
      "name": "func split(separator: IndexingIterator<Array<UInt8>>.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<IndexingIterator<Array<UInt8>>.Element>]",
      "desc": "Returns the longest possible subsequences of the sequence, in order, around elements equal to the given element."
    },
    {
      "name": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (IndexingIterator<Array<UInt8>>.Element) -> Bool) -> [ArraySlice<IndexingIterator<Array<UInt8>>.Element>]",
      "desc": "Returns the longest possible subsequences of the sequence, in order, that don’t contain elements satisfying the given predicate. Elements that are used to split the sequence are not returned as part of any subsequence."
    },
    {
      "name": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<IndexingIterator<Array<UInt8>>.Element>) -> R) -> R?",
      "desc": "Executes a closure on the sequence’s contiguous storage."
    },
    {
      "name": "func withUnsafeBytes<R>((UnsafeRawBufferPointer) -> R) -> R",
      "desc": "Invokes the given closure with a buffer pointer covering the raw bytes of the digest."
    },
    {
      "name": "var description: String",
      "desc": "A human-readable description of the digest."
    },
    {
      "name": "func formatted<S>(S) -> S.FormatOutput",
      "desc": "Generates a locale-aware string representation of a digest using the provided list format style."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of the digest by feeding them into the given hash function."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value of the digest."
    }
  ],
  "declaration": "struct MD5Digest"
}