{
  "path": "/documentation/gamecontroller/gcmotion",
  "type": "Class",
  "name": "GCMotion",
  "desc": "A controller profile that supports orientation and motion.",
  "items": [
    {
      "name": "var controller: GCController?",
      "desc": "The controller for the profile."
    },
    {
      "name": "var valueChangedHandler: GCMotionValueChangedHandler?",
      "desc": "The block that the profile calls when an element’s value changes."
    },
    {
      "name": "typealias GCMotionValueChangedHandler",
      "desc": "The signature for the block that the profile calls when an element’s value changes."
    },
    {
      "name": "var hasAttitude: Bool",
      "desc": "A Boolean value that indicates whether the controller provides attitude data."
    },
    {
      "name": "var hasRotationRate: Bool",
      "desc": "A Boolean value that indicates whether the controller provides rotation data."
    },
    {
      "name": "var hasGravityAndUserAcceleration: Bool",
      "desc": "A Boolean value that indicates whether the controller provides gravity and user acceleration data."
    },
    {
      "name": "var attitude: GCQuaternion",
      "desc": "The attitude of the controller."
    },
    {
      "name": "struct GCQuaternion",
      "desc": "A quaternion that represents a controller’s measurement of attitude."
    },
    {
      "name": "var rotationRate: GCRotationRate",
      "desc": "The rotation rate of the controller."
    },
    {
      "name": "struct GCRotationRate",
      "desc": "A structure that represents rotation rates around the x, y, and z axes."
    },
    {
      "name": "struct GCEulerAngles",
      "desc": "A structure that specifies the controller’s attitude as a series of rotations around the x, y, and z axes."
    },
    {
      "name": "var acceleration: GCAcceleration",
      "desc": "The total acceleration of the controller that includes gravity and the acceleration the user applies to the controller."
    },
    {
      "name": "var gravity: GCAcceleration",
      "desc": "The gravity acceleration vector from the controller’s reference frame."
    },
    {
      "name": "var userAcceleration: GCAcceleration",
      "desc": "The acceleration that the user applies to the controller."
    },
    {
      "name": "struct GCAcceleration",
      "desc": "A three-dimensional acceleration vector."
    },
    {
      "name": "var sensorsRequireManualActivation: Bool",
      "desc": "A Boolean value that indicates whether the sensors that compute the motion data require manual activation."
    },
    {
      "name": "var sensorsActive: Bool",
      "desc": "A Boolean value that indicates whether the sensors that compute the motion data are active."
    },
    {
      "name": "func setStateFrom(GCMotion)",
      "desc": "Copies the input values from a specified motion profile to a snapshot of a motion profile."
    },
    {
      "name": "func setAttitude(GCQuaternion)",
      "desc": "Sets the controller’s attitude."
    },
    {
      "name": "func setRotationRate(GCRotationRate)",
      "desc": "Sets the controller’s rotation rate."
    },
    {
      "name": "func setAcceleration(GCAcceleration)",
      "desc": "Sets the total acceleration of the controller that includes gravity and the user’s acceleration."
    },
    {
      "name": "func setGravity(GCAcceleration)",
      "desc": "Sets the controller’s gravity data."
    },
    {
      "name": "func setUserAcceleration(GCAcceleration)",
      "desc": "Sets the acceleration the user applies to the controller."
    }
  ],
  "declaration": "class GCMotion : NSObject",
  "inheritsFrom": [
    "NSObject"
  ]
}