{
  "path": "/documentation/foundation/nsurl",
  "type": "Class",
  "name": "NSURL",
  "desc": "An object representing the location of a resource that bridges to URL; use NSURL when you need reference semantics or other Foundation-specific behavior.",
  "items": [
    {
      "name": "init?(string: String)",
      "desc": "Initializes an NSURL object with a provided URL string."
    },
    {
      "name": "init?(string: String, relativeTo: URL?)",
      "desc": "Initializes an NSURL object with a base URL and a relative string."
    },
    {
      "name": "class func fileURL(withPath: String, isDirectory: Bool) -> URL",
      "desc": "Initializes and returns a newly created NSURL object as a file URL with a specified path."
    },
    {
      "name": "init(fileURLWithPath: String, isDirectory: Bool)",
      "desc": "Initializes a newly created NSURL referencing the local file or directory at path."
    },
    {
      "name": "class func fileURL(withPath: String, relativeTo: URL?) -> URL"
    },
    {
      "name": "init(fileURLWithPath: String, relativeTo: URL?)"
    },
    {
      "name": "class func fileURL(withPath: String, isDirectory: Bool, relativeTo: URL?) -> URL"
    },
    {
      "name": "init(fileURLWithPath: String, isDirectory: Bool, relativeTo: URL?)"
    },
    {
      "name": "class func fileURL(withPath: String) -> URL",
      "desc": "Initializes and returns a newly created NSURL object as a file URL with a specified path."
    },
    {
      "name": "init(fileURLWithPath: String)",
      "desc": "Initializes a newly created NSURL referencing the local file or directory at path."
    },
    {
      "name": "class func fileURL(withPathComponents: [String]) -> URL?",
      "desc": "Initializes and returns a newly created NSURL object as a file URL with specified path components."
    },
    {
      "name": "init(resolvingAliasFileAt: URL, options: NSURL.BookmarkResolutionOptions)",
      "desc": "Returns a new URL made by resolving the alias file at url."
    },
    {
      "name": "init(resolvingBookmarkData: Data, options: NSURL.BookmarkResolutionOptions, relativeTo: URL?, bookmarkDataIsStale: UnsafeMutablePointer<ObjCBool>?)",
      "desc": "Initializes a newly created NSURL that points to a location specified by resolving bookmark data."
    },
    {
      "name": "class func fileURL(withFileSystemRepresentation: UnsafePointer<CChar>, isDirectory: Bool, relativeTo: URL?) -> URL",
      "desc": "Returns a new URL object initialized with a C string representing a local file system path."
    },
    {
      "name": "func getFileSystemRepresentation(UnsafeMutablePointer<CChar>, maxLength: Int) -> Bool",
      "desc": "Fills the provided buffer with a C string representing a local file system path."
    },
    {
      "name": "init(fileURLWithFileSystemRepresentation: UnsafePointer<CChar>, isDirectory: Bool, relativeTo: URL?)",
      "desc": "Initializes a URL object with a C string representing a local file system path."
    },
    {
      "name": "class func absoluteURL(withDataRepresentation: Data, relativeTo: URL?) -> URL"
    },
    {
      "name": "init(absoluteURLWithDataRepresentation: Data, relativeTo: URL?)"
    },
    {
      "name": "init(dataRepresentation: Data, relativeTo: URL?)"
    },
    {
      "name": "var dataRepresentation: Data"
    },
    {
      "name": "func checkResourceIsReachableAndReturnError(NSErrorPointer) -> Bool",
      "desc": "Returns whether the resource pointed to by a file URL can be reached."
    },
    {
      "name": "func isFileReferenceURL() -> Bool",
      "desc": "Returns whether the URL is a file reference URL."
    },
    {
      "name": "var isFileURL: Bool",
      "desc": "A boolean value that determines whether the receiver is a file URL."
    },
    {
      "name": "var absoluteString: String?",
      "desc": "The URL string for the receiver as an absolute URL. (read-only)"
    },
    {
      "name": "var absoluteURL: URL?",
      "desc": "An absolute URL that refers to the same resource as the receiver. (read-only)"
    },
    {
      "name": "var baseURL: URL?",
      "desc": "The base URL. (read-only)"
    },
    {
      "name": "var fileSystemRepresentation: UnsafePointer<CChar>",
      "desc": "A C string containing the URL’s file system path. (read-only)"
    },
    {
      "name": "var fragment: String?",
      "desc": "The fragment identifier, conforming to RFC 1808. (read-only)"
    },
    {
      "name": "var host: String?",
      "desc": "The host, conforming to RFC 1808. (read-only)"
    },
    {
      "name": "var lastPathComponent: String?",
      "desc": "The last path component. (read-only)"
    },
    {
      "name": "var password: String?",
      "desc": "The password conforming to RFC 1808. (read-only)"
    },
    {
      "name": "var path: String?",
      "desc": "The path, conforming to RFC 1808. (read-only)"
    },
    {
      "name": "var pathComponents: [String]?",
      "desc": "An array containing the path components. (read-only)"
    },
    {
      "name": "var pathExtension: String?",
      "desc": "The path extension. (read-only)"
    },
    {
      "name": "var port: NSNumber?",
      "desc": "The port, conforming to RFC 1808."
    },
    {
      "name": "var query: String?",
      "desc": "The query string, conforming to RFC 1808."
    },
    {
      "name": "var relativePath: String?",
      "desc": "The relative path, conforming to RFC 1808. (read-only)"
    },
    {
      "name": "var relativeString: String",
      "desc": "A string representation of the relative portion of the URL. (read-only)"
    },
    {
      "name": "var resourceSpecifier: String?",
      "desc": "The resource specifier. (read-only)"
    },
    {
      "name": "var scheme: String?",
      "desc": "The scheme. (read-only)"
    },
    {
      "name": "var standardized: URL?",
      "desc": "A copy of the URL with any instances of \"..\" or \".\" removed from its path. (read-only)"
    },
    {
      "name": "var user: String?",
      "desc": "The user name, conforming to RFC 1808."
    },
    {
      "name": "func resourceValues(forKeys: [URLResourceKey]) -> [URLResourceKey : Any]",
      "desc": "Returns the resource values for the properties identified by specified array of keys."
    },
    {
      "name": "func getResourceValue(AutoreleasingUnsafeMutablePointer<AnyObject?>, forKey: URLResourceKey)",
      "desc": "Returns the value of the resource property for the specified key."
    },
    {
      "name": "func setResourceValue(Any?, forKey: URLResourceKey)",
      "desc": "Sets the URL’s resource property for a given key to a given value."
    },
    {
      "name": "func setResourceValues([URLResourceKey : Any])",
      "desc": "Sets the URL’s resource properties for a given set of keys to a given set of values."
    },
    {
      "name": "func removeAllCachedResourceValues()",
      "desc": "Removes all cached resource values and temporary resource values from the URL object."
    },
    {
      "name": "func removeCachedResourceValue(forKey: URLResourceKey)",
      "desc": "Removes the cached resource value identified by a given key from the URL object."
    },
    {
      "name": "func setTemporaryResourceValue(Any?, forKey: URLResourceKey)",
      "desc": "Sets a temporary resource value on the URL object."
    },
    {
      "name": "struct URLResourceKey",
      "desc": "Keys that apply to file system URLs."
    },
    {
      "name": "var filePathURL: URL?",
      "desc": "A file path URL that points to the same resource as the URL object. (read-only)"
    },
    {
      "name": "func fileReferenceURL() -> URL?",
      "desc": "Returns a new file reference URL that points to the same resource as the receiver."
    },
    {
      "name": "func appendingPathComponent(String) -> URL?",
      "desc": "Returns a new URL made by appending a path component to the original URL."
    },
    {
      "name": "func appendingPathComponent(String, isDirectory: Bool) -> URL?",
      "desc": "Returns a new URL made by appending a path component to the original URL, along with a trailing slash if the component is designated a directory."
    },
    {
      "name": "func appendingPathExtension(String) -> URL?",
      "desc": "Returns a new URL made by appending a path extension to the original URL."
    },
    {
      "name": "var deletingLastPathComponent: URL?",
      "desc": "A URL created by taking the receiver and removing the last path component. (read-only)"
    },
    {
      "name": "var deletingPathExtension: URL?",
      "desc": "A URL created by taking the receiver and removing the path extension, if any. (read-only)"
    },
    {
      "name": "var resolvingSymlinksInPath: URL?",
      "desc": "A URL that points to the same resource as the receiver and includes no symbolic links. (read-only)"
    },
    {
      "name": "var standardizingPath: URL?",
      "desc": "A URL that points to the same resource as the original URL using an absolute path. (read-only)"
    },
    {
      "name": "var hasDirectoryPath: Bool"
    },
    {
      "name": "class func bookmarkData(withContentsOf: URL) -> Data",
      "desc": "Initializes and returns bookmark data derived from an alias file pointed to by a specified URL."
    },
    {
      "name": "func bookmarkData(options: NSURL.BookmarkCreationOptions, includingResourceValuesForKeys: [URLResourceKey]?, relativeTo: URL?) -> Data",
      "desc": "Returns a bookmark for the URL, created with specified options and resource values."
    },
    {
      "name": "class func resourceValues(forKeys: [URLResourceKey], fromBookmarkData: Data) -> [URLResourceKey : Any]?",
      "desc": "Returns the resource values for properties identified by a specified array of keys contained in specified bookmark data."
    },
    {
      "name": "class func writeBookmarkData(Data, to: URL, options: NSURL.BookmarkFileCreationOptions)",
      "desc": "Creates an alias file on disk at a specified location with specified bookmark data."
    },
    {
      "name": "func startAccessingSecurityScopedResource() -> Bool",
      "desc": "In an app that has adopted App Sandbox, makes the resource pointed to by a security-scoped URL available to the app."
    },
    {
      "name": "func stopAccessingSecurityScopedResource()",
      "desc": "In an app that adopts App Sandbox, revokes access to the resource pointed to by a security-scoped URL."
    },
    {
      "name": "typealias NSURL.BookmarkFileCreationOptions",
      "desc": "Options used when creating file bookmark data"
    },
    {
      "name": "struct NSURL.BookmarkCreationOptions",
      "desc": "Options used when creating bookmark data."
    },
    {
      "name": "struct NSURL.BookmarkResolutionOptions",
      "desc": "Options used when resolving bookmark data."
    },
    {
      "name": "func checkPromisedItemIsReachableAndReturnError(NSErrorPointer) -> Bool",
      "desc": "Returns whether the promised item can be reached."
    },
    {
      "name": "func getPromisedItemResourceValue(AutoreleasingUnsafeMutablePointer<AnyObject?>, forKey: URLResourceKey)",
      "desc": "Returns the value of the resource property for the specified key."
    },
    {
      "name": "func promisedItemResourceValues(forKeys: [URLResourceKey]) -> [URLResourceKey : Any]",
      "desc": "Returns the resource values for the properties identified by specified array of keys."
    },
    {
      "name": "init?(from: NSPasteboard)",
      "desc": "Reads an NSURL object off of the specified pasteboard."
    },
    {
      "name": "func write(to: NSPasteboard)",
      "desc": "Writes the URL to the specified pasteboard."
    },
    {
      "name": "func appendingPathComponent(String, conformingTo: UTType) -> URL"
    },
    {
      "name": "func appendingPathExtension(for: UTType) -> URL"
    }
  ],
  "declaration": "class NSURL : NSObject",
  "inheritsFrom": [
    "NSObject"
  ],
  "conformsTo": [
    "NSCopying",
    "NSItemProviderReading",
    "NSItemProviderWriting",
    "NSPasteboardReading",
    "NSPasteboardWriting",
    "NSSecureCoding",
    "QLPreviewItem"
  ]
}