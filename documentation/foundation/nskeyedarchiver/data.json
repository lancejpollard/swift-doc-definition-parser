{
  "path": "/documentation/foundation/nskeyedarchiver",
  "type": "Class",
  "name": "NSKeyedArchiver",
  "desc": "An encoder that stores an object’s data to an archive referenced by keys.",
  "items": [
    {
      "name": "init(requiringSecureCoding: Bool)",
      "desc": "Creates an archiver to encode data, and optionally disables secure coding."
    },
    {
      "name": "class func archivedData(withRootObject: Any, requiringSecureCoding: Bool) -> Data",
      "desc": "Encodes an object graph with the given root object into a data representation, optionally requiring secure coding."
    },
    {
      "name": "func finishEncoding()",
      "desc": "Instructs the receiver to construct the final data stream."
    },
    {
      "name": "var encodedData: Data",
      "desc": "The encoded data for the archiver."
    },
    {
      "name": "var outputFormat: PropertyListSerialization.PropertyListFormat",
      "desc": "The format in which the receiver encodes its data."
    },
    {
      "name": "var requiresSecureCoding: Bool",
      "desc": "Indicates whether the archiver requires all archived classes to resist object substitution attacks."
    },
    {
      "name": "func encodeEncodable<T>(T, forKey: String)",
      "desc": "Encodes a given value and associates it with a key."
    },
    {
      "name": "func encode(Bool, forKey: String)",
      "desc": "Encodes a given Boolean value and associates it with a key."
    },
    {
      "name": "func encodeBytes(UnsafePointer<UInt8>?, length: Int, forKey: String)",
      "desc": "Encodes a given number of bytes from a given C array of bytes and associates them with a key."
    },
    {
      "name": "func encodeConditionalObject(Any?, forKey: String)",
      "desc": "Encodes a reference to a given object and associates it with a key only if it has been unconditionally encoded elsewhere in the archive."
    },
    {
      "name": "func encode(Double, forKey: String)",
      "desc": "Encodes a given double value and associates it with a key."
    },
    {
      "name": "func encode(Float, forKey: String)",
      "desc": "Encodes a given float value and associates it with a key."
    },
    {
      "name": "func encode(Int32, forKey: String)",
      "desc": "Encodes a given 32-bit integer value and associates it with a key."
    },
    {
      "name": "func encode(Int64, forKey: String)",
      "desc": "Encodes a given 64-bit integer value and associates it with a key."
    },
    {
      "name": "func encode(Any?, forKey: String)",
      "desc": "Encodes a given object and associates it with a given key."
    },
    {
      "name": "var delegate: NSKeyedArchiverDelegate?",
      "desc": "The archiver’s delegate."
    },
    {
      "name": "class func setClassName(String?, for: AnyClass)",
      "desc": "Sets a global translation mapping to encode instances of a given class with the provided name, rather than their real name."
    },
    {
      "name": "class func className(for: AnyClass) -> String?",
      "desc": "Returns the class name with which the archiver class encodes instances of a given class."
    },
    {
      "name": "func setClassName(String?, for: AnyClass)",
      "desc": "Sets a mapping for this archiver to encode instances of a given class with the provided name, rather than their real name."
    },
    {
      "name": "func className(for: AnyClass) -> String?",
      "desc": "Returns the class name with which this archiver encodes instances of a given class."
    }
  ],
  "declaration": "class NSKeyedArchiver : NSCoder",
  "inheritsFrom": [
    "NSCoder"
  ]
}