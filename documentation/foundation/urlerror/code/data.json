{
  "path": "/documentation/foundation/urlerror/code",
  "type": "Structure",
  "name": "URLError.Code",
  "desc": "No overview available.",
  "items": [
    {
      "name": "init(rawValue: Int)"
    },
    {
      "name": "static var appTransportSecurityRequiresSecureConnection: URLError.Code",
      "desc": "App Transport Security disallowed a connection because there is no secure network connection."
    },
    {
      "name": "static var backgroundSessionInUseByAnotherProcess: URLError.Code",
      "desc": "An app or app extension attempted to connect to a background session that is already connected to a process."
    },
    {
      "name": "static var backgroundSessionRequiresSharedContainer: URLError.Code",
      "desc": "The shared container identifier of the URL session configuration is needed but has not been set."
    },
    {
      "name": "static var backgroundSessionWasDisconnected: URLError.Code",
      "desc": "The app is suspended or exits while a background data task is processing."
    },
    {
      "name": "static var badServerResponse: URLError.Code",
      "desc": "The URL Loading system received bad data from the server."
    },
    {
      "name": "static var badURL: URLError.Code",
      "desc": "A malformed URL prevented a URL request from being initiated."
    },
    {
      "name": "static var callIsActive: URLError.Code",
      "desc": "A connection was attempted while a phone call is active on a network that does not support simultaneous phone and data communication (EDGE or GPRS)."
    },
    {
      "name": "static var cancelled: URLError.Code",
      "desc": "An asynchronous load has been canceled."
    },
    {
      "name": "static var cannotCloseFile: URLError.Code",
      "desc": "A download task couldn’t close the downloaded file on disk."
    },
    {
      "name": "static var cannotConnectToHost: URLError.Code",
      "desc": "An attempt to connect to a host failed."
    },
    {
      "name": "static var cannotCreateFile: URLError.Code",
      "desc": "A download task couldn’t create the downloaded file on disk because of an I/O failure."
    },
    {
      "name": "static var cannotDecodeContentData: URLError.Code",
      "desc": "Content data received during a connection request had an unknown content encoding."
    },
    {
      "name": "static var cannotDecodeRawData: URLError.Code",
      "desc": "Content data received during a connection request could not be decoded for a known content encoding."
    },
    {
      "name": "static var cannotFindHost: URLError.Code",
      "desc": "The host name for a URL could not be resolved."
    },
    {
      "name": "static var cannotLoadFromNetwork: URLError.Code",
      "desc": "A request to load an item only from the cache could not be satisfied."
    },
    {
      "name": "static var cannotMoveFile: URLError.Code",
      "desc": "A download task was unable to move a downloaded file on disk."
    },
    {
      "name": "static var cannotOpenFile: URLError.Code",
      "desc": "A download task was unable to open the downloaded file on disk."
    },
    {
      "name": "static var cannotParseResponse: URLError.Code",
      "desc": "A task could not parse a response."
    },
    {
      "name": "static var cannotRemoveFile: URLError.Code",
      "desc": "A download task was unable to remove a downloaded file from disk."
    },
    {
      "name": "static var cannotWriteToFile: URLError.Code",
      "desc": "A download task was unable to write to the downloaded file on disk."
    },
    {
      "name": "static var clientCertificateRejected: URLError.Code",
      "desc": "A server certificate was rejected."
    },
    {
      "name": "static var clientCertificateRequired: URLError.Code",
      "desc": "A client certificate was required to authenticate an SSL connection during a request."
    },
    {
      "name": "static var dataLengthExceedsMaximum: URLError.Code",
      "desc": "The length of the resource data exceeds the maximum allowed."
    },
    {
      "name": "static var dataNotAllowed: URLError.Code",
      "desc": "The cellular network disallowed a connection."
    },
    {
      "name": "static var dnsLookupFailed: URLError.Code",
      "desc": "The host address could not be found via DNS lookup."
    },
    {
      "name": "static var downloadDecodingFailedMidStream: URLError.Code",
      "desc": "A download task failed to decode an encoded file during the download."
    },
    {
      "name": "static var downloadDecodingFailedToComplete: URLError.Code",
      "desc": "A download task failed to decode an encoded file after downloading."
    },
    {
      "name": "static var fileDoesNotExist: URLError.Code",
      "desc": "A file does not exist."
    },
    {
      "name": "static var fileIsDirectory: URLError.Code",
      "desc": "A request for an FTP file resulted in the server responding that the file is not a plain file, but a directory."
    },
    {
      "name": "static var httpTooManyRedirects: URLError.Code",
      "desc": "A redirect loop has been detected or the threshold for number of allowable redirects has been exceeded (currently 16)."
    },
    {
      "name": "static var internationalRoamingOff: URLError.Code",
      "desc": "The attempted connection required activating a data context while roaming, but international roaming is disabled."
    },
    {
      "name": "static var networkConnectionLost: URLError.Code",
      "desc": "A client or server connection was severed in the middle of an in-progress load."
    },
    {
      "name": "static var noPermissionsToReadFile: URLError.Code",
      "desc": "A resource couldn’t be read because of insufficient permissions."
    },
    {
      "name": "static var notConnectedToInternet: URLError.Code",
      "desc": "A network resource was requested, but an internet connection has not been established and cannot be established automatically."
    },
    {
      "name": "static var redirectToNonExistentLocation: URLError.Code",
      "desc": "A redirect was specified by way of server response code, but the server did not accompany this code with a redirect URL."
    },
    {
      "name": "static var requestBodyStreamExhausted: URLError.Code",
      "desc": "A body stream is needed but the client did not provide one."
    },
    {
      "name": "static var resourceUnavailable: URLError.Code",
      "desc": "A requested resource couldn’t be retrieved."
    },
    {
      "name": "static var secureConnectionFailed: URLError.Code",
      "desc": "An attempt to establish a secure connection failed for reasons that can’t be expressed more specifically."
    },
    {
      "name": "static var serverCertificateHasBadDate: URLError.Code",
      "desc": "A server certificate had a date which indicates it has expired, or is not yet valid."
    },
    {
      "name": "static var serverCertificateHasUnknownRoot: URLError.Code",
      "desc": "A server certificate was not signed by any root server."
    },
    {
      "name": "static var serverCertificateNotYetValid: URLError.Code",
      "desc": "A server certificate is not yet valid."
    },
    {
      "name": "static var serverCertificateUntrusted: URLError.Code",
      "desc": "A server certificate was signed by a root server that isn’t trusted."
    },
    {
      "name": "static var timedOut: URLError.Code",
      "desc": "An asynchronous operation timed out."
    },
    {
      "name": "static var unknown: URLError.Code",
      "desc": "The URL Loading System encountered an error that it can’t interpret."
    },
    {
      "name": "static var unsupportedURL: URLError.Code",
      "desc": "A properly formed URL couldn’t be handled by the framework."
    },
    {
      "name": "static var userAuthenticationRequired: URLError.Code",
      "desc": "Authentication is required to access a resource."
    },
    {
      "name": "static var userCancelledAuthentication: URLError.Code",
      "desc": "An asynchronous request for authentication has been canceled by the user."
    },
    {
      "name": "static var zeroByteResource: URLError.Code",
      "desc": "A server reported that a URL has a non-zero content length, but terminated the network connection gracefully without sending any data."
    },
    {
      "name": "let rawValue: Int"
    },
    {
      "name": "typealias URLError.Code.RawValue",
      "desc": "The type of the error code’s underlying raw value."
    },
    {
      "name": "static func != (URLError.Code, URLError.Code) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are not equal."
    },
    {
      "name": "var hashValue: Int"
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of this value by feeding them into the given hasher."
    },
    {
      "name": "static func ~= (URLError.Code, Error) -> Bool"
    }
  ],
  "declaration": "struct URLError.Code",
  "conformsTo": [
    "Hashable",
    "RawRepresentable"
  ]
}