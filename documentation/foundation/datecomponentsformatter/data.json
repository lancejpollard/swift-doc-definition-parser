{
  "path": "/documentation/foundation/datecomponentsformatter",
  "type": "Class",
  "name": "DateComponentsFormatter",
  "desc": "A formatter that creates string representations of quantities of time.",
  "items": [
    {
      "name": "func string(from: DateComponents) -> String?",
      "desc": "Returns a formatted string based on the specified date component information."
    },
    {
      "name": "func string(for: Any?) -> String?",
      "desc": "Returns a formatted string based on the date information in the specified object."
    },
    {
      "name": "func string(from: Date, to: Date) -> String?",
      "desc": "Returns a formatted string based on the time difference between two dates."
    },
    {
      "name": "func string(from: TimeInterval) -> String?",
      "desc": "Returns a formatted string based on the specified number of seconds."
    },
    {
      "name": "class func localizedString(from: DateComponents, unitsStyle: DateComponentsFormatter.UnitsStyle) -> String?",
      "desc": "Returns a localized string based on the specified date components and style option."
    },
    {
      "name": "var allowedUnits: NSCalendar.Unit",
      "desc": "The bitmask of calendrical units such as day and month to include in the output string."
    },
    {
      "name": "var allowsFractionalUnits: Bool",
      "desc": "A Boolean indicating whether non-integer units may be used for values."
    },
    {
      "name": "var calendar: Calendar?",
      "desc": "The default calendar to use when formatting date components."
    },
    {
      "name": "var collapsesLargestUnit: Bool",
      "desc": "A Boolean value indicating whether to collapse the largest unit into smaller units when a certain threshold is met."
    },
    {
      "name": "var includesApproximationPhrase: Bool",
      "desc": "A Boolean value indicating whether the resulting phrase reflects an inexact time value."
    },
    {
      "name": "var includesTimeRemainingPhrase: Bool",
      "desc": "A Boolean value indicating whether output strings reflect the amount of time remaining."
    },
    {
      "name": "var maximumUnitCount: Int",
      "desc": "The maximum number of time units to include in the output string."
    },
    {
      "name": "var unitsStyle: DateComponentsFormatter.UnitsStyle",
      "desc": "The formatting style for unit names."
    },
    {
      "name": "var zeroFormattingBehavior: DateComponentsFormatter.ZeroFormattingBehavior",
      "desc": "The formatting style for units whose value is 0."
    },
    {
      "name": "enum DateComponentsFormatter.UnitsStyle",
      "desc": "Constants for specifying how to represent quantities of time."
    },
    {
      "name": "struct DateComponentsFormatter.ZeroFormattingBehavior",
      "desc": "Formatting constants for when values contain zeroes."
    },
    {
      "name": "var formattingContext: Formatter.Context"
    },
    {
      "name": "var referenceDate: Date?"
    },
    {
      "name": "func getObjectValue(AutoreleasingUnsafeMutablePointer<AnyObject?>?, for: String, errorDescription: AutoreleasingUnsafeMutablePointer<NSString?>?) -> Bool"
    }
  ],
  "declaration": "class DateComponentsFormatter : Formatter",
  "inheritsFrom": [
    "Formatter"
  ]
}