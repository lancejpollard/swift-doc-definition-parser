{
  "path": "/documentation/foundation/nsurlrequest",
  "type": "Class",
  "name": "NSURLRequest",
  "desc": "A representation of a URL load request that you use when you need reference semantics or other Foundation-specific behavior.",
  "items": [
    {
      "name": "init(url: URL)",
      "desc": "Creates a URL request for a specified URL."
    },
    {
      "name": "init(url: URL, cachePolicy: NSURLRequest.CachePolicy, timeoutInterval: TimeInterval)",
      "desc": "Creates a URL request with the specified URL, cache policy, and timeout values."
    },
    {
      "name": "var cachePolicy: NSURLRequest.CachePolicy",
      "desc": "The request’s cache policy."
    },
    {
      "name": "enum NSURLRequest.CachePolicy",
      "desc": "The constants used to specify interaction with the cached responses."
    },
    {
      "name": "var httpMethod: String?",
      "desc": "The HTTP request method."
    },
    {
      "name": "var url: URL?",
      "desc": "The URL being requested."
    },
    {
      "name": "var httpBody: Data?",
      "desc": "The request body."
    },
    {
      "name": "var httpBodyStream: InputStream?",
      "desc": "The request body as an input stream."
    },
    {
      "name": "var mainDocumentURL: URL?",
      "desc": "The main document URL associated with the request."
    },
    {
      "name": "var allHTTPHeaderFields: [String : String]?",
      "desc": "A dictionary containing all of the HTTP header fields for a request."
    },
    {
      "name": "func value(forHTTPHeaderField: String) -> String?",
      "desc": "Returns the value of the specified HTTP header field."
    },
    {
      "name": "var timeoutInterval: TimeInterval",
      "desc": "The request’s timeout interval, in seconds."
    },
    {
      "name": "var httpShouldHandleCookies: Bool",
      "desc": "A Boolean value that indicates whether the default cookie handling will be used for this request."
    },
    {
      "name": "var httpShouldUsePipelining: Bool",
      "desc": "A Boolean value that indicates whether the request should continue transmitting data before receiving a response from an earlier transmission."
    },
    {
      "name": "var allowsCellularAccess: Bool",
      "desc": "A Boolean value that indicates whether the request is allowed to use the cellular radio (if present)."
    },
    {
      "name": "var allowsConstrainedNetworkAccess: Bool",
      "desc": "A Boolean value that indicates whether connections may use the network when the user has specified Low Data Mode."
    },
    {
      "name": "var allowsExpensiveNetworkAccess: Bool",
      "desc": "A Boolean value that indicates whether connections may use a network interface that the system considers expensive."
    },
    {
      "name": "var networkServiceType: NSURLRequest.NetworkServiceType",
      "desc": "The network service type of the request."
    },
    {
      "name": "enum NSURLRequest.NetworkServiceType",
      "desc": "Constants that specify how a request uses network resources."
    },
    {
      "name": "class var supportsSecureCoding: Bool",
      "desc": "A Boolean value indicating whether the NSURLRequest implements the NSSecureCoding protocol."
    },
    {
      "name": "var attribution: NSURLRequest.Attribution",
      "desc": "The entity that initiates the network request."
    },
    {
      "name": "enum NSURLRequest.Attribution",
      "desc": "The entities that can make a network request."
    },
    {
      "name": "var assumesHTTP3Capable: Bool"
    }
  ],
  "declaration": "class NSURLRequest : NSObject",
  "inheritsFrom": [
    "NSObject"
  ],
  "conformsTo": [
    "NSCopying",
    "NSMutableCopying",
    "NSSecureCoding"
  ]
}