{
  "path": "/documentation/foundation/nsnumber",
  "type": "Class",
  "name": "NSNumber",
  "desc": "An object wrapper for primitive scalar numeric values.",
  "items": [
    {
      "name": "init(value: Bool)",
      "desc": "Returns an NSNumber object initialized to contain a given value, treated as a BOOL."
    },
    {
      "name": "init(value: CChar)",
      "desc": "Returns an NSNumber object initialized to contain a given value, treated as a signed char."
    },
    {
      "name": "init(value: Double)",
      "desc": "Returns an NSNumber object initialized to contain value, treated as a double."
    },
    {
      "name": "init(value: Float)",
      "desc": "Returns an NSNumber object initialized to contain a given value, treated as a float."
    },
    {
      "name": "init(value: Int32)",
      "desc": "Returns an NSNumber object initialized to contain a given value, treated as a signed int."
    },
    {
      "name": "init(value: Int)",
      "desc": "Returns an NSNumber object initialized to contain a given value, treated as an NSInteger."
    },
    {
      "name": "init(value: Int64)",
      "desc": "Returns an NSNumber object initialized to contain value, treated as a signed long long."
    },
    {
      "name": "init(value: Int16)",
      "desc": "Returns an NSNumber object initialized to contain a given value, treated as a signed short."
    },
    {
      "name": "init(value: UInt8)",
      "desc": "Returns an NSNumber object initialized to contain a given value, treated as an unsigned char."
    },
    {
      "name": "init(value: UInt32)",
      "desc": "Returns an NSNumber object initialized to contain a given value, treated as an unsigned int."
    },
    {
      "name": "init(value: UInt)",
      "desc": "Returns an NSNumber object initialized to contain a given value, treated as an NSUInteger."
    },
    {
      "name": "init(value: UInt64)",
      "desc": "Returns an NSNumber object initialized to contain a given value, treated as an unsigned long long."
    },
    {
      "name": "init(value: UInt16)",
      "desc": "Returns an NSNumber object initialized to contain a given value, treated as an unsigned short."
    },
    {
      "name": "var boolValue: Bool",
      "desc": "The number object's value expressed as a Boolean value."
    },
    {
      "name": "var int8Value: CChar",
      "desc": "The number object's value expressed as a char."
    },
    {
      "name": "var decimalValue: Decimal",
      "desc": "The number object's value expressed as an Decimal structure."
    },
    {
      "name": "var doubleValue: Double",
      "desc": "The number object's value expressed as a double, converted as necessary."
    },
    {
      "name": "var floatValue: Float",
      "desc": "The number object's value expressed as a float, converted as necessary."
    },
    {
      "name": "var int32Value: Int32",
      "desc": "The number object's value expressed as an int, converted as necessary."
    },
    {
      "name": "var intValue: Int",
      "desc": "The number object's value expressed as an NSInteger object, converted as necessary."
    },
    {
      "name": "var int64Value: Int64",
      "desc": "The number object’s value expressed as a long long, converted as necessary."
    },
    {
      "name": "var int16Value: Int16",
      "desc": "The number object's value expressed as a short, converted as necessary."
    },
    {
      "name": "var uint8Value: UInt8",
      "desc": "The number object's value expressed as an unsigned char, converted as necessary."
    },
    {
      "name": "var uintValue: UInt",
      "desc": "The number object's value expressed as an NSUInteger object, converted as necessary."
    },
    {
      "name": "var uint32Value: UInt32",
      "desc": "The number object's value expressed as an unsigned int, converted as necessary."
    },
    {
      "name": "var uint64Value: UInt64",
      "desc": "The number object’s value expressed as an unsigned long long, converted as necessary."
    },
    {
      "name": "var uint16Value: UInt16",
      "desc": "The number object's value expressed as an unsigned short, converted as necessary."
    },
    {
      "name": "func description(withLocale: Any?) -> String",
      "desc": "Returns a string that represents the contents of the number object for a given locale."
    },
    {
      "name": "var stringValue: String",
      "desc": "The number object's value expressed as a human-readable string."
    },
    {
      "name": "func compare(NSNumber) -> ComparisonResult",
      "desc": "Returns an NSComparisonResult value that indicates whether the number object’s value is greater than, equal to, or less than a given number."
    },
    {
      "name": "func isEqual(to: NSNumber) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the number object’s value and a given number are equal."
    },
    {
      "name": "func NSDecimalIsNotANumber(UnsafePointer<Decimal>) -> Bool",
      "desc": "Returns a Boolean that indicates whether a given decimal contains a valid number."
    },
    {
      "name": "typealias NSNumber.BooleanLiteralType"
    },
    {
      "name": "typealias NSNumber.FloatLiteralType"
    },
    {
      "name": "typealias NSNumber.IntegerLiteralType"
    },
    {
      "name": "init(booleanLiteral: Bool)",
      "desc": "Create an instance initialized to value."
    },
    {
      "name": "init?(coder: NSCoder)"
    },
    {
      "name": "init(floatLiteral: Double)",
      "desc": "Create an instance initialized to value."
    },
    {
      "name": "init(integerLiteral: Int)",
      "desc": "Create an instance initialized to value."
    }
  ],
  "declaration": "class NSNumber : NSValue",
  "inheritsFrom": [
    "NSValue"
  ],
  "conformsTo": [
    "CKRecordValueProtocol",
    "ExpressibleByBooleanLiteral",
    "ExpressibleByFloatLiteral",
    "ExpressibleByIntegerLiteral",
    "NSFetchRequestResult"
  ]
}