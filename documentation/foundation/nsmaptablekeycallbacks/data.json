{
  "path": "/documentation/foundation/nsmaptablekeycallbacks",
  "type": "Structure",
  "name": "NSMapTableKeyCallBacks",
  "desc": "The function pointers used to configure behavior of NSMapTable with respect to key elements within a map table.",
  "items": [
    {
      "name": "init()"
    },
    {
      "name": "init(hash: ((NSMapTable<AnyObject, AnyObject>, UnsafeRawPointer) -> Int)?, isEqual: ((NSMapTable<AnyObject, AnyObject>, UnsafeRawPointer, UnsafeRawPointer) -> ObjCBool)?, retain: ((NSMapTable<AnyObject, AnyObject>, UnsafeRawPointer) -> Void)?, release: ((NSMapTable<AnyObject, AnyObject>, UnsafeMutableRawPointer) -> Void)?, describe: ((NSMapTable<AnyObject, AnyObject>, UnsafeRawPointer) -> String?)?, notAKeyMarker: UnsafeRawPointer?)"
    },
    {
      "name": "var describe: ((NSMapTable<AnyObject, AnyObject>, UnsafeRawPointer) -> String?)?",
      "desc": "Points to the function which produces an autoreleased NSString * describing the given element. If NULL, then the map table produces a generic string description."
    },
    {
      "name": "var hash: ((NSMapTable<AnyObject, AnyObject>, UnsafeRawPointer) -> Int)?",
      "desc": "Points to the function which must produce hash code for key elements of the map table. If NULL, the pointer value is used as the hash code. Second parameter is the element for which hash code should be produced."
    },
    {
      "name": "var isEqual: ((NSMapTable<AnyObject, AnyObject>, UnsafeRawPointer, UnsafeRawPointer) -> ObjCBool)?",
      "desc": "Points to the function which compares second and third parameters. If NULL, then == is used for comparison."
    },
    {
      "name": "var notAKeyMarker: UnsafeRawPointer?",
      "desc": "No key put in map table can be this value. An exception is raised if attempt is made to use this value as a key"
    },
    {
      "name": "var release: ((NSMapTable<AnyObject, AnyObject>, UnsafeMutableRawPointer) -> Void)?",
      "desc": "Points to the function which decrements a reference count for the given element, and if the reference count becomes zero, frees the given element. If NULL, then nothing is done for reference counting or releasing."
    },
    {
      "name": "var retain: ((NSMapTable<AnyObject, AnyObject>, UnsafeRawPointer) -> Void)?",
      "desc": "Points to the function which increments a reference count for the given element. If NULL, then nothing is done for reference counting."
    }
  ],
  "declaration": "struct NSMapTableKeyCallBacks"
}