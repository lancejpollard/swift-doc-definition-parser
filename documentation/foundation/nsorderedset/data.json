{
  "path": "/documentation/foundation/nsorderedset",
  "type": "Class",
  "name": "NSOrderedSet",
  "desc": "A static, ordered collection of unique objects.",
  "items": [
    {
      "name": "init(array: [Any])",
      "desc": "Initializes a newly allocated set with the objects that are contained in a given array."
    },
    {
      "name": "init(array: [Any], copyItems: Bool)",
      "desc": "Initializes a newly allocated set with the objects that are contained in a given array, optionally copying the items."
    },
    {
      "name": "init(array: [Any], range: NSRange, copyItems: Bool)",
      "desc": "Initializes a newly allocated set with the objects that are contained in the specified range of an array, optionally copying the items."
    },
    {
      "name": "init(object: Any)",
      "desc": "Initializes a new ordered set with the object."
    },
    {
      "name": "init(objects: UnsafePointer<AnyObject>?, count: Int)",
      "desc": "Initializes a newly allocated set with a specified number of objects from a given C array of objects."
    },
    {
      "name": "init(orderedSet: NSOrderedSet)",
      "desc": "Initializes a new ordered set with the contents of a set."
    },
    {
      "name": "init(orderedSet: NSOrderedSet, copyItems: Bool)",
      "desc": "Initializes a new ordered set with the contents of a set, optionally copying the items."
    },
    {
      "name": "init(orderedSet: NSOrderedSet, range: NSRange, copyItems: Bool)",
      "desc": "Initializes a new ordered set with the contents of an ordered set, optionally copying the items."
    },
    {
      "name": "init(set: Set<AnyHashable>)",
      "desc": "Initializes a new ordered set with the contents of a set."
    },
    {
      "name": "init(set: Set<AnyHashable>, copyItems: Bool)",
      "desc": "Initializes a new ordered set with the contents of a set, optionally copying the objects in the set."
    },
    {
      "name": "init()",
      "desc": "Initializes a newly allocated ordered set."
    },
    {
      "name": "var count: Int",
      "desc": "The number of members in the set."
    },
    {
      "name": "func contains(Any) -> Bool",
      "desc": "Returns a Boolean value that indicates whether a given object is present in the ordered set."
    },
    {
      "name": "func enumerateObjects(at: IndexSet, options: NSEnumerationOptions, using: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Void)",
      "desc": "Executes a given block using the objects in the ordered set at the specified indexes."
    },
    {
      "name": "func enumerateObjects((Any, Int, UnsafeMutablePointer<ObjCBool>) -> Void)",
      "desc": "Executes a given block using each object in the ordered set."
    },
    {
      "name": "func enumerateObjects(options: NSEnumerationOptions, using: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Void)",
      "desc": "Executes a given block using each object in the set, using the specified enumeration options."
    },
    {
      "name": "var firstObject: Any?",
      "desc": "The first object in the ordered set."
    },
    {
      "name": "var lastObject: Any?",
      "desc": "The last object in the ordered set."
    },
    {
      "name": "func object(at: Int) -> Any",
      "desc": "Returns the object at the specified index of the set."
    },
    {
      "name": "subscript(Int) -> Any",
      "desc": "Returns the object at the specified index of the set."
    },
    {
      "name": "func objects(at: IndexSet) -> [Any]",
      "desc": "Returns the objects in the ordered set at the specified indexes."
    },
    {
      "name": "func index(of: Any) -> Int",
      "desc": "Returns the index of the specified object."
    },
    {
      "name": "func index(of: Any, inSortedRange: NSRange, options: NSBinarySearchingOptions, usingComparator: (Any, Any) -> ComparisonResult) -> Int",
      "desc": "Returns the index, within a specified range, of an object compared with elements in the ordered set using a given NSComparator block."
    },
    {
      "name": "func index(ofObjectAt: IndexSet, options: NSEnumerationOptions, passingTest: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Bool) -> Int",
      "desc": "Returns the index, from a given set of indexes, of the object in the ordered set that passes a test in a given block for a given set of enumeration options."
    },
    {
      "name": "func index(ofObjectPassingTest: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Bool) -> Int",
      "desc": "Returns the index of the object in the ordered set that passes a test in a given block."
    },
    {
      "name": "func index(NSEnumerationOptions, ofObjectPassingTest: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Bool) -> Int",
      "desc": "Returns the index of an object in the ordered set that passes a test in a given block for a given set of enumeration options."
    },
    {
      "name": "func indexes(ofObjectsAt: IndexSet, options: NSEnumerationOptions, passingTest: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Bool) -> IndexSet",
      "desc": "Returns the index, from a given set of indexes, of the object in the ordered set that passes a test in a given block for a given set of enumeration options."
    },
    {
      "name": "func indexes(ofObjectsPassingTest: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Bool) -> IndexSet",
      "desc": "Returns the index of the object in the ordered set that passes a test in a given block."
    },
    {
      "name": "func indexes(options: NSEnumerationOptions, ofObjectsPassingTest: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Bool) -> IndexSet",
      "desc": "Returns the index of an object in the ordered set that passes a test in a given block for a given set of enumeration options."
    },
    {
      "name": "func objectEnumerator() -> NSEnumerator",
      "desc": "Returns an enumerator object that lets you access each object in the ordered set."
    },
    {
      "name": "func reverseObjectEnumerator() -> NSEnumerator",
      "desc": "Returns an enumerator object that lets you access each object in the ordered set."
    },
    {
      "name": "var reversed: NSOrderedSet",
      "desc": "An ordered set in the reverse order."
    },
    {
      "name": "func setValue(Any?, forKey: String)",
      "desc": "Invokes setValue:forKey: on each of the receiver's members using the specified value and key"
    },
    {
      "name": "func value(forKey: String) -> Any",
      "desc": "Returns an ordered set containing the results of invoking valueForKey: using key on each of the ordered set’s objects."
    },
    {
      "name": "func addObserver(NSObject, forKeyPath: String, options: NSKeyValueObservingOptions, context: UnsafeMutableRawPointer?)",
      "desc": "Raises an exception."
    },
    {
      "name": "func removeObserver(NSObject, forKeyPath: String)",
      "desc": "Raises an exception."
    },
    {
      "name": "func removeObserver(NSObject, forKeyPath: String, context: UnsafeMutableRawPointer?)",
      "desc": "Raises an exception."
    },
    {
      "name": "func isEqual(to: NSOrderedSet) -> Bool",
      "desc": "Compares the receiving ordered set to another ordered set."
    },
    {
      "name": "func intersects(NSOrderedSet) -> Bool",
      "desc": "Returns a Boolean value that indicates whether at least one object in the receiving ordered set is also present in another given ordered set."
    },
    {
      "name": "func intersectsSet(Set<AnyHashable>) -> Bool",
      "desc": "Returns a Boolean value that indicates whether at least one object in the receiving ordered set is also present in another given set."
    },
    {
      "name": "func isSubset(of: NSOrderedSet) -> Bool",
      "desc": "Returns a Boolean value that indicates whether every object in the receiving ordered set is also present in another given ordered set."
    },
    {
      "name": "func isSubset(of: Set<AnyHashable>) -> Bool",
      "desc": "Returns a Boolean value that indicates whether every object in the receiving ordered set is also present in another given set."
    },
    {
      "name": "func sortedArray(using: [NSSortDescriptor]) -> [Any]",
      "desc": "Returns an array of the ordered set’s elements sorted as specified by a given array of sort descriptors."
    },
    {
      "name": "func sortedArray(comparator: (Any, Any) -> ComparisonResult) -> [Any]",
      "desc": "Returns an array that lists the receiving ordered set’s elements in ascending order, as determined by the comparison method specified by a given NSComparator block"
    },
    {
      "name": "func sortedArray(options: NSSortOptions, usingComparator: (Any, Any) -> ComparisonResult) -> [Any]",
      "desc": "Returns an array that lists the receiving ordered set’s elements in ascending order, as determined by the comparison method specified by a given NSComparator block."
    },
    {
      "name": "func filtered(using: NSPredicate) -> NSOrderedSet",
      "desc": "Evaluates a given predicate against each object in the receiving ordered set and returns a new ordered set containing the objects for which the predicate returns true."
    },
    {
      "name": "var description: String",
      "desc": "A string that represents the contents of the ordered set, formatted as a property list."
    },
    {
      "name": "func description(withLocale: Any?) -> String",
      "desc": "Returns a string that represents the contents of the ordered set, formatted as a property list."
    },
    {
      "name": "func description(withLocale: Any?, indent: Int) -> String",
      "desc": "Returns a string that represents the contents of the ordered set, formatted as a property list."
    },
    {
      "name": "var array: [Any]",
      "desc": "A representation of the ordered set as an array."
    },
    {
      "name": "var set: Set<AnyHashable>",
      "desc": "A representation of the set containing the contents of the ordered set."
    },
    {
      "name": "class NSOrderedCollectionDifference",
      "desc": "An object representing the difference between two ordered collections."
    },
    {
      "name": "struct NSOrderedCollectionDifferenceCalculationOptions",
      "desc": "Constants that specify the options to use when creating an ordered collection difference."
    },
    {
      "name": "typealias NSOrderedSet.ArrayLiteralElement"
    },
    {
      "name": "typealias NSOrderedSet.Element"
    },
    {
      "name": "typealias NSOrderedSet.Iterator"
    },
    {
      "name": "init(arrayLiteral: Any...)"
    },
    {
      "name": "init?(coder: NSCoder)"
    },
    {
      "name": "init(objects: Any...)"
    },
    {
      "name": "init(objects: UnsafePointer<AnyObject>, count: Int)",
      "desc": "Creates and returns a set containing a specified number of objects from a given C array of objects."
    },
    {
      "name": "var underestimatedCount: Int"
    },
    {
      "name": "func makeIterator() -> NSFastEnumerationIterator",
      "desc": "Return an iterator over the elements of this sequence."
    }
  ],
  "declaration": "class NSOrderedSet : NSObject",
  "inheritsFrom": [
    "NSObject"
  ],
  "conformsTo": [
    "ExpressibleByArrayLiteral",
    "NSCopying",
    "NSFastEnumeration",
    "NSMutableCopying",
    "NSSecureCoding",
    "Sequence"
  ]
}