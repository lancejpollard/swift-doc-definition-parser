{
  "path": "/documentation/foundation/nslinguistictagger",
  "type": "Class",
  "name": "NSLinguisticTagger",
  "desc": "Analyze natural language text to tag part of speech and lexical class, identify names, perform lemmatization, and determine the language and script.DeprecatedUse the Natural Language framework instead.",
  "items": [
    {
      "name": "init(tagSchemes: [NSLinguisticTagScheme], options: Int)",
      "desc": "Creates a linguistic tagger instance using the specified tag schemes and options."
    },
    {
      "name": "var string: String?",
      "desc": "The string being analyzed by the linguistic tagger."
    },
    {
      "name": "class func availableTagSchemes(for: NSLinguisticTaggerUnit, language: String) -> [NSLinguisticTagScheme]",
      "desc": "Returns the tag schemes available for a particular unit and language on the current device."
    },
    {
      "name": "class func availableTagSchemes(forLanguage: String) -> [NSLinguisticTagScheme]",
      "desc": "Returns the tag schemes available for a particular language on the current device."
    },
    {
      "name": "var tagSchemes: [NSLinguisticTagScheme]",
      "desc": "Returns the tag schemes configured for this linguistic tagger. For possible values, see NSLinguisticTagScheme."
    },
    {
      "name": "class func dominantLanguage(for: String) -> String?",
      "desc": "Returns the dominant language for the specified string."
    },
    {
      "name": "var dominantLanguage: String?",
      "desc": "Returns the dominant language of the string set for the linguistic tagger."
    },
    {
      "name": "func orthography(at: Int, effectiveRange: NSRangePointer?) -> NSOrthography?",
      "desc": "Returns the orthography at the index and also returns the effective range."
    },
    {
      "name": "func setOrthography(NSOrthography?, range: NSRange)",
      "desc": "Sets the orthography for the specified range."
    },
    {
      "name": "func enumerateTags(in: NSRange, unit: NSLinguisticTaggerUnit, scheme: NSLinguisticTagScheme, options: NSLinguisticTagger.Options, using: (NSLinguisticTag?, NSRange, UnsafeMutablePointer<ObjCBool>) -> Void)",
      "desc": "Enumerates over a given range of the string for a particular unit and calls the specified block for each tag."
    },
    {
      "name": "func enumerateTags(in: NSRange, scheme: NSLinguisticTagScheme, options: NSLinguisticTagger.Options, using: (NSLinguisticTag?, NSRange, NSRange, UnsafeMutablePointer<ObjCBool>) -> Void)",
      "desc": "Enumerates over a given range of the string and calls the specified block for each tag."
    },
    {
      "name": "class func enumerateTags(for: String, range: NSRange, unit: NSLinguisticTaggerUnit, scheme: NSLinguisticTagScheme, options: NSLinguisticTagger.Options, orthography: NSOrthography?, using: (NSLinguisticTag?, NSRange, UnsafeMutablePointer<ObjCBool>) -> Void)",
      "desc": "Enumerates over a given string and calls the specified block for each tag."
    },
    {
      "name": "struct NSLinguisticTagger.Options",
      "desc": "Constants for linguistic tagger enumeration specifying which tokens to omit and whether to join names."
    },
    {
      "name": "func tag(at: Int, unit: NSLinguisticTaggerUnit, scheme: NSLinguisticTagScheme, tokenRange: NSRangePointer?) -> NSLinguisticTag?",
      "desc": "Returns a tag for a single scheme, for a given linguistic unit, at the specified character position."
    },
    {
      "name": "func tag(at: Int, scheme: NSLinguisticTagScheme, tokenRange: NSRangePointer?, sentenceRange: NSRangePointer?) -> NSLinguisticTag?",
      "desc": "Returns a tag for a single scheme at the specified character position."
    },
    {
      "name": "class func tag(for: String, at: Int, unit: NSLinguisticTaggerUnit, scheme: NSLinguisticTagScheme, orthography: NSOrthography?, tokenRange: NSRangePointer?) -> NSLinguisticTag?",
      "desc": "Returns a tag for a single scheme, for a given linguistic unit, at the specified character position in a string."
    },
    {
      "name": "func tags(in: NSRange, unit: NSLinguisticTaggerUnit, scheme: NSLinguisticTagScheme, options: NSLinguisticTagger.Options, tokenRanges: AutoreleasingUnsafeMutablePointer<NSArray?>?) -> [NSLinguisticTag]",
      "desc": "Returns an array of linguistic tags and token ranges for a given string range and linguistic unit."
    },
    {
      "name": "func tags(in: NSRange, scheme: String, options: NSLinguisticTagger.Options, tokenRanges: AutoreleasingUnsafeMutablePointer<NSArray?>?) -> [String]",
      "desc": "Returns an array of linguistic tags and token ranges for a given string range."
    },
    {
      "name": "class func tags(for: String, range: NSRange, unit: NSLinguisticTaggerUnit, scheme: NSLinguisticTagScheme, options: NSLinguisticTagger.Options, orthography: NSOrthography?, tokenRanges: AutoreleasingUnsafeMutablePointer<NSArray?>?) -> [NSLinguisticTag]",
      "desc": "Returns an array of linguistic tags and token ranges for a given string and linguistic unit."
    },
    {
      "name": "func tokenRange(at: Int, unit: NSLinguisticTaggerUnit) -> NSRange",
      "desc": "Returns the range of the linguistic unit containing the specified character index."
    },
    {
      "name": "func sentenceRange(for: NSRange) -> NSRange",
      "desc": "Returns the range of a sentence containing the specified range."
    },
    {
      "name": "func possibleTags(at: Int, scheme: String, tokenRange: NSRangePointer?, sentenceRange: NSRangePointer?, scores: AutoreleasingUnsafeMutablePointer<NSArray?>?) -> [String]?",
      "desc": "Returns an array of possible tags for the given scheme at the specified range, supplying matching scores."
    },
    {
      "name": "func stringEdited(in: NSRange, changeInLength: Int)",
      "desc": "Notifies the linguistic tagger that the string (if mutable) has changed as specified by the parameters."
    },
    {
      "name": "struct NSLinguisticTagScheme",
      "desc": "Constants for the tag schemes specified when initializing a linguistic tagger."
    },
    {
      "name": "enum NSLinguisticTaggerUnit",
      "desc": "Constants representing linguistic units."
    },
    {
      "name": "struct NSLinguisticTag",
      "desc": "A token, lexical class, name, lemma, language, or script returned by a linguistic tagger for natural language text."
    }
  ],
  "declaration": "class NSLinguisticTagger : NSObject",
  "inheritsFrom": [
    "NSObject"
  ]
}