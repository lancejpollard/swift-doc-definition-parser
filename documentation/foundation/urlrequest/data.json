{
  "path": "/documentation/foundation/urlrequest",
  "type": "Structure",
  "name": "URLRequest",
  "desc": "A URL load request that is independent of protocol or URL scheme.",
  "items": [
    {
      "name": "init(url: URL, cachePolicy: URLRequest.CachePolicy, timeoutInterval: TimeInterval)",
      "desc": "Creates and initializes a URL request with the given URL, cache policy, and timeout interval."
    },
    {
      "name": "var cachePolicy: URLRequest.CachePolicy",
      "desc": "The requestâ€™s cache policy."
    },
    {
      "name": "typealias URLRequest.CachePolicy",
      "desc": "An alias for the cache policy."
    },
    {
      "name": "enum NSURLRequest.CachePolicy",
      "desc": "The constants used to specify interaction with the cached responses."
    },
    {
      "name": "var httpMethod: String?",
      "desc": "The HTTP request method."
    },
    {
      "name": "var url: URL?",
      "desc": "The URL of the request."
    },
    {
      "name": "var httpBody: Data?",
      "desc": "The data sent as the message body of a request, such as for an HTTP POST request."
    },
    {
      "name": "var httpBodyStream: InputStream?",
      "desc": "The stream used to deliver the HTTP body."
    },
    {
      "name": "var mainDocumentURL: URL?",
      "desc": "The main document URL associated with this request."
    },
    {
      "name": "var allHTTPHeaderFields: [String : String]?",
      "desc": "A dictionary containing all of the HTTP header fields for a request."
    },
    {
      "name": "func addValue(String, forHTTPHeaderField: String)",
      "desc": "Adds a value to the header field."
    },
    {
      "name": "func setValue(String?, forHTTPHeaderField: String)",
      "desc": "Sets a value for the header field."
    },
    {
      "name": "func value(forHTTPHeaderField: String) -> String?",
      "desc": "Retrieves a header value."
    },
    {
      "name": "var timeoutInterval: TimeInterval",
      "desc": "The timeout interval of the request."
    },
    {
      "name": "var httpShouldHandleCookies: Bool",
      "desc": "A Boolean value indicating whether cookies will be sent with and set for this request."
    },
    {
      "name": "var httpShouldUsePipelining: Bool",
      "desc": "A Boolean value indicating whether the request should transmit before the previous response is received."
    },
    {
      "name": "var allowsCellularAccess: Bool",
      "desc": "A Boolean value indicating whether the request is allowed to use the built-in cellular radios to satisfy the request."
    },
    {
      "name": "var allowsConstrainedNetworkAccess: Bool",
      "desc": "A Boolean value that indicates whether the request may use the network when the user has specified Low Data Mode."
    },
    {
      "name": "var allowsExpensiveNetworkAccess: Bool",
      "desc": "A Boolean value that indicates whether connections may use a network interface that the system considers expensive."
    },
    {
      "name": "var networkServiceType: URLRequest.NetworkServiceType",
      "desc": "The service type associated with this request."
    },
    {
      "name": "typealias URLRequest.NetworkServiceType",
      "desc": "An alias for the network service type."
    },
    {
      "name": "enum NSURLRequest.NetworkServiceType",
      "desc": "Constants that specify how a request uses network resources."
    },
    {
      "name": "var attribution: URLRequest.Attribution",
      "desc": "The entity that initiates the network request."
    },
    {
      "name": "typealias URLRequest.Attribution",
      "desc": "A type that indicates the entities that can make a network request."
    },
    {
      "name": "static func != (URLRequest, URLRequest) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are not equal."
    },
    {
      "name": "static func == (URLRequest, URLRequest) -> Bool",
      "desc": "Indicates whether two URL requests are the same."
    },
    {
      "name": "var description: String",
      "desc": "A textual description of the request."
    },
    {
      "name": "var debugDescription: String",
      "desc": "A textual description of the request suitable for debugging."
    },
    {
      "name": "var customMirror: Mirror",
      "desc": "A mirror that reflects the request."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The computed hash value for the request."
    },
    {
      "name": "class NSURLRequest",
      "desc": "A representation of a URL load request that you use when you need reference semantics or other Foundation-specific behavior."
    },
    {
      "name": "class NSMutableURLRequest",
      "desc": "A mutable URL load request that bridges to NSURLRequest and you use when you need reference semantics or other Foundation-specific behavior."
    },
    {
      "name": "typealias URLRequest.ReferenceType",
      "desc": "An alias for this value type's equivalent reference type."
    },
    {
      "name": "var assumesHTTP3Capable: Bool"
    },
    {
      "name": "func hash(into: inout Hasher)"
    }
  ],
  "declaration": "struct URLRequest",
  "conformsTo": [
    "CustomDebugStringConvertible",
    "CustomReflectable",
    "CustomStringConvertible",
    "Equatable",
    "Hashable",
    "ReferenceConvertible"
  ]
}