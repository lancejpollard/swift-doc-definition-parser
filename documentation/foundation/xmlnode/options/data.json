{
  "path": "/documentation/foundation/xmlnode/options",
  "type": "Structure",
  "name": "XMLNode.Options",
  "desc": "These constants are input and output options for all NSXMLNode objects (unless otherwise indicated), including XMLDocument objects. You can specify these options in the NSXMLNode methods init(kind:options:) and xmlString(options:).",
  "items": [
    {
      "name": "static var documentIncludeContentTypeDeclaration: XMLNode.Options",
      "desc": "Includes a content type declaration for HTML or XHTML in the output of the document."
    },
    {
      "name": "static var documentTidyHTML: XMLNode.Options",
      "desc": "Formats HTML into valid XHTML during processing of the document."
    },
    {
      "name": "static var documentTidyXML: XMLNode.Options",
      "desc": "Changes malformed XML into valid XML during processing of the document."
    },
    {
      "name": "static var documentValidate: XMLNode.Options",
      "desc": "Validates this document against its DTD (internal or external) or XML Schema."
    },
    {
      "name": "static var documentXInclude: XMLNode.Options",
      "desc": "Replaces all XInclude nodes in the document with the nodes referred to."
    },
    {
      "name": "static var nodeCompactEmptyElement: XMLNode.Options",
      "desc": "Requests that an element should be contracted when empty; for example, <flag/>."
    },
    {
      "name": "static var nodeExpandEmptyElement: XMLNode.Options",
      "desc": "Requests that an element should be expanded when empty; for example, <flag></flag>. This is the default."
    },
    {
      "name": "static var nodeIsCDATA: XMLNode.Options",
      "desc": "Specifies that a text node contains and is written out as a CDATA section."
    },
    {
      "name": "static var nodeLoadExternalEntitiesAlways: XMLNode.Options",
      "desc": "Requests that external entities are always loaded."
    },
    {
      "name": "static var nodeLoadExternalEntitiesNever: XMLNode.Options",
      "desc": "Requests that external entities are never loaded."
    },
    {
      "name": "static var nodeLoadExternalEntitiesSameOriginOnly: XMLNode.Options",
      "desc": "Requests that external entities are always loaded and only applies when a URL has been provided."
    },
    {
      "name": "static var nodeNeverEscapeContents: XMLNode.Options"
    },
    {
      "name": "static var nodePreserveAll: XMLNode.Options"
    },
    {
      "name": "static var nodePreserveAttributeOrder: XMLNode.Options",
      "desc": "Requests that NSXMLNode preserve the order of attributes as in the source XML."
    },
    {
      "name": "static var nodePreserveCDATA: XMLNode.Options",
      "desc": "Requests that NSXMLNode preserve CDATA blocks where defined in the input XML."
    },
    {
      "name": "static var nodePreserveCharacterReferences: XMLNode.Options",
      "desc": "Specifies that character references (&#nnn;) should not be resolved for XML output of this node."
    },
    {
      "name": "static var nodePreserveDTD: XMLNode.Options",
      "desc": "Specifies that declarations in a DTD should be preserved until it the DTD is modified. For example, parameter entities are by default expanded; with this option, they are written out as they originally occur in the DTD."
    },
    {
      "name": "static var nodePreserveEmptyElements: XMLNode.Options",
      "desc": "Specifies that empty elements in the input XML be preserved in their contracted or expanded form."
    },
    {
      "name": "static var nodePreserveEntities: XMLNode.Options",
      "desc": "Specifies that entities (&xyz;) should not be resolved for XML output of this node."
    },
    {
      "name": "static var nodePreserveNamespaceOrder: XMLNode.Options",
      "desc": "Requests NSXML to preserve the order of namespace URI definitions as in the source XML."
    },
    {
      "name": "static var nodePreservePrefixes: XMLNode.Options",
      "desc": "Requests NSXMLNode not to choose prefixes based on the closest namespace URI definition."
    },
    {
      "name": "static var nodePreserveQuotes: XMLNode.Options",
      "desc": "Specifies that the quoting style used in the input XML (single or double quotes) be preserved."
    },
    {
      "name": "static var nodePreserveWhitespace: XMLNode.Options",
      "desc": "Requests NSXMLNode to preserve whitespace characters (such as tabs and carriage returns) in the XML source that are not part of node content."
    },
    {
      "name": "static var nodePrettyPrint: XMLNode.Options",
      "desc": "Print this node with extra space for readability. (Output)"
    },
    {
      "name": "static var nodePromoteSignificantWhitespace: XMLNode.Options"
    },
    {
      "name": "static var nodeUseDoubleQuotes: XMLNode.Options",
      "desc": "Requests that NSXML use double quotes for the value of an attribute or namespace node. This is the default."
    },
    {
      "name": "static var nodeUseSingleQuotes: XMLNode.Options",
      "desc": "Requests that NSXML use single quotes for the value of an attribute or namespace node."
    },
    {
      "name": "init(rawValue: UInt)"
    }
  ],
  "declaration": "struct Options, @unchecked Sendable",
  "conformsTo": [
    "OptionSet",
    "Sendable"
  ]
}