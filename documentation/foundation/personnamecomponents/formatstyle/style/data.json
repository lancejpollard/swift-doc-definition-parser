{
  "path": "/documentation/foundation/personnamecomponents/formatstyle/style",
  "type": "Enumeration",
  "name": "PersonNameComponents.FormatStyle.Style",
  "desc": "The type that represents the style of the formatted result.",
  "items": [
    {
      "name": "init(from: Decoder)",
      "desc": "Creates a new instance by decoding from the given decoder, when the type’s RawValue is Int."
    },
    {
      "name": "init?(rawValue: Int)",
      "desc": "Creates a new instance with the specified raw value."
    },
    {
      "name": "case abbreviated",
      "desc": "Specifies an abbreviated person name components style."
    },
    {
      "name": "case long",
      "desc": "Specifies a long person name components style."
    },
    {
      "name": "case medium",
      "desc": "Specifies a medium person name components style."
    },
    {
      "name": "case short",
      "desc": "Specifies a short person name components style."
    },
    {
      "name": "typealias PersonNameComponents.FormatStyle.Style.RawValue",
      "desc": "The raw type that represents values for all cases."
    },
    {
      "name": "var rawValue: Int",
      "desc": "The corresponding value of the raw type."
    },
    {
      "name": "func encode(to: Encoder)",
      "desc": "Encodes this value into the given encoder, when the type’s RawValue is Int."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value of the enumeration."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of this value by feeding them into the given hasher."
    },
    {
      "name": "static func != (PersonNameComponents.FormatStyle.Style, PersonNameComponents.FormatStyle.Style) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two values are not equal."
    }
  ],
  "declaration": "enum PersonNameComponents.FormatStyle.Style : Int, Codable, Hashable",
  "conformsTo": [
    "Decodable",
    "Encodable",
    "Hashable"
  ]
}