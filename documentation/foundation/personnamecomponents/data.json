{
  "path": "/documentation/foundation/personnamecomponents",
  "type": "Structure",
  "name": "PersonNameComponents",
  "desc": "The separate parts of a person's name, allowing locale-aware formatting.",
  "items": [
    {
      "name": "init()",
      "desc": "Initializes a new person name components structure."
    },
    {
      "name": "init(from: Decoder)",
      "desc": "Creates a new instance by decoding from the given decoder."
    },
    {
      "name": "var namePrefix: String?",
      "desc": "The portion of a name’s full form of address that precedes the name itself."
    },
    {
      "name": "var givenName: String?",
      "desc": "Name bestowed upon an individual to differentiate them from other members of a group that share a family name."
    },
    {
      "name": "var middleName: String?",
      "desc": "Secondary name bestowed upon an individual to differentiate them from others that have the same given name."
    },
    {
      "name": "var familyName: String?",
      "desc": "Name bestowed upon an individual to denote membership in a group or family."
    },
    {
      "name": "var nameSuffix: String?",
      "desc": "The portion of a name’s full form of address that follows the name itself."
    },
    {
      "name": "var nickname: String?",
      "desc": "Name substituted for the purposes of familiarity."
    },
    {
      "name": "var phoneticRepresentation: PersonNameComponents?",
      "desc": "The phonetic representation name components of the receiver."
    },
    {
      "name": "func formatted() -> String",
      "desc": "Generates a locale-aware string representation of an instance of person name components using the default format style."
    },
    {
      "name": "func formatted<S>(S) -> S.FormatOutput",
      "desc": "Generates a locale-aware string representation of an instance of person name components using the provided format style."
    },
    {
      "name": "struct PersonNameComponents.FormatStyle",
      "desc": "A type used to format a person’s name with a style appropriate for the given locale."
    },
    {
      "name": "var description: String",
      "desc": "A textual description of the structure."
    },
    {
      "name": "var debugDescription: String",
      "desc": "A textual description of the structure suitable for debugging."
    },
    {
      "name": "var customMirror: Mirror",
      "desc": "A mirror that reflects the date interval."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The computed hash value for the date interval."
    },
    {
      "name": "static func != (PersonNameComponents, PersonNameComponents) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two values are not equal."
    },
    {
      "name": "static func == (PersonNameComponents, PersonNameComponents) -> Bool",
      "desc": "Returns a Boolean value that Indicates whether two values are equal."
    },
    {
      "name": "func encode(to: Encoder)",
      "desc": "Encodes this value into the given encoder."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of this value by feeding them into the given hasher."
    },
    {
      "name": "class NSPersonNameComponents",
      "desc": "An object that manages the separate parts of a person's name, for use when you need reference semantics or other Foundation-specific behavior."
    },
    {
      "name": "typealias PersonNameComponents.ReferenceType",
      "desc": "An alias for this value type's equivalent reference type."
    },
    {
      "name": "init(namePrefix: String?, givenName: String?, middleName: String?, familyName: String?, nameSuffix: String?, nickname: String?, phoneticRepresentation: PersonNameComponents?)"
    },
    {
      "name": "struct PersonNameComponents.AttributedStyle"
    },
    {
      "name": "struct PersonNameComponents.ParseStrategy"
    }
  ],
  "declaration": "struct PersonNameComponents",
  "conformsTo": [
    "CustomDebugStringConvertible",
    "CustomReflectable",
    "CustomStringConvertible",
    "Decodable",
    "Encodable",
    "Equatable",
    "Hashable",
    "ReferenceConvertible"
  ]
}