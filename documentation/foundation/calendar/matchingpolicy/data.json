{
  "path": "/documentation/foundation/calendar/matchingpolicy",
  "type": "Enumeration",
  "name": "Calendar.MatchingPolicy",
  "desc": "A hint to the search algorithm to control the method used for searching for dates.",
  "items": [
    {
      "name": "case nextTime",
      "desc": "If there is no matching time before the end of the next instance of the next higher component to the highest specified component in the DateComponents argument, the algorithm will return the next existing time which exists."
    },
    {
      "name": "case nextTimePreservingSmallerComponents",
      "desc": "If specified, and there is no matching time before the end of the next instance of the next higher component to the highest specified component in the DateComponents argument, the method returns the next existing value of the missing component and preserves the lower components’ values (for example, no 2:37am results in 3:37am, if that exists)."
    },
    {
      "name": "case previousTimePreservingSmallerComponents",
      "desc": "If there is no matching time before the end of the next instance of the next higher component to the highest specified component in the DateComponents argument, the algorithm will return the previous existing value of the missing component and preserves the lower components’ values."
    },
    {
      "name": "case strict",
      "desc": "If specified, the algorithm travels as far forward or backward as necessary looking for a match."
    },
    {
      "name": "var hashValue: Int"
    },
    {
      "name": "func hash(into: inout Hasher)"
    },
    {
      "name": "static func != (Calendar.MatchingPolicy, Calendar.MatchingPolicy) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are not equal."
    },
    {
      "name": "static func == (Calendar.MatchingPolicy, Calendar.MatchingPolicy) -> Bool"
    }
  ],
  "declaration": "enum Calendar.MatchingPolicy"
}