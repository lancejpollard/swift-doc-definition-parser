{
  "path": "/documentation/foundation/xmldocument",
  "type": "Class",
  "name": "XMLDocument",
  "desc": "An XML document as internalized into a logical tree structure.",
  "items": [
    {
      "name": "init(contentsOf: URL, options: XMLNode.Options)",
      "desc": "Initializes and returns an NSXMLDocument object created from the XML or HTML contents of a URL-referenced source"
    },
    {
      "name": "init(data: Data, options: XMLNode.Options)",
      "desc": "Initializes and returns an NSXMLDocument object created from an NSData object."
    },
    {
      "name": "init(rootElement: XMLElement?)",
      "desc": "Returns an NSXMLDocument object initialized with a single child, the root element."
    },
    {
      "name": "init(xmlString: String, options: XMLNode.Options)",
      "desc": "Initializes and returns an NSXMLDocument object created from a string containing XML markup text."
    },
    {
      "name": "class func replacementClass(for: AnyClass) -> AnyClass",
      "desc": "Overridden by subclasses to substitute a custom class for an NSXML class that the parser uses to create node instances."
    },
    {
      "name": "var characterEncoding: String?",
      "desc": "Sets the character encoding of the receiver to encoding,"
    },
    {
      "name": "var documentContentKind: XMLDocument.ContentKind",
      "desc": "Sets the kind of output content for the receiver."
    },
    {
      "name": "var dtd: XMLDTD?",
      "desc": "Returns an XMLDTD object representing the internal DTD associated with the receiver."
    },
    {
      "name": "var isStandalone: Bool",
      "desc": "Sets a Boolean value that specifies whether the receiver represents a standalone XML document."
    },
    {
      "name": "var mimeType: String?",
      "desc": "Returns the MIME type for the receiver."
    },
    {
      "name": "var version: String?",
      "desc": "Sets the version of the receiver’s XML."
    },
    {
      "name": "func rootElement() -> XMLElement?",
      "desc": "Returns the root element of the receiver."
    },
    {
      "name": "func setRootElement(XMLElement)",
      "desc": "Set the root element of the receiver."
    },
    {
      "name": "func addChild(XMLNode)",
      "desc": "Adds a child node after the last of the receiver’s existing children."
    },
    {
      "name": "func insertChild(XMLNode, at: Int)",
      "desc": "Inserts a node object at specified position in the receiver’s array of children."
    },
    {
      "name": "func insertChildren([XMLNode], at: Int)",
      "desc": "Inserts an array of children at a specified position in the receiver’s array of children."
    },
    {
      "name": "func removeChild(at: Int)",
      "desc": "Removes the child node of the receiver located at a specified position in its array of children."
    },
    {
      "name": "func replaceChild(at: Int, with: XMLNode)",
      "desc": "Replaces the child node of the receiver located at a specified position in its array of children with another node."
    },
    {
      "name": "func setChildren([XMLNode]?)",
      "desc": "Sets the child nodes of the receiver."
    },
    {
      "name": "func object(byApplyingXSLT: Data, arguments: [String : String]?) -> Any",
      "desc": "Applies the XSLT pattern rules and templates (specified as a data object) to the receiver and returns a document object containing transformed XML or HTML markup."
    },
    {
      "name": "func object(byApplyingXSLTString: String, arguments: [String : String]?) -> Any",
      "desc": "Applies the XSLT pattern rules and templates (specified as a string) to the receiver and returns a document object containing transformed XML or HTML markup."
    },
    {
      "name": "func objectByApplyingXSLT(at: URL, arguments: [String : String]?) -> Any",
      "desc": "Applies the XSLT pattern rules and templates located at a specified URL to the receiver and returns a document object containing transformed XML markup or an NSData object containing plain text, RTF text, and so on."
    },
    {
      "name": "var xmlData: Data",
      "desc": "Returns the XML string representation of the receiver—that is, the entire document—encapsulated in a data object."
    },
    {
      "name": "func xmlData(options: XMLNode.Options) -> Data",
      "desc": "Returns the XML string representation of the receiver—that is, the entire document—encapsulated in a data object."
    },
    {
      "name": "func validate()",
      "desc": "Validates the document against the governing schema and returns whether the document conforms to the schema."
    },
    {
      "name": "enum XMLDocument.ContentKind",
      "desc": "Type used to define the kind of document content."
    },
    {
      "name": "init()"
    }
  ],
  "declaration": "class XMLDocument : XMLNode",
  "inheritsFrom": [
    "XMLNode"
  ]
}