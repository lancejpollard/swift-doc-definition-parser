{
  "path": "/documentation/foundation/runloop/schedulertimetype",
  "type": "Structure",
  "name": "RunLoop.SchedulerTimeType",
  "desc": "The scheduler time type that the run loop uses.",
  "items": [
    {
      "name": "init(Date)",
      "desc": "Initializes a run loop scheduler time with the given date."
    },
    {
      "name": "struct RunLoop.SchedulerTimeType.Stride",
      "desc": "The interval by which run loop times advance."
    },
    {
      "name": "func advanced(by: RunLoop.SchedulerTimeType.Stride) -> RunLoop.SchedulerTimeType",
      "desc": "Returns a run loop scheduler time calculated by advancing this instanceâ€™s time by the given interval."
    },
    {
      "name": "func distance(to: RunLoop.SchedulerTimeType) -> RunLoop.SchedulerTimeType.Stride",
      "desc": "Returns the distance to another run loop scheduler time."
    },
    {
      "name": "var date: Date",
      "desc": "The date this type represents."
    },
    {
      "name": "static func ... (RunLoop.SchedulerTimeType) -> PartialRangeFrom<RunLoop.SchedulerTimeType>",
      "desc": "Returns a partial range extending upward from a lower bound."
    },
    {
      "name": "static func ... (RunLoop.SchedulerTimeType) -> PartialRangeThrough<RunLoop.SchedulerTimeType>",
      "desc": "Returns a partial range up to, and including, its upper bound."
    },
    {
      "name": "static func ... (RunLoop.SchedulerTimeType, RunLoop.SchedulerTimeType) -> ClosedRange<RunLoop.SchedulerTimeType>",
      "desc": "Returns a closed range that contains both of its bounds."
    },
    {
      "name": "static func ..< (RunLoop.SchedulerTimeType) -> PartialRangeUpTo<RunLoop.SchedulerTimeType>",
      "desc": "Returns a partial range up to, but not including, its upper bound."
    },
    {
      "name": "static func ..< (RunLoop.SchedulerTimeType, RunLoop.SchedulerTimeType) -> Range<RunLoop.SchedulerTimeType>",
      "desc": "Returns a half-open range that contains its lower bound but not its upper bound."
    },
    {
      "name": "static func != (RunLoop.SchedulerTimeType, RunLoop.SchedulerTimeType) -> Bool"
    },
    {
      "name": "static func < (RunLoop.SchedulerTimeType, RunLoop.SchedulerTimeType) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument."
    },
    {
      "name": "static func <= (RunLoop.SchedulerTimeType, RunLoop.SchedulerTimeType) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument."
    },
    {
      "name": "static func == (RunLoop.SchedulerTimeType, RunLoop.SchedulerTimeType) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are equal."
    },
    {
      "name": "static func > (RunLoop.SchedulerTimeType, RunLoop.SchedulerTimeType) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument."
    },
    {
      "name": "static func >= (RunLoop.SchedulerTimeType, RunLoop.SchedulerTimeType) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The computed hash value of the run loop scheduler time."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of the run loop schedule time by feeding them into the given hasher."
    },
    {
      "name": "init(from: Decoder)",
      "desc": "Creates a run loop scheduler time with data from an unarchiver."
    },
    {
      "name": "func encode(to: Encoder)",
      "desc": "Encodes the run loop schedule time into the given encoder."
    }
  ],
  "declaration": "struct SchedulerTimeType",
  "conformsTo": [
    "Decodable",
    "Encodable",
    "Hashable",
    "Strideable"
  ]
}