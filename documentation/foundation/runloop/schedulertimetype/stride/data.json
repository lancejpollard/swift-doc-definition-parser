{
  "path": "/documentation/foundation/runloop/schedulertimetype/stride",
  "type": "Structure",
  "name": "RunLoop.SchedulerTimeType.Stride",
  "desc": "The interval by which run loop times advance.",
  "items": [
    {
      "name": "init(TimeInterval)",
      "desc": "Creates a run loop scheduler time interval from the given time interval."
    },
    {
      "name": "init?<T>(exactly: T)",
      "desc": "Creates a run loop scheduler time interval from a binary integer type."
    },
    {
      "name": "init(floatLiteral: TimeInterval)",
      "desc": "Creates a run loop scheduler time interval from a floating-point seconds value."
    },
    {
      "name": "init(integerLiteral: TimeInterval)",
      "desc": "Creates a run loop scheduler time interval from an integer seconds value."
    },
    {
      "name": "static var zero: RunLoop.SchedulerTimeType.Stride",
      "desc": "The zero value."
    },
    {
      "name": "static func microseconds(Int) -> RunLoop.SchedulerTimeType.Stride",
      "desc": "Converts the specified number of microseconds into an instance of this scheduler time type."
    },
    {
      "name": "static func milliseconds(Int) -> RunLoop.SchedulerTimeType.Stride",
      "desc": "Converts the specified number of milliseconds into an instance of this scheduler time type."
    },
    {
      "name": "static func nanoseconds(Int) -> RunLoop.SchedulerTimeType.Stride",
      "desc": "Converts the specified number of nanoseconds into an instance of this scheduler time type."
    },
    {
      "name": "static func seconds(Double) -> RunLoop.SchedulerTimeType.Stride",
      "desc": "Converts the specified number of seconds, as a floating-point value, into an instance of this scheduler time type."
    },
    {
      "name": "static func seconds(Int) -> RunLoop.SchedulerTimeType.Stride",
      "desc": "Converts the specified number of seconds into an instance of this scheduler time type."
    },
    {
      "name": "typealias RunLoop.SchedulerTimeType.Stride.FloatLiteralType",
      "desc": "The type used when evaluating floating-point literals."
    },
    {
      "name": "typealias RunLoop.SchedulerTimeType.Stride.IntegerLiteralType",
      "desc": "The type for evaluating integer literals."
    },
    {
      "name": "typealias RunLoop.SchedulerTimeType.Stride.Magnitude",
      "desc": "The type for expressing the stride’s magnitude."
    },
    {
      "name": "var magnitude: TimeInterval",
      "desc": "The value of this time interval in seconds."
    },
    {
      "name": "var timeInterval: TimeInterval",
      "desc": "The value of this time interval in seconds."
    },
    {
      "name": "static func ... (RunLoop.SchedulerTimeType.Stride) -> PartialRangeFrom<RunLoop.SchedulerTimeType.Stride>",
      "desc": "Returns a partial range extending upward from a lower bound."
    },
    {
      "name": "static func ... (RunLoop.SchedulerTimeType.Stride) -> PartialRangeThrough<RunLoop.SchedulerTimeType.Stride>",
      "desc": "Returns a partial range up to, and including, its upper bound."
    },
    {
      "name": "static func ... (RunLoop.SchedulerTimeType.Stride, RunLoop.SchedulerTimeType.Stride) -> ClosedRange<RunLoop.SchedulerTimeType.Stride>",
      "desc": "Returns a closed range that contains both of its bounds."
    },
    {
      "name": "static func ..< (RunLoop.SchedulerTimeType.Stride) -> PartialRangeUpTo<RunLoop.SchedulerTimeType.Stride>",
      "desc": "Returns a partial range up to, but not including, its upper bound."
    },
    {
      "name": "static func ..< (RunLoop.SchedulerTimeType.Stride, RunLoop.SchedulerTimeType.Stride) -> Range<RunLoop.SchedulerTimeType.Stride>",
      "desc": "Returns a half-open range that contains its lower bound but not its upper bound."
    },
    {
      "name": "func negate()",
      "desc": "Replaces this value with its additive inverse."
    },
    {
      "name": "static func * (RunLoop.SchedulerTimeType.Stride, RunLoop.SchedulerTimeType.Stride) -> RunLoop.SchedulerTimeType.Stride",
      "desc": "Returns the result of multiplying the values of the two arguments."
    },
    {
      "name": "static func *= (inout RunLoop.SchedulerTimeType.Stride, RunLoop.SchedulerTimeType.Stride)",
      "desc": "Multiplies the values of the two arguments, and assigns the result to the first argument."
    },
    {
      "name": "static func + (RunLoop.SchedulerTimeType.Stride) -> RunLoop.SchedulerTimeType.Stride",
      "desc": "Returns the given number unchanged."
    },
    {
      "name": "static func + (RunLoop.SchedulerTimeType.Stride, RunLoop.SchedulerTimeType.Stride) -> RunLoop.SchedulerTimeType.Stride",
      "desc": "Returns the result of adding the values of the two arguments."
    },
    {
      "name": "static func += (inout RunLoop.SchedulerTimeType.Stride, RunLoop.SchedulerTimeType.Stride)",
      "desc": "Adds the values of the two arguments, and assigns the result to the first argument."
    },
    {
      "name": "static func - (RunLoop.SchedulerTimeType.Stride) -> RunLoop.SchedulerTimeType.Stride",
      "desc": "Returns the additive inverse of the specified value."
    },
    {
      "name": "static func - (RunLoop.SchedulerTimeType.Stride, RunLoop.SchedulerTimeType.Stride) -> RunLoop.SchedulerTimeType.Stride",
      "desc": "Returns the result of subtracting the value of the second argument from the value of the first."
    },
    {
      "name": "static func -= (inout RunLoop.SchedulerTimeType.Stride, RunLoop.SchedulerTimeType.Stride)",
      "desc": "Subtracts the value of the second argument from the value of the first, and assigns the result to the first argument."
    },
    {
      "name": "static func != (RunLoop.SchedulerTimeType.Stride, RunLoop.SchedulerTimeType.Stride) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values aren’t equal."
    },
    {
      "name": "static func < (RunLoop.SchedulerTimeType.Stride, RunLoop.SchedulerTimeType.Stride) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument."
    },
    {
      "name": "static func <= (RunLoop.SchedulerTimeType.Stride, RunLoop.SchedulerTimeType.Stride) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument."
    },
    {
      "name": "static func == (RunLoop.SchedulerTimeType.Stride, RunLoop.SchedulerTimeType.Stride) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are equal."
    },
    {
      "name": "static func > (RunLoop.SchedulerTimeType.Stride, RunLoop.SchedulerTimeType.Stride) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument."
    },
    {
      "name": "static func >= (RunLoop.SchedulerTimeType.Stride, RunLoop.SchedulerTimeType.Stride) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument."
    },
    {
      "name": "init(from: Decoder)",
      "desc": "Creates a run loop scheduler time interval with data from an unarchiver."
    },
    {
      "name": "func encode(to: Encoder)",
      "desc": "Encodes the run loop schedule time interval into the given encoder."
    }
  ],
  "declaration": "struct RunLoop.SchedulerTimeType.Stride",
  "conformsTo": [
    "Comparable",
    "Decodable",
    "Encodable",
    "ExpressibleByFloatLiteral",
    "SchedulerTimeIntervalConvertible",
    "SignedNumeric"
  ]
}