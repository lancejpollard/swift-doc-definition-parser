{
  "path": "/documentation/foundation/floatingpointparsestrategy",
  "type": "Generic Structure",
  "name": "FloatingPointParseStrategy",
  "desc": "No overview available.",
  "items": [
    {
      "name": "typealias FloatingPointParseStrategy.ParseInput"
    },
    {
      "name": "typealias FloatingPointParseStrategy.ParseOutput"
    },
    {
      "name": "var formatStyle: Format"
    },
    {
      "name": "var lenient: Bool"
    },
    {
      "name": "func parse(String) -> Format.FormatInput"
    },
    {
      "name": "init(from: Decoder)"
    },
    {
      "name": "func encode(to: Encoder)"
    },
    {
      "name": "var hashValue: Int"
    },
    {
      "name": "func hash(into: inout Hasher)"
    },
    {
      "name": "static func == (FloatingPointParseStrategy<Format>, FloatingPointParseStrategy<Format>) -> Bool"
    },
    {
      "name": "static func != (FloatingPointParseStrategy<Format>, FloatingPointParseStrategy<Format>) -> Bool"
    },
    {
      "name": "init<Value>(format: Format, lenient: Bool)"
    },
    {
      "name": "init<Value>(format: Format, lenient: Bool)"
    },
    {
      "name": "init<Value>(format: Format, lenient: Bool)"
    },
    {
      "name": "static func fixed(format: Date.FormatString, timeZone: TimeZone, locale: Locale?) -> Date.ParseStrategy"
    }
  ],
  "declaration": "struct FloatingPointParseStrategy<Format> where Format : FormatStyle, Format.FormatInput : BinaryFloatingPoint",
  "conformsTo": [
    "Decodable",
    "Encodable",
    "Hashable",
    "ParseStrategy"
  ]
}