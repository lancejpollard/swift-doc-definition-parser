{
  "path": "/documentation/foundation/inflectionrule",
  "type": "Enumeration",
  "name": "InflectionRule",
  "desc": "A rule that affects how an attributed string performs automatic grammatical agreement.",
  "items": [
    {
      "name": "init(morphology: Morphology)",
      "desc": "Creates an inflection rule with the given morphology."
    },
    {
      "name": "struct Morphology",
      "desc": "A description of the grammatical properties of a string."
    },
    {
      "name": "case automatic",
      "desc": "An inflection rule that performs automatic grammar agreement with default transformations."
    },
    {
      "name": "case explicit(Morphology)",
      "desc": "An inflection rule that uses a morphology instance to determine how to inflect attribued strings."
    },
    {
      "name": "static func canInflect(language: String) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the rule can inflect a given language."
    },
    {
      "name": "static var canInflectPreferredLocalization: Bool",
      "desc": "A Boolean value that indicates whether the rule can inflect the userâ€™s current preferred localization."
    },
    {
      "name": "init(from: Decoder)",
      "desc": "Creates a new instance by decoding from the given decoder."
    },
    {
      "name": "func encode(to: Encoder)",
      "desc": "Creates a new instance by decoding from the given decoder."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of this value by feeding them into the given hasher."
    },
    {
      "name": "static func == (InflectionRule, InflectionRule) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two values are equal."
    },
    {
      "name": "static func != (InflectionRule, InflectionRule) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two values are not equal."
    }
  ],
  "declaration": "enum InflectionRule",
  "conformsTo": [
    "Decodable",
    "Encodable",
    "Hashable"
  ]
}