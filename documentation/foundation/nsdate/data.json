{
  "path": "/documentation/foundation/nsdate",
  "type": "Class",
  "name": "NSDate",
  "desc": "A representation of a specific point in time, for use when you need reference semantics or other Foundation-specific behavior.",
  "items": [
    {
      "name": "init()",
      "desc": "Returns a date object initialized to the current date and time."
    },
    {
      "name": "init(timeIntervalSinceNow: TimeInterval)",
      "desc": "Returns a date object initialized relative to the current date and time by a given number of seconds."
    },
    {
      "name": "init(timeInterval: TimeInterval, since: Date)",
      "desc": "Returns a date object initialized relative to another given date by a given number of seconds."
    },
    {
      "name": "init(timeIntervalSinceReferenceDate: TimeInterval)",
      "desc": "Returns a date object initialized relative to 00:00:00 UTC on 1 January 2001 by a given number of seconds."
    },
    {
      "name": "init(timeIntervalSince1970: TimeInterval)",
      "desc": "Returns a date object initialized relative to 00:00:00 UTC on 1 January 1970 by a given number of seconds."
    },
    {
      "name": "init?(coder: NSCoder)",
      "desc": "Returns a date object initialized from data in the given unarchiver."
    },
    {
      "name": "class var distantFuture: Date",
      "desc": "A date object representing a date in the distant future."
    },
    {
      "name": "class var distantPast: Date",
      "desc": "A date object representing a date in the distant past."
    },
    {
      "name": "class var now: Date",
      "desc": "The current date and time, as of the time of access."
    },
    {
      "name": "func isEqual(to: Date) -> Bool",
      "desc": "Returns a Boolean value that indicates whether a given object is a date that is exactly equal the receiver."
    },
    {
      "name": "func earlierDate(Date) -> Date",
      "desc": "Returns the earlier of the receiver and another given date."
    },
    {
      "name": "func laterDate(Date) -> Date",
      "desc": "Returns the later of the receiver and another given date."
    },
    {
      "name": "func compare(Date) -> ComparisonResult",
      "desc": "Indicates the temporal ordering of the receiver and another given date."
    },
    {
      "name": "func timeIntervalSince(Date) -> TimeInterval",
      "desc": "Returns the interval between the receiver and another given date."
    },
    {
      "name": "var timeIntervalSinceNow: TimeInterval",
      "desc": "The interval between the date object and the current date and time."
    },
    {
      "name": "var timeIntervalSinceReferenceDate: TimeInterval",
      "desc": "The interval between the date object and 00:00:00 UTC on 1 January 2001."
    },
    {
      "name": "var timeIntervalSince1970: TimeInterval",
      "desc": "The interval between the date object and 00:00:00 UTC on 1 January 1970."
    },
    {
      "name": "class var timeIntervalSinceReferenceDate: TimeInterval",
      "desc": "The interval between 00:00:00 UTC on 1 January 2001 and the current date and time."
    },
    {
      "name": "var NSTimeIntervalSince1970: Double",
      "desc": "The number of seconds from 1 January 1970 to the reference date, 1 January 2001."
    },
    {
      "name": "func addingTimeInterval(TimeInterval) -> Self",
      "desc": "Returns a new date object that is set to a given number of seconds relative to the receiver."
    },
    {
      "name": "var description: String",
      "desc": "A string representation of the date object."
    },
    {
      "name": "func description(with: Any?) -> String",
      "desc": "Returns a string representation of the date using the given locale."
    },
    {
      "name": "static let NSSystemClockDidChange: NSNotification.Name",
      "desc": "A notification posted whenever the system clock is changed."
    }
  ],
  "declaration": "class NSDate : NSObject",
  "inheritsFrom": [
    "NSObject"
  ],
  "conformsTo": [
    "CKRecordValueProtocol",
    "NSCopying",
    "NSSecureCoding"
  ]
}