{
  "path": "/documentation/foundation/filewrapper",
  "type": "Class",
  "name": "FileWrapper",
  "desc": "A representation of a node (a file, directory, or symbolic link) in the file system.",
  "items": [
    {
      "name": "init(url: URL, options: FileWrapper.ReadingOptions)",
      "desc": "Initializes a file wrapper instance whose kind is determined by the type of file-system node located by the URL."
    },
    {
      "name": "init(directoryWithFileWrappers: [String : FileWrapper])",
      "desc": "Initializes the receiver as a directory file wrapper, with a given file-wrapper list."
    },
    {
      "name": "init(regularFileWithContents: Data)",
      "desc": "Initializes the receiver as a regular-file file wrapper."
    },
    {
      "name": "init(symbolicLinkWithDestinationURL: URL)",
      "desc": "Initializes the receiver as a symbolic-link file wrapper that links to a specified file."
    },
    {
      "name": "init?(serializedRepresentation: Data)",
      "desc": "Initializes the receiver as a regular-file file wrapper from given serialized data."
    },
    {
      "name": "var isRegularFile: Bool",
      "desc": "This property contains a boolean value that indicates whether the file wrapper object is a regular-file."
    },
    {
      "name": "var isDirectory: Bool",
      "desc": "This property contains a boolean value indicating whether the file wrapper is a directory file wrapper."
    },
    {
      "name": "var isSymbolicLink: Bool",
      "desc": "A boolean that indicates whether the file wrapper object is a symbolic-link file wrapper."
    },
    {
      "name": "var fileWrappers: [String : FileWrapper]?",
      "desc": "The file wrappers contained by a directory file wrapper."
    },
    {
      "name": "func addFileWrapper(FileWrapper) -> String",
      "desc": "Adds a child file wrapper to the receiver, which must be a directory file wrapper."
    },
    {
      "name": "func removeFileWrapper(FileWrapper)",
      "desc": "Removes a child file wrapper from the receiver, which must be a directory file wrapper."
    },
    {
      "name": "func addRegularFile(withContents: Data, preferredFilename: String) -> String",
      "desc": "Creates a regular-file file wrapper with the given contents and adds it to the receiver, which must be a directory file wrapper."
    },
    {
      "name": "func keyForChildFileWrapper(FileWrapper) -> String?",
      "desc": "Returns the dictionary key used by a directory to identify a given file wrapper."
    },
    {
      "name": "var symbolicLinkDestinationURL: URL?",
      "desc": "The URL referenced by the file wrapper object, which must be a symbolic-link file wrapper."
    },
    {
      "name": "func matchesContents(of: URL) -> Bool",
      "desc": "Indicates whether the contents of a file wrapper matches a directory, regular file, or symbolic link on disk."
    },
    {
      "name": "func read(from: URL, options: FileWrapper.ReadingOptions)",
      "desc": "Recursively rereads the entire contents of a file wrapper from the specified location on disk."
    },
    {
      "name": "var serializedRepresentation: Data?",
      "desc": "The contents of the file wrapper as an opaque data object."
    },
    {
      "name": "var filename: String?",
      "desc": "The filename of the file wrapper object"
    },
    {
      "name": "var preferredFilename: String?",
      "desc": "The preferred filename for the file wrapper object."
    },
    {
      "name": "var fileAttributes: [String : Any]",
      "desc": "A dictionary of file attributes."
    },
    {
      "name": "var regularFileContents: Data?",
      "desc": "The contents of the file-system node associated with a regular-file file wrapper."
    },
    {
      "name": "func write(to: URL, options: FileWrapper.WritingOptions, originalContentsURL: URL?)",
      "desc": "Recursively writes the entire contents of a file wrapper to a given file-system URL."
    },
    {
      "name": "var icon: NSImage?",
      "desc": "The icon that represents the file wrapper."
    },
    {
      "name": "struct FileWrapper.ReadingOptions",
      "desc": "Reading options that can be set by the init(url:options:) and read(from:options:) methods."
    },
    {
      "name": "struct FileWrapper.WritingOptions",
      "desc": "Writing options that can be set by the write(to:options:originalContentsURL:) method."
    },
    {
      "name": "init?(coder: NSCoder)"
    }
  ],
  "declaration": "class FileWrapper : NSObject",
  "inheritsFrom": [
    "NSObject"
  ],
  "conformsTo": [
    "NSSecureCoding"
  ]
}