{
  "path": "/documentation/foundation/urlcomponents",
  "type": "Structure",
  "name": "URLComponents",
  "desc": "A structure that parses URLs into and constructs URLs from their constituent parts.",
  "items": [
    {
      "name": "init()",
      "desc": "Initializes with all components undefined."
    },
    {
      "name": "var url: URL?",
      "desc": "A URL created from the components."
    },
    {
      "name": "func url(relativeTo: URL?) -> URL?",
      "desc": "Returns a URL based on the component settings and relative to a given base URL."
    },
    {
      "name": "var string: String?",
      "desc": "A URL derived from the components object, in string form."
    },
    {
      "name": "var fragment: String?",
      "desc": "The fragment subcomponent."
    },
    {
      "name": "var host: String?",
      "desc": "The host subcomponent."
    },
    {
      "name": "var password: String?",
      "desc": "The password subcomponent of the URL."
    },
    {
      "name": "var path: String",
      "desc": "The path subcomponent."
    },
    {
      "name": "var port: Int?",
      "desc": "The port subcomponent."
    },
    {
      "name": "var query: String?",
      "desc": "The query subcomponent."
    },
    {
      "name": "var queryItems: [URLQueryItem]?",
      "desc": "An array of query items for the URL in the order in which they appear in the original query string."
    },
    {
      "name": "var scheme: String?",
      "desc": "The scheme subcomponent of the URL."
    },
    {
      "name": "var user: String?",
      "desc": "The user subcomponent of the URL."
    },
    {
      "name": "var percentEncodedFragment: String?",
      "desc": "The fragment subcomponent, percent-encoded."
    },
    {
      "name": "var percentEncodedHost: String?",
      "desc": "The host subcomponent, percent-encoded."
    },
    {
      "name": "var percentEncodedPassword: String?",
      "desc": "The password subcomponent, percent-encoded."
    },
    {
      "name": "var percentEncodedPath: String",
      "desc": "The path subcomponent, percent-encoded."
    },
    {
      "name": "var percentEncodedQuery: String?",
      "desc": "The query subcomponent, percent-encoded."
    },
    {
      "name": "var percentEncodedUser: String?",
      "desc": "The user subcomponent, percent-encoded."
    },
    {
      "name": "var rangeOfFragment: Range<String.Index>?",
      "desc": "Returns the character range of the fragment in the string returned by the string property."
    },
    {
      "name": "var rangeOfHost: Range<String.Index>?",
      "desc": "Returns the character range of the host in the string returned by the string property."
    },
    {
      "name": "var rangeOfPassword: Range<String.Index>?",
      "desc": "Returns the character range of the password in the string returned by the string property."
    },
    {
      "name": "var rangeOfPath: Range<String.Index>?",
      "desc": "Returns the character range of the path in the string returned by the string property."
    },
    {
      "name": "var rangeOfPort: Range<String.Index>?",
      "desc": "Returns the character range of the port in the string returned by the string property."
    },
    {
      "name": "var rangeOfQuery: Range<String.Index>?",
      "desc": "Returns the character range of the query in the string returned by the string property."
    },
    {
      "name": "var rangeOfScheme: Range<String.Index>?",
      "desc": "Returns the character range of the scheme in the string returned by the string property."
    },
    {
      "name": "var rangeOfUser: Range<String.Index>?",
      "desc": "Returns the character range of the user in the string returned by the string property."
    },
    {
      "name": "static func != (URLComponents, URLComponents) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are not equal."
    },
    {
      "name": "static func == (URLComponents, URLComponents) -> Bool",
      "desc": "Indicates whether two URL component instances are the same."
    },
    {
      "name": "var description: String",
      "desc": "A textual description of the URL components."
    },
    {
      "name": "var debugDescription: String",
      "desc": "A textual description of the URL components suitable for debugging."
    },
    {
      "name": "var customMirror: Mirror",
      "desc": "A mirror that reflects the URL components."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The computed hash value for the URL components."
    },
    {
      "name": "class NSURLComponents",
      "desc": "An object that parses URLs into and constructs URLs from their constituent parts that bridges to URLComponents; use NSURLComponents when you need reference semantics or other Foundation-specific behavior."
    },
    {
      "name": "typealias URLComponents.ReferenceType",
      "desc": "An alias for this value type's equivalent reference type."
    },
    {
      "name": "init(from: Decoder)"
    },
    {
      "name": "init?(string: String)"
    },
    {
      "name": "init?(url: URL, resolvingAgainstBaseURL: Bool)"
    },
    {
      "name": "var percentEncodedQueryItems: [URLQueryItem]?"
    },
    {
      "name": "func encode(to: Encoder)"
    },
    {
      "name": "func hash(into: inout Hasher)"
    }
  ],
  "declaration": "Declarationstruct URLComponents",
  "conformsTo": [
    "CustomDebugStringConvertible",
    "CustomReflectable",
    "CustomStringConvertible",
    "Decodable",
    "Encodable",
    "Equatable",
    "Hashable",
    "ReferenceConvertible"
  ]
}