{
  "path": "/documentation/foundation/attributescopes/foundationattributes",
  "type": "Structure",
  "name": "AttributeScopes.FoundationAttributes",
  "desc": "Attribute scopes that Foundation defines.",
  "items": [
    {
      "name": "let dateField: AttributeScopes.FoundationAttributes.DateFieldAttribute",
      "desc": "A property for accessing a date field attribute."
    },
    {
      "name": "enum AttributeScopes.FoundationAttributes.DateFieldAttribute",
      "desc": "A type for using a date field as an attribute."
    },
    {
      "name": "let languageIdentifier: AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute",
      "desc": "A property for accessing a language identifier attribute."
    },
    {
      "name": "enum AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute",
      "desc": "A type for using a language identifier as an attribute."
    },
    {
      "name": "let imageURL: AttributeScopes.FoundationAttributes.ImageURLAttribute",
      "desc": "A property for accessing an image URL attribute."
    },
    {
      "name": "enum AttributeScopes.FoundationAttributes.ImageURLAttribute",
      "desc": "A type for using an image URL as an attribute."
    },
    {
      "name": "let link: AttributeScopes.FoundationAttributes.LinkAttribute",
      "desc": "A property for accessing the link attribute."
    },
    {
      "name": "enum AttributeScopes.FoundationAttributes.LinkAttribute",
      "desc": "A type for using a link as an attribute."
    },
    {
      "name": "let inlinePresentationIntent: AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute",
      "desc": "A property for accessing an inline presentation intent attribute."
    },
    {
      "name": "enum AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute",
      "desc": "A type for using an inline presentation intent as an attribute."
    },
    {
      "name": "struct InlinePresentationIntent",
      "desc": "A type that defines presentation intent for runs of characters for traits like emphasis, strikethrough, and code voice."
    },
    {
      "name": "let presentationIntent: AttributeScopes.FoundationAttributes.PresentationIntentAttribute",
      "desc": "A property for accessing a presentation intent attribute."
    },
    {
      "name": "enum AttributeScopes.FoundationAttributes.PresentationIntentAttribute",
      "desc": "A type for using a presentation intent as an attribute."
    },
    {
      "name": "struct PresentationIntent",
      "desc": "A type that defines presentation intent for blocks of characters like paragraphs, lists, block quotes, and tables."
    },
    {
      "name": "let alternateDescription: AttributeScopes.FoundationAttributes.AlternateDescriptionAttribute",
      "desc": "A property for accessing an alternative presentation attribute."
    },
    {
      "name": "enum AttributeScopes.FoundationAttributes.AlternateDescriptionAttribute",
      "desc": "A type for using an alternative description as an attribute."
    },
    {
      "name": "let replacementIndex: AttributeScopes.FoundationAttributes.ReplacementIndexAttribute",
      "desc": "A property for accessing a replacement index attribute."
    },
    {
      "name": "enum AttributeScopes.FoundationAttributes.ReplacementIndexAttribute",
      "desc": "A type for using a replacement index as an attribute."
    },
    {
      "name": "let inflect: AttributeScopes.FoundationAttributes.InflectionRuleAttribute",
      "desc": "A property for accessing an inflection rule attribute."
    },
    {
      "name": "enum AttributeScopes.FoundationAttributes.InflectionRuleAttribute",
      "desc": "A type for using an inflection rule as an attribute."
    },
    {
      "name": "let morphology: AttributeScopes.FoundationAttributes.MorphologyAttribute",
      "desc": "A property for accessing a morphology attribute."
    },
    {
      "name": "enum AttributeScopes.FoundationAttributes.MorphologyAttribute",
      "desc": "A type for using a morphology as an attribute."
    },
    {
      "name": "let numberFormat: AttributeScopes.FoundationAttributes.NumberFormatAttributes",
      "desc": "A property for accessing a number format attribute."
    },
    {
      "name": "struct AttributeScopes.FoundationAttributes.NumberFormatAttributes",
      "desc": "A type for using a number format as an attribute."
    },
    {
      "name": "let personNameComponent: AttributeScopes.FoundationAttributes.PersonNameComponentAttribute",
      "desc": "A property for accessing a person name component attribute."
    },
    {
      "name": "enum AttributeScopes.FoundationAttributes.PersonNameComponentAttribute",
      "desc": "A type for using a person name component as an attribute."
    },
    {
      "name": "static var decodingConfiguration: AttributeScopeCodableConfiguration",
      "desc": "The configuration instance that assists in decoding instances of the type."
    },
    {
      "name": "typealias AttributeScopes.FoundationAttributes.DecodingConfiguration",
      "desc": "The type of the configuration instance that assists in decoding instances of the type."
    },
    {
      "name": "static var encodingConfiguration: AttributeScopeCodableConfiguration",
      "desc": "The configuration instance that assists in encoding instances of the type."
    },
    {
      "name": "typealias AttributeScopes.FoundationAttributes.EncodingConfiguration",
      "desc": "The type of the configuration instance that assists in encoding instances of the type."
    },
    {
      "name": "let byteCount: AttributeScopes.FoundationAttributes.ByteCountAttribute"
    },
    {
      "name": "let inflectionAlternative: AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute"
    },
    {
      "name": "let measurement: AttributeScopes.FoundationAttributes.MeasurementAttribute"
    },
    {
      "name": "struct AttributeScopes.FoundationAttributes.MeasurementAttribute"
    },
    {
      "name": "enum AttributeScopes.FoundationAttributes.ByteCountAttribute"
    },
    {
      "name": "enum AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute"
    }
  ],
  "declaration": "struct FoundationAttributes",
  "conformsTo": [
    "AttributeScope"
  ]
}