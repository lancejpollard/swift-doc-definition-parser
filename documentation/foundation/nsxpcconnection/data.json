{
  "path": "/documentation/foundation/nsxpcconnection",
  "type": "Class",
  "name": "NSXPCConnection",
  "desc": "A bidirectional communication channel between two processes.",
  "items": [
    {
      "name": "init(listenerEndpoint: NSXPCListenerEndpoint)",
      "desc": "Initializes an NSXPCConnection object to connect to an NSXPCListener object in another process, identified by an NSXPCListenerEndpoint object."
    },
    {
      "name": "init(machServiceName: String, options: NSXPCConnection.Options)",
      "desc": "Initializes an NSXPCConnection object to connect to a LaunchAgent or LaunchDaemon with a name advertised in a launchd.plist."
    },
    {
      "name": "struct NSXPCConnection.Options",
      "desc": "Options that you can pass to a connection."
    },
    {
      "name": "init(serviceName: String)",
      "desc": "Initializes an NSXPCConnection object to connect to an NSXPCListener object in an XPC service, identified by a service name."
    },
    {
      "name": "var NSXPCConnectionInterrupted: Int",
      "desc": "The XPC connection was interrupted."
    },
    {
      "name": "var NSXPCConnectionInvalid: Int",
      "desc": "The XPC connection was invalid."
    },
    {
      "name": "var NSXPCConnectionReplyInvalid: Int",
      "desc": "The XPC connection reply was invalid."
    },
    {
      "name": "var NSXPCConnectionErrorMinimum: Int",
      "desc": "The lower bounds of XPC connection error code values."
    },
    {
      "name": "var NSXPCConnectionErrorMaximum: Int",
      "desc": "The upper bounds of XPC connection error code values."
    },
    {
      "name": "var auditSessionIdentifier: au_asid_t",
      "desc": "The BSM audit session identifier for the connecting process."
    },
    {
      "name": "var effectiveGroupIdentifier: gid_t",
      "desc": "The effective group ID (EGID) of the connecting process."
    },
    {
      "name": "var effectiveUserIdentifier: uid_t",
      "desc": "The effective user ID (EUID) of the connecting process."
    },
    {
      "name": "var endpoint: NSXPCListenerEndpoint",
      "desc": "If the connection was created with an NSXPCListenerEndpoint object, returns the endpoint object used."
    },
    {
      "name": "var exportedInterface: NSXPCInterface?",
      "desc": "The NSXPCInterface object that describes the protocol for the exported object on this connection."
    },
    {
      "name": "var exportedObject: Any?",
      "desc": "An exported object for the connection."
    },
    {
      "name": "var interruptionHandler: (() -> Void)?",
      "desc": "An interruption handler that is called if the remote process exits or crashes."
    },
    {
      "name": "var invalidationHandler: (() -> Void)?",
      "desc": "An invalidation handler that is called if the connection can not be formed or the connection has terminated and may not be re-established."
    },
    {
      "name": "var processIdentifier: pid_t",
      "desc": "The process ID (PID) of the connecting process."
    },
    {
      "name": "var remoteObjectInterface: NSXPCInterface?",
      "desc": "Defines the NSXPCInterface object that describes the protocol for the object represented by the remoteObjectProxy."
    },
    {
      "name": "var remoteObjectProxy: Any",
      "desc": "Returns a proxy for the remote object (that is, the exportedObject from the other side of this connection)."
    },
    {
      "name": "var serviceName: String?",
      "desc": "The name of the XPC service that this connection was configured to connect to."
    },
    {
      "name": "func invalidate()",
      "desc": "Invalidates the connection."
    },
    {
      "name": "func remoteObjectProxyWithErrorHandler((Error) -> Void) -> Any",
      "desc": "Returns a proxy for the remote object (that is, the object exported from the other side of this connection) with the specified error handler."
    },
    {
      "name": "func resume()",
      "desc": "Starts or resumes handling of messages on a connection."
    },
    {
      "name": "func scheduleSendBarrierBlock(() -> Void)"
    },
    {
      "name": "func suspend()",
      "desc": "Suspends the connection."
    },
    {
      "name": "func synchronousRemoteObjectProxyWithErrorHandler((Error) -> Void) -> Any"
    },
    {
      "name": "class func current() -> NSXPCConnection?"
    }
  ],
  "declaration": "class NSXPCConnection : NSObject",
  "inheritsFrom": [
    "NSObject"
  ],
  "conformsTo": [
    "NSXPCProxyCreating"
  ]
}