{
  "path": "/documentation/foundation/nsarchiver",
  "type": "Class",
  "name": "NSArchiver",
  "desc": "A coder that stores an object's data to an archive.",
  "items": [
    {
      "name": "init(forWritingWith: NSMutableData)",
      "desc": "Returns an archiver, initialized to encode stream and version information into a given mutable data object."
    },
    {
      "name": "class func archivedData(withRootObject: Any) -> Data",
      "desc": "Returns a data object containing the encoded form of the object graph whose root object is given."
    },
    {
      "name": "class func archiveRootObject(Any, toFile: String) -> Bool",
      "desc": "Creates a temporary instance of NSArchiver and archives an object graph by encoding it into a data object and writing the resulting data object to a specified file."
    },
    {
      "name": "func encodeRootObject(Any)",
      "desc": "Archives a given object along with all the objects to which it is connected."
    },
    {
      "name": "func encodeConditionalObject(Any?)",
      "desc": "Conditionally archives a given object."
    },
    {
      "name": "var archiverData: NSMutableData",
      "desc": "The receiver's archive data."
    },
    {
      "name": "func classNameEncoded(forTrueClassName: String) -> String?",
      "desc": "Returns the name of the class used to archive instances of the class with a given true name."
    },
    {
      "name": "func encodeClassName(String, intoClassName: String)",
      "desc": "Encodes a substitute name for the class with a given true name."
    },
    {
      "name": "func replace(Any, with: Any)",
      "desc": "Causes the receiver to treat subsequent requests to encode a given object as though they were requests to encode another given object."
    }
  ],
  "declaration": "class NSArchiver : NSCoder",
  "inheritsFrom": [
    "NSCoder"
  ]
}