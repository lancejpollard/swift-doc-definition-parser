{
  "path": "/documentation/foundation/nsuseractivity",
  "type": "Class",
  "name": "NSUserActivity",
  "desc": "A representation of the state of your app at a moment in time.",
  "items": [
    {
      "name": "init(activityType: String)",
      "desc": "Creates a user activity object with the specified type."
    },
    {
      "name": "var activityType: String",
      "desc": "The user activity object's activity type."
    },
    {
      "name": "var title: String?",
      "desc": "An optional, user-visible title for this activity, such as a document name or web page title."
    },
    {
      "name": "var requiredUserInfoKeys: Set<String>?",
      "desc": "A set of keys that represent the minimal information about the activity that should be stored for later restoration."
    },
    {
      "name": "var userInfo: [AnyHashable : Any]?",
      "desc": "A dictionary containing app-specific state information needed to continue an activity on another device."
    },
    {
      "name": "func addUserInfoEntries(from: [AnyHashable : Any])",
      "desc": "Adds the contents of the specified dictionary to the user info dictionary."
    },
    {
      "name": "var targetContentIdentifier: String?",
      "desc": "A string that identifies the user activity's content."
    },
    {
      "name": "var needsSave: Bool",
      "desc": "A Boolean value that indicates whether the state of the activity needs to be updated."
    },
    {
      "name": "var contentAttributeSet: CSSearchableItemAttributeSet?",
      "desc": "A set of properties that describe the activity."
    },
    {
      "name": "var keywords: Set<String>",
      "desc": "A set of localized keywords that can help users find the activity in search results."
    },
    {
      "name": "var persistentIdentifier: NSUserActivityPersistentIdentifier?",
      "desc": "A value used to identify the user activity."
    },
    {
      "name": "typealias NSUserActivityPersistentIdentifier",
      "desc": "The structure that defines a persistent identifier value for a user activity."
    },
    {
      "name": "var appClipActivationPayload: APActivationPayload?",
      "desc": "An object containing the payload information that launches an App Clip."
    },
    {
      "name": "var isEligibleForHandoff: Bool",
      "desc": "A Boolean value that indicates whether the activity can be continued on another device using Handoff."
    },
    {
      "name": "var isEligibleForSearch: Bool",
      "desc": "A Boolean value that indicates whether the activity should be added to the on-device index."
    },
    {
      "name": "var isEligibleForPublicIndexing: Bool",
      "desc": "A Boolean value that indicates whether the activity can be publicly accessed by all iOS users."
    },
    {
      "name": "var expirationDate: Date?",
      "desc": "The date after which the activity is no longer eligible for Handoff or indexing."
    },
    {
      "name": "func becomeCurrent()",
      "desc": "Marks the activity as currently in use by the user."
    },
    {
      "name": "func resignCurrent()",
      "desc": "Marks this activity object as inactive without invalidating it."
    },
    {
      "name": "func invalidate()",
      "desc": "Invalidates an activity and marks it as no longer eligible for continuation."
    },
    {
      "name": "class func deleteAllSavedUserActivities(completionHandler: () -> Void)",
      "desc": "Deletes all user activities created by your app."
    },
    {
      "name": "class func deleteSavedUserActivities(withPersistentIdentifiers: [NSUserActivityPersistentIdentifier], completionHandler: () -> Void)",
      "desc": "Deletes user activities created by your app that have the specified persistent identifiers."
    },
    {
      "name": "var delegate: NSUserActivityDelegate?",
      "desc": "The user activity object’s delegate."
    },
    {
      "name": "protocol NSUserActivityDelegate",
      "desc": "The interface through which a user activity instance notifies its delegate of updates."
    },
    {
      "name": "var supportsContinuationStreams: Bool",
      "desc": "A Boolean value that determines whether the continuing app can request streams to be opened back to the originating app."
    },
    {
      "name": "func getContinuationStreams(completionHandler: (InputStream?, OutputStream?, Error?) -> Void)",
      "desc": "Requests streams back to the originating app."
    },
    {
      "name": "var webpageURL: URL?",
      "desc": "The URL of the webpage to load in a browser to continue the activity."
    },
    {
      "name": "var referrerURL: URL?",
      "desc": "The URL of the webpage that linked to the webpage URL."
    },
    {
      "name": "var isEligibleForPrediction: Bool",
      "desc": "A Boolean value that determines whether Siri can suggest the user activity as a shortcut to the user."
    },
    {
      "name": "var suggestedInvocationPhrase: String?",
      "desc": "A phrase suggested to the user when they create a shortcut."
    },
    {
      "name": "var shortcutAvailability: INShortcutAvailabilityOptions",
      "desc": "A set of defined contexts in which an intent or activity might be relevant to a user."
    },
    {
      "name": "var interaction: INInteraction?",
      "desc": "The SiriKit interaction object to use when configuring your app."
    },
    {
      "name": "var ndefMessagePayload: NFCNDEFMessage",
      "desc": "The NDEF message read by the system in the background."
    },
    {
      "name": "var detectedBarcodeDescriptor: CIBarcodeDescriptor?",
      "desc": "The barcode that the system scanner passes in."
    },
    {
      "name": "var mapItem: MKMapItem!",
      "desc": "Attaches the specified map item to a user activity object."
    },
    {
      "name": "var externalMediaContentIdentifier: String?",
      "desc": "A unique identifier from the app's media content catalog for the currently displayed media item."
    },
    {
      "name": "func setTypedPayload<T>(T)",
      "desc": "Encodes the specified payload into the user activity’s user info dictionary."
    },
    {
      "name": "func typedPayload<T>(T.Type) -> T",
      "desc": "Decodes the user activity's user info dictionary as an instance of the specified type."
    },
    {
      "name": "enum NSUserActivity.TypedPayloadError",
      "desc": "An enumeration that describes the error types for getting and setting a typed payload."
    },
    {
      "name": "var isClassKitDeepLink: Bool",
      "desc": "A Boolean value that indicates whether a user activity represents a ClassKit context."
    },
    {
      "name": "var contextIdentifierPath: [String]?",
      "desc": "The identifier path associated with a user activity generated by an app that adopts ClassKit."
    },
    {
      "name": "let NSUserActivityTypeBrowsingWeb: String",
      "desc": "An activity that continues from Handoff or a universal link."
    },
    {
      "name": "let TVUserActivityTypeBrowsingChannelGuide: String",
      "desc": "An activity for viewing your app’s channel guide."
    },
    {
      "name": "var NSUserActivityConnectionUnavailableError: Int",
      "desc": "The user activity couldn’t be continued because a required connection wasn’t available."
    },
    {
      "name": "var NSUserActivityErrorMaximum: Int",
      "desc": "The end of the range of error codes reserved for user activity errors."
    },
    {
      "name": "var NSUserActivityErrorMinimum: Int",
      "desc": "The start of the range of error codes reserved for user activity errors."
    },
    {
      "name": "var NSUserActivityHandoffFailedError: Int",
      "desc": "The data for the user activity wasn’t available."
    },
    {
      "name": "var NSUserActivityHandoffUserInfoTooLargeError: Int",
      "desc": "The user info dictionary was too large to receive."
    },
    {
      "name": "var NSUserActivityRemoteApplicationTimedOutError: Int",
      "desc": "The remote application failed to send data within the specified time."
    }
  ],
  "declaration": "class NSUserActivity : NSObject",
  "inheritsFrom": [
    "NSObject"
  ],
  "conformsTo": [
    "NSItemProviderReading",
    "NSItemProviderWriting"
  ]
}