{
  "path": "/documentation/foundation/filemanagerdelegate",
  "type": "Protocol",
  "name": "FileManagerDelegate",
  "desc": "The interface a file manager's delegate uses to intervene during operations or if an error occurs.",
  "items": [
    {
      "name": "func fileManager(FileManager, shouldMoveItemAt: URL, to: URL) -> Bool",
      "desc": "Asks the delegate if the file manager should move the specified item to the new URL."
    },
    {
      "name": "func fileManager(FileManager, shouldMoveItemAtPath: String, toPath: String) -> Bool",
      "desc": "Asks the delegate if the file manager should move the specified item to the new path."
    },
    {
      "name": "func fileManager(FileManager, shouldProceedAfterError: Error, movingItemAt: URL, to: URL) -> Bool",
      "desc": "Asks the delegate if the move operation should continue after an error occurs while moving the item at the specified URL."
    },
    {
      "name": "func fileManager(FileManager, shouldProceedAfterError: Error, movingItemAtPath: String, toPath: String) -> Bool",
      "desc": "Asks the delegate if the move operation should continue after an error occurs while moving the item at the specified path."
    },
    {
      "name": "func fileManager(FileManager, shouldCopyItemAt: URL, to: URL) -> Bool",
      "desc": "Asks the delegate if the file manager should copy the specified item to the new URL."
    },
    {
      "name": "func fileManager(FileManager, shouldCopyItemAtPath: String, toPath: String) -> Bool",
      "desc": "Asks the delegate if the file manager should copy the specified item to the new path."
    },
    {
      "name": "func fileManager(FileManager, shouldProceedAfterError: Error, copyingItemAt: URL, to: URL) -> Bool",
      "desc": "Asks the delegate if the move operation should continue after an error occurs while copying the item at the specified URL."
    },
    {
      "name": "func fileManager(FileManager, shouldProceedAfterError: Error, copyingItemAtPath: String, toPath: String) -> Bool",
      "desc": "Asks the delegate if the move operation should continue after an error occurs while copying the item at the specified path."
    },
    {
      "name": "func fileManager(FileManager, shouldRemoveItemAt: URL) -> Bool",
      "desc": "Asks the delegate whether the item at the specified URL should be deleted."
    },
    {
      "name": "func fileManager(FileManager, shouldRemoveItemAtPath: String) -> Bool",
      "desc": "Asks the delegate whether the item at the specified path should be deleted."
    },
    {
      "name": "func fileManager(FileManager, shouldProceedAfterError: Error, removingItemAt: URL) -> Bool",
      "desc": "Asks the delegate if the operation should continue after an error occurs while removing the item at the specified URL."
    },
    {
      "name": "func fileManager(FileManager, shouldProceedAfterError: Error, removingItemAtPath: String) -> Bool",
      "desc": "Asks the delegate if the operation should continue after an error occurs while removing the item at the specified path."
    },
    {
      "name": "func fileManager(FileManager, shouldLinkItemAt: URL, to: URL) -> Bool",
      "desc": "Asks the delegate if a hard link should be created between the items at the two URLs."
    },
    {
      "name": "func fileManager(FileManager, shouldLinkItemAtPath: String, toPath: String) -> Bool",
      "desc": "Asks the delegate if a hard link should be created between the items at the two paths."
    },
    {
      "name": "func fileManager(FileManager, shouldProceedAfterError: Error, linkingItemAt: URL, to: URL) -> Bool",
      "desc": "Asks the delegate if the operation should continue after an error occurs while linking to the item at the specified URL."
    },
    {
      "name": "func fileManager(FileManager, shouldProceedAfterError: Error, linkingItemAtPath: String, toPath: String) -> Bool",
      "desc": "Asks the delegate if the operation should continue after an error occurs while linking to the item at the specified path."
    }
  ],
  "declaration": "protocol FileManagerDelegate",
  "inheritsFrom": [
    "NSObjectProtocol"
  ]
}