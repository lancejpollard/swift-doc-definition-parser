{
  "path": "/documentation/foundation/bytecountformatstyle/units",
  "type": "Structure",
  "name": "ByteCountFormatStyle.Units",
  "desc": "No overview available.",
  "items": [
    {
      "name": "typealias ByteCountFormatStyle.Units.ArrayLiteralElement"
    },
    {
      "name": "typealias ByteCountFormatStyle.Units.Element"
    },
    {
      "name": "typealias ByteCountFormatStyle.Units.RawValue"
    },
    {
      "name": "init()",
      "desc": "Creates an empty option set."
    },
    {
      "name": "init<S>(S)",
      "desc": "Creates a new set from a finite sequence of items."
    },
    {
      "name": "init(arrayLiteral: ByteCountFormatStyle.Units...)",
      "desc": "Creates a set containing the elements of the given array literal."
    },
    {
      "name": "init(from: Decoder)",
      "desc": "Creates a new instance by decoding from the given decoder, when the type’s RawValue is UInt."
    },
    {
      "name": "init(rawValue: UInt)"
    },
    {
      "name": "var hashValue: Int"
    },
    {
      "name": "var isEmpty: Bool",
      "desc": "A Boolean value that indicates whether the set has no elements."
    },
    {
      "name": "var rawValue: UInt"
    },
    {
      "name": "static var all: ByteCountFormatStyle.Units"
    },
    {
      "name": "static var bytes: ByteCountFormatStyle.Units"
    },
    {
      "name": "static var `default`: ByteCountFormatStyle.Units"
    },
    {
      "name": "static var eb: ByteCountFormatStyle.Units"
    },
    {
      "name": "static var gb: ByteCountFormatStyle.Units"
    },
    {
      "name": "static var kb: ByteCountFormatStyle.Units"
    },
    {
      "name": "static var mb: ByteCountFormatStyle.Units"
    },
    {
      "name": "static var pb: ByteCountFormatStyle.Units"
    },
    {
      "name": "static var tb: ByteCountFormatStyle.Units"
    },
    {
      "name": "static var ybOrHigher: ByteCountFormatStyle.Units"
    },
    {
      "name": "static var zb: ByteCountFormatStyle.Units"
    },
    {
      "name": "func contains(ByteCountFormatStyle.Units) -> Bool",
      "desc": "Returns a Boolean value that indicates whether a given element is a member of the option set."
    },
    {
      "name": "func encode(to: Encoder)",
      "desc": "Encodes this value into the given encoder, when the type’s RawValue is UInt."
    },
    {
      "name": "func formIntersection(ByteCountFormatStyle.Units)",
      "desc": "Removes all elements of this option set that are not also present in the given set."
    },
    {
      "name": "func formSymmetricDifference(ByteCountFormatStyle.Units)",
      "desc": "Replaces this set with a new set containing all elements contained in either this set or the given set, but not in both."
    },
    {
      "name": "func formUnion(ByteCountFormatStyle.Units)",
      "desc": "Inserts the elements of another set into this option set."
    },
    {
      "name": "func hash(into: inout Hasher)"
    },
    {
      "name": "func insert(ByteCountFormatStyle.Units) -> (inserted: Bool, memberAfterInsert: ByteCountFormatStyle.Units)",
      "desc": "Adds the given element to the option set if it is not already a member."
    },
    {
      "name": "func intersection(ByteCountFormatStyle.Units) -> ByteCountFormatStyle.Units",
      "desc": "Returns a new option set with only the elements contained in both this set and the given set."
    },
    {
      "name": "func isDisjoint(with: ByteCountFormatStyle.Units) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the set has no members in common with the given set."
    },
    {
      "name": "func isStrictSubset(of: ByteCountFormatStyle.Units) -> Bool",
      "desc": "Returns a Boolean value that indicates whether this set is a strict subset of the given set."
    },
    {
      "name": "func isStrictSuperset(of: ByteCountFormatStyle.Units) -> Bool",
      "desc": "Returns a Boolean value that indicates whether this set is a strict superset of the given set."
    },
    {
      "name": "func isSubset(of: ByteCountFormatStyle.Units) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the set is a subset of another set."
    },
    {
      "name": "func isSuperset(of: ByteCountFormatStyle.Units) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the set is a superset of the given set."
    },
    {
      "name": "func remove(ByteCountFormatStyle.Units) -> ByteCountFormatStyle.Units?",
      "desc": "Removes the given element and all elements subsumed by it."
    },
    {
      "name": "func subtract(ByteCountFormatStyle.Units)",
      "desc": "Removes the elements of the given set from this set."
    },
    {
      "name": "func subtracting(ByteCountFormatStyle.Units) -> ByteCountFormatStyle.Units",
      "desc": "Returns a new set containing the elements of this set that do not occur in the given set."
    },
    {
      "name": "func symmetricDifference(ByteCountFormatStyle.Units) -> ByteCountFormatStyle.Units",
      "desc": "Returns a new option set with the elements contained in this set or in the given set, but not in both."
    },
    {
      "name": "func union(ByteCountFormatStyle.Units) -> ByteCountFormatStyle.Units",
      "desc": "Returns a new option set of the elements contained in this set, in the given set, or in both."
    },
    {
      "name": "func update(with: ByteCountFormatStyle.Units) -> ByteCountFormatStyle.Units?",
      "desc": "Inserts the given element into the set."
    },
    {
      "name": "static func != (ByteCountFormatStyle.Units, ByteCountFormatStyle.Units) -> Bool"
    }
  ],
  "declaration": "struct ByteCountFormatStyle.Units",
  "conformsTo": [
    "Decodable",
    "Encodable",
    "Hashable",
    "OptionSet"
  ]
}