{
  "path": "/documentation/foundation/nsmetadataquery",
  "type": "Class",
  "name": "NSMetadataQuery",
  "desc": "A query that you perform against Spotlight metadata.",
  "items": [
    {
      "name": "var searchScopes: [Any]",
      "desc": "An array containing the search scopes."
    },
    {
      "name": "var predicate: NSPredicate?",
      "desc": "The predicate used to filter query results."
    },
    {
      "name": "var sortDescriptors: [NSSortDescriptor]",
      "desc": "An array of sort descriptor objects."
    },
    {
      "name": "var valueListAttributes: [String]",
      "desc": "An array of attributes whose values are gathered by the query."
    },
    {
      "name": "var groupingAttributes: [String]?",
      "desc": "An array of grouping attributes. (read-only)"
    },
    {
      "name": "var notificationBatchingInterval: TimeInterval",
      "desc": "The interval at which notification of updated results occurs."
    },
    {
      "name": "var delegate: NSMetadataQueryDelegate?",
      "desc": "The query’s delegate."
    },
    {
      "name": "var searchItems: [Any]?",
      "desc": "An array of objects that define the query’s scope."
    },
    {
      "name": "var isStarted: Bool",
      "desc": "A Boolean value that indicates whether the query has started. (read-only)"
    },
    {
      "name": "func start() -> Bool",
      "desc": "Attempts to start the query."
    },
    {
      "name": "var isGathering: Bool",
      "desc": "A Boolean value that indicates whether the receiver is in the initial gathering phase of the query. (read-only)"
    },
    {
      "name": "var isStopped: Bool",
      "desc": "A Boolean value that indicates whether the query has stopped."
    },
    {
      "name": "func stop()",
      "desc": "Stops the receiver’s current query from gathering any further results."
    },
    {
      "name": "var results: [Any]",
      "desc": "An array containing the query’s results."
    },
    {
      "name": "var resultCount: Int",
      "desc": "The number of results returned by the query. (read-only)"
    },
    {
      "name": "func result(at: Int) -> Any",
      "desc": "Returns the query result at a specific index."
    },
    {
      "name": "func index(ofResult: Any) -> Int",
      "desc": "Returns the index of a query result object in the receiver’s results array."
    },
    {
      "name": "var groupedResults: [NSMetadataQueryResultGroup]",
      "desc": "An array containing hierarchical groups of query results. (read-only)"
    },
    {
      "name": "class NSMetadataQueryResultGroup",
      "desc": "The NSMetadataQueryResultGroup class represents a collection of grouped attribute results returned by an NSMetadataQuery object."
    },
    {
      "name": "func enumerateResults((Any, Int, UnsafeMutablePointer<ObjCBool>) -> Void)",
      "desc": "Enumerates the current set of results using the given block."
    },
    {
      "name": "func enumerateResults(options: NSEnumerationOptions, using: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Void)",
      "desc": "Enumerates the current set of results using the given options and block."
    },
    {
      "name": "var valueLists: [String : [NSMetadataQueryAttributeValueTuple]]",
      "desc": "A dictionary containing the value lists generated by the query."
    },
    {
      "name": "class NSMetadataQueryAttributeValueTuple",
      "desc": "The NSMetadataQueryAttributeValueTuple class represents attribute-value tuples, which are objects that contain the attribute name and value of a metadata attribute."
    },
    {
      "name": "func value(ofAttribute: String, forResultAt: Int) -> Any?",
      "desc": "Returns the value for the attribute name attrName at the index in the results specified by idx."
    },
    {
      "name": "func enableUpdates()",
      "desc": "Enables updates to the query results."
    },
    {
      "name": "func disableUpdates()",
      "desc": "Disables updates to the query results."
    },
    {
      "name": "var operationQueue: OperationQueue?",
      "desc": "The queue on which query result notifications are posted."
    },
    {
      "name": "static let NSMetadataQueryDidFinishGathering: NSNotification.Name",
      "desc": "Posted when the receiver has finished with the initial result-gathering phase of the query."
    },
    {
      "name": "static let NSMetadataQueryDidStartGathering: NSNotification.Name",
      "desc": "Posted when the receiver begins with the initial result-gathering phase of the query."
    },
    {
      "name": "static let NSMetadataQueryDidUpdate: NSNotification.Name",
      "desc": "Posted when the receiver’s results have changed during the live-update phase of the query."
    },
    {
      "name": "static let NSMetadataQueryGatheringProgress: NSNotification.Name",
      "desc": "Posted as the receiver is collecting results during the initial result-gathering phase of the query."
    }
  ],
  "declaration": "class NSMetadataQuery : NSObject",
  "inheritsFrom": [
    "NSObject"
  ]
}