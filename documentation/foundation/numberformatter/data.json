{
  "path": "/documentation/foundation/numberformatter",
  "type": "Class",
  "name": "NumberFormatter",
  "desc": "A formatter that converts between numeric values and their textual representations.",
  "items": [
    {
      "name": "var formatterBehavior: NumberFormatter.Behavior",
      "desc": "The formatter behavior of the receiver."
    },
    {
      "name": "class func setDefaultFormatterBehavior(NumberFormatter.Behavior)",
      "desc": "Sets the default formatter behavior for new instances of NSNumberFormatter ."
    },
    {
      "name": "class func defaultFormatterBehavior() -> NumberFormatter.Behavior",
      "desc": "Returns an NSNumberFormatterBehavior constant that indicates default formatter behavior for new instances of NSNumberFormatter."
    },
    {
      "name": "var numberStyle: NumberFormatter.Style",
      "desc": "The number style used by the receiver."
    },
    {
      "name": "var generatesDecimalNumbers: Bool",
      "desc": "Determines whether the receiver creates instances of NSDecimalNumber when it converts strings to number objects."
    },
    {
      "name": "func getObjectValue(AutoreleasingUnsafeMutablePointer<AnyObject?>?, for: String, range: UnsafeMutablePointer<NSRange>?)",
      "desc": "Returns by reference a cell-content object after creating it from a range of characters in a given string."
    },
    {
      "name": "func number(from: String) -> NSNumber?",
      "desc": "Returns an NSNumber object created by parsing a given string."
    },
    {
      "name": "func string(from: NSNumber) -> String?",
      "desc": "Returns a string containing the formatted value of the provided number object."
    },
    {
      "name": "class func localizedString(from: NSNumber, number: NumberFormatter.Style) -> String",
      "desc": "Returns a localized number string with the specified style."
    },
    {
      "name": "var localizesFormat: Bool",
      "desc": "Determines whether the dollar sign character ($), decimal separator character (.), and thousand separator character (,) are converted to appropriately localized characters as specified by the user’s localization preference."
    },
    {
      "name": "var locale: Locale!",
      "desc": "The locale of the receiver."
    },
    {
      "name": "var roundingBehavior: NSDecimalNumberHandler",
      "desc": "The rounding behavior used by the receiver."
    },
    {
      "name": "class NSDecimalNumberHandler",
      "desc": "A class that adopts the decimal number behaviors protocol."
    },
    {
      "name": "var roundingIncrement: NSNumber!",
      "desc": "The rounding increment used by the receiver."
    },
    {
      "name": "var roundingMode: NumberFormatter.RoundingMode",
      "desc": "The rounding mode used by the receiver."
    },
    {
      "name": "var minimumIntegerDigits: Int",
      "desc": "The minimum number of digits before the decimal separator."
    },
    {
      "name": "var maximumIntegerDigits: Int",
      "desc": "The maximum number of digits before the decimal separator."
    },
    {
      "name": "var minimumFractionDigits: Int",
      "desc": "The minimum number of digits after the decimal separator."
    },
    {
      "name": "var maximumFractionDigits: Int",
      "desc": "The maximum number of digits after the decimal separator."
    },
    {
      "name": "var usesSignificantDigits: Bool",
      "desc": "A Boolean value indicating whether the formatter uses minimum and maximum significant digits when formatting numbers."
    },
    {
      "name": "var minimumSignificantDigits: Int",
      "desc": "The minimum number of significant digits for the number formatter."
    },
    {
      "name": "var maximumSignificantDigits: Int",
      "desc": "The maximum number of significant digits for the number formatter."
    },
    {
      "name": "var format: String",
      "desc": "The receiver’s format."
    },
    {
      "name": "var formattingContext: Formatter.Context",
      "desc": "The capitalization formatting context used when formatting a number."
    },
    {
      "name": "var formatWidth: Int",
      "desc": "The format width used by the receiver."
    },
    {
      "name": "var negativeFormat: String!",
      "desc": "The format the receiver uses to display negative values."
    },
    {
      "name": "var positiveFormat: String!",
      "desc": "The format the receiver uses to display positive values."
    },
    {
      "name": "var multiplier: NSNumber?",
      "desc": "The multiplier of the receiver."
    },
    {
      "name": "var percentSymbol: String!",
      "desc": "The string used to represent a percent symbol."
    },
    {
      "name": "var perMillSymbol: String!",
      "desc": "The string used to represent a per-mill (per-thousand) symbol."
    },
    {
      "name": "var minusSign: String!",
      "desc": "The string used to represent a minus sign."
    },
    {
      "name": "var plusSign: String!",
      "desc": "The string used to represent a plus sign."
    },
    {
      "name": "var exponentSymbol: String!",
      "desc": "The string used to represent an exponent symbol."
    },
    {
      "name": "var zeroSymbol: String?",
      "desc": "The string used to represent a zero value."
    },
    {
      "name": "var nilSymbol: String",
      "desc": "The string used to represent a nil value."
    },
    {
      "name": "var notANumberSymbol: String!",
      "desc": "The string used to represent a NaN (“not a number”) value."
    },
    {
      "name": "var negativeInfinitySymbol: String",
      "desc": "The string used to represent a negative infinity symbol."
    },
    {
      "name": "var positiveInfinitySymbol: String",
      "desc": "The string used to represent a positive infinity symbol."
    },
    {
      "name": "var currencySymbol: String!",
      "desc": "The string used by the receiver as a local currency symbol."
    },
    {
      "name": "var currencyCode: String!",
      "desc": "The receiver’s currency code."
    },
    {
      "name": "var internationalCurrencySymbol: String!",
      "desc": "The international currency symbol used by the receiver."
    },
    {
      "name": "var currencyGroupingSeparator: String!",
      "desc": "The currency grouping separator for the receiver."
    },
    {
      "name": "var positivePrefix: String!",
      "desc": "The string the receiver uses as the prefix for positive values."
    },
    {
      "name": "var positiveSuffix: String!",
      "desc": "The string the receiver uses as the suffix for positive values."
    },
    {
      "name": "var negativePrefix: String!",
      "desc": "The string the receiver uses as a prefix for negative values."
    },
    {
      "name": "var negativeSuffix: String!",
      "desc": "The string the receiver uses as a suffix for negative values."
    },
    {
      "name": "var textAttributesForNegativeValues: [String : Any]?",
      "desc": "The text attributes to be used in displaying negative values."
    },
    {
      "name": "var textAttributesForPositiveValues: [String : Any]?",
      "desc": "The text attributes to be used in displaying positive values."
    },
    {
      "name": "var attributedStringForZero: NSAttributedString",
      "desc": "The attributed string that the receiver uses to display zero values."
    },
    {
      "name": "var textAttributesForZero: [String : Any]?",
      "desc": "The text attributes used to display a zero value."
    },
    {
      "name": "var attributedStringForNil: NSAttributedString",
      "desc": "The attributed string the receiver uses to display nil values."
    },
    {
      "name": "var textAttributesForNil: [String : Any]?",
      "desc": "The text attributes used to display the nil symbol."
    },
    {
      "name": "var attributedStringForNotANumber: NSAttributedString",
      "desc": "The attributed string the receiver uses to display “not a number” values."
    },
    {
      "name": "var textAttributesForNotANumber: [String : Any]?",
      "desc": "The text attributes used to display the NaN (“not a number”) string."
    },
    {
      "name": "var textAttributesForPositiveInfinity: [String : Any]?",
      "desc": "The text attributes used to display the positive infinity symbol."
    },
    {
      "name": "var textAttributesForNegativeInfinity: [String : Any]?",
      "desc": "The text attributes used to display the negative infinity symbol."
    },
    {
      "name": "var groupingSeparator: String!",
      "desc": "The string used by the receiver for a grouping separator."
    },
    {
      "name": "var usesGroupingSeparator: Bool",
      "desc": "Determines whether the receiver displays the group separator."
    },
    {
      "name": "var thousandSeparator: String!",
      "desc": "The character the receiver uses as a thousand separator."
    },
    {
      "name": "var hasThousandSeparators: Bool",
      "desc": "Determines whether the receiver uses thousand separators."
    },
    {
      "name": "var decimalSeparator: String!",
      "desc": "The character the receiver uses as a decimal separator."
    },
    {
      "name": "var alwaysShowsDecimalSeparator: Bool",
      "desc": "Determines whether the receiver always shows the decimal separator, even for integer numbers."
    },
    {
      "name": "var currencyDecimalSeparator: String!",
      "desc": "The string used by the receiver as a currency decimal separator."
    },
    {
      "name": "var groupingSize: Int",
      "desc": "The grouping size of the receiver."
    },
    {
      "name": "var secondaryGroupingSize: Int",
      "desc": "The secondary grouping size of the receiver."
    },
    {
      "name": "var paddingCharacter: String!",
      "desc": "The string that the receiver uses to pad numbers in the formatted string representation."
    },
    {
      "name": "var paddingPosition: NumberFormatter.PadPosition",
      "desc": "The padding position used by the receiver."
    },
    {
      "name": "var allowsFloats: Bool",
      "desc": "Determines whether the receiver allows as input floating-point values (that is, values that include the period character [.])."
    },
    {
      "name": "var minimum: NSNumber?",
      "desc": "The lowest number allowed as input by the receiver."
    },
    {
      "name": "var maximum: NSNumber?",
      "desc": "The highest number allowed as input by the receiver."
    },
    {
      "name": "var isLenient: Bool",
      "desc": "Determines whether the receiver will use heuristics to guess at the number which is intended by a string."
    },
    {
      "name": "var isPartialStringValidationEnabled: Bool",
      "desc": "Determines whether partial string validation is enabled for the receiver."
    },
    {
      "name": "enum NumberFormatter.Style",
      "desc": "The predefined number format styles used by the numberStyle property."
    },
    {
      "name": "enum NumberFormatter.Behavior",
      "desc": "These constants specify the behavior of a number formatter. These constants are returned by the defaultFormatterBehavior() class method and the formatterBehavior property."
    },
    {
      "name": "enum NumberFormatter.PadPosition",
      "desc": "These constants are used to specify how numbers should be padded. These constants are used by the paddingPosition property."
    },
    {
      "name": "enum NumberFormatter.RoundingMode",
      "desc": "These constants are used to specify how numbers should be rounded. These constants are used by the roundingMode property."
    }
  ],
  "declaration": "Declarationclass NumberFormatter : Formatter",
  "inheritsFrom": [
    "Formatter"
  ]
}