{
  "path": "/documentation/foundation/data",
  "type": "Structure",
  "name": "Data",
  "desc": "A byte buffer in memory.",
  "items": [
    {
      "name": "init()",
      "desc": "Creates an empty data buffer."
    },
    {
      "name": "init(capacity: Int)",
      "desc": "Creates an empty data buffer of a specified size."
    },
    {
      "name": "init(count: Int)",
      "desc": "Creates a new data buffer with the specified count of zeroed bytes."
    },
    {
      "name": "func resetBytes(in: Range<Data.Index>)",
      "desc": "Sets a region of the data buffer to 0."
    },
    {
      "name": "init()",
      "desc": "Creates an empty data buffer."
    },
    {
      "name": "init<S>(S)",
      "desc": "Creates a new instance of a collection containing the elements of a sequence."
    },
    {
      "name": "init<SourceType>(buffer: UnsafeBufferPointer<SourceType>)",
      "desc": "Creates a data buffer with copied memory content using a buffer pointer."
    },
    {
      "name": "init<SourceType>(buffer: UnsafeMutableBufferPointer<SourceType>)",
      "desc": "Creates a data buffer with copied memory content using a mutable buffer pointer."
    },
    {
      "name": "init(bytes: UnsafeRawPointer, count: Int)",
      "desc": "Creates data with copied memory content."
    },
    {
      "name": "init(bytesNoCopy: UnsafeMutableRawPointer, count: Int, deallocator: Data.Deallocator)",
      "desc": "Creates a data buffer with memory content without copying the bytes."
    },
    {
      "name": "init(capacity: Int)",
      "desc": "Creates an empty data buffer of a specified size."
    },
    {
      "name": "init(count: Int)",
      "desc": "Creates a new data buffer with the specified count of zeroed bytes."
    },
    {
      "name": "init(bytes: UnsafeRawPointer, count: Int)",
      "desc": "Creates data with copied memory content."
    },
    {
      "name": "init<SourceType>(buffer: UnsafeBufferPointer<SourceType>)",
      "desc": "Creates a data buffer with copied memory content using a buffer pointer."
    },
    {
      "name": "init<SourceType>(buffer: UnsafeMutableBufferPointer<SourceType>)",
      "desc": "Creates a data buffer with copied memory content using a mutable buffer pointer."
    },
    {
      "name": "init(bytesNoCopy: UnsafeMutableRawPointer, count: Int, deallocator: Data.Deallocator)",
      "desc": "Creates a data buffer with memory content without copying the bytes."
    },
    {
      "name": "enum Data.Deallocator",
      "desc": "A deallocator you use to customize how the backing store is deallocated for data created with the no-copy initializer."
    },
    {
      "name": "func write(to: URL, options: Data.WritingOptions)",
      "desc": "Writes the contents of the data buffer to a location."
    },
    {
      "name": "typealias Data.ReadingOptions",
      "desc": "Options to control the reading of data from a URL."
    },
    {
      "name": "typealias Data.WritingOptions",
      "desc": "Options to control the writing of data to a URL."
    },
    {
      "name": "func base64EncodedData(options: Data.Base64EncodingOptions) -> Data",
      "desc": "Returns Base-64 encoded data."
    },
    {
      "name": "func base64EncodedString(options: Data.Base64EncodingOptions) -> String",
      "desc": "Returns a Base-64 encoded string."
    },
    {
      "name": "typealias Data.Base64DecodingOptions",
      "desc": "Options to use when decoding data."
    },
    {
      "name": "typealias Data.Base64EncodingOptions",
      "desc": "Options to use when encoding data."
    },
    {
      "name": "var isEmpty: Bool",
      "desc": "A Boolean value indicating whether the collection is empty."
    },
    {
      "name": "subscript(Range<Data.Index>) -> Data",
      "desc": "Accesses the bytes at the specified range of indexes."
    },
    {
      "name": "subscript(Data.Index) -> UInt8",
      "desc": "Accesses the byte at the specified index."
    },
    {
      "name": "func copyBytes(to: UnsafeMutablePointer<UInt8>, count: Int)",
      "desc": "Copies the contents of the data to memory."
    },
    {
      "name": "func copyBytes(to: UnsafeMutablePointer<UInt8>, from: Range<Data.Index>)",
      "desc": "Copies a subset of the contents of the data to memory."
    },
    {
      "name": "func copyBytes<DestinationType>(to: UnsafeMutableBufferPointer<DestinationType>, from: Range<Data.Index>?) -> Int",
      "desc": "Copies the bytes in a range from the data into a buffer."
    },
    {
      "name": "func append(Data)",
      "desc": "Appends the specified data to the end of this data."
    },
    {
      "name": "func append<SourceType>(UnsafeBufferPointer<SourceType>)",
      "desc": "Append a buffer of bytes to the data."
    },
    {
      "name": "func append(UnsafePointer<UInt8>, count: Int)",
      "desc": "Appends the specified bytes from memory to the end of the data."
    },
    {
      "name": "func append(contentsOf: [UInt8])",
      "desc": "Appends the bytes in the specified array to the end of the data."
    },
    {
      "name": "func reserveCapacity(Int)",
      "desc": "Prepares the collection to store the specified number of elements, when doing so is appropriate for the underlying type."
    },
    {
      "name": "func remove(at: Int) -> UInt8",
      "desc": "Removes and returns the element at the specified position."
    },
    {
      "name": "func removeAll(keepingCapacity: Bool)",
      "desc": "Removes all elements from the collection."
    },
    {
      "name": "func removeSubrange(Range<Int>)",
      "desc": "Removes the elements in the specified subrange from the collection."
    },
    {
      "name": "func replaceSubrange(Range<Data.Index>, with: Data)",
      "desc": "Replaces a region of bytes in the data with new data."
    },
    {
      "name": "func replaceSubrange<ByteCollection>(Range<Data.Index>, with: ByteCollection)",
      "desc": "Replaces a region of bytes in the data with new bytes from a collection."
    },
    {
      "name": "func replaceSubrange<SourceType>(Range<Data.Index>, with: UnsafeBufferPointer<SourceType>)",
      "desc": "Replaces a region of bytes in the data with new bytes from a buffer."
    },
    {
      "name": "func replaceSubrange(Range<Data.Index>, with: UnsafeRawPointer, count: Int)",
      "desc": "Replaces a region of bytes in the data with bytes from memory."
    },
    {
      "name": "func first(where: (UInt8) -> Bool) -> UInt8?",
      "desc": "Returns the first element of the sequence that satisfies the given predicate."
    },
    {
      "name": "func max() -> UInt8?",
      "desc": "Returns the maximum element in the sequence."
    },
    {
      "name": "func max(by: (UInt8, UInt8) -> Bool) -> UInt8?",
      "desc": "Returns the maximum element in the sequence, using the given predicate as the comparison between elements."
    },
    {
      "name": "func min() -> UInt8?",
      "desc": "Returns the minimum element in the sequence."
    },
    {
      "name": "func min(by: (UInt8, UInt8) -> Bool) -> UInt8?",
      "desc": "Returns the minimum element in the sequence, using the given predicate as the comparison between elements."
    },
    {
      "name": "func range(of: Data, options: Data.SearchOptions, in: Range<Data.Index>?) -> Range<Data.Index>?",
      "desc": "Finds the range of the specified data as a subsequence of this data, if it exists."
    },
    {
      "name": "typealias Data.SearchOptions",
      "desc": "Options that control a data search operation."
    },
    {
      "name": "func filter((UInt8) -> Bool) -> Data",
      "desc": "Returns a new collection of the same type containing, in order, the elements of the original collection that satisfy the given predicate."
    },
    {
      "name": "func prefix(Int) -> Data",
      "desc": "Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection."
    },
    {
      "name": "func prefix(through: Int) -> Data",
      "desc": "Returns a subsequence from the start of the collection through the specified position."
    },
    {
      "name": "func prefix(upTo: Int) -> Data",
      "desc": "Returns a subsequence from the start of the collection up to, but not including, the specified position."
    },
    {
      "name": "func prefix(while: (UInt8) -> Bool) -> Data",
      "desc": "Returns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements."
    },
    {
      "name": "func suffix(Int) -> Data",
      "desc": "Returns a subsequence, up to the given maximum length, containing the final elements of the collection."
    },
    {
      "name": "func suffix(from: Int) -> Data",
      "desc": "Returns a subsequence from the specified position to the end of the collection."
    },
    {
      "name": "func dropLast(Int) -> Data",
      "desc": "Returns a subsequence containing all but the specified number of final elements."
    },
    {
      "name": "func dropFirst(Int) -> Data",
      "desc": "Returns a subsequence containing all but the given number of initial elements."
    },
    {
      "name": "func drop(while: (UInt8) -> Bool) -> Data",
      "desc": "Returns a subsequence by skipping elements while predicate returns true and returning the remaining elements."
    },
    {
      "name": "func advanced(by: Int) -> Data",
      "desc": "Returns a new data buffer created by removing the given number of bytes from the front of the original buffer."
    },
    {
      "name": "func reduce<Result>(Result, (Result, UInt8) -> Result) -> Result",
      "desc": "Returns the result of combining the elements of the sequence using the given closure."
    },
    {
      "name": "var lazy: LazySequence<Data>",
      "desc": "A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily."
    },
    {
      "name": "func forEach((UInt8) -> Void)",
      "desc": "Calls the given closure on each element in the sequence in the same order as a for-in loop."
    },
    {
      "name": "func enumerated() -> EnumeratedSequence<Data>",
      "desc": "Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence."
    },
    {
      "name": "func makeIterator() -> Data.Iterator",
      "desc": "Returns an iterator over the contents of the data."
    },
    {
      "name": "struct Data.Iterator",
      "desc": "An iterator that operates over the contents of data."
    },
    {
      "name": "func sort(by: (UInt8, UInt8) -> Bool)",
      "desc": "Sorts the collection in place, using the given predicate as the comparison between elements."
    },
    {
      "name": "func sorted() -> [UInt8]",
      "desc": "Returns the elements of the sequence, sorted."
    },
    {
      "name": "func sorted(by: (UInt8, UInt8) -> Bool) -> [UInt8]",
      "desc": "Returns the elements of the sequence, sorted using the given predicate as the comparison between elements."
    },
    {
      "name": "func reversed() -> ReversedCollection<Data>",
      "desc": "Returns a view presenting the elements of the collection in reverse order."
    },
    {
      "name": "func subdata(in: Range<Data.Index>) -> Data",
      "desc": "Returns a new copy of the data in a specified range."
    },
    {
      "name": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (UInt8) -> Bool) -> [Data]",
      "desc": "Returns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
    },
    {
      "name": "func split(separator: UInt8, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Data]",
      "desc": "Returns the longest possible subsequences of the collection, in order, around elements equal to the given element."
    },
    {
      "name": "static func == (Data, Data) -> Bool",
      "desc": "Returns a Boolean value indicating whether or not two data buffers are equivalent."
    },
    {
      "name": "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
      "desc": "Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order."
    },
    {
      "name": "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
      "desc": "Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence."
    },
    {
      "name": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements."
    },
    {
      "name": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (UInt8, UInt8) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements."
    },
    {
      "name": "typealias Data.Index",
      "desc": "A type used to indicate a position in a data's buffer."
    },
    {
      "name": "var startIndex: Data.Index",
      "desc": "The beginning index into the data."
    },
    {
      "name": "var endIndex: Data.Index",
      "desc": "The end index into the data."
    },
    {
      "name": "func index(after: Data.Index) -> Data.Index",
      "desc": "Returns the index that immediately follows the specified index."
    },
    {
      "name": "func index(before: Data.Index) -> Data.Index",
      "desc": "Returns the index that immediately precedes the specified index."
    },
    {
      "name": "typealias Data.Indices",
      "desc": "A type used to indicate a range of positions in a data's buffer."
    },
    {
      "name": "var description: String",
      "desc": "A textual description of the data."
    },
    {
      "name": "var debugDescription: String",
      "desc": "A textual description the data suitable for debugging."
    },
    {
      "name": "var customMirror: Mirror",
      "desc": "A mirror that reflects the data."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value for the data."
    },
    {
      "name": "class NSData",
      "desc": "A static byte buffer that bridges to Data; use NSData when you need reference semantics or other Foundation-specific behavior."
    },
    {
      "name": "class NSMutableData",
      "desc": "A dynamic byte buffer that bridges to Data; use NSMutableData when you need reference semantics or other Foundation-specific behavior."
    },
    {
      "name": "typealias Data.ReferenceType",
      "desc": "An alias for this value type's equivalent reference type."
    },
    {
      "name": "typealias Data.Element"
    },
    {
      "name": "typealias Data.Regions"
    },
    {
      "name": "typealias Data.SubSequence"
    },
    {
      "name": "init<S>(S)"
    },
    {
      "name": "init?(base64Encoded: Data, options: Data.Base64DecodingOptions)"
    },
    {
      "name": "init?(base64Encoded: String, options: Data.Base64DecodingOptions)"
    },
    {
      "name": "init(contentsOf: URL, options: Data.ReadingOptions)"
    },
    {
      "name": "init(from: Decoder)"
    },
    {
      "name": "init(referencing: NSData)"
    },
    {
      "name": "init(repeating: UInt8, count: Int)"
    },
    {
      "name": "var count: Int"
    },
    {
      "name": "var first: UInt8?",
      "desc": "The first element of the collection."
    },
    {
      "name": "var indices: Range<Int>"
    },
    {
      "name": "var last: UInt8?",
      "desc": "The last element of the collection."
    },
    {
      "name": "var publisher: Publishers.Sequence<Data, Never>"
    },
    {
      "name": "var regions: CollectionOfOne<Data>"
    },
    {
      "name": "var underestimatedCount: Int",
      "desc": "A value less than or equal to the number of elements in the collection."
    },
    {
      "name": "func allSatisfy((UInt8) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate."
    },
    {
      "name": "func append(UInt8)",
      "desc": "Adds an element to the end of the collection."
    },
    {
      "name": "func append<S>(contentsOf: S)"
    },
    {
      "name": "func append<S>(contentsOf: S)",
      "desc": "Adds the elements of a sequence or collection to the end of this collection."
    },
    {
      "name": "func applying(CollectionDifference<UInt8>) -> Data?",
      "desc": "Applies the given difference to this collection."
    },
    {
      "name": "func compactMap<ElementOfResult>((UInt8) -> ElementOfResult?) -> [ElementOfResult]",
      "desc": "Returns an array containing the non-nil results of calling the given transformation with each element of this sequence."
    },
    {
      "name": "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult"
    },
    {
      "name": "func contains(UInt8) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence contains the given element."
    },
    {
      "name": "func contains(where: (UInt8) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate."
    },
    {
      "name": "func copyBytes(to: UnsafeMutableRawBufferPointer) -> Int"
    },
    {
      "name": "func difference<C>(from: C) -> CollectionDifference<UInt8>",
      "desc": "Returns the difference needed to produce this collection’s ordered elements from the given collection."
    },
    {
      "name": "func difference<C>(from: C, by: (C.Element, UInt8) -> Bool) -> CollectionDifference<UInt8>",
      "desc": "Returns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test."
    },
    {
      "name": "func elementsEqual<OtherSequence>(OtherSequence, by: (UInt8, OtherSequence.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test."
    },
    {
      "name": "func encode(to: Encoder)"
    },
    {
      "name": "func firstIndex(of: UInt8) -> Int?",
      "desc": "Returns the first index where the specified value appears in the collection."
    },
    {
      "name": "func firstIndex(where: (UInt8) -> Bool) -> Int?",
      "desc": "Returns the first index in which an element of the collection satisfies the given predicate."
    },
    {
      "name": "func firstRange<D>(of: D) -> Range<Int>?"
    },
    {
      "name": "func firstRange<D, R>(of: D, in: R) -> Range<Int>?"
    },
    {
      "name": "func flatMap<SegmentOfResult>((UInt8) -> SegmentOfResult) -> [SegmentOfResult.Element]",
      "desc": "Returns an array containing the concatenated results of calling the given transformation with each element of this sequence."
    },
    {
      "name": "func formIndex(inout Int, offsetBy: Int)",
      "desc": "Offsets the given index by the specified distance."
    },
    {
      "name": "func formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool",
      "desc": "Offsets the given index by the specified distance, or so that it equals the given limiting index."
    },
    {
      "name": "func formIndex(after: inout Int)",
      "desc": "Replaces the given index with its successor."
    },
    {
      "name": "func formIndex(before: inout Int)",
      "desc": "Replaces the given index with its predecessor."
    },
    {
      "name": "func formatted<S>(S) -> S.FormatOutput"
    },
    {
      "name": "func hash(into: inout Hasher)"
    },
    {
      "name": "func index(Int, offsetBy: Int, limitedBy: Int) -> Int?",
      "desc": "Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index."
    },
    {
      "name": "func insert(UInt8, at: Int)",
      "desc": "Inserts a new element into the collection at the specified position."
    },
    {
      "name": "func insert<C>(contentsOf: C, at: Int)",
      "desc": "Inserts the elements of a sequence into the collection at the specified position."
    },
    {
      "name": "func last(where: (UInt8) -> Bool) -> UInt8?",
      "desc": "Returns the last element of the sequence that satisfies the given predicate."
    },
    {
      "name": "func lastIndex(of: UInt8) -> Int?",
      "desc": "Returns the last index where the specified value appears in the collection."
    },
    {
      "name": "func lastIndex(where: (UInt8) -> Bool) -> Int?",
      "desc": "Returns the index of the last element in the collection that matches the given predicate."
    },
    {
      "name": "func lastRange<D>(of: D) -> Range<Int>?"
    },
    {
      "name": "func lastRange<D, R>(of: D, in: R) -> Range<Int>?"
    },
    {
      "name": "func map<T>((UInt8) -> T) -> [T]",
      "desc": "Returns an array containing the results of mapping the given closure over the sequence’s elements."
    },
    {
      "name": "func partition(by: (UInt8) -> Bool) -> Int",
      "desc": "Reorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don’t match."
    },
    {
      "name": "func popFirst() -> UInt8?",
      "desc": "Removes and returns the first element of the collection."
    },
    {
      "name": "func popLast() -> UInt8?",
      "desc": "Removes and returns the last element of the collection."
    },
    {
      "name": "func randomElement() -> UInt8?",
      "desc": "Returns a random element of the collection."
    },
    {
      "name": "func randomElement<T>(using: inout T) -> UInt8?",
      "desc": "Returns a random element of the collection, using the given generator as a source for randomness."
    },
    {
      "name": "func reduce<Result>(into: Result, (inout Result, UInt8) -> ()) -> Result",
      "desc": "Returns the result of combining the elements of the sequence using the given closure."
    },
    {
      "name": "func removeAll(where: (UInt8) -> Bool)",
      "desc": "Removes all the elements that satisfy the given predicate."
    },
    {
      "name": "func removeFirst() -> UInt8",
      "desc": "Removes and returns the first element of the collection."
    },
    {
      "name": "func removeFirst(Int)",
      "desc": "Removes the specified number of elements from the beginning of the collection."
    },
    {
      "name": "func removeLast() -> UInt8",
      "desc": "Removes and returns the last element of the collection."
    },
    {
      "name": "func removeLast(Int)",
      "desc": "Removes the specified number of elements from the end of the collection."
    },
    {
      "name": "func removeSubrange<R>(R)",
      "desc": "Removes the elements in the specified subrange from the collection."
    },
    {
      "name": "func replaceSubrange<C, R>(R, with: C)",
      "desc": "Replaces the specified subrange of elements with the given collection."
    },
    {
      "name": "func resetBytes<R>(in: R)"
    },
    {
      "name": "func reverse()",
      "desc": "Reverses the elements of the collection in place."
    },
    {
      "name": "func shuffle()",
      "desc": "Shuffles the collection in place."
    },
    {
      "name": "func shuffle<T>(using: inout T)",
      "desc": "Shuffles the collection in place, using the given generator as a source for randomness."
    },
    {
      "name": "func shuffled() -> [UInt8]",
      "desc": "Returns the elements of the sequence, shuffled."
    },
    {
      "name": "func shuffled<T>(using: inout T) -> [UInt8]",
      "desc": "Returns the elements of the sequence, shuffled using the given generator as a source for randomness."
    },
    {
      "name": "func sort()",
      "desc": "Sorts the collection in place."
    },
    {
      "name": "func sort<Comparator>(using: Comparator)"
    },
    {
      "name": "func sort<S, Comparator>(using: S)"
    },
    {
      "name": "func sorted<Comparator>(using: Comparator) -> [UInt8]"
    },
    {
      "name": "func sorted<S, Comparator>(using: S) -> [UInt8]"
    },
    {
      "name": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (UInt8, PossiblePrefix.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test."
    },
    {
      "name": "func swapAt(Int, Int)",
      "desc": "Exchanges the values at the specified indices of the collection."
    },
    {
      "name": "func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<UInt8>) -> R) -> R?",
      "desc": "Executes a closure on the collection’s contiguous storage."
    },
    {
      "name": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<UInt8>) -> R) -> R?",
      "desc": "Executes a closure on the sequence’s contiguous storage."
    },
    {
      "name": "func withUnsafeBytes<ResultType>((UnsafeRawBufferPointer) -> ResultType) -> ResultType"
    },
    {
      "name": "func withUnsafeMutableBytes<ResultType>((UnsafeMutableRawBufferPointer) -> ResultType) -> ResultType"
    },
    {
      "name": "subscript<R>(R) -> Data"
    },
    {
      "name": "subscript((UnboundedRange_) -> ()) -> Data"
    },
    {
      "name": "subscript<R>(R) -> Data",
      "desc": "Accesses the contiguous subrange of the collection’s elements specified by a range expression."
    },
    {
      "name": "subscript<R>(R) -> Data"
    },
    {
      "name": "static func != (Data, Data) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are not equal."
    },
    {
      "name": "static func + <Other>(Other, Data) -> Data",
      "desc": "Creates a new collection by concatenating the elements of a sequence and a collection."
    },
    {
      "name": "static func + <Other>(Data, Other) -> Data",
      "desc": "Creates a new collection by concatenating the elements of a collection and a sequence."
    },
    {
      "name": "static func + <Other>(Data, Other) -> Data",
      "desc": "Creates a new collection by concatenating the elements of two collections."
    },
    {
      "name": "static func += <Other>(inout Data, Other)",
      "desc": "Appends the elements of a sequence to a range-replaceable collection."
    }
  ],
  "declaration": "Declaration@frozen struct Data",
  "conformsTo": [
    "CKRecordValueProtocol",
    "ContiguousBytes",
    "CustomDebugStringConvertible",
    "CustomReflectable",
    "CustomStringConvertible",
    "Decodable",
    "Encodable",
    "Equatable",
    "Hashable",
    "MutableCollection",
    "MutableDataProtocol",
    "RandomAccessCollection",
    "RangeReplaceableCollection",
    "ReferenceConvertible"
  ]
}