{
  "path": "/documentation/foundation/nsproxy",
  "type": "Class",
  "name": "NSProxy",
  "desc": "An abstract superclass defining an API for objects that act as stand-ins for other objects or for objects that donâ€™t exist yet.",
  "items": [
    {
      "name": "class func alloc() -> Self",
      "desc": "Returns a new instance of the receiving class"
    },
    {
      "name": "func finalize()",
      "desc": "The garbage collector invokes this method on the receiver before disposing of the memory it uses."
    },
    {
      "name": "func forwardInvocation(NSInvocation)",
      "desc": "Passes a given invocation to the real object the proxy represents."
    },
    {
      "name": "class func responds(to: Selector) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the receiving class responds to a given selector."
    },
    {
      "name": "class func `class`() -> AnyClass",
      "desc": "Returns self (the class object)."
    },
    {
      "name": "var description: String",
      "desc": "A string containing the real class name and the id of the receiver as a hexadecimal number."
    },
    {
      "name": "var debugDescription: String",
      "desc": "A string containing the real class name and the id of the receiver as a hexadecimal number."
    },
    {
      "name": "func dealloc()",
      "desc": "Deallocates the memory occupied by the receiver."
    }
  ],
  "declaration": "class NSProxy",
  "conformsTo": [
    "NSObjectProtocol"
  ]
}