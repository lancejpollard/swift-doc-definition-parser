{
  "path": "/documentation/foundation/undomanager",
  "type": "Class",
  "name": "UndoManager",
  "desc": "A general-purpose recorder of operations that enables undo and redo.",
  "items": [
    {
      "name": "func registerUndo<TargetType>(withTarget: TargetType, handler: (TargetType) -> Void)",
      "desc": "Registers the specified closure to implement a single undo operation that the target receives."
    },
    {
      "name": "func registerUndo(withTarget: Any, selector: Selector, object: Any?)",
      "desc": "Registers the selector of the specified target to implement a single undo operation that the target receives."
    },
    {
      "name": "func prepare(withInvocationTarget: Any) -> Any",
      "desc": "Prepares the undo manager for invocation-based undo with the given target as the subject of the next undo operation."
    },
    {
      "name": "var canUndo: Bool",
      "desc": "A Boolean value that indicates whether the receiver has any actions to undo."
    },
    {
      "name": "var canRedo: Bool",
      "desc": "A Boolean value that indicates whether the receiver has any actions to redo."
    },
    {
      "name": "func undo()",
      "desc": "Closes the top-level undo group if necessary and invokes undoNestedGroup()."
    },
    {
      "name": "func undoNestedGroup()",
      "desc": "Performs the undo operations in the last undo group (whether top-level or nested), recording the operations on the redo stack as a single group."
    },
    {
      "name": "func redo()",
      "desc": "Performs the operations in the last group on the redo stack, if there are any, recording them on the undo stack as a single group."
    },
    {
      "name": "var levelsOfUndo: Int",
      "desc": "The maximum number of top-level undo groups the receiver holds."
    },
    {
      "name": "func beginUndoGrouping()",
      "desc": "Marks the beginning of an undo group."
    },
    {
      "name": "func endUndoGrouping()",
      "desc": "Marks the end of an undo group."
    },
    {
      "name": "var groupsByEvent: Bool",
      "desc": "A Boolean value that indicates whether the receiver automatically creates undo groups around each pass of the run loop."
    },
    {
      "name": "var groupingLevel: Int",
      "desc": "The number of nested undo groups (or redo groups, if Redo was invoked last) in the current event loop."
    },
    {
      "name": "func disableUndoRegistration()",
      "desc": "Disables the recording of undo operations, whether by registerUndo(withTarget:selector:object:) or by invocation-based undo."
    },
    {
      "name": "func enableUndoRegistration()",
      "desc": "Enables the recording of undo operations."
    },
    {
      "name": "var isUndoRegistrationEnabled: Bool",
      "desc": "A Boolean value that indicates whether the recording of undo operations is enabled."
    },
    {
      "name": "var isUndoing: Bool",
      "desc": "Returns a Boolean value that indicates whether the receiver is in the process of performing its undo() or undoNestedGroup() method."
    },
    {
      "name": "var isRedoing: Bool",
      "desc": "Returns a Boolean value that indicates whether the receiver is in the process of performing its redo() method."
    },
    {
      "name": "func removeAllActions()",
      "desc": "Clears the undo and redo stacks and re-enables the receiver."
    },
    {
      "name": "func removeAllActions(withTarget: Any)",
      "desc": "Clears the undo and redo stacks of all operations involving the specified target as the recipient of the undo message."
    },
    {
      "name": "var undoActionName: String",
      "desc": "The name identifying the undo action."
    },
    {
      "name": "var redoActionName: String",
      "desc": "The name identifying the redo action."
    },
    {
      "name": "func setActionName(String)",
      "desc": "Sets the name of the action associated with the Undo or Redo command."
    },
    {
      "name": "var undoMenuItemTitle: String",
      "desc": "The complete title of the Undo menu command, for example, “Undo Paste.”"
    },
    {
      "name": "var redoMenuItemTitle: String",
      "desc": "The complete title of the Redo menu command, for example, “Redo Paste.”"
    },
    {
      "name": "func undoMenuTitle(forUndoActionName: String) -> String",
      "desc": "Returns the complete, localized title of the Undo menu command for the action identified by the given name."
    },
    {
      "name": "func redoMenuTitle(forUndoActionName: String) -> String",
      "desc": "Returns the complete, localized title of the Redo menu command for the action identified by the given name."
    },
    {
      "name": "var runLoopModes: [RunLoop.Mode]",
      "desc": "The modes governing the types of input handled during a cycle of the run loop."
    },
    {
      "name": "func setActionIsDiscardable(Bool)",
      "desc": "Sets whether the next undo or redo action is discardable."
    },
    {
      "name": "var undoActionIsDiscardable: Bool",
      "desc": "Boolean value that indicates whether the next undo action is discardable."
    },
    {
      "name": "var redoActionIsDiscardable: Bool",
      "desc": "Boolean value that indicates whether the next redo action is discardable."
    },
    {
      "name": "let NSUndoCloseGroupingRunLoopOrdering: Int",
      "desc": "NSUndoManager provides this constant as a convenience; you can use it to compare to values returned by some NSUndoManager methods."
    },
    {
      "name": "let NSUndoManagerGroupIsDiscardableKey: String",
      "desc": "The key has a corresponding value of true, wrapped as a Boolean NSNumber object, if the undo group as a whole is discardable."
    },
    {
      "name": "static let NSUndoManagerCheckpoint: NSNotification.Name",
      "desc": "Posted whenever an NSUndoManager object opens or closes an undo group (except when it opens a top-level group) and when checking the redo stack in canRedo."
    },
    {
      "name": "static let NSUndoManagerDidOpenUndoGroup: NSNotification.Name",
      "desc": "Posted whenever an NSUndoManager object opens an undo group, which occurs in the implementation of the beginUndoGrouping() method."
    },
    {
      "name": "static let NSUndoManagerDidRedoChange: NSNotification.Name",
      "desc": "Posted just after an NSUndoManager object performs a redo operation (redo())."
    },
    {
      "name": "static let NSUndoManagerDidUndoChange: NSNotification.Name",
      "desc": "Posted just after an NSUndoManager object performs an undo operation."
    },
    {
      "name": "static let NSUndoManagerWillCloseUndoGroup: NSNotification.Name",
      "desc": "Posted before an NSUndoManager object closes an undo group, which occurs in the implementation of the endUndoGrouping() method."
    },
    {
      "name": "static let NSUndoManagerDidCloseUndoGroup: NSNotification.Name",
      "desc": "Posted after an NSUndoManager object closes an undo group, which occurs in the implementation of the endUndoGrouping() method."
    },
    {
      "name": "static let NSUndoManagerWillRedoChange: NSNotification.Name",
      "desc": "Posted just before an NSUndoManager object performs a redo operation (redo())."
    },
    {
      "name": "static let NSUndoManagerWillUndoChange: NSNotification.Name",
      "desc": "Posted just before an NSUndoManager object performs an undo operation."
    }
  ],
  "declaration": "class UndoManager : NSObject",
  "inheritsFrom": [
    "NSObject"
  ]
}