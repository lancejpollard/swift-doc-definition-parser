{
  "path": "/documentation/foundation/nscharacterset",
  "type": "Class",
  "name": "NSCharacterSet",
  "desc": "An object representing a fixed set of Unicode character values that bridges to a CharacterSet; use NSCharacterSet when you need reference semantics or other Foundation-specific behavior.",
  "items": [
    {
      "name": "class var alphanumerics: CharacterSet",
      "desc": "A character set containing the characters in Unicode General Categories L*, M*, and N*."
    },
    {
      "name": "class var capitalizedLetters: CharacterSet",
      "desc": "A character set containing the characters in Unicode General Category Lt."
    },
    {
      "name": "class var controlCharacters: CharacterSet",
      "desc": "A character set containing the characters in Unicode General Category Cc and Cf."
    },
    {
      "name": "class var decimalDigits: CharacterSet",
      "desc": "A character set containing the characters in the category of Decimal Numbers."
    },
    {
      "name": "class var decomposables: CharacterSet",
      "desc": "A character set containing individual Unicode characters that can also be represented as composed character sequences (such as for letters with accents), by the definition of “standard decomposition” in version 3.2 of the Unicode character encoding standard."
    },
    {
      "name": "class var illegalCharacters: CharacterSet",
      "desc": "A character set containing values in the category of Non-Characters or that have not yet been defined in version 3.2 of the Unicode standard."
    },
    {
      "name": "class var letters: CharacterSet",
      "desc": "A character set containing the characters in Unicode General Category L* & M*."
    },
    {
      "name": "class var lowercaseLetters: CharacterSet",
      "desc": "A character set containing the characters in Unicode General Category Ll."
    },
    {
      "name": "class var newlines: CharacterSet",
      "desc": "A character set containing the newline characters (U+000A ~ U+000D, U+0085, U+2028, and U+2029)."
    },
    {
      "name": "class var nonBaseCharacters: CharacterSet",
      "desc": "A character set containing the characters in Unicode General Category M*."
    },
    {
      "name": "class var punctuationCharacters: CharacterSet",
      "desc": "A character set containing the characters in Unicode General Category P*."
    },
    {
      "name": "class var symbols: CharacterSet",
      "desc": "A character set containing the characters in Unicode General Category S*."
    },
    {
      "name": "class var uppercaseLetters: CharacterSet",
      "desc": "A character set containing the characters in Unicode General Category Lu and Lt."
    },
    {
      "name": "class var whitespacesAndNewlines: CharacterSet",
      "desc": "A character set containing characters in Unicode General Category Z*, U+000A ~ U+000D, and U+0085."
    },
    {
      "name": "class var whitespaces: CharacterSet",
      "desc": "A character set containing the characters in Unicode General Category Zs and CHARACTER TABULATION (U+0009)."
    },
    {
      "name": "class var urlFragmentAllowed: CharacterSet",
      "desc": "Returns the character set for characters allowed in a fragment URL component."
    },
    {
      "name": "class var urlHostAllowed: CharacterSet",
      "desc": "Returns the character set for characters allowed in a host URL subcomponent."
    },
    {
      "name": "class var urlPasswordAllowed: CharacterSet",
      "desc": "Returns the character set for characters allowed in a password URL subcomponent."
    },
    {
      "name": "class var urlPathAllowed: CharacterSet",
      "desc": "Returns the character set for characters allowed in a path URL component."
    },
    {
      "name": "class var urlQueryAllowed: CharacterSet",
      "desc": "Returns the character set for characters allowed in a query URL component."
    },
    {
      "name": "class var urlUserAllowed: CharacterSet",
      "desc": "Returns the character set for characters allowed in a user URL subcomponent."
    },
    {
      "name": "init(coder: NSCoder)"
    },
    {
      "name": "init(charactersIn: String)",
      "desc": "Returns a character set containing the characters in a given string."
    },
    {
      "name": "init(range: NSRange)",
      "desc": "Returns a character set containing characters with Unicode values in a given range."
    },
    {
      "name": "init(bitmapRepresentation: Data)",
      "desc": "Returns a character set containing characters determined by a given bitmap representation."
    },
    {
      "name": "init?(contentsOfFile: String)",
      "desc": "Returns a character set read from the bitmap representation stored in the file a given path."
    },
    {
      "name": "var bitmapRepresentation: Data",
      "desc": "An NSData object encoding the receiver in binary format."
    },
    {
      "name": "var inverted: CharacterSet",
      "desc": "A character set containing only characters that don’t exist in the receiver."
    },
    {
      "name": "func characterIsMember(unichar) -> Bool",
      "desc": "Returns a Boolean value that indicates whether a given character is in the receiver."
    },
    {
      "name": "func hasMemberInPlane(UInt8) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the receiver has at least one member in a given character plane."
    },
    {
      "name": "func isSuperset(of: CharacterSet) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the receiver is a superset of another given character set."
    },
    {
      "name": "func longCharacterIsMember(UTF32Char) -> Bool",
      "desc": "Returns a Boolean value that indicates whether a given long character is a member of the receiver."
    }
  ],
  "declaration": "class NSCharacterSet : NSObject",
  "inheritsFrom": [
    "NSObject"
  ],
  "conformsTo": [
    "NSCopying",
    "NSMutableCopying",
    "NSSecureCoding"
  ]
}