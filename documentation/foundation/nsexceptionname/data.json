{
  "path": "/documentation/foundation/nsexceptionname",
  "type": "Structure",
  "name": "NSExceptionName",
  "desc": "No overview available.",
  "items": [
    {
      "name": "static let characterConversionException: NSExceptionName",
      "desc": "NSString raises an NSCharacterConversionException if a string cannot be represented in a file-system or string encoding."
    },
    {
      "name": "static let decimalNumberDivideByZeroException: NSExceptionName",
      "desc": "The exception raised on divide by zero."
    },
    {
      "name": "static let decimalNumberExactnessException: NSExceptionName",
      "desc": "The exception raised if there is an exactness error."
    },
    {
      "name": "static let decimalNumberOverflowException: NSExceptionName",
      "desc": "The exception raised on overflow."
    },
    {
      "name": "static let decimalNumberUnderflowException: NSExceptionName",
      "desc": "The exception raised on underflow."
    },
    {
      "name": "static let destinationInvalidException: NSExceptionName",
      "desc": "Name of an exception that occurs when an internal assertion fails and implies an unexpected condition within the distributed objects."
    },
    {
      "name": "static let fileHandleOperationException: NSExceptionName",
      "desc": "Raised by NSFileHandle if attempts to determine file-handle type fail or if attempts to read from a file or channel fail."
    },
    {
      "name": "static let genericException: NSExceptionName",
      "desc": "A generic name for an exception."
    },
    {
      "name": "static let internalInconsistencyException: NSExceptionName",
      "desc": "Name of an exception that occurs when an internal assertion fails and implies an unexpected condition within the called code."
    },
    {
      "name": "static let invalidArchiveOperationException: NSExceptionName",
      "desc": "The name of the exception raised by NSKeyedArchiver if there is a problem creating an archive."
    },
    {
      "name": "static let invalidArgumentException: NSExceptionName",
      "desc": "Name of an exception that occurs when you pass an invalid argument to a method, such as a nil pointer where a non-nil object is required."
    },
    {
      "name": "static let invalidReceivePortException: NSExceptionName",
      "desc": "Name of an exception that occurs when the receive port of an NSConnection has become invalid."
    },
    {
      "name": "static let invalidSendPortException: NSExceptionName",
      "desc": "Name of an exception that occurs when the send port of an NSConnection has become invalid."
    },
    {
      "name": "static let invalidUnarchiveOperationException: NSExceptionName",
      "desc": "The name of the exception raised by NSKeyedArchiver if there is a problem extracting an archive."
    },
    {
      "name": "static let invocationOperationCancelledException: NSExceptionName",
      "desc": "The name of the exception raised if the result method is called after the operation was cancelled."
    },
    {
      "name": "static let invocationOperationVoidResultException: NSExceptionName",
      "desc": "The name of the exception raised if the result method is called for an invocation method with a void return type."
    },
    {
      "name": "static let mallocException: NSExceptionName",
      "desc": "Obsolete; not currently used."
    },
    {
      "name": "static let objectInaccessibleException: NSExceptionName",
      "desc": "Name of an exception that occurs when a remote object is accessed from a thread that should not access it."
    },
    {
      "name": "static let objectNotAvailableException: NSExceptionName",
      "desc": "Name of an exception that occurs when the remote side of the NSConnection refused to send the message to the object because the object has never been vended."
    },
    {
      "name": "static let oldStyleException: NSExceptionName",
      "desc": "No longer used."
    },
    {
      "name": "static let parseErrorException: NSExceptionName",
      "desc": "NSString raises an NSParseErrorException if a string cannot be parsed as a property list."
    },
    {
      "name": "static let portReceiveException: NSExceptionName",
      "desc": "Generic error occurred on receive."
    },
    {
      "name": "static let portSendException: NSExceptionName",
      "desc": "Generic error occurred on send."
    },
    {
      "name": "static let portTimeoutException: NSExceptionName",
      "desc": "Name of an exception that occurs when a timeout set on a port expires during a send or receive operation."
    },
    {
      "name": "static let rangeException: NSExceptionName",
      "desc": "Name of an exception that occurs when attempting to access outside the bounds of some data, such as beyond the end of a string."
    },
    {
      "name": "static let undefinedKeyException: NSExceptionName",
      "desc": "Raised when a key value coding operation fails. userInfo keys are described in NSUndefinedKeyException userInfo Keys"
    },
    {
      "name": "static let inconsistentArchiveException: NSExceptionName",
      "desc": "The name of an exception raised by NSArchiver if there are problems initializing or encoding."
    },
    {
      "name": "static let NSPPDIncludeNotFoundException: NSExceptionName"
    },
    {
      "name": "static let NSPPDIncludeStackOverflowException: NSExceptionName"
    },
    {
      "name": "static let NSPPDIncludeStackUnderflowException: NSExceptionName"
    },
    {
      "name": "static let NSPPDParseException: NSExceptionName"
    },
    {
      "name": "static let NSRTFPropertyStackOverflowException: NSExceptionName"
    },
    {
      "name": "static let NSTIFFException: NSExceptionName"
    },
    {
      "name": "static let abortModalException: NSExceptionName"
    },
    {
      "name": "static let abortPrintingException: NSExceptionName"
    },
    {
      "name": "static let appKitIgnoredException: NSExceptionName"
    },
    {
      "name": "static let appKitVirtualMemoryException: NSExceptionName"
    },
    {
      "name": "static let badBitmapParametersException: NSExceptionName"
    },
    {
      "name": "static let badComparisonException: NSExceptionName"
    },
    {
      "name": "static let badRTFColorTableException: NSExceptionName"
    },
    {
      "name": "static let badRTFDirectiveException: NSExceptionName"
    },
    {
      "name": "static let badRTFFontTableException: NSExceptionName"
    },
    {
      "name": "static let badRTFStyleSheetException: NSExceptionName"
    },
    {
      "name": "static let browserIllegalDelegateException: NSExceptionName"
    },
    {
      "name": "static let colorListIOException: NSExceptionName"
    },
    {
      "name": "static let colorListNotEditableException: NSExceptionName"
    },
    {
      "name": "static let draggingException: NSExceptionName"
    },
    {
      "name": "static let fontUnavailableException: NSExceptionName"
    },
    {
      "name": "static let illegalSelectorException: NSExceptionName"
    },
    {
      "name": "static let imageCacheException: NSExceptionName"
    },
    {
      "name": "static let nibLoadingException: NSExceptionName"
    },
    {
      "name": "static let pasteboardCommunicationException: NSExceptionName"
    },
    {
      "name": "static let printOperationExistsException: NSExceptionName",
      "desc": "The name of an exception raised when there is already a print operation in process."
    },
    {
      "name": "static let printPackageException: NSExceptionName"
    },
    {
      "name": "static let printingCommunicationException: NSExceptionName"
    },
    {
      "name": "static let textLineTooLongException: NSExceptionName",
      "desc": "Exception generated if a line is too long in a NSText object."
    },
    {
      "name": "static let textNoSelectionException: NSExceptionName"
    },
    {
      "name": "static let textReadException: NSExceptionName"
    },
    {
      "name": "static let textWriteException: NSExceptionName"
    },
    {
      "name": "static let typedStreamVersionException: NSExceptionName"
    },
    {
      "name": "static let windowServerCommunicationException: NSExceptionName"
    },
    {
      "name": "static let wordTablesReadException: NSExceptionName"
    },
    {
      "name": "static let wordTablesWriteException: NSExceptionName"
    },
    {
      "name": "class let hierarchyInconsistencyException: NSExceptionName",
      "desc": "Raised if the view controller hierarchy is inconsistent with the view hierarchy."
    },
    {
      "name": "class let invalidInterfaceOrientationException: NSExceptionName",
      "desc": "An exception thatâ€™s thrown if a view controller or the app returns an invalid set of supported interface orientations."
    },
    {
      "name": "init(String)"
    },
    {
      "name": "init(rawValue: String)"
    }
  ],
  "declaration": "struct NSExceptionName, @unchecked Sendable",
  "conformsTo": [
    "Equatable",
    "Hashable",
    "RawRepresentable",
    "Sendable"
  ]
}