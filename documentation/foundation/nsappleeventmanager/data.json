{
  "path": "/documentation/foundation/nsappleeventmanager",
  "type": "Class",
  "name": "NSAppleEventManager",
  "desc": "A mechanism for registering handler routines for specific types of Apple events and dispatching events to those handlers.",
  "items": [
    {
      "name": "class func shared() -> NSAppleEventManager",
      "desc": "Returns the single instance of NSAppleEventManager, creating it first if it doesnâ€™t exist."
    },
    {
      "name": "func removeEventHandler(forEventClass: AEEventClass, andEventID: AEEventID)",
      "desc": "If an Apple event handler has been registered for the event specified by eventClass and eventID, removes it."
    },
    {
      "name": "func setEventHandler(Any, andSelector: Selector, forEventClass: AEEventClass, andEventID: AEEventID)",
      "desc": "Registers the Apple event handler specified by handler for the event specified by eventClass and eventID."
    },
    {
      "name": "func dispatchRawAppleEvent(UnsafePointer<AppleEvent>, withRawReply: UnsafeMutablePointer<AppleEvent>, handlerRefCon: SRefCon) -> OSErr",
      "desc": "Causes the Apple event specified by theAppleEvent to be dispatched to the appropriate Apple event handler, if one has been registered by calling setEventHandler(_:andSelector:forEventClass:andEventID:)."
    },
    {
      "name": "func appleEvent(forSuspensionID: NSAppleEventManager.SuspensionID) -> NSAppleEventDescriptor",
      "desc": "Given a nonzero suspensionID returned by an invocation of suspendCurrentAppleEvent(), returns the descriptor for the event whose handling was suspended."
    },
    {
      "name": "var currentAppleEvent: NSAppleEventDescriptor?",
      "desc": "Returns the descriptor for currentAppleEvent if an Apple event is being handled on the current thread."
    },
    {
      "name": "var currentReplyAppleEvent: NSAppleEventDescriptor?",
      "desc": "Returns the corresponding reply event descriptor if an Apple event is being handled on the current thread."
    },
    {
      "name": "func replyAppleEvent(forSuspensionID: NSAppleEventManager.SuspensionID) -> NSAppleEventDescriptor",
      "desc": "Given a nonzero suspensionID returned by an invocation of suspendCurrentAppleEvent(), returns the corresponding reply event descriptor."
    },
    {
      "name": "func resume(withSuspensionID: NSAppleEventManager.SuspensionID)",
      "desc": "Given a nonzero suspensionID returned by an invocation of suspendCurrentAppleEvent(), signal that handling of the suspended event may now continue."
    },
    {
      "name": "func setCurrentAppleEventAndReplyEventWithSuspensionID(NSAppleEventManager.SuspensionID)",
      "desc": "Given a nonzero suspensionID returned by an invocation of suspendCurrentAppleEvent(), sets the values that will be returned by subsequent invocations of currentAppleEvent and currentReplyAppleEvent to be the event whose handling was suspended and its corresponding reply event, respectively."
    },
    {
      "name": "func suspendCurrentAppleEvent() -> NSAppleEventManager.SuspensionID?",
      "desc": "Suspends the handling of the current event and returns an ID that must be used to resume the handling of the event if an Apple event is being handled on the current thread."
    },
    {
      "name": "typealias NSAppleEventManager.SuspensionID",
      "desc": "Identifies an Apple event whose handling has been suspended. Can be used to resume handling of the Apple event."
    }
  ],
  "declaration": "class NSAppleEventManager : NSObject",
  "inheritsFrom": [
    "NSObject"
  ]
}