{
  "path": "/documentation/foundation/nscomparisonpredicate/operator",
  "type": "Enumeration",
  "name": "NSComparisonPredicate.Operator",
  "desc": "Defines the type of comparison for a comparison predicate.",
  "items": [
    {
      "name": "case lessThan",
      "desc": "A less-than predicate."
    },
    {
      "name": "case lessThanOrEqualTo",
      "desc": "A less-than-or-equal-to predicate."
    },
    {
      "name": "case greaterThan",
      "desc": "A greater-than predicate."
    },
    {
      "name": "case greaterThanOrEqualTo",
      "desc": "A greater-than-or-equal-to predicate."
    },
    {
      "name": "case equalTo",
      "desc": "An equal-to predicate."
    },
    {
      "name": "case notEqualTo",
      "desc": "A not-equal-to predicate."
    },
    {
      "name": "case matches",
      "desc": "A full regular expression matching predicate."
    },
    {
      "name": "case like",
      "desc": "A simple subset of the MATCHES predicate, similar in behavior to SQL LIKE."
    },
    {
      "name": "case beginsWith",
      "desc": "A begins-with predicate."
    },
    {
      "name": "case endsWith",
      "desc": "An ends-with predicate."
    },
    {
      "name": "case `in`",
      "desc": "A predicate to determine if the left hand side is in the right hand side."
    },
    {
      "name": "case customSelector",
      "desc": "A predicate that uses a custom selector that takes a single argument and returns a BOOL value."
    },
    {
      "name": "case contains",
      "desc": "A predicate to determine if the left hand side contains the right hand side."
    },
    {
      "name": "case between",
      "desc": "A predicate to determine if the left hand side lies at or between bounds specified by the right hand side."
    }
  ],
  "declaration": "enum Operator : UInt, @unchecked Sendable",
  "conformsTo": [
    "Sendable"
  ]
}