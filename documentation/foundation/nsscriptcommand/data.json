{
  "path": "/documentation/foundation/nsscriptcommand",
  "type": "Class",
  "name": "NSScriptCommand",
  "desc": "A self-contained scripting statement.",
  "items": [
    {
      "name": "init(commandDescription: NSScriptCommandDescription)",
      "desc": "Returns an a script command object initialized from the passed command description."
    },
    {
      "name": "class func current() -> NSScriptCommand?",
      "desc": "If a command is being executed in the current thread by Cocoa scripting's built-in Apple event handling, return the command."
    },
    {
      "name": "var appleEvent: NSAppleEventDescriptor?",
      "desc": "If the receiver was constructed by Cocoa scripting's built-in Apple event handling, returns the Apple event descriptor from which it was constructed."
    },
    {
      "name": "func execute() -> Any?",
      "desc": "Executes the command if it is valid and returns the result, if any."
    },
    {
      "name": "func performDefaultImplementation() -> Any?",
      "desc": "Overridden by subclasses to provide a default implementation for the command represented by the receiver."
    },
    {
      "name": "var evaluatedReceivers: Any?",
      "desc": "Returns the object or objects to which the command is to be sent (called both the “receivers” or “targets” of script commands)."
    },
    {
      "name": "var receiversSpecifier: NSScriptObjectSpecifier?",
      "desc": "Sets the object specifier to receiversSpec that, when evaluated, indicates the receiver or receivers of the command."
    },
    {
      "name": "var arguments: [String : Any]?",
      "desc": "Sets the arguments of the command to args."
    },
    {
      "name": "var evaluatedArguments: [String : Any]?",
      "desc": "Returns a dictionary containing the arguments of the command, evaluated from object specifiers to objects if necessary. The keys in the dictionary are the argument names."
    },
    {
      "name": "var directParameter: Any?",
      "desc": "Sets the object that corresponds to the direct parameter of the Apple event from which the receiver derives."
    },
    {
      "name": "var commandDescription: NSScriptCommandDescription",
      "desc": "Returns the command description for the command."
    },
    {
      "name": "var scriptErrorExpectedTypeDescriptor: NSAppleEventDescriptor?",
      "desc": "Sets a descriptor for the expected type that will be put in the reply Apple event if the sender requested a reply, execution of the receiver completes, and an error number was set."
    },
    {
      "name": "var scriptErrorNumber: Int",
      "desc": "Sets a script error number that is associated with the execution of the command and is returned in the reply Apple event, if a reply was requested by the sender."
    },
    {
      "name": "var scriptErrorOffendingObjectDescriptor: NSAppleEventDescriptor?",
      "desc": "Sets a descriptor for an object that will be put in the reply Apple event if the sender requested a reply, execution of the receiver completes, and an error number was set."
    },
    {
      "name": "var scriptErrorString: String?",
      "desc": "Sets a script error string that is associated with execution of the command."
    },
    {
      "name": "func suspendExecution()",
      "desc": "Suspends the execution of the receiver."
    },
    {
      "name": "func resumeExecution(withResult: Any?)",
      "desc": "If a successful, unmatched, invocation of suspendExecution() has been made, resume the execution of the command."
    },
    {
      "name": "init?(coder: NSCoder)"
    },
    {
      "name": "var isWellFormed: Bool"
    }
  ],
  "declaration": "class NSScriptCommand : NSObject",
  "inheritsFrom": [
    "NSObject"
  ],
  "conformsTo": [
    "NSCoding"
  ]
}