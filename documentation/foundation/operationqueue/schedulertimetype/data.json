{
  "path": "/documentation/foundation/operationqueue/schedulertimetype",
  "type": "Structure",
  "name": "OperationQueue.SchedulerTimeType",
  "desc": "The scheduler time type the operation queue uses.",
  "items": [
    {
      "name": "init(Date)",
      "desc": "Creates an operation queue scheduler time with the given date."
    },
    {
      "name": "var date: Date",
      "desc": "The date this type represents."
    },
    {
      "name": "func advanced(by: OperationQueue.SchedulerTimeType.Stride) -> OperationQueue.SchedulerTimeType",
      "desc": "Calculates an operation queue scheduler time by advancing the scheduler time typeâ€™s date by the given interval."
    },
    {
      "name": "func distance(to: OperationQueue.SchedulerTimeType) -> OperationQueue.SchedulerTimeType.Stride",
      "desc": "The distance to another operation queue scheduler time."
    },
    {
      "name": "struct OperationQueue.SchedulerTimeType.Stride",
      "desc": "The interval by which operation queue times advance."
    },
    {
      "name": "static func != (OperationQueue.SchedulerTimeType, OperationQueue.SchedulerTimeType) -> Bool"
    },
    {
      "name": "static func ..< (OperationQueue.SchedulerTimeType) -> PartialRangeUpTo<OperationQueue.SchedulerTimeType>",
      "desc": "Returns a partial range up to, but not including, its upper bound."
    },
    {
      "name": "static func ..< (OperationQueue.SchedulerTimeType, OperationQueue.SchedulerTimeType) -> Range<OperationQueue.SchedulerTimeType>",
      "desc": "Returns a half-open range that contains its lower bound but not its upper bound."
    },
    {
      "name": "static func < (OperationQueue.SchedulerTimeType, OperationQueue.SchedulerTimeType) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument."
    },
    {
      "name": "static func <= (OperationQueue.SchedulerTimeType, OperationQueue.SchedulerTimeType) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument."
    },
    {
      "name": "static func == (OperationQueue.SchedulerTimeType, OperationQueue.SchedulerTimeType) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are equal."
    },
    {
      "name": "static func > (OperationQueue.SchedulerTimeType, OperationQueue.SchedulerTimeType) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument."
    },
    {
      "name": "static func >= (OperationQueue.SchedulerTimeType, OperationQueue.SchedulerTimeType) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument."
    },
    {
      "name": "static func ... (OperationQueue.SchedulerTimeType) -> PartialRangeFrom<OperationQueue.SchedulerTimeType>",
      "desc": "Returns a partial range extending upward from a lower bound."
    },
    {
      "name": "static func ... (OperationQueue.SchedulerTimeType) -> PartialRangeThrough<OperationQueue.SchedulerTimeType>",
      "desc": "Returns a partial range up to, and including, its upper bound."
    },
    {
      "name": "static func ... (OperationQueue.SchedulerTimeType, OperationQueue.SchedulerTimeType) -> ClosedRange<OperationQueue.SchedulerTimeType>",
      "desc": "Returns a closed range that contains both of its bounds."
    },
    {
      "name": "var hashValue: Int"
    },
    {
      "name": "func hash(into: inout Hasher)"
    },
    {
      "name": "init(from: Decoder)",
      "desc": "Creates a scheduler time type using data in an unarchiver."
    },
    {
      "name": "func encode(to: Encoder)",
      "desc": "Encodes a scheduler time type to an archiver."
    }
  ],
  "declaration": "struct SchedulerTimeType",
  "conformsTo": [
    "Decodable",
    "Encodable",
    "Hashable",
    "Strideable"
  ]
}