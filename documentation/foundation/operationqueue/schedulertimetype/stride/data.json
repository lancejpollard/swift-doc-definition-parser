{
  "path": "/documentation/foundation/operationqueue/schedulertimetype/stride",
  "type": "Structure",
  "name": "OperationQueue.SchedulerTimeType.Stride",
  "desc": "The interval by which operation queue times advance.",
  "items": [
    {
      "name": "var timeInterval: TimeInterval",
      "desc": "The value of this time interval, in seconds."
    },
    {
      "name": "var magnitude: TimeInterval",
      "desc": "The value of this time interval, in seconds."
    },
    {
      "name": "typealias OperationQueue.SchedulerTimeType.Stride.Magnitude",
      "desc": "A type that represents the absolute value of any possible value of the conforming type."
    },
    {
      "name": "func negate()",
      "desc": "Replaces this value with its additive inverse."
    },
    {
      "name": "static func seconds(Int) -> OperationQueue.SchedulerTimeType.Stride",
      "desc": "Converts the specified number of seconds into an instance of this scheduler time type."
    },
    {
      "name": "static func seconds(Double) -> OperationQueue.SchedulerTimeType.Stride",
      "desc": "Converts the specified number of seconds, as a floating-point value, into an instance of this scheduler time type."
    },
    {
      "name": "static func milliseconds(Int) -> OperationQueue.SchedulerTimeType.Stride",
      "desc": "Converts the specified number of milliseconds into an instance of this scheduler time type."
    },
    {
      "name": "static func microseconds(Int) -> OperationQueue.SchedulerTimeType.Stride",
      "desc": "Converts the specified number of microseconds into an instance of this scheduler time type."
    },
    {
      "name": "static func nanoseconds(Int) -> OperationQueue.SchedulerTimeType.Stride",
      "desc": "Converts the specified number of nanoseconds into an instance of this scheduler time type."
    },
    {
      "name": "static var zero: OperationQueue.SchedulerTimeType.Stride",
      "desc": "The zero value."
    },
    {
      "name": "init(TimeInterval)",
      "desc": "Creates a stride using the specified time interval."
    },
    {
      "name": "init?<T>(exactly: T)",
      "desc": "Creates a stride using the specified integer, if it can be represented exactly."
    },
    {
      "name": "init(floatLiteral: TimeInterval)",
      "desc": "Creates a stride using the specified floating-point value."
    },
    {
      "name": "init(integerLiteral: TimeInterval)",
      "desc": "Creates a stride using the specified integer value."
    },
    {
      "name": "typealias OperationQueue.SchedulerTimeType.Stride.FloatLiteralType",
      "desc": "A type that represents a floating-point literal."
    },
    {
      "name": "typealias OperationQueue.SchedulerTimeType.Stride.IntegerLiteralType",
      "desc": "A type that represents an integer literal."
    },
    {
      "name": "init(from: Decoder)",
      "desc": "Creates a scheduler time type stride using data in an unarchiver."
    },
    {
      "name": "func encode(to: Encoder)",
      "desc": "Encodes a scheduler time type stride to an archiver."
    },
    {
      "name": "static func != (OperationQueue.SchedulerTimeType.Stride, OperationQueue.SchedulerTimeType.Stride) -> Bool"
    },
    {
      "name": "static func * (OperationQueue.SchedulerTimeType.Stride, OperationQueue.SchedulerTimeType.Stride) -> OperationQueue.SchedulerTimeType.Stride"
    },
    {
      "name": "static func *= (inout OperationQueue.SchedulerTimeType.Stride, OperationQueue.SchedulerTimeType.Stride)"
    },
    {
      "name": "static func + (OperationQueue.SchedulerTimeType.Stride) -> OperationQueue.SchedulerTimeType.Stride",
      "desc": "Returns the given number unchanged."
    },
    {
      "name": "static func + (OperationQueue.SchedulerTimeType.Stride, OperationQueue.SchedulerTimeType.Stride) -> OperationQueue.SchedulerTimeType.Stride"
    },
    {
      "name": "static func += (inout OperationQueue.SchedulerTimeType.Stride, OperationQueue.SchedulerTimeType.Stride)"
    },
    {
      "name": "static func - (OperationQueue.SchedulerTimeType.Stride) -> OperationQueue.SchedulerTimeType.Stride",
      "desc": "Returns the additive inverse of the specified value."
    },
    {
      "name": "static func - (OperationQueue.SchedulerTimeType.Stride, OperationQueue.SchedulerTimeType.Stride) -> OperationQueue.SchedulerTimeType.Stride"
    },
    {
      "name": "static func -= (inout OperationQueue.SchedulerTimeType.Stride, OperationQueue.SchedulerTimeType.Stride)"
    },
    {
      "name": "static func ... (OperationQueue.SchedulerTimeType.Stride) -> PartialRangeFrom<OperationQueue.SchedulerTimeType.Stride>",
      "desc": "Returns a partial range extending upward from a lower bound."
    },
    {
      "name": "static func ... (OperationQueue.SchedulerTimeType.Stride) -> PartialRangeThrough<OperationQueue.SchedulerTimeType.Stride>",
      "desc": "Returns a partial range up to, and including, its upper bound."
    },
    {
      "name": "static func ... (OperationQueue.SchedulerTimeType.Stride, OperationQueue.SchedulerTimeType.Stride) -> ClosedRange<OperationQueue.SchedulerTimeType.Stride>",
      "desc": "Returns a closed range that contains both of its bounds."
    },
    {
      "name": "static func ..< (OperationQueue.SchedulerTimeType.Stride) -> PartialRangeUpTo<OperationQueue.SchedulerTimeType.Stride>",
      "desc": "Returns a partial range up to, but not including, its upper bound."
    },
    {
      "name": "static func ..< (OperationQueue.SchedulerTimeType.Stride, OperationQueue.SchedulerTimeType.Stride) -> Range<OperationQueue.SchedulerTimeType.Stride>",
      "desc": "Returns a half-open range that contains its lower bound but not its upper bound."
    },
    {
      "name": "static func < (OperationQueue.SchedulerTimeType.Stride, OperationQueue.SchedulerTimeType.Stride) -> Bool"
    },
    {
      "name": "static func <= (OperationQueue.SchedulerTimeType.Stride, OperationQueue.SchedulerTimeType.Stride) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument."
    },
    {
      "name": "static func == (OperationQueue.SchedulerTimeType.Stride, OperationQueue.SchedulerTimeType.Stride) -> Bool"
    },
    {
      "name": "static func > (OperationQueue.SchedulerTimeType.Stride, OperationQueue.SchedulerTimeType.Stride) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument."
    },
    {
      "name": "static func >= (OperationQueue.SchedulerTimeType.Stride, OperationQueue.SchedulerTimeType.Stride) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument."
    }
  ],
  "declaration": "struct OperationQueue.SchedulerTimeType.Stride",
  "conformsTo": [
    "Comparable",
    "Decodable",
    "Encodable",
    "ExpressibleByFloatLiteral",
    "SchedulerTimeIntervalConvertible",
    "SignedNumeric"
  ]
}