{
  "path": "/documentation/foundation/nsrect",
  "type": "Type Alias",
  "name": "NSRect",
  "desc": "A rectangle.",
  "items": [
    {
      "name": "func NSContainsRect(NSRect, NSRect) -> Bool",
      "desc": "Returns a Boolean value that indicates whether one rectangle completely encloses another."
    },
    {
      "name": "func NSDivideRect(NSRect, UnsafeMutablePointer<NSRect>, UnsafeMutablePointer<NSRect>, CGFloat, NSRectEdge)",
      "desc": "Divides a rectangle into two new rectangles."
    },
    {
      "name": "func NSEqualRects(NSRect, NSRect) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the two rectangles are equal."
    },
    {
      "name": "func NSIsEmptyRect(NSRect) -> Bool",
      "desc": "Returns a Boolean value that indicates whether a given rectangle is empty."
    },
    {
      "name": "func NSHeight(NSRect) -> CGFloat",
      "desc": "Returns the height of a given rectangle."
    },
    {
      "name": "func NSInsetRect(NSRect, CGFloat, CGFloat) -> NSRect",
      "desc": "Insets a rectangle by a specified amount."
    },
    {
      "name": "func NSIntegralRect(NSRect) -> NSRect",
      "desc": "Adjusts the sides of a rectangle to integer values."
    },
    {
      "name": "func NSIntegralRectWithOptions(NSRect, AlignmentOptions) -> NSRect",
      "desc": "Adjusts the sides of a rectangle to integral values using the specified options."
    },
    {
      "name": "func NSIntersectionRect(NSRect, NSRect) -> NSRect",
      "desc": "Calculates the intersection of two rectangles."
    },
    {
      "name": "func NSIntersectsRect(NSRect, NSRect) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two rectangles intersect."
    },
    {
      "name": "func NSMakeRect(CGFloat, CGFloat, CGFloat, CGFloat) -> NSRect",
      "desc": "Creates a new NSRect from the specified values."
    },
    {
      "name": "func NSMaxX(NSRect) -> CGFloat",
      "desc": "Returns the largest x coordinate of a given rectangle."
    },
    {
      "name": "func NSMaxY(NSRect) -> CGFloat",
      "desc": "Returns the largest y coordinate of a given rectangle."
    },
    {
      "name": "func NSMidX(NSRect) -> CGFloat",
      "desc": "Returns the x coordinate of a given rectangle’s midpoint."
    },
    {
      "name": "func NSMidY(NSRect) -> CGFloat",
      "desc": "Returns the y coordinate of a given rectangle’s midpoint."
    },
    {
      "name": "func NSMinX(NSRect) -> CGFloat",
      "desc": "Returns the smallest x coordinate of a given rectangle."
    },
    {
      "name": "func NSMinY(NSRect) -> CGFloat",
      "desc": "Returns the smallest y coordinate of a given rectangle."
    },
    {
      "name": "func NSMouseInRect(NSPoint, NSRect, Bool) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the point is in the specified rectangle."
    },
    {
      "name": "func NSOffsetRect(NSRect, CGFloat, CGFloat) -> NSRect",
      "desc": "Offsets the rectangle by the specified amount."
    },
    {
      "name": "func NSPointInRect(NSPoint, NSRect) -> Bool",
      "desc": "Returns a Boolean value that indicates whether a given point is in a given rectangle."
    },
    {
      "name": "func NSRectFromString(String) -> NSRect",
      "desc": "Returns a rectangle from a text-based representation."
    },
    {
      "name": "func NSStringFromRect(NSRect) -> String",
      "desc": "Returns a string representation of a rectangle."
    },
    {
      "name": "func NSRectFromCGRect(CGRect) -> NSRect",
      "desc": "Returns an NSRect typecast from a CGRect."
    },
    {
      "name": "func NSRectToCGRect(NSRect) -> CGRect",
      "desc": "Returns a CGRect typecast from an NSRect."
    },
    {
      "name": "func NSUnionRect(NSRect, NSRect) -> NSRect",
      "desc": "Calculates the union of two rectangles."
    },
    {
      "name": "func NSWidth(NSRect) -> CGFloat",
      "desc": "Returns the width of the specified rectangle."
    },
    {
      "name": "let NSZeroRect: NSRect",
      "desc": "An NSRect structure set to 0 in width and height."
    },
    {
      "name": "enum NSRectEdge"
    },
    {
      "name": "struct AlignmentOptions",
      "desc": "Values representing alignment operations."
    },
    {
      "name": "typealias NSRectArray",
      "desc": "Type indicating a parameter is array of NSRect structures."
    },
    {
      "name": "typealias NSRectPointer",
      "desc": "Type indicating a parameter is a pointer to an NSRect structure."
    }
  ],
  "declaration": "Declarationtypealias NSRect = CGRect"
}