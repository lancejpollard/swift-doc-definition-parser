{
  "path": "/documentation/foundation/listformatstyle/width",
  "type": "Enumeration",
  "name": "ListFormatStyle.Width",
  "desc": "The type representing the width of a list.",
  "items": [
    {
      "name": "typealias ListFormatStyle.Width.RawValue",
      "desc": "The raw type that represents values for all cases."
    },
    {
      "name": "case narrow",
      "desc": "Specifies a narrow list style."
    },
    {
      "name": "case short",
      "desc": "Specifies a short list style."
    },
    {
      "name": "case standard",
      "desc": "Specifies a standard list style."
    },
    {
      "name": "init(from: Decoder)",
      "desc": "Creates a new instance by decoding from the given decoder, when the type’s RawValue is Int."
    },
    {
      "name": "init?(rawValue: Int)",
      "desc": "Creates a new instance with the specified raw value."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value of the enumeration."
    },
    {
      "name": "var rawValue: Int",
      "desc": "The corresponding value of the raw type."
    },
    {
      "name": "func encode(to: Encoder)",
      "desc": "Encodes this value into the given encoder, when the type’s RawValue is Int."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of this value by feeding them into the given hasher."
    },
    {
      "name": "static func != (ListFormatStyle<Style, Base>.Width, ListFormatStyle<Style, Base>.Width) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two values are not equal."
    }
  ],
  "declaration": "enum ListFormatStyle<Style, Base>.Width : Int, Codable",
  "conformsTo": [
    "Decodable",
    "Encodable"
  ]
}