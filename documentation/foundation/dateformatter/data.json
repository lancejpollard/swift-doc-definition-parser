{
  "path": "/documentation/foundation/dateformatter",
  "type": "Class",
  "name": "DateFormatter",
  "desc": "A formatter that converts between dates and their textual representations.",
  "items": [
    {
      "name": "func date(from: String) -> Date?",
      "desc": "Returns a date representation of a specified string that the system interprets using the receiver’s current settings."
    },
    {
      "name": "func string(from: Date) -> String",
      "desc": "Returns a string representation of a specified date that the system formats using the receiver’s current settings."
    },
    {
      "name": "class func localizedString(from: Date, dateStyle: DateFormatter.Style, timeStyle: DateFormatter.Style) -> String",
      "desc": "Returns a string representation of a specified date, that the system formats for the current locale using the specified date and time styles."
    },
    {
      "name": "func getObjectValue(AutoreleasingUnsafeMutablePointer<AnyObject?>?, for: String, range: UnsafeMutablePointer<NSRange>?)",
      "desc": "Returns by reference a date representation of a specified string and its date range, as well as a Boolean value that indicates whether the system can parse the string."
    },
    {
      "name": "var dateStyle: DateFormatter.Style",
      "desc": "The date style of the receiver."
    },
    {
      "name": "var timeStyle: DateFormatter.Style",
      "desc": "The time style of the receiver."
    },
    {
      "name": "var dateFormat: String!",
      "desc": "The date format string used by the receiver."
    },
    {
      "name": "func setLocalizedDateFormatFromTemplate(String)",
      "desc": "Sets the date format from a template using the specified locale for the receiver."
    },
    {
      "name": "class func dateFormat(fromTemplate: String, options: Int, locale: Locale?) -> String?",
      "desc": "Returns a localized date format string representing the given date format components arranged appropriately for the specified locale."
    },
    {
      "name": "var formattingContext: Formatter.Context",
      "desc": "The capitalization formatting context used when formatting a date."
    },
    {
      "name": "var calendar: Calendar!",
      "desc": "The calendar for the receiver."
    },
    {
      "name": "var defaultDate: Date?",
      "desc": "The default date for the receiver."
    },
    {
      "name": "var locale: Locale!",
      "desc": "The locale for the receiver."
    },
    {
      "name": "var timeZone: TimeZone!",
      "desc": "The time zone for the receiver."
    },
    {
      "name": "var twoDigitStartDate: Date?",
      "desc": "The earliest date that can be denoted by a two-digit year specifier."
    },
    {
      "name": "var gregorianStartDate: Date?",
      "desc": "The start date of the Gregorian calendar for the receiver."
    },
    {
      "name": "var formatterBehavior: DateFormatter.Behavior",
      "desc": "The formatter behavior for the receiver."
    },
    {
      "name": "class var defaultFormatterBehavior: DateFormatter.Behavior",
      "desc": "Returns the default formatting behavior for instances of the class."
    },
    {
      "name": "var isLenient: Bool",
      "desc": "A Boolean value that indicates whether the receiver uses heuristics when parsing a string."
    },
    {
      "name": "var doesRelativeDateFormatting: Bool",
      "desc": "A Boolean value that indicates whether the receiver uses phrases such as “today” and “tomorrow” for the date component."
    },
    {
      "name": "var amSymbol: String!",
      "desc": "The AM symbol for the receiver."
    },
    {
      "name": "var pmSymbol: String!",
      "desc": "The PM symbol for the receiver."
    },
    {
      "name": "var weekdaySymbols: [String]!",
      "desc": "The array of weekday symbols for the receiver."
    },
    {
      "name": "var shortWeekdaySymbols: [String]!",
      "desc": "The array of short weekday symbols for the receiver."
    },
    {
      "name": "var veryShortWeekdaySymbols: [String]!",
      "desc": "The array of very short weekday symbols for the receiver."
    },
    {
      "name": "var standaloneWeekdaySymbols: [String]!",
      "desc": "The array of standalone weekday symbols for the receiver."
    },
    {
      "name": "var shortStandaloneWeekdaySymbols: [String]!",
      "desc": "The array of short standalone weekday symbols for the receiver."
    },
    {
      "name": "var veryShortStandaloneWeekdaySymbols: [String]!",
      "desc": "The array of very short standalone weekday symbols for the receiver."
    },
    {
      "name": "var monthSymbols: [String]!",
      "desc": "The month symbols for the receiver."
    },
    {
      "name": "var shortMonthSymbols: [String]!",
      "desc": "The array of short month symbols for the receiver."
    },
    {
      "name": "var veryShortMonthSymbols: [String]!",
      "desc": "The very short month symbols for the receiver."
    },
    {
      "name": "var standaloneMonthSymbols: [String]!",
      "desc": "The standalone month symbols for the receiver."
    },
    {
      "name": "var shortStandaloneMonthSymbols: [String]!",
      "desc": "The short standalone month symbols for the receiver."
    },
    {
      "name": "var veryShortStandaloneMonthSymbols: [String]!",
      "desc": "The very short month symbols for the receiver."
    },
    {
      "name": "var quarterSymbols: [String]!",
      "desc": "The quarter symbols for the receiver."
    },
    {
      "name": "var shortQuarterSymbols: [String]!",
      "desc": "The short quarter symbols for the receiver."
    },
    {
      "name": "var standaloneQuarterSymbols: [String]!",
      "desc": "The standalone quarter symbols for the receiver."
    },
    {
      "name": "var shortStandaloneQuarterSymbols: [String]!",
      "desc": "The short standalone quarter symbols for the receiver."
    },
    {
      "name": "var eraSymbols: [String]!",
      "desc": "The era symbols for the receiver."
    },
    {
      "name": "var longEraSymbols: [String]!",
      "desc": "The long era symbols for the receiver"
    },
    {
      "name": "enum DateFormatter.Style",
      "desc": "The following constants specify predefined format styles for dates and times."
    },
    {
      "name": "enum DateFormatter.Behavior",
      "desc": "Constants that specify the behavior NSDateFormatter should exhibit."
    },
    {
      "name": "var generatesCalendarDates: Bool",
      "desc": "Indicates whether the formatter generates the deprecated calendar date type."
    }
  ],
  "declaration": "class DateFormatter : Formatter",
  "inheritsFrom": [
    "Formatter"
  ]
}