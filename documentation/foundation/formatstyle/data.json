{
  "path": "/documentation/foundation/formatstyle",
  "type": "Protocol",
  "name": "FormatStyle",
  "desc": "No overview available.",
  "items": [
    {
      "name": "associatedtype FormatInput"
    },
    {
      "name": "associatedtype FormatOutput"
    },
    {
      "name": "func format(Self.FormatInput) -> Self.FormatOutput"
    },
    {
      "name": "func locale(Locale) -> Self"
    },
    {
      "name": "static var number: Decimal.FormatStyle",
      "desc": "Available when Self is Decimal.FormatStyle."
    },
    {
      "name": "static var percent: Decimal.FormatStyle.Percent",
      "desc": "Available when Self is Decimal.FormatStyle.Percent."
    },
    {
      "name": "static func currency(code: String) -> Self",
      "desc": "Available when Self is Decimal.FormatStyle.Currency."
    },
    {
      "name": "static var interval: Date.IntervalFormatStyle",
      "desc": "Available when Self is Date.IntervalFormatStyle."
    },
    {
      "name": "static var iso8601: Date.ISO8601FormatStyle",
      "desc": "Available when Self is Date.ISO8601FormatStyle."
    },
    {
      "name": "static var timeDuration: Date.ComponentsFormatStyle",
      "desc": "Available when Self is Date.ComponentsFormatStyle."
    },
    {
      "name": "static func list<MemberStyle, Base>(memberStyle: MemberStyle, type: ListFormatStyle<MemberStyle, Base>.ListType, width: ListFormatStyle<MemberStyle, Base>.Width) -> Self"
    },
    {
      "name": "static func list<Base>(type: ListFormatStyle<StringStyle, Base>.ListType, width: ListFormatStyle<StringStyle, Base>.Width) -> Self"
    },
    {
      "name": "static var dateTime: Date.FormatStyle",
      "desc": "Available when Self is Date.FormatStyle."
    },
    {
      "name": "static var number: FloatingPointFormatStyle<Double>",
      "desc": "Available when Self is FloatingPointFormatStyle<Double>."
    },
    {
      "name": "static var number: FloatingPointFormatStyle<Float>",
      "desc": "Available when Self is FloatingPointFormatStyle<Float>."
    },
    {
      "name": "static var number: FloatingPointFormatStyle<Float16>",
      "desc": "Available when Self is FloatingPointFormatStyle<Float16>."
    },
    {
      "name": "static var number: IntegerFormatStyle<Int>",
      "desc": "Available when Self is IntegerFormatStyle<Int>."
    },
    {
      "name": "static var number: IntegerFormatStyle<UInt>",
      "desc": "Available when Self is IntegerFormatStyle<UInt>."
    },
    {
      "name": "static var number: IntegerFormatStyle<Int8>",
      "desc": "Available when Self is IntegerFormatStyle<Int8>."
    },
    {
      "name": "static var number: IntegerFormatStyle<Int16>",
      "desc": "Available when Self is IntegerFormatStyle<Int16>."
    },
    {
      "name": "static var number: IntegerFormatStyle<Int32>",
      "desc": "Available when Self is IntegerFormatStyle<Int32>."
    },
    {
      "name": "static var number: IntegerFormatStyle<Int64>",
      "desc": "Available when Self is IntegerFormatStyle<Int64>."
    },
    {
      "name": "static var number: IntegerFormatStyle<UInt8>",
      "desc": "Available when Self is IntegerFormatStyle<UInt8>."
    },
    {
      "name": "static var number: IntegerFormatStyle<UInt16>",
      "desc": "Available when Self is IntegerFormatStyle<UInt16>."
    },
    {
      "name": "static var number: IntegerFormatStyle<UInt32>",
      "desc": "Available when Self is IntegerFormatStyle<UInt32>."
    },
    {
      "name": "static var number: IntegerFormatStyle<UInt64>",
      "desc": "Available when Self is IntegerFormatStyle<UInt64>."
    },
    {
      "name": "static var percent: FloatingPointFormatStyle<Double>.Percent",
      "desc": "Available when Self is FloatingPointFormatStyle<Double>.Percent."
    },
    {
      "name": "static var percent: FloatingPointFormatStyle<Float>.Percent",
      "desc": "Available when Self is FloatingPointFormatStyle<Float>.Percent."
    },
    {
      "name": "static var percent: FloatingPointFormatStyle<Float16>.Percent",
      "desc": "Available when Self is FloatingPointFormatStyle<Float16>.Percent."
    },
    {
      "name": "static var percent: IntegerFormatStyle<Int>.Percent",
      "desc": "Available when Self is IntegerFormatStyle<Int>.Percent."
    },
    {
      "name": "static var percent: IntegerFormatStyle<UInt>.Percent",
      "desc": "Available when Self is IntegerFormatStyle<UInt>.Percent."
    },
    {
      "name": "static var percent: IntegerFormatStyle<Int8>.Percent",
      "desc": "Available when Self is IntegerFormatStyle<Int8>.Percent."
    },
    {
      "name": "static var percent: IntegerFormatStyle<Int16>.Percent",
      "desc": "Available when Self is IntegerFormatStyle<Int16>.Percent."
    },
    {
      "name": "static var percent: IntegerFormatStyle<Int32>.Percent",
      "desc": "Available when Self is IntegerFormatStyle<Int32>.Percent."
    },
    {
      "name": "static var percent: IntegerFormatStyle<Int64>.Percent",
      "desc": "Available when Self is IntegerFormatStyle<Int64>.Percent."
    },
    {
      "name": "static var percent: IntegerFormatStyle<UInt8>.Percent",
      "desc": "Available when Self is IntegerFormatStyle<UInt8>.Percent."
    },
    {
      "name": "static var percent: IntegerFormatStyle<UInt16>.Percent",
      "desc": "Available when Self is IntegerFormatStyle<UInt16>.Percent."
    },
    {
      "name": "static var percent: IntegerFormatStyle<UInt32>.Percent",
      "desc": "Available when Self is IntegerFormatStyle<UInt32>.Percent."
    },
    {
      "name": "static var percent: IntegerFormatStyle<UInt64>.Percent",
      "desc": "Available when Self is IntegerFormatStyle<UInt64>.Percent."
    },
    {
      "name": "static func byteCount(style: ByteCountFormatStyle.Style, allowedUnits: ByteCountFormatStyle.Units, spellsOutZero: Bool, includesActualByteCount: Bool) -> Self",
      "desc": "Available when Self is ByteCountFormatStyle."
    },
    {
      "name": "static func components(style: Date.ComponentsFormatStyle.Style, fields: Set<Date.ComponentsFormatStyle.Field>?) -> Self",
      "desc": "Available when Self is Date.ComponentsFormatStyle."
    },
    {
      "name": "static func currency<Value>(code: String) -> Self"
    },
    {
      "name": "static func currency<V>(code: String) -> Self"
    },
    {
      "name": "static func measurement(width: Measurement<UnitTemperature>.FormatStyle.UnitWidth, usage: MeasurementFormatUnitUsage<UnitTemperature>, hidesScaleName: Bool, numberFormatStyle: FloatingPointFormatStyle<Double>?) -> Self"
    },
    {
      "name": "static func measurement<UnitType>(width: Measurement<UnitType>.FormatStyle.UnitWidth, usage: MeasurementFormatUnitUsage<UnitType>, numberFormatStyle: FloatingPointFormatStyle<Double>?) -> Self"
    },
    {
      "name": "static func name(style: PersonNameComponents.FormatStyle.Style) -> Self",
      "desc": "Available when Self is PersonNameComponents.FormatStyle."
    },
    {
      "name": "static func relative(presentation: Date.RelativeFormatStyle.Presentation, unitsStyle: Date.RelativeFormatStyle.UnitsStyle) -> Self",
      "desc": "Available when Self is Date.RelativeFormatStyle."
    }
  ],
  "declaration": "protocol FormatStyle",
  "inheritsFrom": [
    "Decodable",
    "Encodable",
    "Hashable"
  ]
}