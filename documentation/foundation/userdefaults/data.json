{
  "path": "/documentation/foundation/userdefaults",
  "type": "Class",
  "name": "UserDefaults",
  "desc": "An interface to the user’s defaults database, where you store key-value pairs persistently across launches of your app.",
  "items": [
    {
      "name": "class var standard: UserDefaults",
      "desc": "Returns the shared defaults object."
    },
    {
      "name": "init()",
      "desc": "Creates a user defaults object initialized with the defaults for the app and current user."
    },
    {
      "name": "init?(suiteName: String?)",
      "desc": "Creates a user defaults object initialized with the defaults for the specified database name."
    },
    {
      "name": "func object(forKey: String) -> Any?",
      "desc": "Returns the object associated with the specified key."
    },
    {
      "name": "func url(forKey: String) -> URL?",
      "desc": "Returns the URL associated with the specified key."
    },
    {
      "name": "func array(forKey: String) -> [Any]?",
      "desc": "Returns the array associated with the specified key."
    },
    {
      "name": "func dictionary(forKey: String) -> [String : Any]?",
      "desc": "Returns the dictionary object associated with the specified key."
    },
    {
      "name": "func string(forKey: String) -> String?",
      "desc": "Returns the string associated with the specified key."
    },
    {
      "name": "func stringArray(forKey: String) -> [String]?",
      "desc": "Returns the array of strings associated with the specified key."
    },
    {
      "name": "func data(forKey: String) -> Data?",
      "desc": "Returns the data object associated with the specified key."
    },
    {
      "name": "func bool(forKey: String) -> Bool",
      "desc": "Returns the Boolean value associated with the specified key."
    },
    {
      "name": "func integer(forKey: String) -> Int",
      "desc": "Returns the integer value associated with the specified key."
    },
    {
      "name": "func float(forKey: String) -> Float",
      "desc": "Returns the float value associated with the specified key."
    },
    {
      "name": "func double(forKey: String) -> Double",
      "desc": "Returns the double value associated with the specified key."
    },
    {
      "name": "func dictionaryRepresentation() -> [String : Any]",
      "desc": "Returns a dictionary that contains a union of all key-value pairs in the domains in the search list."
    },
    {
      "name": "func set(Any?, forKey: String)",
      "desc": "Sets the value of the specified default key."
    },
    {
      "name": "func set(Float, forKey: String)",
      "desc": "Sets the value of the specified default key to the specified float value."
    },
    {
      "name": "func set(Double, forKey: String)",
      "desc": "Sets the value of the specified default key to the double value."
    },
    {
      "name": "func set(Int, forKey: String)",
      "desc": "Sets the value of the specified default key to the specified integer value."
    },
    {
      "name": "func set(Bool, forKey: String)",
      "desc": "Sets the value of the specified default key to the specified Boolean value."
    },
    {
      "name": "func set(URL?, forKey: String)",
      "desc": "Sets the value of the specified default key to the specified URL."
    },
    {
      "name": "func removeObject(forKey: String)",
      "desc": "Removes the value of the specified default key."
    },
    {
      "name": "func addSuite(named: String)",
      "desc": "Inserts the specified domain name into the receiver’s search list."
    },
    {
      "name": "func removeSuite(named: String)",
      "desc": "Removes the specified domain name from the receiver’s search list."
    },
    {
      "name": "func register(defaults: [String : Any])",
      "desc": "Adds the contents of the specified dictionary to the registration domain."
    },
    {
      "name": "func persistentDomain(forName: String) -> [String : Any]?",
      "desc": "Returns a dictionary representation of the defaults for the specified domain."
    },
    {
      "name": "func setPersistentDomain([String : Any], forName: String)",
      "desc": "Sets a dictionary for the specified persistent domain."
    },
    {
      "name": "func removePersistentDomain(forName: String)",
      "desc": "Removes the contents of the specified persistent domain from the user’s defaults."
    },
    {
      "name": "var volatileDomainNames: [String]",
      "desc": "The current volatile domain names."
    },
    {
      "name": "func volatileDomain(forName: String) -> [String : Any]",
      "desc": "Returns the dictionary for the specified volatile domain."
    },
    {
      "name": "func setVolatileDomain([String : Any], forName: String)",
      "desc": "Sets the dictionary for the specified volatile domain."
    },
    {
      "name": "func removeVolatileDomain(forName: String)",
      "desc": "Removes the specified volatile domain from the user’s defaults."
    },
    {
      "name": "func objectIsForced(forKey: String) -> Bool",
      "desc": "Returns a Boolean value indicating whether the specified key is managed by an administrator."
    },
    {
      "name": "func objectIsForced(forKey: String, inDomain: String) -> Bool",
      "desc": "Returns a Boolean value indicating whether the key in the specified domain is managed by an administrator."
    },
    {
      "name": "class let argumentDomain: String",
      "desc": "The domain consisting of defaults parsed from the application’s arguments. These are one or more pairs of the form -default value included in the command-line invocation of the application."
    },
    {
      "name": "class let globalDomain: String",
      "desc": "The domain consisting of defaults meant to be seen by all applications."
    },
    {
      "name": "class let registrationDomain: String",
      "desc": "The domain consisting of a set of temporary defaults whose values can be set by the application to ensure that searches will always be successful."
    },
    {
      "name": "class let didChangeNotification: NSNotification.Name",
      "desc": "Posted when user defaults are changed within the current process."
    },
    {
      "name": "class let sizeLimitExceededNotification: NSNotification.Name",
      "desc": "Posted when more data is stored in user defaults than is allowed."
    },
    {
      "name": "class let completedInitialCloudSyncNotification: NSNotification.Name",
      "desc": "Posted when ubiquitous defaults finish downloading data, either the first time a device is connected to an iCloud account or when a user switches their primary iCloud account."
    },
    {
      "name": "class let didChangeCloudAccountsNotification: NSNotification.Name",
      "desc": "Posted when the user changes the primary iCloud account."
    },
    {
      "name": "class let noCloudAccountNotification: NSNotification.Name",
      "desc": "Posted when a cloud default is set, but no iCloud user is logged in."
    },
    {
      "name": "func synchronize() -> Bool",
      "desc": "Waits for any pending asynchronous updates to the defaults database and returns; this method is unnecessary and shouldn't be used."
    },
    {
      "name": "class func resetStandardUserDefaults()",
      "desc": "This method has no effect and shouldn't be used."
    }
  ],
  "declaration": "class UserDefaults : NSObject",
  "inheritsFrom": [
    "NSObject"
  ]
}