{
  "path": "/documentation/foundation/nsarray",
  "type": "Class",
  "name": "NSArray",
  "desc": "An object representing a static ordered collection, for use instead of an Array constant in cases that require reference semantics.",
  "items": [
    {
      "name": "init(object: Any)",
      "desc": "Creates and returns an array containing a given object."
    },
    {
      "name": "init(objects: UnsafePointer<AnyObject>, count: Int)",
      "desc": "Creates and returns an array that includes a given number of objects from a given C array."
    },
    {
      "name": "init()",
      "desc": "Initializes a newly allocated array."
    },
    {
      "name": "init(array: [Any])",
      "desc": "Initializes a newly allocated array by placing in it the objects contained in a given array."
    },
    {
      "name": "init(array: [Any], copyItems: Bool)",
      "desc": "Initializes a newly allocated array using anArray as the source of data objects for the array."
    },
    {
      "name": "init(objects: UnsafePointer<AnyObject>?, count: Int)",
      "desc": "Initializes a newly allocated array to include a given number of objects from a given C array."
    },
    {
      "name": "func contains(Any) -> Bool",
      "desc": "Returns a Boolean value that indicates whether a given object is present in the array."
    },
    {
      "name": "var count: Int",
      "desc": "The number of objects in the array."
    },
    {
      "name": "var firstObject: Any?",
      "desc": "The first object in the array."
    },
    {
      "name": "var lastObject: Any?",
      "desc": "The last object in the array."
    },
    {
      "name": "func object(at: Int) -> Any",
      "desc": "Returns the object located at the specified index."
    },
    {
      "name": "subscript(Int) -> Any",
      "desc": "Returns the object at the specified index."
    },
    {
      "name": "func objects(at: IndexSet) -> [Any]",
      "desc": "Returns an array containing the objects in the array at the indexes specified by a given index set."
    },
    {
      "name": "func objectEnumerator() -> NSEnumerator",
      "desc": "Returns an enumerator object that lets you access each object in the array."
    },
    {
      "name": "func reverseObjectEnumerator() -> NSEnumerator",
      "desc": "Returns an enumerator object that lets you access each object in the array, in reverse order."
    },
    {
      "name": "func index(of: Any) -> Int",
      "desc": "Returns the lowest index whose corresponding array value is equal to a given object."
    },
    {
      "name": "func index(of: Any, in: NSRange) -> Int",
      "desc": "Returns the lowest index within a specified range whose corresponding array value is equal to a given object ."
    },
    {
      "name": "func indexOfObjectIdentical(to: Any) -> Int",
      "desc": "Returns the lowest index whose corresponding array value is identical to a given object."
    },
    {
      "name": "func indexOfObjectIdentical(to: Any, in: NSRange) -> Int",
      "desc": "Returns the lowest index within a specified range whose corresponding array value is equal to a given object ."
    },
    {
      "name": "func indexOfObject(passingTest: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Bool) -> Int",
      "desc": "Returns the index of the first object in the array that passes a test in a given block."
    },
    {
      "name": "func indexOfObject(options: NSEnumerationOptions, passingTest: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Bool) -> Int",
      "desc": "Returns the index of an object in the array that passes a test in a given block for a given set of enumeration options."
    },
    {
      "name": "func indexOfObject(at: IndexSet, options: NSEnumerationOptions, passingTest: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Bool) -> Int",
      "desc": "Returns the index, from a given set of indexes, of the first object in the array that passes a test in a given block for a given set of enumeration options."
    },
    {
      "name": "func indexesOfObjects(passingTest: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Bool) -> IndexSet",
      "desc": "Returns the indexes of objects in the array that pass a test in a given block."
    },
    {
      "name": "func indexesOfObjects(options: NSEnumerationOptions, passingTest: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Bool) -> IndexSet",
      "desc": "Returns the indexes of objects in the array that pass a test in a given block for a given set of enumeration options."
    },
    {
      "name": "func indexesOfObjects(at: IndexSet, options: NSEnumerationOptions, passingTest: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Bool) -> IndexSet",
      "desc": "Returns the indexes, from a given set of indexes, of objects in the array that pass a test in a given block for a given set of enumeration options."
    },
    {
      "name": "func index(of: Any, inSortedRange: NSRange, options: NSBinarySearchingOptions, usingComparator: (Any, Any) -> ComparisonResult) -> Int",
      "desc": "Returns the index, within a specified range, of an object compared with elements in the array using a given NSComparator block."
    },
    {
      "name": "func enumerateObjects((Any, Int, UnsafeMutablePointer<ObjCBool>) -> Void)",
      "desc": "Executes a given closure using each object in the array, starting with the first object and continuing through the array to the last object."
    },
    {
      "name": "func enumerateObjects(options: NSEnumerationOptions, using: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Void)",
      "desc": "Executes a given closure using each object in the array with the specified options."
    },
    {
      "name": "func enumerateObjects(at: IndexSet, options: NSEnumerationOptions, using: (Any, Int, UnsafeMutablePointer<ObjCBool>) -> Void)",
      "desc": "Executes a given block using the objects in the array at the specified indexes."
    },
    {
      "name": "func firstObjectCommon(with: [Any]) -> Any?",
      "desc": "Returns the first object contained in the receiving array that’s equal to an object in another given array."
    },
    {
      "name": "func isEqual(to: [Any]) -> Bool",
      "desc": "Compares the receiving array to another array."
    },
    {
      "name": "func adding(Any) -> [Any]",
      "desc": "Returns a new array that is a copy of the receiving array with a given object added to the end."
    },
    {
      "name": "func addingObjects(from: [Any]) -> [Any]",
      "desc": "Returns a new array that is a copy of the receiving array with the objects contained in another array added to the end."
    },
    {
      "name": "func filtered(using: NSPredicate) -> [Any]",
      "desc": "Evaluates a given predicate against each object in the receiving array and returns a new array containing the objects for which the predicate returns true."
    },
    {
      "name": "func subarray(with: NSRange) -> [Any]",
      "desc": "Returns a new array containing the receiving array’s elements that fall within the limits specified by a given range."
    },
    {
      "name": "var sortedArrayHint: Data",
      "desc": "Analyzes the array and returns a “hint” that speeds the sorting of the array when the hint is supplied to sortedArray(_:context:hint:)."
    },
    {
      "name": "func sortedArray((Any, Any, UnsafeMutableRawPointer?) -> Int, context: UnsafeMutableRawPointer?) -> [Any]",
      "desc": "Returns a new array that lists the receiving array’s elements in ascending order as defined by the comparison function comparator."
    },
    {
      "name": "func sortedArray((Any, Any, UnsafeMutableRawPointer?) -> Int, context: UnsafeMutableRawPointer?, hint: Data?) -> [Any]",
      "desc": "Returns a new array that lists the receiving array’s elements in ascending order as defined by the comparison function comparator."
    },
    {
      "name": "func sortedArray(using: [NSSortDescriptor]) -> [Any]",
      "desc": "Returns a copy of the receiving array sorted as specified by a given array of sort descriptors."
    },
    {
      "name": "func sortedArray(using: Selector) -> [Any]",
      "desc": "Returns an array that lists the receiving array’s elements in ascending order, as determined by the comparison method specified by a given selector."
    },
    {
      "name": "func sortedArray(comparator: (Any, Any) -> ComparisonResult) -> [Any]",
      "desc": "Returns an array that lists the receiving array’s elements in ascending order, as determined by the comparison method specified by a given NSComparator block."
    },
    {
      "name": "func sortedArray(options: NSSortOptions, usingComparator: (Any, Any) -> ComparisonResult) -> [Any]",
      "desc": "Returns an array that lists the receiving array’s elements in ascending order, as determined by the comparison method specified by a given NSComparator block."
    },
    {
      "name": "typealias Comparator",
      "desc": "Defines the signature for a block object used for comparison operations."
    },
    {
      "name": "func componentsJoined(by: String) -> String",
      "desc": "Constructs and returns an NSString object that is the result of interposing a given separator between the elements of the array."
    },
    {
      "name": "var description: String",
      "desc": "A string that represents the contents of the array, formatted as a property list."
    },
    {
      "name": "func description(withLocale: Any?) -> String",
      "desc": "Returns a string that represents the contents of the array, formatted as a property list."
    },
    {
      "name": "func description(withLocale: Any?, indent: Int) -> String",
      "desc": "Returns a string that represents the contents of the array, formatted as a property list."
    },
    {
      "name": "func pathsMatchingExtensions([String]) -> [String]",
      "desc": "Returns an array containing all the pathname elements in the receiving array that have filename extensions from a given array."
    },
    {
      "name": "func addObserver(NSObject, forKeyPath: String, options: NSKeyValueObservingOptions, context: UnsafeMutableRawPointer?)",
      "desc": "Raises an exception."
    },
    {
      "name": "func removeObserver(NSObject, forKeyPath: String)",
      "desc": "Raises an exception."
    },
    {
      "name": "func removeObserver(NSObject, forKeyPath: String, context: UnsafeMutableRawPointer?)",
      "desc": "Raises an exception."
    },
    {
      "name": "func removeObserver(NSObject, fromObjectsAt: IndexSet, forKeyPath: String, context: UnsafeMutableRawPointer?)",
      "desc": "Raises an exception."
    },
    {
      "name": "func addObserver(NSObject, toObjectsAt: IndexSet, forKeyPath: String, options: NSKeyValueObservingOptions, context: UnsafeMutableRawPointer?)",
      "desc": "Registers an observer to receive key value observer notifications for the specified key-path relative to the objects at the indexes."
    },
    {
      "name": "func removeObserver(NSObject, fromObjectsAt: IndexSet, forKeyPath: String)",
      "desc": "Removes anObserver from all key value observer notifications associated with the specified keyPath relative to the array’s objects at indexes."
    },
    {
      "name": "func setValue(Any?, forKey: String)",
      "desc": "Invokes setValue(_:forKey:) on each of the array's items using the specified value and key."
    },
    {
      "name": "func value(forKey: String) -> Any",
      "desc": "Returns an array containing the results of invoking value(forKey:) using key on each of the array's objects."
    },
    {
      "name": "func shuffled() -> [Any]",
      "desc": "Returns a new array that lists this array’s elements in a random order."
    },
    {
      "name": "func shuffled(using: GKRandomSource) -> [Any]",
      "desc": "Returns a new array that lists this array’s elements in a random order, using the specified random source."
    },
    {
      "name": "class NSOrderedCollectionDifference",
      "desc": "An object representing the difference between two ordered collections."
    },
    {
      "name": "struct NSOrderedCollectionDifferenceCalculationOptions",
      "desc": "Constants that specify the options to use when creating an ordered collection difference."
    },
    {
      "name": "init?(coder: NSCoder)"
    },
    {
      "name": "struct NSBinarySearchingOptions",
      "desc": "Options for searches and insertions using index(of:inSortedRange:options:usingComparator:)."
    },
    {
      "name": "typealias NSArray.ArrayLiteralElement"
    },
    {
      "name": "typealias NSArray.Element"
    },
    {
      "name": "typealias NSArray.Iterator"
    },
    {
      "name": "init(array: NSArray)"
    },
    {
      "name": "init(arrayLiteral: Any...)",
      "desc": "Create an instance initialized with elements."
    },
    {
      "name": "init(contentsOf: URL, error: ())"
    },
    {
      "name": "init(objects: Any...)"
    },
    {
      "name": "var customMirror: Mirror"
    },
    {
      "name": "var underestimatedCount: Int"
    },
    {
      "name": "func makeIterator() -> NSFastEnumerationIterator",
      "desc": "Return an iterator over the elements of this sequence."
    },
    {
      "name": "func write(to: URL)"
    }
  ],
  "declaration": "class NSArray : NSObject",
  "inheritsFrom": [
    "NSObject"
  ],
  "conformsTo": [
    "CKRecordValueProtocol",
    "CustomReflectable",
    "ExpressibleByArrayLiteral",
    "NSCopying",
    "NSFastEnumeration",
    "NSMutableCopying",
    "NSSecureCoding",
    "Sequence"
  ]
}