{
  "path": "/documentation/foundation/nsnotification/name",
  "type": "Structure",
  "name": "NSNotification.Name",
  "desc": "A structure that defines the name of a notification.",
  "items": [
    {
      "name": "static let abDatabaseChanged: NSNotification.Name",
      "desc": "Posted when this process has changed the Address Book database."
    },
    {
      "name": "static let abDatabaseChangedExternally: NSNotification.Name",
      "desc": "Posted when a process other than the current one has changed the Address Book database."
    },
    {
      "name": "static let ABPeoplePickerDisplayedPropertyDidChange: NSNotification.Name",
      "desc": "Posted when the displayed property in the record list is changed."
    },
    {
      "name": "static let ABPeoplePickerGroupSelectionDidChange: NSNotification.Name",
      "desc": "Posted when the selection in the group list is changed."
    },
    {
      "name": "static let ABPeoplePickerNameSelectionDidChange: NSNotification.Name",
      "desc": "Posted when the selection in the name list is changed."
    },
    {
      "name": "static let ABPeoplePickerValueSelectionDidChange: NSNotification.Name",
      "desc": "Posted when the selection in a multivalue property is changed."
    },
    {
      "name": "static let unsupportedAttributeAddedNotification: NSNotification.Name"
    },
    {
      "name": "class let didProcessEditingNotification: NSNotification.Name",
      "desc": "A notification that posts after a text storage finishes processing edits."
    },
    {
      "name": "class let willProcessEditingNotification: NSNotification.Name",
      "desc": "A notification that posts before a text storage begins processing edits."
    },
    {
      "name": "class let didChangeSelectionNotification: NSNotification.Name",
      "desc": "Posted when the selected range of characters changes."
    },
    {
      "name": "class let didChangeTypingAttributesNotification: NSNotification.Name",
      "desc": "Posted when there is a change in the typing attributes within a text view."
    },
    {
      "name": "class let willChangeNotifyingTextViewNotification: NSNotification.Name",
      "desc": "Posted when a new text view is established as the text view that sends notifications."
    },
    {
      "name": "class let didRemoveItemNotification: NSNotification.Name",
      "desc": "Posted after an item is removed from a toolbar."
    },
    {
      "name": "class let willAddItemNotification: NSNotification.Name",
      "desc": "Posted before a new item is added to the toolbar."
    },
    {
      "name": "class let boundsDidChangeNotification: NSNotification.Name",
      "desc": "Posted whenever the NSView’s bounds rectangle changes to a new value independently of the frame rectangle, but only when the view’s postsBoundsChangedNotifications property is true."
    },
    {
      "name": "class let didUpdateTrackingAreasNotification: NSNotification.Name",
      "desc": "Posted whenever an NSView object recalculates its tracking areas."
    },
    {
      "name": "class let frameDidChangeNotification: NSNotification.Name",
      "desc": "Posted whenever the view’s frame rectangle changes to a new value, but only when the view’s postsFrameChangedNotifications property is true."
    },
    {
      "name": "class let didBecomeKeyNotification: NSNotification.Name",
      "desc": "A notification that the window object became the key window."
    },
    {
      "name": "class let didBecomeMainNotification: NSNotification.Name",
      "desc": "A notification that the window object became the main window."
    },
    {
      "name": "class let didChangeBackingPropertiesNotification: NSNotification.Name",
      "desc": "A notification that the window object backing properties changed."
    },
    {
      "name": "class let didChangeOcclusionStateNotification: NSNotification.Name",
      "desc": "A notification that the window object’s occlusion state changed."
    },
    {
      "name": "class let didChangeScreenNotification: NSNotification.Name",
      "desc": "A notification that a portion of the window object’s frame moved onto or off of a screen."
    },
    {
      "name": "class let didChangeScreenProfileNotification: NSNotification.Name",
      "desc": "A notification that the screen containing the window changed."
    },
    {
      "name": "class let didDeminiaturizeNotification: NSNotification.Name",
      "desc": "A notification that the window is no longer minimized."
    },
    {
      "name": "class let didEndLiveResizeNotification: NSNotification.Name",
      "desc": "A notification that the user resized the window object."
    },
    {
      "name": "class let didEndSheetNotification: NSNotification.Name",
      "desc": "A notification that the window object closed an attached sheet."
    },
    {
      "name": "class let didEnterFullScreenNotification: NSNotification.Name",
      "desc": "A notification that the window entered full-screen mode."
    },
    {
      "name": "class let didEnterVersionBrowserNotification: NSNotification.Name",
      "desc": "A notification that the window object entered version browser mode."
    },
    {
      "name": "class let didExitFullScreenNotification: NSNotification.Name",
      "desc": "A notification that the window object exited full-screen mode."
    },
    {
      "name": "class let didExitVersionBrowserNotification: NSNotification.Name",
      "desc": "A notification that the window object exited version browser mode."
    },
    {
      "name": "class let didExposeNotification: NSNotification.Name",
      "desc": "A notification that a window exposed a portion of its nonretained content."
    },
    {
      "name": "class let didMiniaturizeNotification: NSNotification.Name",
      "desc": "A notification that the window object minimized."
    },
    {
      "name": "class let didMoveNotification: NSNotification.Name",
      "desc": "A notification that the window object moved."
    },
    {
      "name": "class let didResignKeyNotification: NSNotification.Name",
      "desc": "A notification that the window object resigned its status as key window."
    },
    {
      "name": "class let didResignMainNotification: NSNotification.Name",
      "desc": "A notification that the window object resigned its status as main window."
    },
    {
      "name": "class let didResizeNotification: NSNotification.Name",
      "desc": "A notification that the window object size changed."
    },
    {
      "name": "class let didUpdateNotification: NSNotification.Name",
      "desc": "A notification that the window object received an update message."
    },
    {
      "name": "class let willBeginSheetNotification: NSNotification.Name",
      "desc": "A notification that the window object is about to open a sheet."
    },
    {
      "name": "class let willCloseNotification: NSNotification.Name",
      "desc": "A notification that the window object is about to close."
    },
    {
      "name": "class let willEnterFullScreenNotification: NSNotification.Name",
      "desc": "A notification that the window will enter full-screen mode."
    },
    {
      "name": "class let willEnterVersionBrowserNotification: NSNotification.Name",
      "desc": "A notification that the window object will enter version browser mode."
    },
    {
      "name": "class let willExitFullScreenNotification: NSNotification.Name",
      "desc": "A notification that the window object will exit full-screen mode."
    },
    {
      "name": "class let willExitVersionBrowserNotification: NSNotification.Name",
      "desc": "A notification that the window object will exit version browser mode."
    },
    {
      "name": "class let willMiniaturizeNotification: NSNotification.Name",
      "desc": "A notification that the window object is about to minimize."
    },
    {
      "name": "class let willMoveNotification: NSNotification.Name",
      "desc": "A notification that the window object is about to move."
    },
    {
      "name": "class let willStartLiveResizeNotification: NSNotification.Name",
      "desc": "A notification that the user is about to resize the window."
    },
    {
      "name": "class let accessibilityDisplayOptionsDidChangeNotification: NSNotification.Name",
      "desc": "A notification that the workspace posts when any of the accessibility display options change."
    },
    {
      "name": "class let activeSpaceDidChangeNotification: NSNotification.Name",
      "desc": "A notification that the workspace posts when a Spaces change occurs."
    },
    {
      "name": "class let didActivateApplicationNotification: NSNotification.Name",
      "desc": "A notification that the workspace posts when the Finder is about to activate an app."
    },
    {
      "name": "class let didChangeFileLabelsNotification: NSNotification.Name",
      "desc": "A notification that the workspace posts when the Finder file labels or colors change."
    },
    {
      "name": "class let didDeactivateApplicationNotification: NSNotification.Name",
      "desc": "A notification that the workspace posts when the Finder deactivates an app."
    },
    {
      "name": "class let didHideApplicationNotification: NSNotification.Name",
      "desc": "A notification that the workspace posts when the Finder hides an app."
    },
    {
      "name": "class let didLaunchApplicationNotification: NSNotification.Name",
      "desc": "A notification that the workspace posts when a new app starts up."
    },
    {
      "name": "class let didMountNotification: NSNotification.Name",
      "desc": "A notification that the workspace posts when a new device mounts."
    },
    {
      "name": "class let didRenameVolumeNotification: NSNotification.Name",
      "desc": "A notification that the workspace posts when a volume changes its name or mount path."
    },
    {
      "name": "class let didTerminateApplicationNotification: NSNotification.Name",
      "desc": "A notification that the workspace posts when an app finishes executing."
    },
    {
      "name": "class let didUnhideApplicationNotification: NSNotification.Name",
      "desc": "A notification that the workspace posts when the Finder unhides an app."
    },
    {
      "name": "class let didUnmountNotification: NSNotification.Name",
      "desc": "A notification that the workspace posts when the Finder unmounts a device."
    },
    {
      "name": "class let didWakeNotification: NSNotification.Name",
      "desc": "A notification that the workspace posts when the device wakes from sleep."
    },
    {
      "name": "class let screensDidSleepNotification: NSNotification.Name",
      "desc": "A notification that the workspace posts when the device’s screen goes to sleep."
    },
    {
      "name": "class let screensDidWakeNotification: NSNotification.Name",
      "desc": "A notification that the workspace posts when the device’s screens wake."
    },
    {
      "name": "class let sessionDidBecomeActiveNotification: NSNotification.Name",
      "desc": "A notification that the workspace posts after a user session switches in."
    },
    {
      "name": "class let sessionDidResignActiveNotification: NSNotification.Name",
      "desc": "A notification that the workspace posts before a user session switches out."
    },
    {
      "name": "class let willLaunchApplicationNotification: NSNotification.Name",
      "desc": "A notification that the workspace posts when the Finder is about to launch an app."
    },
    {
      "name": "class let willPowerOffNotification: NSNotification.Name",
      "desc": "A notification that the workspace posts when the user requests a logout or powers off the device."
    },
    {
      "name": "class let willSleepNotification: NSNotification.Name",
      "desc": "A notification that the workspace posts before the device goes to sleep."
    },
    {
      "name": "class let willUnmountNotification: NSNotification.Name",
      "desc": "A notification that the workspace posts when the Finder is about to unmount a device."
    },
    {
      "name": "class let didChangeNotification: NSNotification.Name",
      "desc": "Posted whenever a color list changes."
    },
    {
      "name": "class let colorDidChangeNotification: NSNotification.Name",
      "desc": "Posted when the color of the NSColorPanel is set, as when NSColorPanel is invoked."
    },
    {
      "name": "class let selectionDidChangeNotification: NSNotification.Name",
      "desc": "Posted after the pop-up list selection of the NSComboBox changes."
    },
    {
      "name": "class let selectionIsChangingNotification: NSNotification.Name",
      "desc": "Posted whenever the pop-up list selection of the NSComboBox is changing."
    },
    {
      "name": "class let willDismissNotification: NSNotification.Name",
      "desc": "Posted whenever the pop-up list of the NSComboBox is about to be dismissed."
    },
    {
      "name": "class let willPopUpNotification: NSNotification.Name",
      "desc": "Posted whenever the pop-up list of the NSComboBox is going to be displayed."
    },
    {
      "name": "class let contextHelpModeDidActivateNotification: NSNotification.Name",
      "desc": "Posted when the application enters context-sensitive help mode. This typically happens when the user holds down the Help key."
    },
    {
      "name": "class let contextHelpModeDidDeactivateNotification: NSNotification.Name",
      "desc": "Posted when the application exits context-sensitive help mode. This happens when the user clicks the mouse button while the cursor is anywhere on the screen after displaying a context-sensitive help topic."
    },
    {
      "name": "class let textDidBeginEditingNotification: NSNotification.Name",
      "desc": "Sent when a control with editable cells begins an edit session."
    },
    {
      "name": "class let textDidChangeNotification: NSNotification.Name",
      "desc": "Sent when the text in the receiving control changes."
    },
    {
      "name": "class let textDidEndEditingNotification: NSNotification.Name",
      "desc": "Sent when a control with editable cells ends an editing session."
    },
    {
      "name": "class let didChangeNotification: NSNotification.Name",
      "desc": "Posted whenever a font collection is changed."
    },
    {
      "name": "class let fontSetChangedNotification: NSNotification.Name",
      "desc": "Posted after the currently-set font changes."
    },
    {
      "name": "class let registryDidChangeNotification: NSNotification.Name",
      "desc": "Posted whenever the image representation class registry changes."
    },
    {
      "name": "class let didAddItemNotification: NSNotification.Name",
      "desc": "Posted after a menu item is added to the menu."
    },
    {
      "name": "class let didBeginTrackingNotification: NSNotification.Name",
      "desc": "Posted when menu tracking begins."
    },
    {
      "name": "class let didChangeItemNotification: NSNotification.Name",
      "desc": "Posted after a menu item in the menu changes appearance."
    },
    {
      "name": "class let didEndTrackingNotification: NSNotification.Name",
      "desc": "Posted when menu tracking ends, even if no action is sent."
    },
    {
      "name": "class let didRemoveItemNotification: NSNotification.Name",
      "desc": "Posted after a menu item is removed from the menu."
    },
    {
      "name": "class let didSendActionNotification: NSNotification.Name",
      "desc": "Posted just after the application dispatches a menu item’s action method to the menu item’s target."
    },
    {
      "name": "class let willSendActionNotification: NSNotification.Name",
      "desc": "Posted just before the application dispatches a menu item’s action method to the menu item’s target."
    },
    {
      "name": "class let columnDidMoveNotification: NSNotification.Name",
      "desc": "Posted whenever a column is moved by user action in an NSOutlineView object."
    },
    {
      "name": "class let columnDidResizeNotification: NSNotification.Name",
      "desc": "Posted whenever a column is resized in an NSOutlineView object."
    },
    {
      "name": "class let itemDidCollapseNotification: NSNotification.Name",
      "desc": "Posted whenever an item is collapsed in an NSOutlineView object."
    },
    {
      "name": "class let itemDidExpandNotification: NSNotification.Name",
      "desc": "Posted whenever an item is expanded in an NSOutlineView object."
    },
    {
      "name": "class let itemWillCollapseNotification: NSNotification.Name",
      "desc": "Posted before an item is collapsed (after the user clicks the arrow but before the item is collapsed)."
    },
    {
      "name": "class let itemWillExpandNotification: NSNotification.Name",
      "desc": "Posted before an item is expanded (after the user clicks the arrow but before the item is collapsed)."
    },
    {
      "name": "class let selectionDidChangeNotification: NSNotification.Name",
      "desc": "Posted after the outline view's selection changes."
    },
    {
      "name": "class let selectionIsChangingNotification: NSNotification.Name",
      "desc": "Posted as the outline view’s selection changes (while the mouse button is still down)."
    },
    {
      "name": "class let willPopUpNotification: NSNotification.Name",
      "desc": "This notification is posted just before a pop-up menu is attached to its window frame."
    },
    {
      "name": "class let willPopUpNotification: NSNotification.Name",
      "desc": "Posted when an NSPopUpButton object receives a mouse-down event—that is, when the user is about to select an item from the menu."
    },
    {
      "name": "class let didCloseNotification: NSNotification.Name",
      "desc": "Sent after the popover has finished animating offscreen."
    },
    {
      "name": "class let didShowNotification: NSNotification.Name",
      "desc": "Sent after the popover has finished animating onscreen."
    },
    {
      "name": "class let willCloseNotification: NSNotification.Name",
      "desc": "Sent before the popover is closed."
    },
    {
      "name": "class let willShowNotification: NSNotification.Name",
      "desc": "Sent before the popover is shown."
    },
    {
      "name": "class let preferredScrollerStyleDidChangeNotification: NSNotification.Name",
      "desc": "Posted if the preferred scroller style changes."
    },
    {
      "name": "class let rowsDidChangeNotification: NSNotification.Name",
      "desc": "This notification is posted to the default notification center whenever the view's rows change."
    },
    {
      "name": "class let colorSpaceDidChangeNotification: NSNotification.Name",
      "desc": "Posted when the color space of the screen has changed."
    },
    {
      "name": "class let didEndLiveMagnifyNotification: NSNotification.Name",
      "desc": "Posted at the end of a magnify gesture."
    },
    {
      "name": "class let didEndLiveScrollNotification: NSNotification.Name",
      "desc": "Posted on the main thread at the end of live scroll tracking."
    },
    {
      "name": "class let didLiveScrollNotification: NSNotification.Name",
      "desc": "Posted on the main thread after changing the clipview bounds origin due to a user-initiated event."
    },
    {
      "name": "class let willStartLiveMagnifyNotification: NSNotification.Name",
      "desc": "Posted at the beginning of a magnify gesture."
    },
    {
      "name": "class let willStartLiveScrollNotification: NSNotification.Name",
      "desc": "Posted on the main thread at the beginning of user-initiated live scroll tracking (gesture scroll or scroller tracking, for example, thumb dragging)."
    },
    {
      "name": "class let didChangeAutomaticCapitalizationNotification: NSNotification.Name"
    },
    {
      "name": "class let didChangeAutomaticDashSubstitutionNotification: NSNotification.Name"
    },
    {
      "name": "class let didChangeAutomaticPeriodSubstitutionNotification: NSNotification.Name"
    },
    {
      "name": "class let didChangeAutomaticQuoteSubstitutionNotification: NSNotification.Name"
    },
    {
      "name": "class let didChangeAutomaticSpellingCorrectionNotification: NSNotification.Name",
      "desc": "This notification is posted when the spell checker did change text using automatic spell checking correction. The are posted to the application’s default notification center."
    },
    {
      "name": "class let didChangeAutomaticTextReplacementNotification: NSNotification.Name",
      "desc": "Posted when the spell checker changed text using automatic text replacement. This notification is posted to the app’s default notification center."
    },
    {
      "name": "class let didResizeSubviewsNotification: NSNotification.Name",
      "desc": "A notification that posts after a change to the size of some or all subviews of a split view."
    },
    {
      "name": "class let willResizeSubviewsNotification: NSNotification.Name",
      "desc": "A notification that posts before a change to the size of some or all subviews of a split view."
    },
    {
      "name": "class let systemColorsDidChangeNotification: NSNotification.Name",
      "desc": "Sent when the system colors have changed, such as through a system control panel interface."
    },
    {
      "name": "class let columnDidMoveNotification: NSNotification.Name",
      "desc": "Posted whenever a column is moved by user action in an NSTableView object."
    },
    {
      "name": "class let columnDidResizeNotification: NSNotification.Name",
      "desc": "Posted whenever a column is resized in an NSTableView object."
    },
    {
      "name": "class let selectionDidChangeNotification: NSNotification.Name",
      "desc": "Posted after an NSTableView object's selection changes."
    },
    {
      "name": "class let selectionIsChangingNotification: NSNotification.Name",
      "desc": "Posted as an NSTableView object's selection changes (while the mouse button is still down)."
    },
    {
      "name": "class let selectedAlternativeStringNotification: NSNotification.Name",
      "desc": "Posted when the user selects an alternate string."
    },
    {
      "name": "class let didBeginEditingNotification: NSNotification.Name",
      "desc": "Posted when an NSText object begins any operation that changes characters or formatting attributes."
    },
    {
      "name": "class let didChangeNotification: NSNotification.Name",
      "desc": "Posted after an NSText object performs any operation that changes characters or formatting attributes."
    },
    {
      "name": "class let didEndEditingNotification: NSNotification.Name",
      "desc": "Posted when focus leaves an NSText object, whether or not any operation has changed characters or formatting attributes."
    },
    {
      "name": "class let keyboardSelectionDidChangeNotification: NSNotification.Name",
      "desc": "Posted after the selected text input source changes."
    },
    {
      "name": "class let didChangeAutomaticTextCompletionNotification: NSNotification.Name"
    },
    {
      "name": "class let didBecomeActiveNotification: NSNotification.Name",
      "desc": "Posted immediately after the app becomes active."
    },
    {
      "name": "class let didChangeOcclusionStateNotification: NSNotification.Name",
      "desc": "Posted when the app’s occlusion state changes."
    },
    {
      "name": "class let didChangeScreenParametersNotification: NSNotification.Name",
      "desc": "Posted when the configuration of the displays attached to the computer is changed."
    },
    {
      "name": "class let didFinishLaunchingNotification: NSNotification.Name",
      "desc": "Posted at the end of the finishLaunching() method to indicate that the app has completed launching and is ready to run."
    },
    {
      "name": "class let didFinishRestoringWindowsNotification: NSNotification.Name",
      "desc": "Posted when the app has finished restoring windows."
    },
    {
      "name": "class let didHideNotification: NSNotification.Name",
      "desc": "Posted at the end of the hide(_:) method to indicate that the app is now hidden."
    },
    {
      "name": "class let didResignActiveNotification: NSNotification.Name",
      "desc": "Posted immediately after the app gives up its active status to another app."
    },
    {
      "name": "class let didUnhideNotification: NSNotification.Name",
      "desc": "Posted at the end of the unhideWithoutActivation() method to indicate that the app is now visible."
    },
    {
      "name": "class let didUpdateNotification: NSNotification.Name",
      "desc": "Posted at the end of the updateWindows() method to indicate that the app has finished updating its windows."
    },
    {
      "name": "class let willBecomeActiveNotification: NSNotification.Name",
      "desc": "Posted immediately before the app becomes active."
    },
    {
      "name": "class let willFinishLaunchingNotification: NSNotification.Name",
      "desc": "Posted at the start of the finishLaunching() method to indicate that the app has completed its initialization process and is about to finish launching."
    },
    {
      "name": "class let willHideNotification: NSNotification.Name",
      "desc": "Posted at the start of the hide(_:) method to indicate that the app is about to be hidden."
    },
    {
      "name": "class let willResignActiveNotification: NSNotification.Name",
      "desc": "Posted immediately before the app gives up its active status to another app."
    },
    {
      "name": "class let willTerminateNotification: NSNotification.Name",
      "desc": "Posted by the terminate(_:) method to indicate that the app will terminate."
    },
    {
      "name": "class let willUnhideNotification: NSNotification.Name",
      "desc": "Posted at the start of the unhideWithoutActivation() method to indicate that the app is about to become visible."
    },
    {
      "name": "class let willUpdateNotification: NSNotification.Name",
      "desc": "Posted at the start of the updateWindows() method to indicate that the app is about to update its windows."
    },
    {
      "name": "class let columnConfigurationDidChangeNotification: NSNotification.Name",
      "desc": "Notifies the delegate when the width of a browser column has changed."
    },
    {
      "name": "static let NSClassDescriptionNeededForClass: NSNotification.Name",
      "desc": "Posted by init(for:) when a class description cannot be found for a class."
    },
    {
      "name": "static let NSApplicationProtectedDataDidBecomeAvailable: NSNotification.Name"
    },
    {
      "name": "static let NSApplicationProtectedDataWillBecomeUnavailable: NSNotification.Name"
    },
    {
      "name": "static let announcementRequested: NSAccessibility.Notification",
      "desc": "This notification is posted whenever an accessibility element needs to make an announcement to the user. This notification requires a userInfo dictionary with the key announcement and a localized string containing the announcement. To help an assistive app determine the importance of the announcement, add the appropriate priority to the userInfo dictionary."
    },
    {
      "name": "static let applicationActivated: NSAccessibility.Notification",
      "desc": "This notification is posted after the app has been activated. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let applicationDeactivated: NSAccessibility.Notification",
      "desc": "This notification is posted after the app has been deactivated. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let applicationHidden: NSAccessibility.Notification",
      "desc": "This notification is posted after the app is hidden. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let applicationShown: NSAccessibility.Notification",
      "desc": "This notification is posted after the app is shown. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let created: NSAccessibility.Notification",
      "desc": "This notification is posted after an accessibility element is created. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let drawerCreated: NSAccessibility.Notification",
      "desc": "This notification is posted after a drawer appears. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let focusedUIElementChanged: NSAccessibility.Notification",
      "desc": "This notification is posted after an accessibility element gains focus. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let focusedWindowChanged: NSAccessibility.Notification",
      "desc": "This notification is posted after the key window changes. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let helpTagCreated: NSAccessibility.Notification",
      "desc": "This notification is posted after a help tag appears. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let layoutChanged: NSAccessibility.Notification",
      "desc": "This notification is posted after the UI changes in a way that requires the attention of an accessibility client. This notification should be accompanied by a userInfo dictionary with the key uiElements and an array containing the UI elements that have been added or changed. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let mainWindowChanged: NSAccessibility.Notification",
      "desc": "This notification is posted after the main window changes. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let moved: NSAccessibility.Notification",
      "desc": "This notification is posted after an accessibility element moves. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let resized: NSAccessibility.Notification",
      "desc": "This notification is posted after an accessibility element’s size changes. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let rowCollapsed: NSAccessibility.Notification",
      "desc": "This notification is posted after a row collapses. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let rowCountChanged: NSAccessibility.Notification",
      "desc": "This notification is posted after a row is added or deleted. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let rowExpanded: NSAccessibility.Notification",
      "desc": "This notification is posted after a row expands. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let selectedCellsChanged: NSAccessibility.Notification",
      "desc": "This notification is posted after one or more cells in a cell-based table are selected or deselected. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let selectedChildrenChanged: NSAccessibility.Notification",
      "desc": "This notification is posted after one or more child elements are selected or deselected. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let selectedChildrenMoved: NSAccessibility.Notification",
      "desc": "This notification is posted after the selected items in a layout area move. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let selectedColumnsChanged: NSAccessibility.Notification",
      "desc": "This notification is posted after one or more columns are selected or deselected. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let selectedRowsChanged: NSAccessibility.Notification",
      "desc": "This notification is posted after one or more rows are selected or deselected. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let selectedTextChanged: NSAccessibility.Notification",
      "desc": "This notification is posted after text is selected or deselected. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let sheetCreated: NSAccessibility.Notification",
      "desc": "This notification is posted after a sheet appears. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let titleChanged: NSAccessibility.Notification",
      "desc": "This notification is posted after an accessibility element’s title changes. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let uiElementDestroyed: NSAccessibility.Notification",
      "desc": "This notification is posted after an accessibility element is destroyed. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let unitsChanged: NSAccessibility.Notification",
      "desc": "This notification is posted after the units in a layout area change. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let valueChanged: NSAccessibility.Notification",
      "desc": "This notification is posted after an accessibility element’s value changes. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let windowCreated: NSAccessibility.Notification",
      "desc": "This notification is posted after a new window appears. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let windowDeminiaturized: NSAccessibility.Notification",
      "desc": "This notification is posted after a window is restored to full size from the Dock. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let windowMiniaturized: NSAccessibility.Notification",
      "desc": "This notification is posted after a window is put in the Dock. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let windowMoved: NSAccessibility.Notification",
      "desc": "This notification is posted after a window moves. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let windowResized: NSAccessibility.Notification",
      "desc": "This notification is posted after a window’s size changes. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "class let progressMarkNotification: NSNotification.Name",
      "desc": "Posted when the current progress of a running animation reaches one of its progress marks."
    },
    {
      "name": "class let antialiasThresholdChangedNotification: NSNotification.Name",
      "desc": "Posted after the threshold for antialiasing changes."
    },
    {
      "name": "static let AVAudioEngineConfigurationChange: NSNotification.Name",
      "desc": "A notification the framework posts when the audio engine configuration changes."
    },
    {
      "name": "static let AVAudioUnitComponentTagsDidChange: NSNotification.Name",
      "desc": "A notification that indicates when component tags change."
    },
    {
      "name": "class let interruptionNotification: NSNotification.Name",
      "desc": "A notification the system posts when an audio interruption occurs."
    },
    {
      "name": "class let mediaServicesWereLostNotification: NSNotification.Name",
      "desc": "A notification the system posts when it terminates the media server."
    },
    {
      "name": "class let mediaServicesWereResetNotification: NSNotification.Name",
      "desc": "A notification the system posts when the media server restarts."
    },
    {
      "name": "class let routeChangeNotification: NSNotification.Name",
      "desc": "A notification the system posts when its audio route changes."
    },
    {
      "name": "class let silenceSecondaryAudioHintNotification: NSNotification.Name",
      "desc": "A notification the system posts when the primary audio from other apps starts and stops."
    },
    {
      "name": "static let AVAssetChapterMetadataGroupsDidChange: NSNotification.Name",
      "desc": "A notification the system posts when an asset’s chapter metadata groups change."
    },
    {
      "name": "static let AVAssetContainsFragmentsDidChange: NSNotification.Name",
      "desc": "A notification the system posts when an asset’s fragments change."
    },
    {
      "name": "static let AVAssetDurationDidChange: NSNotification.Name",
      "desc": "A notification the system posts when a fragmented asset minder observes a change to a fragmented asset’s duration."
    },
    {
      "name": "static let AVAssetMediaSelectionGroupsDidChange: NSNotification.Name",
      "desc": "A notification the system posts when an asset’s media selection groups change."
    },
    {
      "name": "static let AVAssetTrackSegmentsDidChange: NSNotification.Name",
      "desc": "A notification the system posts when a fragmented asset minder observes a change to a fragmented asset track’s segments."
    },
    {
      "name": "static let AVAssetTrackTimeRangeDidChange: NSNotification.Name",
      "desc": "A notification the system posts when a fragmented asset minder observes a change to a fragmented asset track’s time range."
    },
    {
      "name": "static let AVAssetTrackTrackAssociationsDidChange: NSNotification.Name",
      "desc": "A notification the system posts when the track associations for an asset track change."
    },
    {
      "name": "static let AVAssetWasDefragmented: NSNotification.Name",
      "desc": "A notification the system posts when a fragmented asset minder observes that the system defragments the asset on disk."
    },
    {
      "name": "static let AVCaptureDeviceSubjectAreaDidChange: NSNotification.Name",
      "desc": "A notification the system posts when a capture device detects a substantial change to the video subject area."
    },
    {
      "name": "static let AVCaptureDeviceWasConnected: NSNotification.Name",
      "desc": "A notification the system posts when a new capture device becomes available."
    },
    {
      "name": "static let AVCaptureDeviceWasDisconnected: NSNotification.Name",
      "desc": "A notification the system posts when an existing device becomes unavailable."
    },
    {
      "name": "static let AVCaptureInputPortFormatDescriptionDidChange: NSNotification.Name",
      "desc": "A notification the system posts when the capture input port’s format description changes."
    },
    {
      "name": "static let AVCaptureSessionDidStartRunning: NSNotification.Name",
      "desc": "A notification the system posts when a capture session starts."
    },
    {
      "name": "static let AVCaptureSessionDidStopRunning: NSNotification.Name",
      "desc": "A notification the system posts when a capture session stops."
    },
    {
      "name": "static let AVCaptureSessionInterruptionEnded: NSNotification.Name",
      "desc": "A notification the system posts when an interruption to a capture session finishes."
    },
    {
      "name": "static let AVCaptureSessionRuntimeError: NSNotification.Name",
      "desc": "A notification the system posts when an error occurs during a capture session."
    },
    {
      "name": "static let AVCaptureSessionWasInterrupted: NSNotification.Name",
      "desc": "A notification the system posts when it interrupts a capture session."
    },
    {
      "name": "static let AVFragmentedMovieContainsMovieFragmentsDidChange: NSNotification.Name",
      "desc": "A notification the system posts when a fragmented movie minder observes a change to a movie’s fragments."
    },
    {
      "name": "static let AVFragmentedMovieDurationDidChange: NSNotification.Name",
      "desc": "A notification the system posts when a fragmented movie minder observes a change to a movie’s duration."
    },
    {
      "name": "static let AVFragmentedMovieTrackSegmentsDidChange: NSNotification.Name",
      "desc": "A notification the system posts when a fragmented movie minder observes a change to a fragmented movie track’s segments."
    },
    {
      "name": "static let AVFragmentedMovieTrackTimeRangeDidChange: NSNotification.Name",
      "desc": "A notification the system posts when a fragmented movie minder observes a change to a movie track’s time range."
    },
    {
      "name": "static let AVFragmentedMovieWasDefragmented: NSNotification.Name",
      "desc": "A notification the system posts when a fragmented movie minder observes that the system defragments the asset on disk."
    },
    {
      "name": "static let AVPlayerAvailableHDRModesDidChange: NSNotification.Name",
      "desc": "A notification the system posts when a player’s available HDR modes change."
    },
    {
      "name": "static let AVPlayerItemDidPlayToEndTime: NSNotification.Name",
      "desc": "A notification the system posts when a player item plays to its end time."
    },
    {
      "name": "static let AVPlayerItemFailedToPlayToEndTime: NSNotification.Name",
      "desc": "A notification that the system posts when a player item fails to play to its end time."
    },
    {
      "name": "static let AVPlayerItemNewAccessLogEntry: NSNotification.Name",
      "desc": "A notification the system posts when a player item adds a new entry to its access log."
    },
    {
      "name": "static let AVPlayerItemNewErrorLogEntry: NSNotification.Name",
      "desc": "A notification the system posts when a player item adds a new entry to its error log."
    },
    {
      "name": "static let AVPlayerItemPlaybackStalled: NSNotification.Name",
      "desc": "A notification the system posts when a player item media doesn’t arrive in time to continue playback."
    },
    {
      "name": "class let timeJumpedNotification: NSNotification.Name",
      "desc": "A notification the system posts when a player item’s time changes discontinuously."
    },
    {
      "name": "static let AVRouteDetectorMultipleRoutesDetectedDidChange: NSNotification.Name",
      "desc": "A notification the system posts when changes occur to its detected routes."
    },
    {
      "name": "static let AVSampleBufferAudioRendererOutputConfigurationDidChange: NSNotification.Name",
      "desc": "A notification the system posts to indicate that the hardware configuration doesn’t match the enqueued data format."
    },
    {
      "name": "static let AVSampleBufferAudioRendererWasFlushedAutomatically: NSNotification.Name",
      "desc": "A notification the system posts when a renderer flushes its enqueued media data without an explicit request to do so."
    },
    {
      "name": "static let AVSampleBufferDisplayLayerFailedToDecode: NSNotification.Name",
      "desc": "A notification the system posts when a sample buffer display layer fails to decode."
    },
    {
      "name": "static let AVSampleBufferDisplayLayerOutputObscuredDueToInsufficientExternalProtectionDidChange: NSNotification.Name",
      "desc": "A notification the system posts when the current device configuration doesn’t support the external content protection mechanism."
    },
    {
      "name": "static let AVSampleBufferDisplayLayerRequiresFlushToResumeDecodingDidChange: NSNotification.Name",
      "desc": "A notification the system posts when a sample buffer display layer changes its decoding requirements."
    },
    {
      "name": "static let AVDisplayManagerModeSwitchSettingsChanged: NSNotification.Name",
      "desc": "A notification the display manager posts when a user changes their Match Content settings in the tvOS Settings app."
    },
    {
      "name": "static let AVDisplayManagerModeSwitchStart: NSNotification.Name",
      "desc": "A notification the display manager posts when a display begins a mode switch."
    },
    {
      "name": "static let AVDisplayManagerModeSwitchEnd: NSNotification.Name",
      "desc": "A notification the display manager posts when a display ends a mode switch."
    },
    {
      "name": "static let CLKComplicationServerActiveComplicationsDidChange: NSNotification.Name",
      "desc": "Posted when the set of active complications changes."
    },
    {
      "name": "static let CKAccountChanged: NSNotification.Name",
      "desc": "A notification that a container posts when the status of an iCloud account changes."
    },
    {
      "name": "static let CNContactStoreDidChange: NSNotification.Name",
      "desc": "Posted when changes occur to the contact store."
    },
    {
      "name": "static let NSManagedObjectContextDidSave: NSNotification.Name",
      "desc": "A notification that the context completed a save."
    },
    {
      "name": "static let NSManagedObjectContextObjectsDidChange: NSNotification.Name",
      "desc": "A notification of changes made to managed objects associated with this context."
    },
    {
      "name": "static let NSManagedObjectContextWillSave: NSNotification.Name",
      "desc": "A notification that the context is about to save."
    },
    {
      "name": "static let NSPersistentStoreCoordinatorStoresDidChange: NSNotification.Name",
      "desc": "A notification that posts when a coordinator adds, removes, or updates a persistent store."
    },
    {
      "name": "static let NSPersistentStoreCoordinatorStoresWillChange: NSNotification.Name",
      "desc": "A notification that posts immediately before the coordinator updates its collection of stores."
    },
    {
      "name": "static let NSPersistentStoreCoordinatorWillRemoveStore: NSNotification.Name",
      "desc": "A notification that posts immediately before a coordinator removes a persistent store."
    },
    {
      "name": "static let NSCoreDataCoreSpotlightDelegateIndexDidUpdate: NSNotification.Name"
    },
    {
      "name": "static let NSManagedObjectContextDidMergeChangesObjectIDs: NSNotification.Name"
    },
    {
      "name": "static let NSManagedObjectContextDidSaveObjectIDs: NSNotification.Name"
    },
    {
      "name": "static let NSPersistentStoreRemoteChange: NSNotification.Name",
      "desc": "A notification that posts for all cross-process writes to a persistent store."
    },
    {
      "name": "static let CTServiceRadioAccessTechnologyDidChange: NSNotification.Name",
      "desc": "A notification that posts when radio access technology changes."
    },
    {
      "name": "static let EKEventStoreChanged: NSNotification.Name",
      "desc": "A notification posted when changes are made to the Calendar database."
    },
    {
      "name": "static let EAAccessoryDidConnect: NSNotification.Name",
      "desc": "A notification that the system sends when an accessory becomes connected and available for your application to use."
    },
    {
      "name": "static let EAAccessoryDidDisconnect: NSNotification.Name",
      "desc": "A notification that is posted when an accessory is disconnected and no longer available for your application to use."
    },
    {
      "name": "static let fileProviderDomainDidChange: NSNotification.Name",
      "desc": "A notification that posts when a file provider’s domain changes."
    },
    {
      "name": "static let fileProviderMaterializedSetDidChange: NSNotification.Name",
      "desc": "A notification that the system posts when the set of materialized items changes for your file provider extension."
    },
    {
      "name": "static let fileProviderPendingSetDidChange: NSNotification.Name",
      "desc": "A notification that the system posts when the set of pending items changes for your file provider extension."
    },
    {
      "name": "static let NSUbiquityIdentityDidChange: NSNotification.Name",
      "desc": "Sent after the iCloud (“ubiquity”) identity has changed."
    },
    {
      "name": "static let NSAppleEventManagerWillProcessFirstEvent: NSNotification.Name",
      "desc": "Posted by NSAppleEventManager before it first dispatches an Apple event. Your application can use this notification to avoid registering any Apple event handlers until the first time at which they may be needed."
    },
    {
      "name": "static let NSUndoManagerCheckpoint: NSNotification.Name",
      "desc": "Posted whenever an NSUndoManager object opens or closes an undo group (except when it opens a top-level group) and when checking the redo stack in canRedo."
    },
    {
      "name": "static let NSUndoManagerDidCloseUndoGroup: NSNotification.Name",
      "desc": "Posted after an NSUndoManager object closes an undo group, which occurs in the implementation of the endUndoGrouping() method."
    },
    {
      "name": "static let NSUndoManagerDidOpenUndoGroup: NSNotification.Name",
      "desc": "Posted whenever an NSUndoManager object opens an undo group, which occurs in the implementation of the beginUndoGrouping() method."
    },
    {
      "name": "static let NSUndoManagerDidRedoChange: NSNotification.Name",
      "desc": "Posted just after an NSUndoManager object performs a redo operation (redo())."
    },
    {
      "name": "static let NSUndoManagerDidUndoChange: NSNotification.Name",
      "desc": "Posted just after an NSUndoManager object performs an undo operation."
    },
    {
      "name": "static let NSUndoManagerWillCloseUndoGroup: NSNotification.Name",
      "desc": "Posted before an NSUndoManager object closes an undo group, which occurs in the implementation of the endUndoGrouping() method."
    },
    {
      "name": "static let NSUndoManagerWillRedoChange: NSNotification.Name",
      "desc": "Posted just before an NSUndoManager object performs a redo operation (redo())."
    },
    {
      "name": "static let NSUndoManagerWillUndoChange: NSNotification.Name",
      "desc": "Posted just before an NSUndoManager object performs an undo operation."
    },
    {
      "name": "static let NSWillBecomeMultiThreaded: NSNotification.Name",
      "desc": "Posted when the first thread is detached from the current thread. The NSThread class posts this notification at most once—the first time a thread is detached using detachNewThreadSelector(_:toTarget:with:) or the start() method. Subsequent invocations of those methods do not post this notification. Observers of this notification have their notification method invoked in the main thread, not the new thread. The observer notification methods always execute before the new thread begins executing."
    },
    {
      "name": "static let NSBundleResourceRequestLowDiskSpace: NSNotification.Name",
      "desc": "Posted after the system detects that the amount of available disk space is getting low. The notification is posted to the default notification center."
    },
    {
      "name": "static let NSCalendarDayChanged: NSNotification.Name",
      "desc": "A notification that is posted whenever the calendar day of the system changes, as determined by the system calendar, locale, and time zone."
    },
    {
      "name": "static let NSDidBecomeSingleThreaded: NSNotification.Name",
      "desc": "Not implemented."
    },
    {
      "name": "static let NSExtensionHostDidBecomeActive: NSNotification.Name",
      "desc": "Posted when the extension’s host app moves from the inactive to the active state."
    },
    {
      "name": "static let NSExtensionHostDidEnterBackground: NSNotification.Name",
      "desc": "Posted when the extension’s host app begins running in the background."
    },
    {
      "name": "static let NSExtensionHostWillEnterForeground: NSNotification.Name",
      "desc": "Posted when the extension’s host app begins running in the foreground."
    },
    {
      "name": "static let NSExtensionHostWillResignActive: NSNotification.Name",
      "desc": "Posted when the extension’s host app moves from the active to the inactive state."
    },
    {
      "name": "static let NSFileHandleConnectionAccepted: NSNotification.Name",
      "desc": "Posted when a file handle object establishes a socket connection between two processes, creates a file handle object for one end of the connection, and makes this object available to observers."
    },
    {
      "name": "static let NSFileHandleDataAvailable: NSNotification.Name",
      "desc": "Posted when the file handle determines that data is currently available for reading in a file or at a communications channel."
    },
    {
      "name": "static let NSFileHandleReadToEndOfFileCompletion: NSNotification.Name",
      "desc": "Posted when the file handle reads all data in the file or, in a communications channel, until the other process signals the end of data."
    },
    {
      "name": "static let NSHTTPCookieManagerAcceptPolicyChanged: NSNotification.Name",
      "desc": "A notification posted when the acceptance policy of the cookie storage has changed."
    },
    {
      "name": "static let NSHTTPCookieManagerCookiesChanged: NSNotification.Name",
      "desc": "A notification posted when the cookies stored in the cookie storage have changed."
    },
    {
      "name": "static let NSMetadataQueryDidFinishGathering: NSNotification.Name",
      "desc": "Posted when the receiver has finished with the initial result-gathering phase of the query."
    },
    {
      "name": "static let NSMetadataQueryDidStartGathering: NSNotification.Name",
      "desc": "Posted when the receiver begins with the initial result-gathering phase of the query."
    },
    {
      "name": "static let NSMetadataQueryDidUpdate: NSNotification.Name",
      "desc": "Posted when the receiver’s results have changed during the live-update phase of the query."
    },
    {
      "name": "static let NSMetadataQueryGatheringProgress: NSNotification.Name",
      "desc": "Posted as the receiver is collecting results during the initial result-gathering phase of the query."
    },
    {
      "name": "static let NSProcessInfoPowerStateDidChange: NSNotification.Name",
      "desc": "Posts when the power state of a device changes."
    },
    {
      "name": "static let NSSystemClockDidChange: NSNotification.Name",
      "desc": "A notification posted whenever the system clock is changed."
    },
    {
      "name": "static let NSSystemTimeZoneDidChange: NSNotification.Name",
      "desc": "A notification posted when the time zone changes."
    },
    {
      "name": "static let NSThreadWillExit: NSNotification.Name",
      "desc": "An NSThread object posts this notification when it receives the exit() message, before the thread exits. Observer methods invoked to receive this notification execute in the exiting thread, before it exits."
    },
    {
      "name": "static let NSURLCredentialStorageChanged: NSNotification.Name",
      "desc": "A notification posted when the set of stored credentials changes."
    },
    {
      "name": "static let GCControllerDidConnect: NSNotification.Name",
      "desc": "Posts after a controller connects to the device."
    },
    {
      "name": "static let GCControllerDidDisconnect: NSNotification.Name",
      "desc": "Posts after a controller disconnects from the device."
    },
    {
      "name": "static let GCControllerDidBecomeCurrent: NSNotification.Name",
      "desc": "Posts when a controller becomes the current controller."
    },
    {
      "name": "static let GCControllerDidStopBeingCurrent: NSNotification.Name",
      "desc": "Posts when a controller stops being the current controller."
    },
    {
      "name": "static let GCKeyboardDidConnect: NSNotification.Name",
      "desc": "A notification that posts after a keyboard connects to the device."
    },
    {
      "name": "static let GCKeyboardDidDisconnect: NSNotification.Name",
      "desc": "A notification that posts after a single keyboard, or the last of multiple keyboards, disconnects from the device."
    },
    {
      "name": "static let GCMouseDidBecomeCurrent: NSNotification.Name",
      "desc": "A notification that posts when a mouse becomes the most recent mouse that the user connects."
    },
    {
      "name": "static let GCMouseDidConnect: NSNotification.Name",
      "desc": "A notification that posts after a mouse connects to the device."
    },
    {
      "name": "static let GCMouseDidDisconnect: NSNotification.Name",
      "desc": "A notification that posts after a mouse disconnects from the device."
    },
    {
      "name": "static let GCMouseDidStopBeingCurrent: NSNotification.Name",
      "desc": "A notification that posts when a mouse stops being the most recent mouse that the user connects."
    },
    {
      "name": "static let GKPlayerAuthenticationDidChangeNotificationName: NSNotification.Name",
      "desc": "A notification that posts after GameKit authenticates the local player."
    },
    {
      "name": "static let GKPlayerDidChangeNotificationName: NSNotification.Name",
      "desc": "A notification that posts when a player object’s data changes."
    },
    {
      "name": "static let HKUserPreferencesDidChange: NSNotification.Name",
      "desc": "Notifies observers whenever the user changes his or her preferred units."
    },
    {
      "name": "let HMCharacteristicPropertySupportsEventNotification: String",
      "desc": "The characteristic supports event notifications."
    },
    {
      "name": "static let IOBluetoothHostControllerPoweredOff: NSNotification.Name"
    },
    {
      "name": "static let IOBluetoothHostControllerPoweredOn: NSNotification.Name"
    },
    {
      "name": "static let IOBluetoothL2CAPChannelPublished: NSNotification.Name"
    },
    {
      "name": "static let IOBluetoothL2CAPChannelTerminated: NSNotification.Name"
    },
    {
      "name": "static let MKAnnotationCalloutInfoDidChange: NSNotification.Name",
      "desc": "Notifies observers that the title or subtitle information of an annotation object changed."
    },
    {
      "name": "static let MPMusicPlayerControllerQueueDidChange: NSNotification.Name",
      "desc": "Indicates the music player’s queue changed."
    },
    {
      "name": "static let MPMediaLibraryDidChange: NSNotification.Name",
      "desc": "Indicates the media library has changed."
    },
    {
      "name": "static let MPMediaPlaybackIsPreparedToPlayDidChange: NSNotification.Name",
      "desc": "Indicates that the prepared to play status of the media player has changed."
    },
    {
      "name": "static let MPMusicPlayerControllerNowPlayingItemDidChange: NSNotification.Name",
      "desc": "Posted when the currently playing media item has changed."
    },
    {
      "name": "static let MPMusicPlayerControllerPlaybackStateDidChange: NSNotification.Name",
      "desc": "Posted when the playback state changes programmatically or by user action."
    },
    {
      "name": "static let MPMusicPlayerControllerVolumeDidChange: NSNotification.Name",
      "desc": "Posted when the audio playback volume for the music player has changed."
    },
    {
      "name": "static let MFMessageComposeViewControllerTextMessageAvailabilityDidChange: NSNotification.Name",
      "desc": "Posted when the value returned by the canSendText() class method has changed."
    },
    {
      "name": "static let NEFilterConfigurationDidChange: NSNotification.Name",
      "desc": "Posted after the filter configuration stored in the Network Extension preferences changes."
    },
    {
      "name": "static let NEVPNConfigurationChange: NSNotification.Name",
      "desc": "Posted after the VPN configuration stored in the Network Extension preferences changes."
    },
    {
      "name": "static let NEVPNStatusDidChange: NSNotification.Name",
      "desc": "Posted when the status of the VPN connection changes."
    },
    {
      "name": "static let NEDNSProxyConfigurationDidChange: NSNotification.Name",
      "desc": "A notification that is posted when the DNS proxy configuration changes."
    },
    {
      "name": "static let NEDNSSettingsConfigurationDidChange: NSNotification.Name"
    },
    {
      "name": "static let PKPassLibraryDidChange: PKPassLibraryNotificationName",
      "desc": "A notification that PassKit posts when the pass library changes."
    },
    {
      "name": "static let PKPassLibraryRemotePaymentPassesDidChange: PKPassLibraryNotificationName",
      "desc": "A notification that PassKit posts when it adds or removes a pass on a paired remote device."
    },
    {
      "name": "static let PDFDocumentDidBeginFind: NSNotification.Name",
      "desc": "A notification that the beginFindString(_:withOptions:) or findString(_:withOptions:) method begins finding."
    },
    {
      "name": "static let PDFDocumentDidBeginPageFind: NSNotification.Name",
      "desc": "A notification that a find operation begins working on a new page of a document."
    },
    {
      "name": "static let PDFDocumentDidBeginPageWrite: NSNotification.Name",
      "desc": "A notification that a write operation begins working on a page in a document."
    },
    {
      "name": "static let PDFDocumentDidBeginWrite: NSNotification.Name",
      "desc": "A notification that a write operation begins working on a document."
    },
    {
      "name": "static let PDFDocumentDidEndFind: NSNotification.Name",
      "desc": "A notification that the beginFindString(_:withOptions:) or findString(_:withOptions:) method returns."
    },
    {
      "name": "static let PDFDocumentDidEndPageFind: NSNotification.Name",
      "desc": "A notification that a find operation finishes working on a page in a document."
    },
    {
      "name": "static let PDFDocumentDidEndPageWrite: NSNotification.Name",
      "desc": "A notification that a write operation finishes working on a page in a document."
    },
    {
      "name": "static let PDFDocumentDidEndWrite: NSNotification.Name",
      "desc": "A notification that a write operation finishes working on a document."
    },
    {
      "name": "static let PDFDocumentDidFindMatch: NSNotification.Name",
      "desc": "A notification that a string match is found in a document."
    },
    {
      "name": "static let PDFDocumentDidUnlock: NSNotification.Name",
      "desc": "A notification that a document unlocks after a unlock(withPassword:) message."
    },
    {
      "name": "static let PDFThumbnailViewDocumentEdited: NSNotification.Name"
    },
    {
      "name": "static let PDFViewAnnotationHit: NSNotification.Name",
      "desc": "A notification posted when the user clicks on an annotation."
    },
    {
      "name": "static let PDFViewAnnotationWillHit: NSNotification.Name",
      "desc": "A notification posted before the user clicks an annotation."
    },
    {
      "name": "static let PDFViewChangedHistory: NSNotification.Name",
      "desc": "A notification posted when the page history changes."
    },
    {
      "name": "static let PDFViewCopyPermission: NSNotification.Name",
      "desc": "A notification posted when the user attempts to copy to the pasteboard without the appropriate permissions."
    },
    {
      "name": "static let PDFViewDisplayBoxChanged: NSNotification.Name",
      "desc": "A notification posted when the display box has changed."
    },
    {
      "name": "static let PDFViewDisplayModeChanged: NSNotification.Name",
      "desc": "A notification posted when the display mode has changed."
    },
    {
      "name": "static let PDFViewDocumentChanged: NSNotification.Name",
      "desc": "A notification posted when a new document is associated with the view."
    },
    {
      "name": "static let PDFViewPageChanged: NSNotification.Name",
      "desc": "A notification posted when a new page becomes the current page."
    },
    {
      "name": "static let PDFViewPrintPermission: NSNotification.Name",
      "desc": "A notification posted when the user attempts to print without the appropriate permissions."
    },
    {
      "name": "static let PDFViewScaleChanged: NSNotification.Name",
      "desc": "A notification posted when the scale factor changes."
    },
    {
      "name": "static let PDFViewSelectionChanged: NSNotification.Name",
      "desc": "A notification posted when the current selection has changed."
    },
    {
      "name": "static let PDFViewVisiblePagesChanged: NSNotification.Name",
      "desc": "A notification posted when the visible pages have changed."
    },
    {
      "name": "static let playgroundPageExecutionModeDidChange: Notification.Name"
    },
    {
      "name": "static let NSPreferencePaneCancelUnselect: NSNotification.Name",
      "desc": "Notifies observers that the preference pane should not be deselected."
    },
    {
      "name": "static let NSPreferencePaneDoUnselect: NSNotification.Name",
      "desc": "Notifies observers that the preference pane may be deselected."
    },
    {
      "name": "static let NSPreferencePaneSwitchToPane: NSNotification.Name",
      "desc": "Notifies observers that the user selected a new preference pane."
    },
    {
      "name": "static let NSPreferencePaneUpdateHelpMenu: NSNotification.Name",
      "desc": "Notifies observers that your help menu content changed."
    },
    {
      "name": "static let NSPreferencePrefPaneIsAvailable: NSNotification.Name",
      "desc": "Notifies observers that the system preferences app is available to display your preferences."
    },
    {
      "name": "static let IKFilterBrowserFilterDoubleClick: NSNotification.Name",
      "desc": "Posted when the user double-clicks a filter in the filter browser."
    },
    {
      "name": "static let IKFilterBrowserFilterSelected: NSNotification.Name",
      "desc": "Posted when the user clicks a filter name in the filter browser."
    },
    {
      "name": "static let IKFilterBrowserWillPreviewFilter: NSNotification.Name",
      "desc": "Posted before showing a filter preview, allowing an application to set the parameters of a filter."
    },
    {
      "name": "static let quartzFilterManagerDidAddFilter: NSNotification.Name"
    },
    {
      "name": "static let quartzFilterManagerDidModifyFilter: NSNotification.Name"
    },
    {
      "name": "static let quartzFilterManagerDidRemoveFilter: NSNotification.Name"
    },
    {
      "name": "static let quartzFilterManagerDidSelectFilter: NSNotification.Name"
    },
    {
      "name": "static let SKCloudServiceCapabilitiesDidChange: NSNotification.Name",
      "desc": "A notification name for indicating a change in the capabilities associated with the music library on the device."
    },
    {
      "name": "static let SKStorefrontIdentifierDidChange: NSNotification.Name",
      "desc": "A notification name for indicating a change in the storefront identifier associated with the device."
    },
    {
      "name": "static let SKStorefrontCountryCodeDidChange: NSNotification.Name",
      "desc": "A notification name for indicating a change in the storefront country or region code associated with the device."
    },
    {
      "name": "static let announcementDidFinishNotification: NSNotification.Name",
      "desc": "A notification that UIKit posts when the system finishes reading an announcement."
    },
    {
      "name": "static let elementFocusedNotification: NSNotification.Name",
      "desc": "A notification that UIKit posts when an assistive app focuses on an accessibility element."
    },
    {
      "name": "static let assistiveTouchStatusDidChangeNotification: NSNotification.Name",
      "desc": "A notification that indicates a change in the status of AssistiveTouch."
    },
    {
      "name": "static let boldTextStatusDidChangeNotification: NSNotification.Name",
      "desc": "A notification that UIKit posts when the system’s Bold Text setting changes."
    },
    {
      "name": "static let closedCaptioningStatusDidChangeNotification: NSNotification.Name",
      "desc": "A notification that UIKit posts when the setting for Closed Captions + SDH changes."
    },
    {
      "name": "static let darkerSystemColorsStatusDidChangeNotification: NSNotification.Name",
      "desc": "A notification that UIKit posts when the system’s Increase Contrast setting changes."
    },
    {
      "name": "static let grayscaleStatusDidChangeNotification: NSNotification.Name",
      "desc": "A notification that UIKit posts when the system’s Grayscale setting changes."
    },
    {
      "name": "static let guidedAccessStatusDidChangeNotification: NSNotification.Name",
      "desc": "A notification that indicates when a Guided Access session starts or ends."
    },
    {
      "name": "static let hearingDevicePairedEarDidChangeNotification: NSNotification.Name",
      "desc": "A notification that UIKit posts when there is a change to the currently paired hearing devices."
    },
    {
      "name": "static let invertColorsStatusDidChangeNotification: NSNotification.Name",
      "desc": "A notification that UIKit posts when the settings for inverted colors change."
    },
    {
      "name": "static let monoAudioStatusDidChangeNotification: NSNotification.Name",
      "desc": "A notification that UIKit posts when system audio changes from stereo to mono."
    },
    {
      "name": "static let reduceMotionStatusDidChangeNotification: NSNotification.Name",
      "desc": "A notification that UIKit posts when the system’s Reduce Motion setting changes."
    },
    {
      "name": "static let reduceTransparencyStatusDidChangeNotification: NSNotification.Name",
      "desc": "A notification that UIKit posts when the system’s Reduce Transparency setting changes."
    },
    {
      "name": "static let shakeToUndoDidChangeNotification: NSNotification.Name",
      "desc": "A notification that UIKit posts when the system's Shake to Undo setting changes."
    },
    {
      "name": "static let speakScreenStatusDidChangeNotification: NSNotification.Name",
      "desc": "A notification that UIKit posts when the system’s Speak Screen setting changes."
    },
    {
      "name": "static let speakSelectionStatusDidChangeNotification: NSNotification.Name",
      "desc": "A notification that UIKit posts when the system’s Speak Selection setting changes."
    },
    {
      "name": "static let switchControlStatusDidChangeNotification: NSNotification.Name",
      "desc": "A notification that UIKit posts when the system’s Switch Control setting changes."
    },
    {
      "name": "class let didBecomeActiveNotification: NSNotification.Name",
      "desc": "A notification that posts when the app becomes active."
    },
    {
      "name": "class let didEnterBackgroundNotification: NSNotification.Name",
      "desc": "A notification that posts when the app enters the background."
    },
    {
      "name": "class let didFinishLaunchingNotification: NSNotification.Name",
      "desc": "A notification that posts immediately after the app finishes launching."
    },
    {
      "name": "class let didReceiveMemoryWarningNotification: NSNotification.Name",
      "desc": "A notification that posts when the app receives a warning from the operating system about low memory availability."
    },
    {
      "name": "class let significantTimeChangeNotification: NSNotification.Name",
      "desc": "A notification that posts when there’s a significant change in time."
    },
    {
      "name": "class let userDidTakeScreenshotNotification: NSNotification.Name",
      "desc": "A notification that posts when the user presses the Home and Lock buttons to take a screenshot."
    },
    {
      "name": "class let willEnterForegroundNotification: NSNotification.Name",
      "desc": "A notification that posts shortly before an app leaves the background state on its way to becoming the active app."
    },
    {
      "name": "class let willResignActiveNotification: NSNotification.Name",
      "desc": "A notification that posts when the app is no longer active and loses focus."
    },
    {
      "name": "class let willTerminateNotification: NSNotification.Name",
      "desc": "A notification that posts when the app is about to terminate."
    },
    {
      "name": "static let didChangeNotification: NSNotification.Name",
      "desc": "A notification that posts when the user changes the preferred content size setting."
    },
    {
      "name": "class let proximityStateDidChangeNotification: NSNotification.Name",
      "desc": "A notification that posts when the state of the proximity sensor changes."
    },
    {
      "name": "class let brightnessDidChangeNotification: NSNotification.Name",
      "desc": "This notification is posted when the brightness of a screen changes."
    },
    {
      "name": "class let didConnectNotification: NSNotification.Name",
      "desc": "This notification is posted when a new screen is connected to the device."
    },
    {
      "name": "class let didDisconnectNotification: NSNotification.Name",
      "desc": "This notification is posted when a screen is disconnected from the device."
    },
    {
      "name": "class let modeDidChangeNotification: NSNotification.Name",
      "desc": "This notification is posted when the current mode of a screen changes."
    },
    {
      "name": "class let selectionDidChangeNotification: NSNotification.Name",
      "desc": "A notification that posts when the selected row in the posting table view changes."
    },
    {
      "name": "class let textDidBeginEditingNotification: NSNotification.Name",
      "desc": "A notification that alerts observers when an editing session begins in a text field."
    },
    {
      "name": "class let textDidChangeNotification: NSNotification.Name",
      "desc": "A notification that alerts observers when the text in a text field changes."
    },
    {
      "name": "class let textDidEndEditingNotification: NSNotification.Name",
      "desc": "A notification that alerts observers when the editing session ends for a text field."
    },
    {
      "name": "class let currentInputModeDidChangeNotification: NSNotification.Name",
      "desc": "Posted when the current input mode changes."
    },
    {
      "name": "class let textDidBeginEditingNotification: NSNotification.Name",
      "desc": "A notification that alerts observers when an editing session begins in a text view."
    },
    {
      "name": "class let textDidChangeNotification: NSNotification.Name",
      "desc": "A notification that alerts observers when the text in a text view changes."
    },
    {
      "name": "class let textDidEndEditingNotification: NSNotification.Name",
      "desc": "A notification that alerts observers when the editing session ends for a text view."
    },
    {
      "name": "class let showDetailTargetDidChangeNotification: NSNotification.Name",
      "desc": "Posted when a split view controller is expanded or collapsed."
    },
    {
      "name": "class let didBecomeHiddenNotification: NSNotification.Name",
      "desc": "Posted when a window becomes hidden."
    },
    {
      "name": "class let didBecomeKeyNotification: NSNotification.Name",
      "desc": "Posted whenever a window becomes the key window."
    },
    {
      "name": "class let didBecomeVisibleNotification: NSNotification.Name",
      "desc": "Posted when a window becomes visible."
    },
    {
      "name": "class let didResignKeyNotification: NSNotification.Name",
      "desc": "Posted whenever a window resigns its status as main window."
    },
    {
      "name": "class let backgroundRefreshStatusDidChangeNotification: NSNotification.Name",
      "desc": "A notification that posts when the app’s status for downloading content in the background changes."
    },
    {
      "name": "class let batteryLevelDidChangeNotification: NSNotification.Name",
      "desc": "A notification that posts when the battery level changes."
    },
    {
      "name": "class let batteryStateDidChangeNotification: NSNotification.Name",
      "desc": "A notification that posts when battery state changes."
    },
    {
      "name": "class let orientationDidChangeNotification: NSNotification.Name",
      "desc": "A notification that posts when the orientation of the device changes."
    },
    {
      "name": "class let stateChangedNotification: NSNotification.Name",
      "desc": "Posted by the document object when there is a change in the state of the document."
    },
    {
      "name": "class let keyboardDidChangeFrameNotification: NSNotification.Name",
      "desc": "Posted immediately after a change in the keyboard’s frame."
    },
    {
      "name": "class let keyboardDidHideNotification: NSNotification.Name",
      "desc": "Posted immediately after the dismissal of the keyboard."
    },
    {
      "name": "class let keyboardDidShowNotification: NSNotification.Name",
      "desc": "Posted immediately after the display of the keyboard."
    },
    {
      "name": "class let keyboardWillChangeFrameNotification: NSNotification.Name",
      "desc": "Posted immediately prior to a change in the keyboard’s frame."
    },
    {
      "name": "class let keyboardWillHideNotification: NSNotification.Name",
      "desc": "Posted immediately prior to the dismissal of the keyboard."
    },
    {
      "name": "class let keyboardWillShowNotification: NSNotification.Name",
      "desc": "Posted immediately prior to the display of the keyboard."
    },
    {
      "name": "class let didHideMenuNotification: NSNotification.Name",
      "desc": "Posted by the menu controller just after it hides the menu."
    },
    {
      "name": "class let didShowMenuNotification: NSNotification.Name",
      "desc": "Posted by the menu controller just after it shows the menu."
    },
    {
      "name": "class let menuFrameDidChangeNotification: NSNotification.Name",
      "desc": "Posted when the frame of a visible menu changes."
    },
    {
      "name": "class let willHideMenuNotification: NSNotification.Name",
      "desc": "Posted by the menu controller just before it hides the menu."
    },
    {
      "name": "class let willShowMenuNotification: NSNotification.Name",
      "desc": "Posted by the menu controller just before it shows the menu."
    },
    {
      "name": "class let changedNotification: NSNotification.Name",
      "desc": "Posted by a pasteboard object when its contents change."
    },
    {
      "name": "class let removedNotification: NSNotification.Name",
      "desc": "Posted by a pasteboard object just before an app removes it."
    },
    {
      "name": "class let protectedDataDidBecomeAvailableNotification: NSNotification.Name",
      "desc": "A notification that posts when the protected files become available for your code to access."
    },
    {
      "name": "class let protectedDataWillBecomeUnavailableNotification: NSNotification.Name",
      "desc": "A notification that posts shortly before protected files are locked down and become inaccessible."
    },
    {
      "name": "static let WKAccessibilityReduceMotionStatusDidChange: NSNotification.Name",
      "desc": "Posted by WatchKit when reduced motion is enabled or disabled. This notification does not include a parameter."
    },
    {
      "name": "static let WebViewDidBeginEditing: NSNotification.Name",
      "desc": "Posted when a web view begins any operation that changes its contents in response to user editing."
    },
    {
      "name": "static let WebViewDidChange: NSNotification.Name",
      "desc": "Posted when a web view performs any operation that changes its contents in response to user editing."
    },
    {
      "name": "static let WebViewDidChangeSelection: NSNotification.Name",
      "desc": "Posted when a web view changes its typing selection."
    },
    {
      "name": "static let WebViewDidChangeTypingStyle: NSNotification.Name",
      "desc": "Posted when a web view changes its typing style."
    },
    {
      "name": "static let WebViewDidEndEditing: NSNotification.Name",
      "desc": "Posted when a web view ends any operation that changes its contents in response to user editing."
    },
    {
      "name": "init(String)"
    },
    {
      "name": "init(rawValue: String)"
    }
  ],
  "declaration": "struct Name, @unchecked Sendable",
  "conformsTo": [
    "Equatable",
    "Hashable",
    "RawRepresentable",
    "Sendable"
  ]
}