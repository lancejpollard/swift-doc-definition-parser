{
  "path": "/documentation/foundation/notification",
  "type": "Structure",
  "name": "Notification",
  "desc": "A container for information broadcast through a notification center to all registered observers.",
  "items": [
    {
      "name": "init(name: Notification.Name, object: Any?, userInfo: [AnyHashable : Any]?)",
      "desc": "Initializes a new notification."
    },
    {
      "name": "typealias Notification.Name",
      "desc": "An alias for a type used to represent the name of a notification."
    },
    {
      "name": "struct NSNotification.Name",
      "desc": "A structure that defines the name of a notification."
    },
    {
      "name": "var name: Notification.Name",
      "desc": "A tag identifying the notification."
    },
    {
      "name": "var object: Any?",
      "desc": "An object that the poster wishes to send to observers."
    },
    {
      "name": "var userInfo: [AnyHashable : Any]?",
      "desc": "Storage for values or objects related to this notification."
    },
    {
      "name": "static func != (Notification, Notification) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are not equal."
    },
    {
      "name": "static func == (Notification, Notification) -> Bool",
      "desc": "Compares two notifications for equality."
    },
    {
      "name": "var description: String",
      "desc": "A textual description of the notification."
    },
    {
      "name": "var debugDescription: String",
      "desc": "A textual description of the notification suitable for debugging."
    },
    {
      "name": "var customMirror: Mirror",
      "desc": "A mirror that reflects the notification."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The computed hash value for the notification."
    },
    {
      "name": "class NSNotification",
      "desc": "An object containing information broadcast to registered observers that bridges to Notification; use NSNotification when you need reference semantics or other Foundation-specific behavior."
    },
    {
      "name": "typealias Notification.ReferenceType",
      "desc": "An alias for this value type's equivalent reference type."
    },
    {
      "name": "func hash(into: inout Hasher)"
    }
  ],
  "declaration": "struct Notification",
  "conformsTo": [
    "CustomReflectable",
    "Equatable",
    "Hashable",
    "ReferenceConvertible"
  ]
}