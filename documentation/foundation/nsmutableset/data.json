{
  "path": "/documentation/foundation/nsmutableset",
  "type": "Class",
  "name": "NSMutableSet",
  "desc": "An object representing a dynamic, unordered, uniquing collection, for use instead of a Set variable in cases that require reference semantics.",
  "items": [
    {
      "name": "init(capacity: Int)",
      "desc": "Returns an initialized mutable set with a given initial capacity."
    },
    {
      "name": "init()",
      "desc": "Initializes a newly allocated set."
    },
    {
      "name": "func add(Any)",
      "desc": "Adds a given object to the set, if it is not already a member."
    },
    {
      "name": "func filter(using: NSPredicate)",
      "desc": "Evaluates a given predicate against the set’s content and removes from the set those objects for which the predicate returns false."
    },
    {
      "name": "func remove(Any)",
      "desc": "Removes a given object from the set."
    },
    {
      "name": "func removeAllObjects()",
      "desc": "Empties the set of all of its members."
    },
    {
      "name": "func addObjects(from: [Any])",
      "desc": "Adds to the set each object contained in a given array that is not already a member."
    },
    {
      "name": "func union(Set<AnyHashable>)",
      "desc": "Adds each object in another given set to the receiving set, if not present."
    },
    {
      "name": "func minus(Set<AnyHashable>)",
      "desc": "Removes each object in another given set from the receiving set, if present."
    },
    {
      "name": "func intersect(Set<AnyHashable>)",
      "desc": "Removes from the receiving set each object that isn’t a member of another given set."
    },
    {
      "name": "func setSet(Set<AnyHashable>)",
      "desc": "Empties the receiving set, then adds each object contained in another given set."
    },
    {
      "name": "init?(coder: NSCoder)"
    }
  ],
  "declaration": "class NSMutableSet : NSSet",
  "inheritsFrom": [
    "NSSet"
  ]
}