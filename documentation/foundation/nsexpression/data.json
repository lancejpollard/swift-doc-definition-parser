{
  "path": "/documentation/foundation/nsexpression",
  "type": "Class",
  "name": "NSExpression",
  "desc": "An expression for use in a comparison predicate.",
  "items": [
    {
      "name": "init(expressionType: NSExpression.ExpressionType)",
      "desc": "Creates the expression with the specified expression type."
    },
    {
      "name": "init(format: String, argumentArray: [Any])",
      "desc": "Creates the expression with the specified expression format and array of arguments."
    },
    {
      "name": "init(format: String, arguments: CVaListPointer)",
      "desc": "Creates the expression with the specified expression format and arguments list."
    },
    {
      "name": "init(format: String, CVarArg...)",
      "desc": "Creates the expression with the expression format and arguments list you specify."
    },
    {
      "name": "init?(coder: NSCoder)",
      "desc": "Creates an expression by decoding from the coder you specify."
    },
    {
      "name": "init(forConstantValue: Any?)",
      "desc": "Creates an expression that represents a specified constant value."
    },
    {
      "name": "class func expressionForEvaluatedObject() -> NSExpression",
      "desc": "Creates an expression that represents the object you’re evaluating."
    },
    {
      "name": "init(forKeyPath: String)",
      "desc": "Creates an expression that invokes the value function with a specified key path."
    },
    {
      "name": "init(forVariable: String)",
      "desc": "Creates an expression that extracts a value from the variable bindings dictionary for a specified key."
    },
    {
      "name": "init<Root, Value>(forKeyPath: KeyPath<Root, Value>)",
      "desc": "Creates an expression using a key path you specify."
    },
    {
      "name": "class func expressionForAnyKey() -> NSExpression",
      "desc": "Creates an expression that represents any key for a Spotlight query."
    },
    {
      "name": "init(forAggregate: [NSExpression])",
      "desc": "Creates an aggregate expression for a specified collection."
    },
    {
      "name": "init(forUnionSet: NSExpression, with: NSExpression)",
      "desc": "Creates an expression object that represents the union of a specified set and collection."
    },
    {
      "name": "init(forIntersectSet: NSExpression, with: NSExpression)",
      "desc": "Creates an expression object that represents the intersection of a specified set and collection."
    },
    {
      "name": "init(forMinusSet: NSExpression, with: NSExpression)",
      "desc": "Creates an expression object that represents the subtraction of a specified collection from a specified set."
    },
    {
      "name": "init(forSubquery: NSExpression, usingIteratorVariable: String, predicate: NSPredicate)",
      "desc": "Creates an expression that filters a collection by storing elements in the collection in a specified variable and keeping the elements that the qualifier returns as true."
    },
    {
      "name": "init(forConditional: NSPredicate, trueExpression: NSExpression, falseExpression: NSExpression)",
      "desc": "Creates an expression that returns a result, depending on the value of predicate."
    },
    {
      "name": "init(block: (Any?, [NSExpression], NSMutableDictionary?) -> Any, arguments: [NSExpression]?)",
      "desc": "Creates an expression object that uses the block for evaluating objects."
    },
    {
      "name": "init(forFunction: String, arguments: [Any])",
      "desc": "Creates an expression that invokes one of the predefined functions."
    },
    {
      "name": "init(forFunction: NSExpression, selectorName: String, arguments: [Any]?)",
      "desc": "Creates an expression that returns the result of invoking a selector with a specified name using specified arguments."
    },
    {
      "name": "var arguments: [NSExpression]?",
      "desc": "The arguments for the expression."
    },
    {
      "name": "var collection: Any",
      "desc": "The collection of expressions in an aggregate expression, or the collection element of a subquery expression."
    },
    {
      "name": "var constantValue: Any?",
      "desc": "The constant value of the expression."
    },
    {
      "name": "var expressionType: NSExpression.ExpressionType",
      "desc": "The expression type for the expression."
    },
    {
      "name": "enum NSExpression.ExpressionType",
      "desc": "Defines the possible types of an expression."
    },
    {
      "name": "var function: String",
      "desc": "The function for the expression."
    },
    {
      "name": "var keyPath: String",
      "desc": "The key path for the expression."
    },
    {
      "name": "var operand: NSExpression",
      "desc": "The operand for the expression."
    },
    {
      "name": "var predicate: NSPredicate",
      "desc": "The predicate of a subquery expression."
    },
    {
      "name": "var left: NSExpression",
      "desc": "The left expression of an aggregate expression."
    },
    {
      "name": "var right: NSExpression",
      "desc": "The right expression of an aggregate expression."
    },
    {
      "name": "var variable: String",
      "desc": "The variable for the expression."
    },
    {
      "name": "func expressionValue(with: Any?, context: NSMutableDictionary?) -> Any?",
      "desc": "Evaluates an expression using a specified object and context."
    },
    {
      "name": "func allowEvaluation()",
      "desc": "Forces a securely decoded expression to allow evaluation."
    },
    {
      "name": "var `false`: NSExpression",
      "desc": "An expression to evalutate if a conditional expression’s predicate evaluates to false."
    },
    {
      "name": "var `true`: NSExpression",
      "desc": "An expression to evalutate if a conditional expression’s predicate evaluates to true."
    },
    {
      "name": "var expressionBlock: (Any?, [NSExpression], NSMutableDictionary?) -> Any",
      "desc": "The block that executes to evaluate the expression."
    }
  ],
  "declaration": "class NSExpression : NSObject",
  "inheritsFrom": [
    "NSObject"
  ],
  "conformsTo": [
    "NSCopying",
    "NSSecureCoding"
  ]
}