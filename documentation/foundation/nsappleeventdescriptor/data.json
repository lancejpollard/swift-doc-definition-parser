{
  "path": "/documentation/foundation/nsappleeventdescriptor",
  "type": "Class",
  "name": "NSAppleEventDescriptor",
  "desc": "A wrapper for the Apple event descriptor data type.",
  "items": [
    {
      "name": "class func appleEvent(withEventClass: AEEventClass, eventID: AEEventID, targetDescriptor: NSAppleEventDescriptor?, returnID: AEReturnID, transactionID: AETransactionID) -> NSAppleEventDescriptor",
      "desc": "Creates a descriptor that represents an Apple event, initialized according to the specified information."
    },
    {
      "name": "init(boolean: Bool)",
      "desc": "Creates a descriptor initialized with type typeBoolean that stores the specified Boolean value."
    },
    {
      "name": "init(enumCode: OSType)",
      "desc": "Creates a descriptor initialized with type typeEnumerated that stores the specified enumerator data type value."
    },
    {
      "name": "init(int32: Int32)",
      "desc": "Creates a descriptor initialized with Apple event type typeSInt32 that stores the specified integer value."
    },
    {
      "name": "init(string: String)",
      "desc": "Creates a descriptor initialized with type typeUnicodeText that stores the text from the specified string."
    },
    {
      "name": "init(typeCode: OSType)",
      "desc": "Creates a descriptor initialized with type typeType that stores the specified type value."
    },
    {
      "name": "class func list() -> NSAppleEventDescriptor",
      "desc": "Creates and initializes an empty list descriptor."
    },
    {
      "name": "class func null() -> NSAppleEventDescriptor",
      "desc": "Creates and initializes a descriptor with no parameter or attribute values set."
    },
    {
      "name": "class func record() -> NSAppleEventDescriptor",
      "desc": "Creates and initializes a descriptor for an Apple event record whose data has yet to be set."
    },
    {
      "name": "init(listDescriptor: ())",
      "desc": "Initializes a newly allocated instance as an empty list descriptor."
    },
    {
      "name": "init(recordDescriptor: ())",
      "desc": "Initializes a newly allocated instance as a descriptor that is an Apple event record."
    },
    {
      "name": "init(aeDescNoCopy: UnsafePointer<AEDesc>)",
      "desc": "Initializes a newly allocated instance as a descriptor for the specified Carbon AEDesc structure."
    },
    {
      "name": "init?(descriptorType: DescType, bytes: UnsafeRawPointer?, length: Int)",
      "desc": "Initializes a newly allocated instance as a descriptor with the specified descriptor type and data (from an arbitrary sequence of bytes and a length count)."
    },
    {
      "name": "init?(descriptorType: DescType, data: Data?)",
      "desc": "Initializes a newly allocated instance as a descriptor with the specified descriptor type and data (from an instance of NSData)."
    },
    {
      "name": "init(eventClass: AEEventClass, eventID: AEEventID, targetDescriptor: NSAppleEventDescriptor?, returnID: AEReturnID, transactionID: AETransactionID)",
      "desc": "Initializes a newly allocated instance as a descriptor for an Apple event, initialized with the specified values."
    },
    {
      "name": "var aeDesc: UnsafePointer<AEDesc>?",
      "desc": "The AEDesc structure encapsulated by the receiver, if it has one."
    },
    {
      "name": "var booleanValue: Bool",
      "desc": "The contents of the receiver as a Boolean value, coercing (to typeBoolean) if necessary."
    },
    {
      "name": "func coerce(toDescriptorType: DescType) -> NSAppleEventDescriptor?",
      "desc": "Returns a descriptor obtained by coercing the receiver to the specified type."
    },
    {
      "name": "var data: Data",
      "desc": "The receiver’s data."
    },
    {
      "name": "var descriptorType: DescType",
      "desc": "The descriptor type of the receiver."
    },
    {
      "name": "var enumCodeValue: OSType",
      "desc": "The contents of the receiver as an enumeration type, coercing to typeEnumerated if necessary."
    },
    {
      "name": "var int32Value: Int32",
      "desc": "The contents of the receiver as an integer, coercing (to typeSInt32) if necessary."
    },
    {
      "name": "var numberOfItems: Int",
      "desc": "The number of descriptors in the receiver’s descriptor list."
    },
    {
      "name": "var stringValue: String?",
      "desc": "The contents of the receiver as a Unicode text string, coercing to typeUnicodeText if necessary."
    },
    {
      "name": "var typeCodeValue: OSType",
      "desc": "The contents of the receiver as a type, coercing to typeType if necessary."
    },
    {
      "name": "func atIndex(Int) -> NSAppleEventDescriptor?",
      "desc": "Returns the descriptor at the specified (one-based) position in the receiving descriptor list."
    },
    {
      "name": "func insert(NSAppleEventDescriptor, at: Int)",
      "desc": "Inserts a descriptor at the specified (one-based) position in the receiving descriptor list, replacing the existing descriptor, if any, at that position."
    },
    {
      "name": "func remove(at: Int)",
      "desc": "Removes the descriptor at the specified (one-based) position in the receiving descriptor list."
    },
    {
      "name": "func forKeyword(AEKeyword) -> NSAppleEventDescriptor?",
      "desc": "Returns the receiver’s descriptor for the specified keyword."
    },
    {
      "name": "func keywordForDescriptor(at: Int) -> AEKeyword",
      "desc": "Returns the keyword for the descriptor at the specified (one-based) position in the receiver."
    },
    {
      "name": "func remove(withKeyword: AEKeyword)",
      "desc": "Removes the receiver’s descriptor identified by the specified keyword."
    },
    {
      "name": "func setDescriptor(NSAppleEventDescriptor, forKeyword: AEKeyword)",
      "desc": "Adds a descriptor, identified by a keyword, to the receiver."
    },
    {
      "name": "func attributeDescriptor(forKeyword: AEKeyword) -> NSAppleEventDescriptor?",
      "desc": "Returns a descriptor for the receiver’s Apple event attribute identified by the specified keyword."
    },
    {
      "name": "var eventClass: AEEventClass",
      "desc": "The event class for the receiver."
    },
    {
      "name": "var eventID: AEEventID",
      "desc": "The event ID for the receiver."
    },
    {
      "name": "func paramDescriptor(forKeyword: AEKeyword) -> NSAppleEventDescriptor?",
      "desc": "Returns a descriptor for the receiver’s Apple event parameter identified by the specified keyword."
    },
    {
      "name": "func removeParamDescriptor(withKeyword: AEKeyword)",
      "desc": "Removes the receiver’s parameter descriptor identified by the specified keyword."
    },
    {
      "name": "var returnID: AEReturnID",
      "desc": "The receiver’s return ID (the ID for a reply Apple event)."
    },
    {
      "name": "func setAttribute(NSAppleEventDescriptor, forKeyword: AEKeyword)",
      "desc": "Adds a descriptor to the receiver as an attribute identified by the specified keyword."
    },
    {
      "name": "func setParam(NSAppleEventDescriptor, forKeyword: AEKeyword)",
      "desc": "Adds a descriptor to the receiver as an Apple event parameter identified by the specified keyword."
    },
    {
      "name": "var transactionID: AETransactionID",
      "desc": "The receiver’s transaction ID, if any."
    },
    {
      "name": "struct NSAppleEventDescriptor.SendOptions"
    },
    {
      "name": "init(applicationURL: URL)"
    },
    {
      "name": "init(bundleIdentifier: String)"
    },
    {
      "name": "init(date: Date)"
    },
    {
      "name": "init(double: Double)"
    },
    {
      "name": "init(fileURL: URL)"
    },
    {
      "name": "init(processIdentifier: pid_t)"
    },
    {
      "name": "var dateValue: Date?"
    },
    {
      "name": "var doubleValue: Double"
    },
    {
      "name": "var fileURLValue: URL?"
    },
    {
      "name": "var isRecordDescriptor: Bool"
    },
    {
      "name": "func sendEvent(options: NSAppleEventDescriptor.SendOptions, timeout: TimeInterval) -> NSAppleEventDescriptor"
    },
    {
      "name": "class func currentProcess() -> NSAppleEventDescriptor"
    }
  ],
  "declaration": "class NSAppleEventDescriptor : NSObject",
  "inheritsFrom": [
    "NSObject"
  ],
  "conformsTo": [
    "NSCopying",
    "NSSecureCoding"
  ]
}