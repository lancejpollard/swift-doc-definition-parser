{
  "path": "/documentation/foundation/nsset",
  "type": "Class",
  "name": "NSSet",
  "desc": "An object representing a static, unordered collection of unique objects.",
  "items": [
    {
      "name": "init(object: Any)",
      "desc": "Creates and returns a set that contains a single given object."
    },
    {
      "name": "init(objects: UnsafePointer<AnyObject>, count: Int)",
      "desc": "Creates and returns a set containing a specified number of objects from a given C array of objects."
    },
    {
      "name": "func adding(Any) -> Set<AnyHashable>",
      "desc": "Returns a new set formed by adding a given object to the receiving set."
    },
    {
      "name": "func addingObjects(from: Set<AnyHashable>) -> Set<AnyHashable>",
      "desc": "Returns a new set formed by adding the objects in a given set to the receiving set."
    },
    {
      "name": "func addingObjects(from: [Any]) -> Set<AnyHashable>",
      "desc": "Returns a new set formed by adding the objects in a given array to the receiving set."
    },
    {
      "name": "init(array: [Any])",
      "desc": "Initializes a newly allocated set with the objects that are contained in a given array."
    },
    {
      "name": "init(objects: UnsafePointer<AnyObject>?, count: Int)",
      "desc": "Initializes a newly allocated set with a specified number of objects from a given C array of objects."
    },
    {
      "name": "init(set: Set<AnyHashable>)",
      "desc": "Initializes a newly allocated set and adds to it objects from another given set."
    },
    {
      "name": "init(set: Set<AnyHashable>, copyItems: Bool)",
      "desc": "Initializes a newly allocated set and adds to it members of another given set."
    },
    {
      "name": "init()",
      "desc": "Initializes a newly allocated set."
    },
    {
      "name": "var count: Int",
      "desc": "The number of members in the set."
    },
    {
      "name": "var allObjects: [Any]",
      "desc": "An array containing the set’s members, or an empty array if the set has no members."
    },
    {
      "name": "func anyObject() -> Any?",
      "desc": "Returns one of the objects in the set, or nil if the set contains no objects."
    },
    {
      "name": "func contains(Any) -> Bool",
      "desc": "Returns a Boolean value that indicates whether a given object is present in the set."
    },
    {
      "name": "func filtered(using: NSPredicate) -> Set<AnyHashable>",
      "desc": "Evaluates a given predicate against each object in the receiving set and returns a new set containing the objects for which the predicate returns true."
    },
    {
      "name": "func member(Any) -> Any?",
      "desc": "Determines whether a given object is present in the set, and returns that object if it is."
    },
    {
      "name": "func objectEnumerator() -> NSEnumerator",
      "desc": "Returns an enumerator object that lets you access each object in the set."
    },
    {
      "name": "func enumerateObjects((Any, UnsafeMutablePointer<ObjCBool>) -> Void)",
      "desc": "Executes a given block using each object in the set."
    },
    {
      "name": "func enumerateObjects(options: NSEnumerationOptions, using: (Any, UnsafeMutablePointer<ObjCBool>) -> Void)",
      "desc": "Executes a given block using each object in the set, using the specified enumeration options."
    },
    {
      "name": "func objects(passingTest: (Any, UnsafeMutablePointer<ObjCBool>) -> Bool) -> Set<AnyHashable>",
      "desc": "Returns a set of objects that pass a test in a given block."
    },
    {
      "name": "func objects(options: NSEnumerationOptions, passingTest: (Any, UnsafeMutablePointer<ObjCBool>) -> Bool) -> Set<AnyHashable>",
      "desc": "Returns a set of objects that pass a test in a given block, using the specified enumeration options."
    },
    {
      "name": "func isSubset(of: Set<AnyHashable>) -> Bool",
      "desc": "Returns a Boolean value that indicates whether every object in the receiving set is also present in another given set."
    },
    {
      "name": "func intersects(Set<AnyHashable>) -> Bool",
      "desc": "Returns a Boolean value that indicates whether at least one object in the receiving set is also present in another given set."
    },
    {
      "name": "func isEqual(to: Set<AnyHashable>) -> Bool",
      "desc": "Compares the receiving set to another set."
    },
    {
      "name": "func value(forKey: String) -> Any",
      "desc": "Return a set containing the results of invoking valueForKey: on each of the receiving set's members."
    },
    {
      "name": "func setValue(Any?, forKey: String)",
      "desc": "Invokes setValue:forKey: on each of the set’s members."
    },
    {
      "name": "func sortedArray(using: [NSSortDescriptor]) -> [Any]",
      "desc": "Returns an array of the set’s content sorted as specified by a given array of sort descriptors."
    },
    {
      "name": "func addObserver(NSObject, forKeyPath: String, options: NSKeyValueObservingOptions, context: UnsafeMutableRawPointer?)",
      "desc": "Raises an exception."
    },
    {
      "name": "func removeObserver(NSObject, forKeyPath: String, context: UnsafeMutableRawPointer?)",
      "desc": "Raises an exception."
    },
    {
      "name": "func removeObserver(NSObject, forKeyPath: String)",
      "desc": "Raises an exception."
    },
    {
      "name": "var description: String",
      "desc": "A string that represents the contents of the set, formatted as a property list."
    },
    {
      "name": "func description(withLocale: Any?) -> String",
      "desc": "Returns a string that represents the contents of the set, formatted as a property list."
    },
    {
      "name": "typealias NSSet.ArrayLiteralElement"
    },
    {
      "name": "typealias NSSet.Element"
    },
    {
      "name": "typealias NSSet.Iterator"
    },
    {
      "name": "init(arrayLiteral: Any...)"
    },
    {
      "name": "init?(coder: NSCoder)"
    },
    {
      "name": "init(collectionViewIndexPath: IndexPath)"
    },
    {
      "name": "init(collectionViewIndexPaths: [IndexPath])"
    },
    {
      "name": "init(objects: Any...)"
    },
    {
      "name": "init(set: NSSet)"
    },
    {
      "name": "var customMirror: Mirror"
    },
    {
      "name": "var underestimatedCount: Int"
    },
    {
      "name": "func enumerateIndexPaths(options: NSEnumerationOptions, using: (IndexPath, UnsafeMutablePointer<ObjCBool>) -> Void)"
    },
    {
      "name": "func makeIterator() -> NSFastEnumerationIterator",
      "desc": "Return an iterator over the elements of this sequence."
    }
  ],
  "declaration": "class NSSet : NSObject",
  "inheritsFrom": [
    "NSObject"
  ],
  "conformsTo": [
    "CustomReflectable",
    "ExpressibleByArrayLiteral",
    "NSCopying",
    "NSFastEnumeration",
    "NSMutableCopying",
    "NSSecureCoding",
    "Sequence"
  ]
}