{
  "path": "/documentation/foundation/jsondecoder",
  "type": "Class",
  "name": "JSONDecoder",
  "desc": "An object that decodes instances of a data type from JSON objects.",
  "items": [
    {
      "name": "init()",
      "desc": "Creates a new, reusable JSON decoder with the default formatting settings and decoding strategies."
    },
    {
      "name": "func decode<T>(T.Type, from: Data) -> T",
      "desc": "Returns a value of the type you specify, decoded from a JSON object."
    },
    {
      "name": "var keyDecodingStrategy: JSONDecoder.KeyDecodingStrategy",
      "desc": "A value that determines how to decode a type’s coding keys from JSON keys."
    },
    {
      "name": "enum JSONDecoder.KeyDecodingStrategy",
      "desc": "The values that determine how to decode a type’s coding keys from JSON keys."
    },
    {
      "name": "var userInfo: [CodingUserInfoKey : Any]",
      "desc": "A dictionary you use to customize the decoding process by providing contextual information."
    },
    {
      "name": "var allowsJSON5: Bool",
      "desc": "Specifies that decoding supports the JSON5 syntax."
    },
    {
      "name": "var assumesTopLevelDictionary: Bool",
      "desc": "Specifies that decoding assumes the top level of the JSON data is a dictionary, even if it doesn’t begin and end with braces."
    },
    {
      "name": "var dateDecodingStrategy: JSONDecoder.DateDecodingStrategy",
      "desc": "The strategy used when decoding dates from part of a JSON object."
    },
    {
      "name": "enum JSONDecoder.DateDecodingStrategy",
      "desc": "The strategies available for formatting dates when decoding them from JSON."
    },
    {
      "name": "var dataDecodingStrategy: JSONDecoder.DataDecodingStrategy",
      "desc": "The strategy that a decoder uses to decode raw data."
    },
    {
      "name": "enum JSONDecoder.DataDecodingStrategy",
      "desc": "The strategies for decoding raw data."
    },
    {
      "name": "var nonConformingFloatDecodingStrategy: JSONDecoder.NonConformingFloatDecodingStrategy",
      "desc": "The strategy used by a decoder when it encounters exceptional floating-point values."
    },
    {
      "name": "enum JSONDecoder.NonConformingFloatDecodingStrategy",
      "desc": "The strategies for encoding nonconforming floating-point numbers, also known as IEEE 754 exceptional values."
    },
    {
      "name": "typealias JSONDecoder.Input",
      "desc": "The type of input read by the JSON decoder."
    }
  ],
  "declaration": "class JSONDecoder",
  "conformsTo": [
    "TopLevelDecoder"
  ]
}