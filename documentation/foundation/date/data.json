{
  "path": "/documentation/foundation/date",
  "type": "Structure",
  "name": "Date",
  "desc": "A specific point in time, independent of any calendar or time zone.",
  "items": [
    {
      "name": "init()",
      "desc": "Creates a date value initialized to the current date and time."
    },
    {
      "name": "init(timeIntervalSinceNow: TimeInterval)",
      "desc": "Creates a date value initialized relative to the current date and time by a given number of seconds."
    },
    {
      "name": "init(timeInterval: TimeInterval, since: Date)",
      "desc": "Creates a date value initialized relative to another given date by a given number of seconds."
    },
    {
      "name": "init(timeIntervalSinceReferenceDate: TimeInterval)",
      "desc": "Creates a date value initialized relative to 00:00:00 UTC on 1 January 2001 by a given number of seconds."
    },
    {
      "name": "init(timeIntervalSince1970: TimeInterval)",
      "desc": "Creates a date value initialized relative to 00:00:00 UTC on 1 January 1970 by a given number of seconds."
    },
    {
      "name": "init(from: Decoder)",
      "desc": "Creates a new instance by decoding from the given decoder."
    },
    {
      "name": "static var now: Date",
      "desc": "Returns a date instance that represents the current date and time, at the moment of access."
    },
    {
      "name": "static let distantFuture: Date",
      "desc": "A date value representing a date in the distant future."
    },
    {
      "name": "static let distantPast: Date",
      "desc": "A date value representing a date in the distant past."
    },
    {
      "name": "static func == (Date, Date) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two dates represent the same point in time."
    },
    {
      "name": "static func != (Date, Date) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two dates donâ€™t represent the same point in time."
    },
    {
      "name": "static func > (Date, Date) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the value of the first argument is greater than that of the second argument."
    },
    {
      "name": "static func >= (Date, Date) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument."
    },
    {
      "name": "static func < (Date, Date) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the value of the first argument is less than that of the second argument."
    },
    {
      "name": "static func <= (Date, Date) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument."
    },
    {
      "name": "func compare(Date) -> ComparisonResult",
      "desc": "Compares another date to this one."
    },
    {
      "name": "func distance(to: Date) -> TimeInterval",
      "desc": "Returns the distance from this date to another date, specified as a time interval."
    },
    {
      "name": "func timeIntervalSince(Date) -> TimeInterval",
      "desc": "Returns the interval between this date and another given date."
    },
    {
      "name": "var timeIntervalSinceNow: TimeInterval",
      "desc": "The time interval between the date value and the current date and time."
    },
    {
      "name": "var timeIntervalSinceReferenceDate: TimeInterval",
      "desc": "The interval between the date value and 00:00:00 UTC on 1 January 2001."
    },
    {
      "name": "var timeIntervalSince1970: TimeInterval",
      "desc": "The interval between the date value and 00:00:00 UTC on 1 January 1970."
    },
    {
      "name": "static var timeIntervalSinceReferenceDate: TimeInterval",
      "desc": "The interval between 00:00:00 UTC on 1 January 2001 and the current date and time."
    },
    {
      "name": "static let timeIntervalBetween1970AndReferenceDate: Double",
      "desc": "The number of seconds from 1 January 1970 to the reference date, 1 January 2001."
    },
    {
      "name": "typealias Date.Stride",
      "desc": "A type alias to define the stride of a date."
    },
    {
      "name": "func addTimeInterval(TimeInterval)",
      "desc": "Adds a time interval to this date."
    },
    {
      "name": "func addingTimeInterval(TimeInterval) -> Date",
      "desc": "Creates a new date value by adding a time interval to this date."
    },
    {
      "name": "func advanced(by: TimeInterval) -> Date",
      "desc": "Returns a date offset the specified time interval from this date."
    },
    {
      "name": "static func + (Date, TimeInterval) -> Date",
      "desc": "Returns a date with a specified amount of time added to it."
    },
    {
      "name": "static func += (inout Date, TimeInterval)",
      "desc": "Adds a time interval to a date."
    },
    {
      "name": "static func - (Date, TimeInterval) -> Date",
      "desc": "Returns a date with a specified amount of time subtracted from it."
    },
    {
      "name": "static func -= (inout Date, TimeInterval)",
      "desc": "Subtracts a time interval from a date."
    },
    {
      "name": "func formatted() -> String",
      "desc": "Generates a locale-aware string representation of a date using the default date format style."
    },
    {
      "name": "func formatted(date: Date.FormatStyle.DateStyle, time: Date.FormatStyle.TimeStyle) -> String",
      "desc": "Generates a locale-aware string representation of a date using specified date and time format styles."
    },
    {
      "name": "func formatted<F>(F) -> F.FormatOutput",
      "desc": "Generates a locale-aware string representation of a date using the specified date format style."
    },
    {
      "name": "struct Date.FormatStyle",
      "desc": "A structure that creates a locale-appropriate string representation of a date instance and converts strings of dates and times into date instances."
    },
    {
      "name": "struct Date.RelativeFormatStyle",
      "desc": "A format style that forms locale-aware string representations of a relative date or time."
    },
    {
      "name": "struct Date.IntervalFormatStyle",
      "desc": "A format style that creates string representations of date intervals."
    },
    {
      "name": "func ISO8601Format(Date.ISO8601FormatStyle) -> String",
      "desc": "Generates a locale-aware string representation of a date using the ISO 8601 date format."
    },
    {
      "name": "struct Date.ISO8601FormatStyle",
      "desc": "A type that converts between dates and their ISO 8601 string representations."
    },
    {
      "name": "static func ... (Date) -> PartialRangeFrom<Date>",
      "desc": "Returns a partial range extending upward from a lower bound."
    },
    {
      "name": "static func ... (Date) -> PartialRangeThrough<Date>",
      "desc": "Returns a partial range up to, and including, its upper bound."
    },
    {
      "name": "static func ... (Date, Date) -> ClosedRange<Date>",
      "desc": "Returns a closed range that contains both of its bounds."
    },
    {
      "name": "static func ..< (Date) -> PartialRangeUpTo<Date>",
      "desc": "Returns a partial range up to, but not including, its upper bound."
    },
    {
      "name": "static func ..< (Date, Date) -> Range<Date>",
      "desc": "Returns a half-open range that contains its lower bound but not its upper bound."
    },
    {
      "name": "func encode(to: Encoder)",
      "desc": "Encodes this date into the given encoder."
    },
    {
      "name": "var description: String",
      "desc": "A textual description of the date value."
    },
    {
      "name": "func description(with: Locale?) -> String",
      "desc": "Returns a string representation of the date using the given locale."
    },
    {
      "name": "var debugDescription: String",
      "desc": "A textual description of the date suitable for debugging."
    },
    {
      "name": "var customMirror: Mirror",
      "desc": "A mirror that reflects the date."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The computed hash value of the date."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of this value by feeding them into the given hasher."
    },
    {
      "name": "class NSDate",
      "desc": "A representation of a specific point in time, for use when you need reference semantics or other Foundation-specific behavior."
    },
    {
      "name": "typealias Date.ReferenceType",
      "desc": "An alias for this value type's equivalent reference type."
    },
    {
      "name": "init<T, Value>(Value, strategy: T)"
    },
    {
      "name": "init<T>(T.ParseInput, strategy: T)"
    },
    {
      "name": "struct Date.AttributedStyle",
      "desc": "A structure that creates a locale-appropriate attributed string representation of a date instance."
    },
    {
      "name": "struct Date.ComponentsFormatStyle"
    },
    {
      "name": "struct Date.FormatString"
    },
    {
      "name": "struct Date.ParseStrategy"
    },
    {
      "name": "struct Date.VerbatimFormatStyle"
    }
  ],
  "declaration": "struct Date",
  "conformsTo": [
    "CKRecordValueProtocol",
    "Comparable",
    "CustomDebugStringConvertible",
    "CustomReflectable",
    "CustomStringConvertible",
    "Decodable",
    "Encodable",
    "Equatable",
    "ReferenceConvertible"
  ]
}