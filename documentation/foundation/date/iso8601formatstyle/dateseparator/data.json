{
  "path": "/documentation/foundation/date/iso8601formatstyle/dateseparator",
  "type": "Enumeration",
  "name": "Date.ISO8601FormatStyle.DateSeparator",
  "desc": "A type describing the character separating year, month, and day components of a date in an ISO 8601 date format.",
  "items": [
    {
      "name": "init?(rawValue: String)",
      "desc": "Creates a new instance with the specified raw value."
    },
    {
      "name": "case dash",
      "desc": "Specifies a dash character separating year, month, and day components in an ISO 8601 date format style."
    },
    {
      "name": "case omitted",
      "desc": "Specifies no separator between the year, month, and day components in an ISO 8601 date format style."
    },
    {
      "name": "var rawValue: String",
      "desc": "The corresponding value of the raw type."
    },
    {
      "name": "typealias Date.ISO8601FormatStyle.DateSeparator.RawValue",
      "desc": "The raw type that represents values for all cases."
    },
    {
      "name": "init(from: Decoder)",
      "desc": "Creates a new instance by decoding from the given decoder, when the type’s RawValue is String."
    },
    {
      "name": "func encode(to: Encoder)",
      "desc": "Encodes this value into the given encoder, when the type’s RawValue is String."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value of the enumeration."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of this value by feeding them into the given hasher."
    },
    {
      "name": "static func != (Date.ISO8601FormatStyle.DateSeparator, Date.ISO8601FormatStyle.DateSeparator) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two values are not equal."
    }
  ],
  "declaration": "enum Date.ISO8601FormatStyle.DateSeparator : String, Codable",
  "conformsTo": [
    "Decodable",
    "Encodable"
  ]
}