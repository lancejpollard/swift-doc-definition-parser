{
  "path": "/documentation/foundation/date/relativeformatstyle",
  "type": "Structure",
  "name": "Date.RelativeFormatStyle",
  "desc": "A format style that forms locale-aware string representations of a relative date or time.",
  "items": [
    {
      "name": "init(presentation: Date.RelativeFormatStyle.Presentation, unitsStyle: Date.RelativeFormatStyle.UnitsStyle, locale: Locale, calendar: Calendar, capitalizationContext: FormatStyleCapitalizationContext)",
      "desc": "Creates a relative date format style with the specified presentation, units, locale, calendar, and capitalization context."
    },
    {
      "name": "static func relative(presentation: Presentation, unitsStyle: UnitsStyle) -> Date.RelativeFormatStyle",
      "desc": "Returns a relative date format style based on the provided presentation and unit style."
    },
    {
      "name": "var presentation: Date.RelativeFormatStyle.Presentation",
      "desc": "Specifies the style to use when describing a relative date, such as “1 day ago” or “yesterday”."
    },
    {
      "name": "var unitsStyle: Date.RelativeFormatStyle.UnitsStyle",
      "desc": "The style to use when formatting the quantity or the name of the unit, such as “1 day ago” or “one day ago”."
    },
    {
      "name": "var calendar: Calendar",
      "desc": "The calendar to use when formatting relative dates."
    },
    {
      "name": "var capitalizationContext: FormatStyleCapitalizationContext",
      "desc": "The capitalization context to use when formatting the relative dates."
    },
    {
      "name": "var locale: Locale",
      "desc": "The locale to use when formatting the relative date."
    },
    {
      "name": "func locale(Locale) -> Date.RelativeFormatStyle",
      "desc": "Modifies the relative date format style to use the specified locale."
    },
    {
      "name": "func format(Date) -> String",
      "desc": "Creates a locale-aware string representation from a relative date value."
    },
    {
      "name": "init(from: Decoder)",
      "desc": "Creates a new instance by decoding from the given decoder."
    },
    {
      "name": "func encode(to: Encoder)",
      "desc": "Encodes this value into the given encoder."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value of the style format."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of this value by feeding them into the given hasher."
    },
    {
      "name": "static func != (Date.RelativeFormatStyle, Date.RelativeFormatStyle) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two values are not equal."
    },
    {
      "name": "static func == (Date.RelativeFormatStyle, Date.RelativeFormatStyle) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two values are equal."
    },
    {
      "name": "struct Date.RelativeFormatStyle.Presentation",
      "desc": "A type that represents the style to use when formatting relative dates, such as “1 week ago” or “last week”."
    },
    {
      "name": "struct Date.RelativeFormatStyle.UnitsStyle",
      "desc": "A type that represents the style to use when formatting the units of relative dates."
    },
    {
      "name": "static func currency<Value>(code: String) -> FloatingPointFormatStyle<Value>.Currency"
    },
    {
      "name": "static func currency<V>(code: String) -> IntegerFormatStyle<V>.Currency"
    },
    {
      "name": "static func list<MemberStyle, Base>(memberStyle: MemberStyle, type: ListFormatStyle<MemberStyle, Base>.ListType, width: ListFormatStyle<MemberStyle, Base>.Width) -> ListFormatStyle<MemberStyle, Base>"
    },
    {
      "name": "static func list<Base>(type: ListFormatStyle<StringStyle, Base>.ListType, width: ListFormatStyle<StringStyle, Base>.Width) -> ListFormatStyle<StringStyle, Base>"
    },
    {
      "name": "static func measurement(width: Measurement<UnitTemperature>.FormatStyle.UnitWidth, usage: MeasurementFormatUnitUsage<UnitTemperature>, hidesScaleName: Bool, numberFormatStyle: FloatingPointFormatStyle<Double>?) -> Measurement<UnitTemperature>.FormatStyle"
    },
    {
      "name": "static func measurement<UnitType>(width: Measurement<UnitType>.FormatStyle.UnitWidth, usage: MeasurementFormatUnitUsage<UnitType>, numberFormatStyle: FloatingPointFormatStyle<Double>?) -> Measurement<UnitType>.FormatStyle"
    }
  ],
  "declaration": "struct RelativeFormatStyle",
  "conformsTo": [
    "Decodable",
    "Encodable",
    "FormatStyle",
    "Hashable"
  ]
}