{
  "path": "/documentation/foundation/date/relativeformatstyle/presentation",
  "type": "Structure",
  "name": "Date.RelativeFormatStyle.Presentation",
  "desc": "A type that represents the style to use when formatting relative dates, such as “1 week ago” or “last week”.",
  "items": [
    {
      "name": "static var named: Date.RelativeFormatStyle.Presentation",
      "desc": "A style that uses named styles to describe relative dates, such as “yesterday”, “last week”, or “next week”."
    },
    {
      "name": "static var numeric: Date.RelativeFormatStyle.Presentation",
      "desc": "A style that uses a numeric style to describe relative dates, such as “1 day ago” or “in 3 weeks”."
    },
    {
      "name": "init(from: Decoder)",
      "desc": "Creates a new instance by decoding from the given decoder."
    },
    {
      "name": "func encode(to: Encoder)",
      "desc": "Encodes this value into the given encoder."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value of the style format."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of this value by feeding them into the given hasher."
    },
    {
      "name": "static func != (Date.RelativeFormatStyle.Presentation, Date.RelativeFormatStyle.Presentation) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two values are not equal."
    },
    {
      "name": "static func == (Date.RelativeFormatStyle.Presentation, Date.RelativeFormatStyle.Presentation) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two values are equal."
    },
    {
      "name": "typealias Date.RelativeFormatStyle.FormatInput",
      "desc": "The type of data to format."
    },
    {
      "name": "typealias Date.RelativeFormatStyle.FormatOutput",
      "desc": "The type of the formatted data."
    }
  ],
  "declaration": "struct Date.RelativeFormatStyle.Presentation",
  "conformsTo": [
    "Decodable",
    "Encodable",
    "Hashable"
  ]
}