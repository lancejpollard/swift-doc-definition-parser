{
  "path": "/documentation/foundation/date/formatstyle/symbol/yearforweekofyear",
  "type": "Structure",
  "name": "Date.FormatStyle.Symbol.YearForWeekOfYear",
  "desc": "A type that specifies the format for a year in week-of-year calendars when you parse a string with a date format string.",
  "items": [
    {
      "name": "static var defaultDigits: Date.FormatStyle.Symbol.YearForWeekOfYear",
      "desc": "Custom week of the year format style showing the minimum number of digits that represents the year in week-of-year calendars."
    },
    {
      "name": "static var twoDigits: Date.FormatStyle.Symbol.YearForWeekOfYear",
      "desc": "The custom format style that represents the two-digit numeric year in week-of-year calendars, zero-padded or truncated if necessary."
    },
    {
      "name": "static func padded(Int) -> Date.FormatStyle.Symbol.YearForWeekOfYear",
      "desc": "Returns a custom format style that represents the three or more digits of the year in week-of-year calendars, zero-padded if necessary."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value of the style format."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of the value by feeding them into the given hasher."
    },
    {
      "name": "static func != (Date.FormatStyle.Symbol.YearForWeekOfYear, Date.FormatStyle.Symbol.YearForWeekOfYear) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two values are not equal."
    },
    {
      "name": "static func == (Date.FormatStyle.Symbol.YearForWeekOfYear, Date.FormatStyle.Symbol.YearForWeekOfYear) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two values are equal."
    }
  ],
  "declaration": "struct Date.FormatStyle.Symbol.YearForWeekOfYear",
  "conformsTo": [
    "Hashable"
  ]
}