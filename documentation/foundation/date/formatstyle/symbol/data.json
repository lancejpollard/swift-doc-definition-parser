{
  "path": "/documentation/foundation/date/formatstyle/symbol",
  "type": "Structure",
  "name": "Date.FormatStyle.Symbol",
  "desc": "Types that customize formatting templates either by using the date format styleâ€™s modifier functions or by constructing fixed-pattern date format strings.",
  "items": [
    {
      "name": "struct Date.FormatStyle.Symbol.CyclicYear",
      "desc": "A type that specifies a format for a cyclic year in a date format style."
    },
    {
      "name": "struct Date.FormatStyle.Symbol.Day",
      "desc": "A type that specifies the format for a day in a date format style."
    },
    {
      "name": "struct Date.FormatStyle.Symbol.DayOfYear",
      "desc": "A type that specifies the format for the day of the year in a date format style."
    },
    {
      "name": "struct Date.FormatStyle.Symbol.DayPeriod",
      "desc": "A type that specifies a format for the time period in a date format style."
    },
    {
      "name": "struct Date.FormatStyle.Symbol.Era",
      "desc": "A type that specifies a format for the era in a date format style."
    },
    {
      "name": "struct Date.FormatStyle.Symbol.Hour",
      "desc": "A type that specifies a format for the hour in a date format style."
    },
    {
      "name": "struct Date.FormatStyle.Symbol.Minute",
      "desc": "A type that specifies the format for the minutes in a date format style."
    },
    {
      "name": "struct Date.FormatStyle.Symbol.Month",
      "desc": "A type that specifies a format for the month in a date format style."
    },
    {
      "name": "struct Date.FormatStyle.Symbol.Quarter",
      "desc": "A type that specifies the format for the quarter in a date format style."
    },
    {
      "name": "struct Date.FormatStyle.Symbol.Second",
      "desc": "A type that specifies the format for the seconds in a date format style."
    },
    {
      "name": "struct Date.FormatStyle.Symbol.SecondFraction",
      "desc": "A type that specifies the format for the second fraction in a date format style."
    },
    {
      "name": "struct Date.FormatStyle.Symbol.StandaloneMonth",
      "desc": "A type that specifies the format for a standalone month."
    },
    {
      "name": "struct Date.FormatStyle.Symbol.StandaloneQuarter",
      "desc": "A type that specifies the format for a standalone quarter."
    },
    {
      "name": "struct Date.FormatStyle.Symbol.StandaloneWeekday",
      "desc": "A type that specifies the format for a standalone weekday."
    },
    {
      "name": "struct Date.FormatStyle.Symbol.TimeZone",
      "desc": "A type that specifies a format for the time zone in a date format style."
    },
    {
      "name": "struct Date.FormatStyle.Symbol.VerbatimHour",
      "desc": "A type that specifies a format for the hour in a date format style."
    },
    {
      "name": "struct Date.FormatStyle.Symbol.Week",
      "desc": "A type that specifies the format for the week in a date format style."
    },
    {
      "name": "struct Date.FormatStyle.Symbol.Weekday",
      "desc": "A type that specifies the format for the weekday name in a date format style."
    },
    {
      "name": "struct Date.FormatStyle.Symbol.Year",
      "desc": "A type that specifies a format for the year in a date format style."
    },
    {
      "name": "struct Date.FormatStyle.Symbol.YearForWeekOfYear",
      "desc": "A type that specifies the format for a year in week-of-year calendars when you parse a string with a date format string."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value of the style format."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of the value by feeding them into the given hasher."
    },
    {
      "name": "static func != (Date.FormatStyle.Symbol, Date.FormatStyle.Symbol) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two values are not equal."
    },
    {
      "name": "static func == (Date.FormatStyle.Symbol, Date.FormatStyle.Symbol) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two values are equal."
    }
  ],
  "declaration": "struct Symbol",
  "conformsTo": [
    "Hashable"
  ]
}