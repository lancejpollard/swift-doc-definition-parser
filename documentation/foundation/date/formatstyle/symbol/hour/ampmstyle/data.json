{
  "path": "/documentation/foundation/date/formatstyle/symbol/hour/ampmstyle",
  "type": "Structure",
  "name": "Date.FormatStyle.Symbol.Hour.AMPMStyle",
  "desc": "The format style of the string representation of the day period, before or after noon, in a date.",
  "items": [
    {
      "name": "static let abbreviated: Date.FormatStyle.Symbol.Hour.AMPMStyle",
      "desc": "A type that specifies the abbreviated day period for when the locale prefers using day period with hour."
    },
    {
      "name": "static let narrow: Date.FormatStyle.Symbol.Hour.AMPMStyle",
      "desc": "A type that specifies the narrow day period if the locale prefers using day period with hour."
    },
    {
      "name": "static let omitted: Date.FormatStyle.Symbol.Hour.AMPMStyle",
      "desc": "A type that hides the day period marker."
    },
    {
      "name": "static let wide: Date.FormatStyle.Symbol.Hour.AMPMStyle",
      "desc": "A type that represents the wide day period if the locale prefers using day period with hour."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value of the style format."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of the value by feeding them into the given hasher."
    },
    {
      "name": "init(from: Decoder)",
      "desc": "Creates a new instance by decoding from the given decoder."
    },
    {
      "name": "func encode(to: Encoder)",
      "desc": "Encodes this value into the given encoder."
    },
    {
      "name": "static func != (Date.FormatStyle.Symbol.Hour.AMPMStyle, Date.FormatStyle.Symbol.Hour.AMPMStyle) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two values are not equal."
    },
    {
      "name": "static func == (Date.FormatStyle.Symbol.Hour.AMPMStyle, Date.FormatStyle.Symbol.Hour.AMPMStyle) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two values are equal."
    }
  ],
  "declaration": "struct AMPMStyle",
  "conformsTo": [
    "Decodable",
    "Encodable",
    "Hashable"
  ]
}