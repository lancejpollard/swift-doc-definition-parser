{
  "path": "/documentation/foundation/date/formatstyle/symbol/hour",
  "type": "Structure",
  "name": "Date.FormatStyle.Symbol.Hour",
  "desc": "A type that specifies a format for the hour in a date format style.",
  "items": [
    {
      "name": "static func conversationalDefaultDigits(amPM: Date.FormatStyle.Symbol.Hour.AMPMStyle) -> Date.FormatStyle.Symbol.Hour",
      "desc": "Custom format style portraying the minimum number of digits that represents the hour and locale-dependent conversational day period formats."
    },
    {
      "name": "static func conversationalTwoDigits(amPM: Date.FormatStyle.Symbol.Hour.AMPMStyle) -> Date.FormatStyle.Symbol.Hour",
      "desc": "Custom format style portraying two digits that represent the hour and locale-dependent conversational day period formats."
    },
    {
      "name": "static func defaultDigits(amPM: Date.FormatStyle.Symbol.Hour.AMPMStyle) -> Date.FormatStyle.Symbol.Hour",
      "desc": "Custom format style portraying the minimum number of digits that represents the hour and locale-dependent day period formats."
    },
    {
      "name": "static func twoDigits(amPM: Date.FormatStyle.Symbol.Hour.AMPMStyle) -> Date.FormatStyle.Symbol.Hour",
      "desc": "Custom format style portraying two digits that represent the hour and locale-dependent day period formats."
    },
    {
      "name": "struct Date.FormatStyle.Symbol.Hour.AMPMStyle",
      "desc": "The format style of the string representation of the day period, before or after noon, in a date."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value of the style format."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of the value by feeding them into the given hasher."
    },
    {
      "name": "static func != (Date.FormatStyle.Symbol.Hour, Date.FormatStyle.Symbol.Hour) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two values are not equal."
    },
    {
      "name": "static func == (Date.FormatStyle.Symbol.Hour, Date.FormatStyle.Symbol.Hour) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two values are equal."
    }
  ],
  "declaration": "struct Date.FormatStyle.Symbol.Hour",
  "conformsTo": [
    "Hashable"
  ]
}