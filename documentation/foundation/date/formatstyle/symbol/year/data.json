{
  "path": "/documentation/foundation/date/formatstyle/symbol/year",
  "type": "Structure",
  "name": "Date.FormatStyle.Symbol.Year",
  "desc": "A type that specifies a format for the year in a date format style.",
  "items": [
    {
      "name": "static var defaultDigits: Date.FormatStyle.Symbol.Year",
      "desc": "The custom year format style showing the minimum number of digits that represents the numeric year."
    },
    {
      "name": "static var twoDigits: Date.FormatStyle.Symbol.Year",
      "desc": "The custom format style portraying the two-digit numeric year, zero-padded if necessary."
    },
    {
      "name": "static func padded(Int) -> Date.FormatStyle.Symbol.Year",
      "desc": "Returns a custom format style that portrays the year of the calendar system of the provided length, zero-padded if necessary."
    },
    {
      "name": "static func relatedGregorian(minimumLength: Int) -> Date.FormatStyle.Symbol.Year",
      "desc": "Returns a custom format style that portrays the year of a non-Gregorian calendar system in the corresponding Gregorian year."
    },
    {
      "name": "static func extended(minimumLength: Int) -> Date.FormatStyle.Symbol.Year",
      "desc": "Returns a custom format style that portrays the year of the calendar system, encompassing all supra-year fields."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value of the style format."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of the value by feeding them into the given hasher."
    },
    {
      "name": "static func != (Date.FormatStyle.Symbol.Year, Date.FormatStyle.Symbol.Year) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two values are not equal."
    },
    {
      "name": "static func == (Date.FormatStyle.Symbol.Year, Date.FormatStyle.Symbol.Year) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two values are equal."
    }
  ],
  "declaration": "struct Date.FormatStyle.Symbol.Year",
  "conformsTo": [
    "Hashable"
  ]
}