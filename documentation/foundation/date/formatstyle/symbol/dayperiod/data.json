{
  "path": "/documentation/foundation/date/formatstyle/symbol/dayperiod",
  "type": "Structure",
  "name": "Date.FormatStyle.Symbol.DayPeriod",
  "desc": "A type that specifies a format for the time period in a date format style.",
  "items": [
    {
      "name": "static func conversational(Date.FormatStyle.Symbol.DayPeriod.Width) -> Date.FormatStyle.Symbol.DayPeriod",
      "desc": "Static factory method that creates a custom day period format style using a conversational style."
    },
    {
      "name": "static func standard(Date.FormatStyle.Symbol.DayPeriod.Width) -> Date.FormatStyle.Symbol.DayPeriod",
      "desc": "Static factory method that creates a custom day period format style using a standard style."
    },
    {
      "name": "static func with12s(Date.FormatStyle.Symbol.DayPeriod.Width) -> Date.FormatStyle.Symbol.DayPeriod",
      "desc": "Static factory method that creates a custom day period format style using a style that represents midday and midnight."
    },
    {
      "name": "enum Date.FormatStyle.Symbol.DayPeriod.Width",
      "desc": "A type representing the width of a day period in a format style."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value of the style format."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of the value by feeding them into the given hasher."
    },
    {
      "name": "static func != (Date.FormatStyle.Symbol.DayPeriod, Date.FormatStyle.Symbol.DayPeriod) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two values are not equal."
    },
    {
      "name": "static func == (Date.FormatStyle.Symbol.DayPeriod, Date.FormatStyle.Symbol.DayPeriod) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two values are equal."
    }
  ],
  "declaration": "struct Date.FormatStyle.Symbol.DayPeriod",
  "conformsTo": [
    "Hashable"
  ]
}