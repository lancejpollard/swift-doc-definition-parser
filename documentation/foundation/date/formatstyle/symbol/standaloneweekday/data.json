{
  "path": "/documentation/foundation/date/formatstyle/symbol/standaloneweekday",
  "type": "Structure",
  "name": "Date.FormatStyle.Symbol.StandaloneWeekday",
  "desc": "A type that specifies the format for a standalone weekday.",
  "items": [
    {
      "name": "static var abbreviated: Date.FormatStyle.Symbol.StandaloneWeekday",
      "desc": "The abbreviated representation of a standalone weekday."
    },
    {
      "name": "static var narrow: Date.FormatStyle.Symbol.StandaloneWeekday",
      "desc": "The shortest representation of a standalone weekday."
    },
    {
      "name": "static var oneDigit: Date.FormatStyle.Symbol.StandaloneWeekday",
      "desc": "The one-digit representation of a standalone weekday."
    },
    {
      "name": "static var short: Date.FormatStyle.Symbol.StandaloneWeekday",
      "desc": "The short representation of a standalone weekday."
    },
    {
      "name": "static var wide: Date.FormatStyle.Symbol.StandaloneWeekday",
      "desc": "The full representation of a standalone weekday."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value of the style format."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of the value by feeding them into the given hasher."
    },
    {
      "name": "static func != (Date.FormatStyle.Symbol.StandaloneWeekday, Date.FormatStyle.Symbol.StandaloneWeekday) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two values are not equal."
    },
    {
      "name": "static func == (Date.FormatStyle.Symbol.StandaloneWeekday, Date.FormatStyle.Symbol.StandaloneWeekday) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two values are equal."
    }
  ],
  "declaration": "struct Date.FormatStyle.Symbol.StandaloneWeekday",
  "conformsTo": [
    "Hashable"
  ]
}