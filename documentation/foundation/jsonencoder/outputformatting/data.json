{
  "path": "/documentation/foundation/jsonencoder/outputformatting",
  "type": "Structure",
  "name": "JSONEncoder.OutputFormatting",
  "desc": "The output formatting options that determine the readability, size, and element order of an encoded JSON object.",
  "items": [
    {
      "name": "static let prettyPrinted: JSONEncoder.OutputFormatting",
      "desc": "The output formatting option that uses ample white space and indentation to make output easy to read."
    },
    {
      "name": "static let sortedKeys: JSONEncoder.OutputFormatting",
      "desc": "The output formatting option that sorts keys in lexicographic order."
    },
    {
      "name": "static let withoutEscapingSlashes: JSONEncoder.OutputFormatting",
      "desc": "The output formatting option specifies that the output doesnâ€™t prefix slash characters with escape characters."
    },
    {
      "name": "init(rawValue: UInt)",
      "desc": "Creates a new set of output formatting options from the given raw value."
    },
    {
      "name": "let rawValue: UInt",
      "desc": "A raw value representing a set of output formatting options."
    },
    {
      "name": "init()",
      "desc": "Creates an empty option set."
    },
    {
      "name": "init<S>(S)",
      "desc": "Creates a new set from a finite sequence of items."
    },
    {
      "name": "init(arrayLiteral: JSONEncoder.OutputFormatting...)",
      "desc": "Creates a set containing the elements of the given array literal."
    },
    {
      "name": "func contains(JSONEncoder.OutputFormatting) -> Bool",
      "desc": "Returns a Boolean value that indicates whether a given element is a member of the option set."
    },
    {
      "name": "var isEmpty: Bool",
      "desc": "A Boolean value that indicates whether the set has no elements."
    },
    {
      "name": "func insert(JSONEncoder.OutputFormatting) -> (inserted: Bool, memberAfterInsert: JSONEncoder.OutputFormatting)",
      "desc": "Adds the given element to the option set if it is not already a member."
    },
    {
      "name": "func update(with: JSONEncoder.OutputFormatting) -> JSONEncoder.OutputFormatting?",
      "desc": "Inserts the given element into the set."
    },
    {
      "name": "func remove(JSONEncoder.OutputFormatting) -> JSONEncoder.OutputFormatting?",
      "desc": "Removes the given element and all elements subsumed by it."
    },
    {
      "name": "func union(JSONEncoder.OutputFormatting) -> JSONEncoder.OutputFormatting",
      "desc": "Returns a new option set of the elements contained in this set, in the given set, or in both."
    },
    {
      "name": "func formUnion(JSONEncoder.OutputFormatting)",
      "desc": "Inserts the elements of another set into this option set."
    },
    {
      "name": "func intersection(JSONEncoder.OutputFormatting) -> JSONEncoder.OutputFormatting",
      "desc": "Returns a new option set with only the elements contained in both this set and the given set."
    },
    {
      "name": "func formIntersection(JSONEncoder.OutputFormatting)",
      "desc": "Removes all elements of this option set that are not also present in the given set."
    },
    {
      "name": "func symmetricDifference(JSONEncoder.OutputFormatting) -> JSONEncoder.OutputFormatting",
      "desc": "Returns a new option set with the elements contained in this set or in the given set, but not in both."
    },
    {
      "name": "func formSymmetricDifference(JSONEncoder.OutputFormatting)",
      "desc": "Replaces this set with a new set containing all elements contained in either this set or the given set, but not in both."
    },
    {
      "name": "func subtracting(JSONEncoder.OutputFormatting) -> JSONEncoder.OutputFormatting",
      "desc": "Returns a new set containing the elements of this set that do not occur in the given set."
    },
    {
      "name": "func subtract(JSONEncoder.OutputFormatting)",
      "desc": "Removes the elements of the given set from this set."
    },
    {
      "name": "func isSubset(of: JSONEncoder.OutputFormatting) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the set is a subset of another set."
    },
    {
      "name": "func isStrictSubset(of: JSONEncoder.OutputFormatting) -> Bool",
      "desc": "Returns a Boolean value that indicates whether this set is a strict subset of the given set."
    },
    {
      "name": "func isSuperset(of: JSONEncoder.OutputFormatting) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the set is a superset of the given set."
    },
    {
      "name": "func isStrictSuperset(of: JSONEncoder.OutputFormatting) -> Bool",
      "desc": "Returns a Boolean value that indicates whether this set is a strict superset of the given set."
    },
    {
      "name": "func isDisjoint(with: JSONEncoder.OutputFormatting) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the set has no members in common with the given set."
    },
    {
      "name": "static func != (JSONEncoder.OutputFormatting, JSONEncoder.OutputFormatting) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are not equal."
    },
    {
      "name": "typealias JSONEncoder.OutputFormatting.ArrayLiteralElement",
      "desc": "The type of the elements of an array literal."
    },
    {
      "name": "typealias JSONEncoder.OutputFormatting.Element"
    },
    {
      "name": "typealias JSONEncoder.OutputFormatting.RawValue",
      "desc": "The raw type used to represent all values of the conforming type."
    }
  ],
  "declaration": "struct JSONEncoder.OutputFormatting",
  "conformsTo": [
    "OptionSet"
  ]
}