{
  "path": "/documentation/foundation/integerformatstyle",
  "type": "Generic Structure",
  "name": "IntegerFormatStyle",
  "desc": "No overview available.",
  "items": [
    {
      "name": "typealias IntegerFormatStyle.FormatInput"
    },
    {
      "name": "typealias IntegerFormatStyle.FormatOutput"
    },
    {
      "name": "init(locale: Locale)"
    },
    {
      "name": "static func list<MemberStyle, Base>(memberStyle: MemberStyle, type: ListFormatStyle<MemberStyle, Base>.ListType, width: ListFormatStyle<MemberStyle, Base>.Width) -> ListFormatStyle<MemberStyle, Base>"
    },
    {
      "name": "static func list<Base>(type: ListFormatStyle<StringStyle, Base>.ListType, width: ListFormatStyle<StringStyle, Base>.Width) -> ListFormatStyle<StringStyle, Base>"
    },
    {
      "name": "typealias IntegerFormatStyle.Configuration"
    },
    {
      "name": "struct IntegerFormatStyle.Attributed"
    },
    {
      "name": "struct IntegerParseStrategy"
    },
    {
      "name": "typealias IntegerFormatStyle.Strategy"
    },
    {
      "name": "var locale: Locale"
    },
    {
      "name": "init(from: Decoder)"
    },
    {
      "name": "func encode(to: Encoder)"
    },
    {
      "name": "var hashValue: Int"
    },
    {
      "name": "func hash(into: inout Hasher)"
    },
    {
      "name": "static func != (IntegerFormatStyle<Value>, IntegerFormatStyle<Value>) -> Bool"
    },
    {
      "name": "struct IntegerFormatStyle.Currency"
    },
    {
      "name": "struct IntegerFormatStyle.Percent"
    },
    {
      "name": "var attributed: IntegerFormatStyle<Value>.Attributed"
    },
    {
      "name": "var parseStrategy: IntegerParseStrategy<IntegerFormatStyle<Value>>"
    },
    {
      "name": "static var number: IntegerFormatStyle<Int>"
    },
    {
      "name": "static var number: IntegerFormatStyle<UInt>"
    },
    {
      "name": "static var number: IntegerFormatStyle<Int8>"
    },
    {
      "name": "static var number: IntegerFormatStyle<Int16>"
    },
    {
      "name": "static var number: IntegerFormatStyle<Int32>"
    },
    {
      "name": "static var number: IntegerFormatStyle<Int64>"
    },
    {
      "name": "static var number: IntegerFormatStyle<UInt8>"
    },
    {
      "name": "static var number: IntegerFormatStyle<UInt16>"
    },
    {
      "name": "static var number: IntegerFormatStyle<UInt32>"
    },
    {
      "name": "static var number: IntegerFormatStyle<UInt64>"
    },
    {
      "name": "func decimalSeparator(strategy: IntegerFormatStyle<Value>.Configuration.DecimalSeparatorDisplayStrategy) -> IntegerFormatStyle<Value>"
    },
    {
      "name": "func format(Value) -> String"
    },
    {
      "name": "func grouping(IntegerFormatStyle<Value>.Configuration.Grouping) -> IntegerFormatStyle<Value>"
    },
    {
      "name": "func locale(Locale) -> IntegerFormatStyle<Value>"
    },
    {
      "name": "func notation(IntegerFormatStyle<Value>.Configuration.Notation) -> IntegerFormatStyle<Value>"
    },
    {
      "name": "func precision(IntegerFormatStyle<Value>.Configuration.Precision) -> IntegerFormatStyle<Value>"
    },
    {
      "name": "func rounded(rule: IntegerFormatStyle<Value>.Configuration.RoundingRule, increment: Int?) -> IntegerFormatStyle<Value>"
    },
    {
      "name": "func scale(Double) -> IntegerFormatStyle<Value>"
    },
    {
      "name": "func sign(strategy: IntegerFormatStyle<Value>.Configuration.SignDisplayStrategy) -> IntegerFormatStyle<Value>"
    },
    {
      "name": "static func currency<Value>(code: String) -> FloatingPointFormatStyle<Value>.Currency"
    },
    {
      "name": "static func currency<V>(code: String) -> IntegerFormatStyle<V>.Currency"
    },
    {
      "name": "static func measurement(width: Measurement<UnitTemperature>.FormatStyle.UnitWidth, usage: MeasurementFormatUnitUsage<UnitTemperature>, hidesScaleName: Bool, numberFormatStyle: FloatingPointFormatStyle<Double>?) -> Measurement<UnitTemperature>.FormatStyle"
    },
    {
      "name": "static func measurement<UnitType>(width: Measurement<UnitType>.FormatStyle.UnitWidth, usage: MeasurementFormatUnitUsage<UnitType>, numberFormatStyle: FloatingPointFormatStyle<Double>?) -> Measurement<UnitType>.FormatStyle"
    },
    {
      "name": "static func == (IntegerFormatStyle<Value>, IntegerFormatStyle<Value>) -> Bool"
    }
  ],
  "declaration": "struct IntegerFormatStyle<Value> where Value : BinaryInteger",
  "conformsTo": [
    "Decodable",
    "Encodable",
    "FormatStyle",
    "Hashable",
    "ParseableFormatStyle"
  ]
}