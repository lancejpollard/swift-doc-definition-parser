{
  "path": "/documentation/foundation/integerformatstyle/currency",
  "type": "Structure",
  "name": "IntegerFormatStyle.Currency",
  "desc": "No overview available.",
  "items": [
    {
      "name": "typealias IntegerFormatStyle.Currency.Configuration"
    },
    {
      "name": "typealias IntegerFormatStyle.Currency.FormatInput"
    },
    {
      "name": "typealias IntegerFormatStyle.Currency.FormatOutput"
    },
    {
      "name": "typealias IntegerFormatStyle.Currency.Strategy"
    },
    {
      "name": "init(code: String, locale: Locale)"
    },
    {
      "name": "init(from: Decoder)"
    },
    {
      "name": "var attributed: IntegerFormatStyle<Value>.Attributed"
    },
    {
      "name": "let currencyCode: String"
    },
    {
      "name": "var hashValue: Int"
    },
    {
      "name": "var locale: Locale"
    },
    {
      "name": "var parseStrategy: IntegerParseStrategy<IntegerFormatStyle<Value>.Currency>"
    },
    {
      "name": "func decimalSeparator(strategy: IntegerFormatStyle<Value>.Currency.Configuration.DecimalSeparatorDisplayStrategy) -> IntegerFormatStyle<Value>.Currency"
    },
    {
      "name": "func encode(to: Encoder)"
    },
    {
      "name": "func format(Value) -> String"
    },
    {
      "name": "func grouping(IntegerFormatStyle<Value>.Currency.Configuration.Grouping) -> IntegerFormatStyle<Value>.Currency"
    },
    {
      "name": "func hash(into: inout Hasher)"
    },
    {
      "name": "func locale(Locale) -> IntegerFormatStyle<Value>.Currency"
    },
    {
      "name": "func precision(IntegerFormatStyle<Value>.Currency.Configuration.Precision) -> IntegerFormatStyle<Value>.Currency"
    },
    {
      "name": "func presentation(IntegerFormatStyle<Value>.Currency.Configuration.Presentation) -> IntegerFormatStyle<Value>.Currency"
    },
    {
      "name": "func rounded(rule: IntegerFormatStyle<Value>.Currency.Configuration.RoundingRule, increment: Int?) -> IntegerFormatStyle<Value>.Currency"
    },
    {
      "name": "func scale(Double) -> IntegerFormatStyle<Value>.Currency"
    },
    {
      "name": "func sign(strategy: IntegerFormatStyle<Value>.Currency.Configuration.SignDisplayStrategy) -> IntegerFormatStyle<Value>.Currency"
    },
    {
      "name": "static func currency<Value>(code: String) -> FloatingPointFormatStyle<Value>.Currency"
    },
    {
      "name": "static func currency<V>(code: String) -> IntegerFormatStyle<V>.Currency"
    },
    {
      "name": "static func list<MemberStyle, Base>(memberStyle: MemberStyle, type: ListFormatStyle<MemberStyle, Base>.ListType, width: ListFormatStyle<MemberStyle, Base>.Width) -> ListFormatStyle<MemberStyle, Base>"
    },
    {
      "name": "static func list<Base>(type: ListFormatStyle<StringStyle, Base>.ListType, width: ListFormatStyle<StringStyle, Base>.Width) -> ListFormatStyle<StringStyle, Base>"
    },
    {
      "name": "static func measurement(width: Measurement<UnitTemperature>.FormatStyle.UnitWidth, usage: MeasurementFormatUnitUsage<UnitTemperature>, hidesScaleName: Bool, numberFormatStyle: FloatingPointFormatStyle<Double>?) -> Measurement<UnitTemperature>.FormatStyle"
    },
    {
      "name": "static func measurement<UnitType>(width: Measurement<UnitType>.FormatStyle.UnitWidth, usage: MeasurementFormatUnitUsage<UnitType>, numberFormatStyle: FloatingPointFormatStyle<Double>?) -> Measurement<UnitType>.FormatStyle"
    },
    {
      "name": "static func != (IntegerFormatStyle<Value>.Currency, IntegerFormatStyle<Value>.Currency) -> Bool"
    },
    {
      "name": "static func == (IntegerFormatStyle<Value>.Currency, IntegerFormatStyle<Value>.Currency) -> Bool"
    }
  ],
  "declaration": "struct Currency",
  "conformsTo": [
    "Decodable",
    "Encodable",
    "FormatStyle",
    "Hashable",
    "ParseableFormatStyle"
  ]
}