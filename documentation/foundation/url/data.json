{
  "path": "/documentation/foundation/url",
  "type": "Structure",
  "name": "URL",
  "desc": "A value that identifies the location of a resource, such as an item on a remote server or the path to a local file.",
  "items": [
    {
      "name": "init?(string: String)",
      "desc": "Creates a URL instance from the provided string."
    },
    {
      "name": "init?(string: String, relativeTo: URL?)",
      "desc": "Creates a URL instance from the provided string, relative to another URL."
    },
    {
      "name": "init(fileURLWithPath: String)",
      "desc": "Creates a file URL that references the local file or directory at path."
    },
    {
      "name": "init(fileURLWithPath: String, isDirectory: Bool)",
      "desc": "Creates a file URL that references the local file or directory at path."
    },
    {
      "name": "init(fileURLWithPath: String, relativeTo: URL?)",
      "desc": "Creates a file URL that references the local file or directory at path, relative to a base URL."
    },
    {
      "name": "init(fileURLWithPath: String, isDirectory: Bool, relativeTo: URL?)",
      "desc": "Creates a file URL that references the local file or directory at path, relative to a base URL."
    },
    {
      "name": "init(fileURLWithFileSystemRepresentation: UnsafePointer<Int8>, isDirectory: Bool, relativeTo: URL?)",
      "desc": "Creates a URL that references the local file or directory at the file system representation of the path."
    },
    {
      "name": "init(fileReferenceLiteralResourceName: String)",
      "desc": "Creates a URL from a playground file literal."
    },
    {
      "name": "init(resolvingBookmarkData: Data, options: URL.BookmarkResolutionOptions, relativeTo: URL?, bookmarkDataIsStale: inout Bool)",
      "desc": "Creates a URL that refers to a location specified by resolving bookmark data."
    },
    {
      "name": "init(resolvingAliasFileAt: URL, options: URL.BookmarkResolutionOptions)",
      "desc": "Creates a URL that refers to the location specified by resolving an alias file."
    },
    {
      "name": "typealias URL.BookmarkResolutionOptions",
      "desc": "An alias for the bookmark resolution options type."
    },
    {
      "name": "struct NSURL.BookmarkResolutionOptions",
      "desc": "Options used when resolving bookmark data."
    },
    {
      "name": "init(from: Decoder)",
      "desc": "Creates a URL by decoding an encoded representation."
    },
    {
      "name": "func encode(to: Encoder)",
      "desc": "Encodes the URL for later decoding."
    },
    {
      "name": "init?(dataRepresentation: Data, relativeTo: URL?, isAbsolute: Bool)",
      "desc": "Initializes a newly created URL using the contents of the given data, relative to a base URL."
    },
    {
      "name": "var dataRepresentation: Data",
      "desc": "The data representation of the URL’s relativeString."
    },
    {
      "name": "var absoluteString: String",
      "desc": "The absolute string for the URL."
    },
    {
      "name": "var absoluteURL: URL",
      "desc": "The absolute URL."
    },
    {
      "name": "var baseURL: URL?",
      "desc": "The base URL."
    },
    {
      "name": "var fragment: String?",
      "desc": "The fragment component of the URL if the URL conforms to RFC 1808 (the most common form of URL), otherwise nil."
    },
    {
      "name": "var host: String?",
      "desc": "The host component of a URL if the URL conforms to RFC 1808 (the most common form of URL), otherwise nil."
    },
    {
      "name": "var lastPathComponent: String",
      "desc": "The last path component of the URL, or an empty string if the path is an empty string."
    },
    {
      "name": "var path: String",
      "desc": "The path component of the URL if the URL conforms to RFC 1808 (the most common form of URL), otherwise an empty string."
    },
    {
      "name": "var pathComponents: [String]",
      "desc": "The path components of the URL, or an empty array if the path is an empty string."
    },
    {
      "name": "var pathExtension: String",
      "desc": "The path extension of the URL, or an empty string if the path is an empty string."
    },
    {
      "name": "var port: Int?",
      "desc": "The port component of the URL if the URL conforms to RFC 1808 (the most common form of URL), otherwise nil."
    },
    {
      "name": "var query: String?",
      "desc": "The query of the URL if the URL conforms to RFC 1808 (the most common form of URL), otherwise nil."
    },
    {
      "name": "var relativePath: String",
      "desc": "The relative path of the URL if the URL conforms to RFC 1808 (the most common form of URL), otherwise nil."
    },
    {
      "name": "var relativeString: String",
      "desc": "The relative portion of a URL."
    },
    {
      "name": "var scheme: String?",
      "desc": "The scheme of the URL."
    },
    {
      "name": "var standardized: URL",
      "desc": "A version of the URL with any instances of “..” or “.” removed from its path."
    },
    {
      "name": "var standardizedFileURL: URL",
      "desc": "A standardized version of the path of a file URL."
    },
    {
      "name": "var user: String?",
      "desc": "The user component of the URL if the URL conforms to RFC 1808 (the most common form of URL), otherwise nil."
    },
    {
      "name": "var password: String?",
      "desc": "The password component of the URL if the URL conforms to RFC 1808 (the most common form of URL), otherwise nil."
    },
    {
      "name": "func resourceValues(forKeys: Set<URLResourceKey>) -> URLResourceValues",
      "desc": "Returns a collection of resource values identified by the given resource keys."
    },
    {
      "name": "func setResourceValues(URLResourceValues)",
      "desc": "Sets the resource value identified by a given resource key."
    },
    {
      "name": "func removeCachedResourceValue(forKey: URLResourceKey)",
      "desc": "Removes the cached resource value identified by a given resource value key from the URL object."
    },
    {
      "name": "func removeAllCachedResourceValues()",
      "desc": "Removes all cached resource values and all temporary resource values from the URL object."
    },
    {
      "name": "func setTemporaryResourceValue(Any, forKey: URLResourceKey)",
      "desc": "Sets a temporary resource value on the URL object."
    },
    {
      "name": "struct URLResourceKey",
      "desc": "Keys that apply to file system URLs."
    },
    {
      "name": "struct URLResourceValues",
      "desc": "The properties supported by file system resources."
    },
    {
      "name": "var isFileURL: Bool",
      "desc": "A Boolean that is true if the scheme is file:."
    },
    {
      "name": "var hasDirectoryPath: Bool",
      "desc": "A Boolean that is true if the URL path represents a directory."
    },
    {
      "name": "func withUnsafeFileSystemRepresentation<ResultType>((UnsafePointer<Int8>?) -> ResultType) -> ResultType",
      "desc": "Passes the URL’s path in the file system representation to a closure."
    },
    {
      "name": "func resolveSymlinksInPath()",
      "desc": "Resolves any symlinks in the path of a file URL."
    },
    {
      "name": "func resolvingSymlinksInPath() -> URL",
      "desc": "Resolves any symlinks in the path of a file URL."
    },
    {
      "name": "func standardize()",
      "desc": "Standardizes the path of a file URL."
    },
    {
      "name": "func appendPathComponent(String)",
      "desc": "Appends a path component to the URL."
    },
    {
      "name": "func appendPathComponent(String, isDirectory: Bool)",
      "desc": "Appends a path component to the URL."
    },
    {
      "name": "func appendingPathComponent(String) -> URL",
      "desc": "Returns a URL constructed by appending the given path component to self."
    },
    {
      "name": "func appendingPathComponent(String, isDirectory: Bool) -> URL",
      "desc": "Returns a URL constructed by appending the given path component to self."
    },
    {
      "name": "func appendPathExtension(String)",
      "desc": "Appends the given path extension to self."
    },
    {
      "name": "func appendingPathExtension(String) -> URL",
      "desc": "Returns a URL constructed by appending the given path extension to self."
    },
    {
      "name": "func deleteLastPathComponent()",
      "desc": "Returns a URL constructed by removing the last path component of self."
    },
    {
      "name": "func deletingLastPathComponent() -> URL",
      "desc": "Returns a URL constructed by removing the last path component of self."
    },
    {
      "name": "func deletePathExtension()",
      "desc": "Returns a URL constructed by removing any path extension."
    },
    {
      "name": "func deletingPathExtension() -> URL",
      "desc": "Returns a URL constructed by removing any path extension."
    },
    {
      "name": "func bookmarkData(options: URL.BookmarkCreationOptions, includingResourceValuesForKeys: Set<URLResourceKey>?, relativeTo: URL?) -> Data",
      "desc": "Returns bookmark data for the URL, created with specified options and resource values."
    },
    {
      "name": "static func bookmarkData(withContentsOf: URL) -> Data",
      "desc": "Initializes and returns bookmark data derived from an alias file pointed to by a specified URL."
    },
    {
      "name": "static func writeBookmarkData(Data, to: URL)",
      "desc": "Creates an alias file on disk at a specified location with specified bookmark data."
    },
    {
      "name": "static func resourceValues(forKeys: Set<URLResourceKey>, fromBookmarkData: Data) -> URLResourceValues?",
      "desc": "Returns the resource values for properties identified by a specified array of keys contained in specified bookmark data."
    },
    {
      "name": "typealias URL.BookmarkCreationOptions",
      "desc": "An alias for bookmark creation options."
    },
    {
      "name": "struct NSURL.BookmarkCreationOptions",
      "desc": "Options used when creating bookmark data."
    },
    {
      "name": "func checkResourceIsReachable() -> Bool",
      "desc": "Returns whether the URL’s resource exists and is reachable."
    },
    {
      "name": "var resourceBytes: URL.AsyncBytes",
      "desc": "The URL’s resource data, as an asynchronous sequence of bytes."
    },
    {
      "name": "var lines: AsyncLineSequence<URL.AsyncBytes>",
      "desc": "The URL’s resource data, as an asynchronous sequence of lines of text."
    },
    {
      "name": "struct URL.AsyncBytes",
      "desc": "An asynchronous sequence of bytes loaded from the URL."
    },
    {
      "name": "func checkPromisedItemIsReachable() -> Bool",
      "desc": "Returns whether the promised item URL’s resource exists and is reachable."
    },
    {
      "name": "func promisedItemResourceValues(forKeys: Set<URLResourceKey>) -> URLResourceValues",
      "desc": "Gets resource values from URLs of ‘promised’ items."
    },
    {
      "name": "func startAccessingSecurityScopedResource() -> Bool",
      "desc": "Given a url created by resolving a bookmark data created with security scope, make the resource referenced by the url accessible to the process."
    },
    {
      "name": "func stopAccessingSecurityScopedResource()",
      "desc": "Revokes the access granted to the url by a prior successful call to the complementary start function."
    },
    {
      "name": "static func != (URL, URL) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are not equal."
    },
    {
      "name": "static func == (URL, URL) -> Bool",
      "desc": "Indicates whether two URLs are the same."
    },
    {
      "name": "var description: String",
      "desc": "A textual description of the URL."
    },
    {
      "name": "var debugDescription: String",
      "desc": "A textual description of the URL suitable for debugging."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The computed hash value for the URL."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of this URL by feeding them into the given hasher."
    },
    {
      "name": "class NSURL",
      "desc": "An object representing the location of a resource that bridges to URL; use NSURL when you need reference semantics or other Foundation-specific behavior."
    },
    {
      "name": "typealias URL.ReferenceType",
      "desc": "An alias for this value type's equivalent reference type."
    },
    {
      "name": "init?(FilePath)"
    },
    {
      "name": "init?(FilePath, isDirectory: Bool)"
    },
    {
      "name": "func appendPathComponent(String, conformingTo: UTType)"
    },
    {
      "name": "func appendPathExtension(for: UTType)"
    },
    {
      "name": "func appendingPathComponent(String, conformingTo: UTType) -> URL"
    },
    {
      "name": "func appendingPathExtension(for: UTType) -> URL"
    }
  ],
  "declaration": "Declarationstruct URL",
  "conformsTo": [
    "CustomDebugStringConvertible",
    "CustomStringConvertible",
    "Decodable",
    "Encodable",
    "Equatable",
    "ReferenceConvertible"
  ]
}