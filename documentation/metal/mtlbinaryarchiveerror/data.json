{
  "path": "/documentation/metal/mtlbinaryarchiveerror",
  "type": "Structure",
  "name": "MTLBinaryArchiveError",
  "desc": "An error that occurred when creating a binary shader archive.",
  "items": [
    {
      "name": "var errorCode: Int",
      "desc": "The error code that can result from the creation of binary shader archive."
    },
    {
      "name": "var errorUserInfo: [String : Any]",
      "desc": "The user info dictionary."
    },
    {
      "name": "var localizedDescription: String",
      "desc": "A string containing the localized description of the error."
    },
    {
      "name": "static var errorDomain: String",
      "desc": "The domain for Metal binary archive errors."
    },
    {
      "name": "static var none: MTLBinaryArchiveError.Code",
      "desc": "No errors occurred."
    },
    {
      "name": "static var compilationFailure: MTLBinaryArchiveError.Code",
      "desc": "The Metal device was unable to compile the binary archive."
    },
    {
      "name": "static var invalidFile: MTLBinaryArchiveError.Code",
      "desc": "The referenced file is invalid."
    },
    {
      "name": "static var unexpectedElement: MTLBinaryArchiveError.Code",
      "desc": "The Metal device found an unexpected element in the binary archive."
    },
    {
      "name": "enum MTLBinaryArchiveError.Code",
      "desc": "Error codes when creating binary archives of compiled shader code."
    },
    {
      "name": "static func != (MTLBinaryArchiveError, MTLBinaryArchiveError) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the two binary archive errors arenâ€™t equal."
    },
    {
      "name": "init(Code, userInfo: [String : Any])"
    },
    {
      "name": "var code: Code"
    },
    {
      "name": "var hashValue: Int"
    },
    {
      "name": "var userInfo: [String : Any]"
    },
    {
      "name": "func hash(into: inout Hasher)"
    },
    {
      "name": "static func == (MTLBinaryArchiveError, MTLBinaryArchiveError) -> Bool"
    }
  ],
  "declaration": "struct MTLBinaryArchiveError"
}