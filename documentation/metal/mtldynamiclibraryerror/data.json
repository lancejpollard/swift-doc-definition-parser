{
  "path": "/documentation/metal/mtldynamiclibraryerror",
  "type": "Structure",
  "name": "MTLDynamicLibraryError",
  "desc": "Errors when compiling dynamic libraries.",
  "items": [
    {
      "name": "init(Code, userInfo: [String : Any])"
    },
    {
      "name": "var errorCode: Int",
      "desc": "The error code that can result from the creation of dynamic library."
    },
    {
      "name": "var errorUserInfo: [String : Any]",
      "desc": "The user info dictionary."
    },
    {
      "name": "var localizedDescription: String",
      "desc": "A string containing the localized description of the error."
    },
    {
      "name": "var code: Code"
    },
    {
      "name": "var hashValue: Int"
    },
    {
      "name": "var userInfo: [String : Any]"
    },
    {
      "name": "static var errorDomain: String",
      "desc": "The domain for Metal dynamic library errors."
    },
    {
      "name": "static var none: MTLDynamicLibraryError.Code",
      "desc": "No errors occurred."
    },
    {
      "name": "static var compilationFailure: MTLDynamicLibraryError.Code",
      "desc": "Metal could not compile the dynamic library."
    },
    {
      "name": "static var dependencyLoadFailure: MTLDynamicLibraryError.Code",
      "desc": "The dynamic library couldn’t link to the specified dynamic libraries."
    },
    {
      "name": "static var invalidFile: MTLDynamicLibraryError.Code",
      "desc": "The file for the dynamic library isn’t valid."
    },
    {
      "name": "static var unresolvedInstallName: MTLDynamicLibraryError.Code",
      "desc": "Metal could not resolve the installation name for the new dynamic library."
    },
    {
      "name": "static var unsupported: MTLDynamicLibraryError.Code",
      "desc": "The Metal device object does not support dynamic libraries."
    },
    {
      "name": "enum MTLDynamicLibraryError.Code",
      "desc": "Error codes that Metal can generate when creating dynamic libraries."
    },
    {
      "name": "static func == (MTLDynamicLibraryError, MTLDynamicLibraryError) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two dynamic library errors are equal."
    },
    {
      "name": "static func != (MTLDynamicLibraryError, MTLDynamicLibraryError) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the two dynamic library errors aren’t equal."
    },
    {
      "name": "func hash(into: inout Hasher)"
    }
  ],
  "declaration": "struct MTLDynamicLibraryError"
}