{
  "path": "/documentation/metal/mtlcommoncounter",
  "type": "Structure",
  "name": "MTLCommonCounter",
  "desc": "Names of specific counters that can appear in counter sets.",
  "items": [
    {
      "name": "init(rawValue: String)",
      "desc": "Creates a counter from a raw value."
    },
    {
      "name": "static let timestamp: MTLCommonCounter",
      "desc": "A counter that holds a timestamp."
    },
    {
      "name": "static let vertexCycles: MTLCommonCounter",
      "desc": "A counter that holds the number of cycles spent in vertex shaders."
    },
    {
      "name": "static let fragmentCycles: MTLCommonCounter",
      "desc": "A counter that holds the number of cycles spent in fragment shaders."
    },
    {
      "name": "static let tessellationCycles: MTLCommonCounter",
      "desc": "A counter that holds the number of cycles spent in the tesselation stage."
    },
    {
      "name": "static let postTessellationVertexCycles: MTLCommonCounter",
      "desc": "A counter that holds the number of cycles spent in post-tessellation vertex shaders."
    },
    {
      "name": "static let renderTargetWriteCycles: MTLCommonCounter",
      "desc": "A counter that holds the number of cycles spent writing data to render targets."
    },
    {
      "name": "static let totalCycles: MTLCommonCounter",
      "desc": "A counter that holds the number of cycles spent in the GPU."
    },
    {
      "name": "static let vertexInvocations: MTLCommonCounter",
      "desc": "A counter that holds the number of vertices processed by the vertex shader."
    },
    {
      "name": "static let tessellationInputPatches: MTLCommonCounter",
      "desc": "A counter that holds the number of tessellation patches sent to the tessellation stage."
    },
    {
      "name": "static let postTessellationVertexInvocations: MTLCommonCounter",
      "desc": "A counter that holds the number of vertices sent to the post-tessellation vertex shader."
    },
    {
      "name": "static let clipperInvocations: MTLCommonCounter",
      "desc": "A counter that holds the number of primitives sent to the clip stage."
    },
    {
      "name": "static let clipperPrimitivesOut: MTLCommonCounter",
      "desc": "A counter that holds the number of primitives generated by the clip stage."
    },
    {
      "name": "static let fragmentInvocations: MTLCommonCounter",
      "desc": "A counter that holds the number of fragments generated by the rasterizer."
    },
    {
      "name": "static let fragmentsPassed: MTLCommonCounter",
      "desc": "A counter that holds the number of fragments that pass the scissor, depth, and stencil tests."
    },
    {
      "name": "static let computeKernelInvocations: MTLCommonCounter",
      "desc": "A counter that holds the number of compute kernel invocations."
    }
  ],
  "declaration": "struct MTLCommonCounter, @unchecked Sendable",
  "conformsTo": [
    "Equatable",
    "Hashable",
    "RawRepresentable",
    "Sendable"
  ]
}