{
  "path": "/documentation/metal/mtltexturedescriptor",
  "type": "Class",
  "name": "MTLTextureDescriptor",
  "desc": "An object that you use to configure new Metal texture objects.",
  "items": [
    {
      "name": "class func texture2DDescriptor(pixelFormat: MTLPixelFormat, width: Int, height: Int, mipmapped: Bool) -> MTLTextureDescriptor",
      "desc": "Creates a texture descriptor object for a 2D texture."
    },
    {
      "name": "class func textureCubeDescriptor(pixelFormat: MTLPixelFormat, size: Int, mipmapped: Bool) -> MTLTextureDescriptor",
      "desc": "Creates a texture descriptor object for a cube texture."
    },
    {
      "name": "class func textureBufferDescriptor(with: MTLPixelFormat, width: Int, resourceOptions: MTLResourceOptions, usage: MTLTextureUsage) -> MTLTextureDescriptor",
      "desc": "Creates a texture descriptor object for a texture buffer."
    },
    {
      "name": "var textureType: MTLTextureType",
      "desc": "The dimension and arrangement of texture image data."
    },
    {
      "name": "var pixelFormat: MTLPixelFormat",
      "desc": "The size and bit layout of all pixels in the texture."
    },
    {
      "name": "var width: Int",
      "desc": "The width of the texture image for the base level mipmap, in pixels."
    },
    {
      "name": "var height: Int",
      "desc": "The height of the texture image for the base level mipmap, in pixels."
    },
    {
      "name": "var depth: Int",
      "desc": "The depth of the texture image for the base level mipmap, in pixels."
    },
    {
      "name": "var mipmapLevelCount: Int",
      "desc": "The number of mipmap levels for this texture."
    },
    {
      "name": "var sampleCount: Int",
      "desc": "The number of samples in each fragment."
    },
    {
      "name": "var arrayLength: Int",
      "desc": "The number of array elements for this texture."
    },
    {
      "name": "var resourceOptions: MTLResourceOptions",
      "desc": "The behavior of a new memory allocation."
    },
    {
      "name": "var cpuCacheMode: MTLCPUCacheMode",
      "desc": "The CPU cache mode used for the CPU mapping of the texture."
    },
    {
      "name": "var storageMode: MTLStorageMode",
      "desc": "The location and access permissions of the texture."
    },
    {
      "name": "var hazardTrackingMode: MTLHazardTrackingMode",
      "desc": "The texture's hazard tracking mode."
    },
    {
      "name": "var allowGPUOptimizedContents: Bool",
      "desc": "A Boolean value indicating whether the GPU is allowed to adjust the texture's contents to improve GPU performance."
    },
    {
      "name": "var usage: MTLTextureUsage",
      "desc": "Options that determine how you can use the texture."
    },
    {
      "name": "var swizzle: MTLTextureSwizzleChannels",
      "desc": "The pattern you want the GPU to apply to pixels when you read or sample pixels from the texture."
    },
    {
      "name": "struct MTLTextureSwizzleChannels",
      "desc": "A pattern that modifies the data read or sampled from a texture by rearranging or duplicating the elements of a vector."
    },
    {
      "name": "enum MTLTextureSwizzle",
      "desc": "A set of options to choose from when creating a texture swizzle pattern."
    },
    {
      "name": "enum MTLTextureType",
      "desc": "The dimension of each image, including whether multiple images are arranged into an array or a cube."
    },
    {
      "name": "struct MTLTextureUsage",
      "desc": "An enumeration for the various options that determine how you can use a texture."
    },
    {
      "name": "var compressionType: MTLTextureCompressionType"
    }
  ],
  "declaration": "class MTLTextureDescriptor : NSObject",
  "inheritsFrom": [
    "NSObject"
  ],
  "conformsTo": [
    "NSCopying"
  ]
}