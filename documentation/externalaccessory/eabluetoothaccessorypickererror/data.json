{
  "path": "/documentation/externalaccessory/eabluetoothaccessorypickererror",
  "type": "Structure",
  "name": "EABluetoothAccessoryPickerError",
  "desc": "Error codes returned by the Bluetooth accessory picker.",
  "items": [
    {
      "name": "static var alreadyConnected: EABluetoothAccessoryPickerError.Code"
    },
    {
      "name": "static var errorDomain: String"
    },
    {
      "name": "static var resultCancelled: EABluetoothAccessoryPickerError.Code"
    },
    {
      "name": "static var resultFailed: EABluetoothAccessoryPickerError.Code"
    },
    {
      "name": "static var resultNotFound: EABluetoothAccessoryPickerError.Code"
    },
    {
      "name": "static var errorDomain: String"
    },
    {
      "name": "var errorCode: Int"
    },
    {
      "name": "var errorUserInfo: [String : Any]"
    },
    {
      "name": "var localizedDescription: String"
    },
    {
      "name": "static func != (EABluetoothAccessoryPickerError, EABluetoothAccessoryPickerError) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are not equal."
    },
    {
      "name": "static func == (EABluetoothAccessoryPickerError, EABluetoothAccessoryPickerError) -> Bool"
    },
    {
      "name": "init(Code, userInfo: [String : Any])"
    },
    {
      "name": "var code: Code"
    },
    {
      "name": "var hashValue: Int"
    },
    {
      "name": "var userInfo: [String : Any]"
    },
    {
      "name": "func hash(into: inout Hasher)"
    },
    {
      "name": "enum EABluetoothAccessoryPickerError.Code",
      "desc": "The error codes that may be passed in an error object for the Bluetooth picker completion block."
    }
  ],
  "declaration": "struct EABluetoothAccessoryPickerError"
}