{
  "path": "/documentation/createml/mldatavalue/sequencetype",
  "type": "Structure",
  "name": "MLDataValue.SequenceType",
  "desc": "A sequence of data values.",
  "items": [
    {
      "name": "typealias MLDataValue.SequenceType.ArrayLiteralElement"
    },
    {
      "name": "typealias MLDataValue.SequenceType.Element"
    },
    {
      "name": "typealias MLDataValue.SequenceType.Index"
    },
    {
      "name": "typealias MLDataValue.SequenceType.Indices"
    },
    {
      "name": "typealias MLDataValue.SequenceType.Iterator"
    },
    {
      "name": "typealias MLDataValue.SequenceType.SubSequence"
    },
    {
      "name": "init()"
    },
    {
      "name": "init<S>(S)"
    },
    {
      "name": "init<S>(S)"
    },
    {
      "name": "init(arrayLiteral: MLDataValue.SequenceType.Element...)"
    },
    {
      "name": "init?(from: MLDataValue)",
      "desc": "Creates a data-value sequence from another sequence."
    },
    {
      "name": "var count: Int",
      "desc": "The number of elements in the collection."
    },
    {
      "name": "var dataValue: MLDataValue",
      "desc": "The sequence wrapped in a data value."
    },
    {
      "name": "var debugDescription: String"
    },
    {
      "name": "var description: String"
    },
    {
      "name": "var endIndex: MLDataValue.SequenceType.Index"
    },
    {
      "name": "var first: MLDataValue?",
      "desc": "The first element of the collection."
    },
    {
      "name": "var isEmpty: Bool",
      "desc": "A Boolean value indicating whether the collection is empty."
    },
    {
      "name": "var last: MLDataValue?",
      "desc": "The last element of the collection."
    },
    {
      "name": "var lazy: LazySequence<MLDataValue.SequenceType>",
      "desc": "A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily."
    },
    {
      "name": "var publisher: Publishers.Sequence<MLDataValue.SequenceType, Never>"
    },
    {
      "name": "var startIndex: MLDataValue.SequenceType.Index"
    },
    {
      "name": "var underestimatedCount: Int",
      "desc": "A value less than or equal to the number of elements in the collection."
    },
    {
      "name": "static var dataValueType: MLDataValue.ValueType",
      "desc": "The underlying type a machine learning sequence uses when it wraps itself in a data value."
    },
    {
      "name": "func allSatisfy((MLDataValue) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate."
    },
    {
      "name": "func compactMap<ElementOfResult>((MLDataValue) -> ElementOfResult?) -> [ElementOfResult]",
      "desc": "Returns an array containing the non-nil results of calling the given transformation with each element of this sequence."
    },
    {
      "name": "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult"
    },
    {
      "name": "func contains(MLDataValue) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence contains the given element."
    },
    {
      "name": "func contains(where: (MLDataValue) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate."
    },
    {
      "name": "func difference<C>(from: C) -> CollectionDifference<MLDataValue>",
      "desc": "Returns the difference needed to produce this collection’s ordered elements from the given collection."
    },
    {
      "name": "func difference<C>(from: C, by: (C.Element, MLDataValue) -> Bool) -> CollectionDifference<MLDataValue>",
      "desc": "Returns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test."
    },
    {
      "name": "func drop(while: (MLDataValue) -> Bool) -> Slice<MLDataValue.SequenceType>",
      "desc": "Returns a subsequence by skipping elements while predicate returns true and returning the remaining elements."
    },
    {
      "name": "func dropFirst(Int) -> Slice<MLDataValue.SequenceType>",
      "desc": "Returns a subsequence containing all but the given number of initial elements."
    },
    {
      "name": "func dropLast(Int) -> Slice<MLDataValue.SequenceType>",
      "desc": "Returns a subsequence containing all but the specified number of final elements."
    },
    {
      "name": "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
      "desc": "Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order."
    },
    {
      "name": "func elementsEqual<OtherSequence>(OtherSequence, by: (MLDataValue, OtherSequence.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test."
    },
    {
      "name": "func enumerated() -> EnumeratedSequence<MLDataValue.SequenceType>",
      "desc": "Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence."
    },
    {
      "name": "func filter((MLDataValue) -> Bool) -> [MLDataValue]",
      "desc": "Returns an array containing, in order, the elements of the sequence that satisfy the given predicate."
    },
    {
      "name": "func first(where: (MLDataValue) -> Bool) -> MLDataValue?",
      "desc": "Returns the first element of the sequence that satisfies the given predicate."
    },
    {
      "name": "func firstIndex(of: MLDataValue) -> Int?",
      "desc": "Returns the first index where the specified value appears in the collection."
    },
    {
      "name": "func firstIndex(where: (MLDataValue) -> Bool) -> Int?",
      "desc": "Returns the first index in which an element of the collection satisfies the given predicate."
    },
    {
      "name": "func flatMap<SegmentOfResult>((MLDataValue) -> SegmentOfResult) -> [SegmentOfResult.Element]",
      "desc": "Returns an array containing the concatenated results of calling the given transformation with each element of this sequence."
    },
    {
      "name": "func forEach((MLDataValue) -> Void)",
      "desc": "Calls the given closure on each element in the sequence in the same order as a for-in loop."
    },
    {
      "name": "func formIndex(inout Int, offsetBy: Int)",
      "desc": "Offsets the given index by the specified distance."
    },
    {
      "name": "func formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool",
      "desc": "Offsets the given index by the specified distance, or so that it equals the given limiting index."
    },
    {
      "name": "func formIndex(after: inout Int)",
      "desc": "Replaces the given index with its successor."
    },
    {
      "name": "func formIndex(before: inout Int)",
      "desc": "Replaces the given index with its predecessor."
    },
    {
      "name": "func formatted<S>(S) -> S.FormatOutput"
    },
    {
      "name": "func index(Int, offsetBy: Int, limitedBy: Int) -> Int?",
      "desc": "Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index."
    },
    {
      "name": "func last(where: (MLDataValue) -> Bool) -> MLDataValue?",
      "desc": "Returns the last element of the sequence that satisfies the given predicate."
    },
    {
      "name": "func lastIndex(of: MLDataValue) -> Int?",
      "desc": "Returns the last index where the specified value appears in the collection."
    },
    {
      "name": "func lastIndex(where: (MLDataValue) -> Bool) -> Int?",
      "desc": "Returns the index of the last element in the collection that matches the given predicate."
    },
    {
      "name": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (MLDataValue, MLDataValue) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements."
    },
    {
      "name": "func makeIterator() -> IndexingIterator<MLDataValue.SequenceType>",
      "desc": "Returns an iterator over the elements of the collection."
    },
    {
      "name": "func map<T>((MLDataValue) -> T) -> [T]",
      "desc": "Returns an array containing the results of mapping the given closure over the sequence’s elements."
    },
    {
      "name": "func max(by: (MLDataValue, MLDataValue) -> Bool) -> MLDataValue?",
      "desc": "Returns the maximum element in the sequence, using the given predicate as the comparison between elements."
    },
    {
      "name": "func min(by: (MLDataValue, MLDataValue) -> Bool) -> MLDataValue?",
      "desc": "Returns the minimum element in the sequence, using the given predicate as the comparison between elements."
    },
    {
      "name": "func prefix(Int) -> Slice<MLDataValue.SequenceType>",
      "desc": "Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection."
    },
    {
      "name": "func prefix(through: Int) -> Slice<MLDataValue.SequenceType>",
      "desc": "Returns a subsequence from the start of the collection through the specified position."
    },
    {
      "name": "func prefix(upTo: Int) -> Slice<MLDataValue.SequenceType>",
      "desc": "Returns a subsequence from the start of the collection up to, but not including, the specified position."
    },
    {
      "name": "func prefix(while: (MLDataValue) -> Bool) -> Slice<MLDataValue.SequenceType>",
      "desc": "Returns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements."
    },
    {
      "name": "func randomElement() -> MLDataValue?",
      "desc": "Returns a random element of the collection."
    },
    {
      "name": "func randomElement<T>(using: inout T) -> MLDataValue?",
      "desc": "Returns a random element of the collection, using the given generator as a source for randomness."
    },
    {
      "name": "func reduce<Result>(Result, (Result, MLDataValue) -> Result) -> Result",
      "desc": "Returns the result of combining the elements of the sequence using the given closure."
    },
    {
      "name": "func reduce<Result>(into: Result, (inout Result, MLDataValue) -> ()) -> Result",
      "desc": "Returns the result of combining the elements of the sequence using the given closure."
    },
    {
      "name": "func reversed() -> ReversedCollection<MLDataValue.SequenceType>",
      "desc": "Returns a view presenting the elements of the collection in reverse order."
    },
    {
      "name": "func shuffled() -> [MLDataValue]",
      "desc": "Returns the elements of the sequence, shuffled."
    },
    {
      "name": "func shuffled<T>(using: inout T) -> [MLDataValue]",
      "desc": "Returns the elements of the sequence, shuffled using the given generator as a source for randomness."
    },
    {
      "name": "func sorted(by: (MLDataValue, MLDataValue) -> Bool) -> [MLDataValue]",
      "desc": "Returns the elements of the sequence, sorted using the given predicate as the comparison between elements."
    },
    {
      "name": "func sorted<Comparator>(using: Comparator) -> [MLDataValue]"
    },
    {
      "name": "func sorted<S, Comparator>(using: S) -> [MLDataValue]"
    },
    {
      "name": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (MLDataValue) -> Bool) -> [Slice<MLDataValue.SequenceType>]",
      "desc": "Returns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
    },
    {
      "name": "func split(separator: MLDataValue, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Slice<MLDataValue.SequenceType>]",
      "desc": "Returns the longest possible subsequences of the collection, in order, around elements equal to the given element."
    },
    {
      "name": "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
      "desc": "Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence."
    },
    {
      "name": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (MLDataValue, PossiblePrefix.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test."
    },
    {
      "name": "func suffix(Int) -> Slice<MLDataValue.SequenceType>",
      "desc": "Returns a subsequence, up to the given maximum length, containing the final elements of the collection."
    },
    {
      "name": "func suffix(from: Int) -> Slice<MLDataValue.SequenceType>",
      "desc": "Returns a subsequence from the specified position to the end of the collection."
    },
    {
      "name": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<MLDataValue>) -> R) -> R?",
      "desc": "Executes a closure on the sequence’s contiguous storage."
    },
    {
      "name": "subscript(MLDataValue.SequenceType.Index) -> MLDataValue.SequenceType.Element"
    },
    {
      "name": "subscript<R>(R) -> Slice<MLDataValue.SequenceType>",
      "desc": "Accesses the contiguous subrange of the collection’s elements specified by a range expression."
    },
    {
      "name": "subscript((UnboundedRange_) -> ()) -> Slice<MLDataValue.SequenceType>"
    },
    {
      "name": "subscript(Range<Int>) -> Slice<MLDataValue.SequenceType>",
      "desc": "Accesses a contiguous subrange of the collection’s elements."
    },
    {
      "name": "static func != (MLDataValue.SequenceType, MLDataValue.SequenceType) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are not equal."
    },
    {
      "name": "static func == (MLDataValue.SequenceType, MLDataValue.SequenceType) -> Bool"
    }
  ],
  "declaration": "struct MLDataValue.SequenceType",
  "conformsTo": [
    "CustomDebugStringConvertible",
    "CustomStringConvertible",
    "Equatable",
    "ExpressibleByArrayLiteral",
    "MLDataValueConvertible",
    "RandomAccessCollection"
  ]
}