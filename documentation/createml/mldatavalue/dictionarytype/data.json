{
  "path": "/documentation/createml/mldatavalue/dictionarytype",
  "type": "Structure",
  "name": "MLDataValue.DictionaryType",
  "desc": "A dictionary of named data values.",
  "items": [
    {
      "name": "typealias MLDataValue.DictionaryType.Element"
    },
    {
      "name": "typealias MLDataValue.DictionaryType.Indices"
    },
    {
      "name": "typealias MLDataValue.DictionaryType.Iterator"
    },
    {
      "name": "typealias MLDataValue.DictionaryType.Key"
    },
    {
      "name": "typealias MLDataValue.DictionaryType.SubSequence"
    },
    {
      "name": "typealias MLDataValue.DictionaryType.Value"
    },
    {
      "name": "init()"
    },
    {
      "name": "init([MLDataValue : MLDataValue])"
    },
    {
      "name": "init?(from: MLDataValue)",
      "desc": "Creates a data-value dictionary from another dictionary."
    },
    {
      "name": "init<S>(uniqueKeysWithValues: S)"
    },
    {
      "name": "var count: Int"
    },
    {
      "name": "var dataValue: MLDataValue",
      "desc": "The dictionary wrapped in a data value."
    },
    {
      "name": "var debugDescription: String"
    },
    {
      "name": "var description: String"
    },
    {
      "name": "var endIndex: MLDataValue.DictionaryType.Index"
    },
    {
      "name": "var first: (key: MLDataValue, value: MLDataValue)?",
      "desc": "The first element of the collection."
    },
    {
      "name": "var indices: DefaultIndices<MLDataValue.DictionaryType>",
      "desc": "The indices that are valid for subscripting the collection, in ascending order."
    },
    {
      "name": "var isEmpty: Bool"
    },
    {
      "name": "var lazy: LazySequence<MLDataValue.DictionaryType>",
      "desc": "A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily."
    },
    {
      "name": "var publisher: Publishers.Sequence<MLDataValue.DictionaryType, Never>"
    },
    {
      "name": "var startIndex: MLDataValue.DictionaryType.Index"
    },
    {
      "name": "var underestimatedCount: Int",
      "desc": "A value less than or equal to the number of elements in the collection."
    },
    {
      "name": "static var dataValueType: MLDataValue.ValueType",
      "desc": "The underlying type a machine learning dictionary uses when it wraps itself in a data value."
    },
    {
      "name": "func allSatisfy(((key: MLDataValue, value: MLDataValue)) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate."
    },
    {
      "name": "func compactMap<ElementOfResult>(((key: MLDataValue, value: MLDataValue)) -> ElementOfResult?) -> [ElementOfResult]",
      "desc": "Returns an array containing the non-nil results of calling the given transformation with each element of this sequence."
    },
    {
      "name": "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult"
    },
    {
      "name": "func contains(where: ((key: MLDataValue, value: MLDataValue)) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate."
    },
    {
      "name": "func distance(from: Index, to: Index) -> Int",
      "desc": "Returns the distance between two indices."
    },
    {
      "name": "func drop(while: ((key: MLDataValue, value: MLDataValue)) -> Bool) -> Slice<MLDataValue.DictionaryType>",
      "desc": "Returns a subsequence by skipping elements while predicate returns true and returning the remaining elements."
    },
    {
      "name": "func dropFirst(Int) -> Slice<MLDataValue.DictionaryType>",
      "desc": "Returns a subsequence containing all but the given number of initial elements."
    },
    {
      "name": "func dropLast(Int) -> Slice<MLDataValue.DictionaryType>",
      "desc": "Returns a subsequence containing all but the specified number of final elements."
    },
    {
      "name": "func elementsEqual<OtherSequence>(OtherSequence, by: ((key: MLDataValue, value: MLDataValue), OtherSequence.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test."
    },
    {
      "name": "func enumerated() -> EnumeratedSequence<MLDataValue.DictionaryType>",
      "desc": "Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence."
    },
    {
      "name": "func filter(((key: MLDataValue, value: MLDataValue)) -> Bool) -> [(key: MLDataValue, value: MLDataValue)]",
      "desc": "Returns an array containing, in order, the elements of the sequence that satisfy the given predicate."
    },
    {
      "name": "func first(where: ((key: MLDataValue, value: MLDataValue)) -> Bool) -> (key: MLDataValue, value: MLDataValue)?",
      "desc": "Returns the first element of the sequence that satisfies the given predicate."
    },
    {
      "name": "func firstIndex(where: ((key: MLDataValue, value: MLDataValue)) -> Bool) -> Index?",
      "desc": "Returns the first index in which an element of the collection satisfies the given predicate."
    },
    {
      "name": "func flatMap<SegmentOfResult>(((key: MLDataValue, value: MLDataValue)) -> SegmentOfResult) -> [SegmentOfResult.Element]",
      "desc": "Returns an array containing the concatenated results of calling the given transformation with each element of this sequence."
    },
    {
      "name": "func forEach(((key: MLDataValue, value: MLDataValue)) -> Void)",
      "desc": "Calls the given closure on each element in the sequence in the same order as a for-in loop."
    },
    {
      "name": "func formIndex(inout Index, offsetBy: Int)",
      "desc": "Offsets the given index by the specified distance."
    },
    {
      "name": "func formIndex(inout Index, offsetBy: Int, limitedBy: Index) -> Bool",
      "desc": "Offsets the given index by the specified distance, or so that it equals the given limiting index."
    },
    {
      "name": "func formIndex(after: inout Index)",
      "desc": "Replaces the given index with its successor."
    },
    {
      "name": "func formatted<S>(S) -> S.FormatOutput"
    },
    {
      "name": "func index(Index, offsetBy: Int) -> Index",
      "desc": "Returns an index that is the specified distance from the given index."
    },
    {
      "name": "func index(Index, offsetBy: Int, limitedBy: Index) -> Index?",
      "desc": "Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index."
    },
    {
      "name": "func index(after: MLDataValue.DictionaryType.Index) -> MLDataValue.DictionaryType.Index"
    },
    {
      "name": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: ((key: MLDataValue, value: MLDataValue), (key: MLDataValue, value: MLDataValue)) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements."
    },
    {
      "name": "func makeIterator() -> IndexingIterator<MLDataValue.DictionaryType>",
      "desc": "Returns an iterator over the elements of the collection."
    },
    {
      "name": "func map<T>(((key: MLDataValue, value: MLDataValue)) -> T) -> [T]",
      "desc": "Returns an array containing the results of mapping the given closure over the sequenceâ€™s elements."
    },
    {
      "name": "func max(by: ((key: MLDataValue, value: MLDataValue), (key: MLDataValue, value: MLDataValue)) -> Bool) -> (key: MLDataValue, value: MLDataValue)?",
      "desc": "Returns the maximum element in the sequence, using the given predicate as the comparison between elements."
    },
    {
      "name": "func min(by: ((key: MLDataValue, value: MLDataValue), (key: MLDataValue, value: MLDataValue)) -> Bool) -> (key: MLDataValue, value: MLDataValue)?",
      "desc": "Returns the minimum element in the sequence, using the given predicate as the comparison between elements."
    },
    {
      "name": "func prefix(Int) -> Slice<MLDataValue.DictionaryType>",
      "desc": "Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection."
    },
    {
      "name": "func prefix(through: Index) -> Slice<MLDataValue.DictionaryType>",
      "desc": "Returns a subsequence from the start of the collection through the specified position."
    },
    {
      "name": "func prefix(upTo: Index) -> Slice<MLDataValue.DictionaryType>",
      "desc": "Returns a subsequence from the start of the collection up to, but not including, the specified position."
    },
    {
      "name": "func prefix(while: ((key: MLDataValue, value: MLDataValue)) -> Bool) -> Slice<MLDataValue.DictionaryType>",
      "desc": "Returns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements."
    },
    {
      "name": "func randomElement() -> (key: MLDataValue, value: MLDataValue)?",
      "desc": "Returns a random element of the collection."
    },
    {
      "name": "func randomElement<T>(using: inout T) -> (key: MLDataValue, value: MLDataValue)?",
      "desc": "Returns a random element of the collection, using the given generator as a source for randomness."
    },
    {
      "name": "func reduce<Result>(Result, (Result, (key: MLDataValue, value: MLDataValue)) -> Result) -> Result",
      "desc": "Returns the result of combining the elements of the sequence using the given closure."
    },
    {
      "name": "func reduce<Result>(into: Result, (inout Result, (key: MLDataValue, value: MLDataValue)) -> ()) -> Result",
      "desc": "Returns the result of combining the elements of the sequence using the given closure."
    },
    {
      "name": "func reversed() -> [(key: MLDataValue, value: MLDataValue)]",
      "desc": "Returns an array containing the elements of this sequence in reverse order."
    },
    {
      "name": "func shuffled() -> [(key: MLDataValue, value: MLDataValue)]",
      "desc": "Returns the elements of the sequence, shuffled."
    },
    {
      "name": "func shuffled<T>(using: inout T) -> [(key: MLDataValue, value: MLDataValue)]",
      "desc": "Returns the elements of the sequence, shuffled using the given generator as a source for randomness."
    },
    {
      "name": "func sorted(by: ((key: MLDataValue, value: MLDataValue), (key: MLDataValue, value: MLDataValue)) -> Bool) -> [(key: MLDataValue, value: MLDataValue)]",
      "desc": "Returns the elements of the sequence, sorted using the given predicate as the comparison between elements."
    },
    {
      "name": "func sorted<Comparator>(using: Comparator) -> [(key: MLDataValue, value: MLDataValue)]"
    },
    {
      "name": "func sorted<S, Comparator>(using: S) -> [(key: MLDataValue, value: MLDataValue)]"
    },
    {
      "name": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: ((key: MLDataValue, value: MLDataValue)) -> Bool) -> [Slice<MLDataValue.DictionaryType>]",
      "desc": "Returns the longest possible subsequences of the collection, in order, that donâ€™t contain elements satisfying the given predicate."
    },
    {
      "name": "func starts<PossiblePrefix>(with: PossiblePrefix, by: ((key: MLDataValue, value: MLDataValue), PossiblePrefix.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test."
    },
    {
      "name": "func suffix(Int) -> Slice<MLDataValue.DictionaryType>",
      "desc": "Returns a subsequence, up to the given maximum length, containing the final elements of the collection."
    },
    {
      "name": "func suffix(from: Index) -> Slice<MLDataValue.DictionaryType>",
      "desc": "Returns a subsequence from the specified position to the end of the collection."
    },
    {
      "name": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<(key: MLDataValue, value: MLDataValue)>) -> R) -> R?",
      "desc": "Executes a closure on the sequenceâ€™s contiguous storage."
    },
    {
      "name": "subscript(MLDataValue.DictionaryType.Index) -> MLDataValue.DictionaryType.Element"
    },
    {
      "name": "subscript(MLDataValue.DictionaryType.Key) -> MLDataValue.DictionaryType.Value?"
    },
    {
      "name": "subscript<R>(R) -> Slice<MLDataValue.DictionaryType>",
      "desc": "Accesses the contiguous subrange of the collectionâ€™s elements specified by a range expression."
    },
    {
      "name": "subscript((UnboundedRange_) -> ()) -> Slice<MLDataValue.DictionaryType>"
    },
    {
      "name": "subscript(Range<Index>) -> Slice<MLDataValue.DictionaryType>",
      "desc": "Accesses a contiguous subrange of the collectionâ€™s elements."
    },
    {
      "name": "static func != (MLDataValue.DictionaryType, MLDataValue.DictionaryType) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are not equal."
    },
    {
      "name": "static func == (MLDataValue.DictionaryType, MLDataValue.DictionaryType) -> Bool"
    },
    {
      "name": "struct MLDataValue.DictionaryType.Index"
    }
  ],
  "declaration": "struct MLDataValue.DictionaryType",
  "conformsTo": [
    "Collection",
    "CustomDebugStringConvertible",
    "CustomStringConvertible",
    "Equatable",
    "MLDataValueConvertible"
  ]
}