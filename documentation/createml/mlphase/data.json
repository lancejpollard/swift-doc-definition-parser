{
  "path": "/documentation/createml/mlphase",
  "type": "Enumeration",
  "name": "MLPhase",
  "desc": "The possible states of a training session.",
  "items": [
    {
      "name": "case initialized",
      "desc": "The training session is in the initial idle state before extracting features and training."
    },
    {
      "name": "case extractingFeatures",
      "desc": "The training session is extracting features from the training dataset."
    },
    {
      "name": "case training",
      "desc": "The training session is training a model from the features it extracted from the training dataset."
    },
    {
      "name": "case evaluating",
      "desc": "The training session is evaluating the model it trained."
    },
    {
      "name": "case inferencing",
      "desc": "The training session is using the model to make a prediction."
    },
    {
      "name": "init?(rawValue: String)",
      "desc": "Creates a phase instance from a string."
    },
    {
      "name": "var rawValue: String",
      "desc": "The corresponding value of the raw type."
    },
    {
      "name": "typealias MLPhase.RawValue",
      "desc": "Defines the underlying type of the phase as a string."
    },
    {
      "name": "func encode(to: Encoder)",
      "desc": "Encodes this value into the given encoder, when the type’s RawValue is String."
    },
    {
      "name": "init(from: Decoder)",
      "desc": "Creates a new instance by decoding from the given decoder, when the type’s RawValue is String."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of the phase by feeding them into the hasher."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value of the current phase."
    },
    {
      "name": "static func != (MLPhase, MLPhase) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the two phases aren’t equal."
    }
  ],
  "declaration": "enum MLPhase : String, Codable",
  "conformsTo": [
    "Decodable",
    "Encodable"
  ]
}