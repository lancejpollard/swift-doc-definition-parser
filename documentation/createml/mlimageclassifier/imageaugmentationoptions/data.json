{
  "path": "/documentation/createml/mlimageclassifier/imageaugmentationoptions",
  "type": "Structure",
  "name": "MLImageClassifier.ImageAugmentationOptions",
  "desc": "The variations that the training process can use to generate more training data from the training data you provide.",
  "items": [
    {
      "name": "static let crop: MLImageClassifier.ImageAugmentationOptions",
      "desc": "An option for augmenting training data by creating cropped versions of each image."
    },
    {
      "name": "static let rotation: MLImageClassifier.ImageAugmentationOptions",
      "desc": "An option for augmenting training data by rotating each image."
    },
    {
      "name": "static let blur: MLImageClassifier.ImageAugmentationOptions",
      "desc": "An option for augmenting training data by blurring each image."
    },
    {
      "name": "static let exposure: MLImageClassifier.ImageAugmentationOptions",
      "desc": "An option for augmenting training data by lightening or darkening each image."
    },
    {
      "name": "static let noise: MLImageClassifier.ImageAugmentationOptions",
      "desc": "An option for augmenting training data by adding random amounts of noise to each image."
    },
    {
      "name": "static let flip: MLImageClassifier.ImageAugmentationOptions",
      "desc": "An option for augmenting training data by flipping each image along the horizontal and vertical axes."
    },
    {
      "name": "init()",
      "desc": "Creates an empty option set."
    },
    {
      "name": "init(arrayLiteral: MLImageClassifier.ImageAugmentationOptions...)",
      "desc": "Creates a set containing the elements of the given array literal."
    },
    {
      "name": "init<S>(S)",
      "desc": "Creates a new set from a finite sequence of items."
    },
    {
      "name": "init(rawValue: Int)",
      "desc": "Creates an augmentation set with the given raw value."
    },
    {
      "name": "let rawValue: Int",
      "desc": "The underlying integer of the augmentation option."
    },
    {
      "name": "var isEmpty: Bool",
      "desc": "A Boolean value that indicates whether the set has no elements."
    },
    {
      "name": "func contains(MLImageClassifier.ImageAugmentationOptions) -> Bool",
      "desc": "Returns a Boolean value that indicates whether a given element is a member of the option set."
    },
    {
      "name": "func insert(MLImageClassifier.ImageAugmentationOptions) -> (inserted: Bool, memberAfterInsert: MLImageClassifier.ImageAugmentationOptions)",
      "desc": "Adds the given element to the option set if it is not already a member."
    },
    {
      "name": "func update(with: MLImageClassifier.ImageAugmentationOptions) -> MLImageClassifier.ImageAugmentationOptions?",
      "desc": "Inserts the given element into the set."
    },
    {
      "name": "func remove(MLImageClassifier.ImageAugmentationOptions) -> MLImageClassifier.ImageAugmentationOptions?",
      "desc": "Removes the given element and all elements subsumed by it."
    },
    {
      "name": "func union(MLImageClassifier.ImageAugmentationOptions) -> MLImageClassifier.ImageAugmentationOptions",
      "desc": "Returns a new option set of the elements contained in this set, in the given set, or in both."
    },
    {
      "name": "func formUnion(MLImageClassifier.ImageAugmentationOptions)",
      "desc": "Inserts the elements of another set into this option set."
    },
    {
      "name": "func intersection(MLImageClassifier.ImageAugmentationOptions) -> MLImageClassifier.ImageAugmentationOptions",
      "desc": "Returns a new option set with only the elements contained in both this set and the given set."
    },
    {
      "name": "func formIntersection(MLImageClassifier.ImageAugmentationOptions)",
      "desc": "Removes all elements of this option set that are not also present in the given set."
    },
    {
      "name": "func symmetricDifference(MLImageClassifier.ImageAugmentationOptions) -> MLImageClassifier.ImageAugmentationOptions",
      "desc": "Returns a new option set with the elements contained in this set or in the given set, but not in both."
    },
    {
      "name": "func formSymmetricDifference(MLImageClassifier.ImageAugmentationOptions)",
      "desc": "Replaces this set with a new set containing all elements contained in either this set or the given set, but not in both."
    },
    {
      "name": "func subtract(MLImageClassifier.ImageAugmentationOptions)",
      "desc": "Removes the elements of the given set from this set."
    },
    {
      "name": "func subtracting(MLImageClassifier.ImageAugmentationOptions) -> MLImageClassifier.ImageAugmentationOptions",
      "desc": "Returns a new set containing the elements of this set that do not occur in the given set."
    },
    {
      "name": "func isStrictSubset(of: MLImageClassifier.ImageAugmentationOptions) -> Bool",
      "desc": "Returns a Boolean value that indicates whether this set is a strict subset of the given set."
    },
    {
      "name": "func isSubset(of: MLImageClassifier.ImageAugmentationOptions) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the set is a subset of another set."
    },
    {
      "name": "func isStrictSuperset(of: MLImageClassifier.ImageAugmentationOptions) -> Bool",
      "desc": "Returns a Boolean value that indicates whether this set is a strict superset of the given set."
    },
    {
      "name": "func isSuperset(of: MLImageClassifier.ImageAugmentationOptions) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the set is a superset of the given set."
    },
    {
      "name": "func isDisjoint(with: MLImageClassifier.ImageAugmentationOptions) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the set has no members in common with the given set."
    },
    {
      "name": "static func != (MLImageClassifier.ImageAugmentationOptions, MLImageClassifier.ImageAugmentationOptions) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are not equal."
    },
    {
      "name": "typealias MLImageClassifier.ImageAugmentationOptions.Element",
      "desc": "The element type of the option set."
    },
    {
      "name": "typealias MLImageClassifier.ImageAugmentationOptions.RawValue",
      "desc": "The raw type that you can use to represent all values of the conforming type."
    },
    {
      "name": "typealias MLImageClassifier.ImageAugmentationOptions.ArrayLiteralElement",
      "desc": "The type of the elements of an array literal."
    }
  ],
  "declaration": "struct ImageAugmentationOptions",
  "conformsTo": [
    "OptionSet"
  ]
}