{
  "path": "/documentation/createml/mlactionclassifier/videoaugmentationoptions",
  "type": "Structure",
  "name": "MLActionClassifier.VideoAugmentationOptions",
  "desc": "The video augmentations for an action classifier training session.",
  "items": [
    {
      "name": "static let horizontalFlip: MLActionClassifier.VideoAugmentationOptions",
      "desc": "A video augmentation that creates a horizontally flipped copy of a sample video."
    },
    {
      "name": "init(rawValue: Int)",
      "desc": "Creates a video augmentation option set from a raw value."
    },
    {
      "name": "init()",
      "desc": "Creates an empty option set."
    },
    {
      "name": "init<S>(S)",
      "desc": "Creates a new set from a finite sequence of items."
    },
    {
      "name": "init(arrayLiteral: MLActionClassifier.VideoAugmentationOptions...)",
      "desc": "Creates a set containing the elements of the given array literal."
    },
    {
      "name": "var isEmpty: Bool",
      "desc": "A Boolean value that indicates whether the set has no elements."
    },
    {
      "name": "let rawValue: Int",
      "desc": "The underlying raw value of the option set."
    },
    {
      "name": "func contains(MLActionClassifier.VideoAugmentationOptions) -> Bool",
      "desc": "Returns a Boolean value that indicates whether a given element is a member of the option set."
    },
    {
      "name": "func insert(MLActionClassifier.VideoAugmentationOptions) -> (inserted: Bool, memberAfterInsert: MLActionClassifier.VideoAugmentationOptions)",
      "desc": "Adds the given element to the option set if it is not already a member."
    },
    {
      "name": "func update(with: MLActionClassifier.VideoAugmentationOptions) -> MLActionClassifier.VideoAugmentationOptions?",
      "desc": "Inserts the given element into the set."
    },
    {
      "name": "func union(MLActionClassifier.VideoAugmentationOptions) -> MLActionClassifier.VideoAugmentationOptions",
      "desc": "Returns a new option set of the elements contained in this set, in the given set, or in both."
    },
    {
      "name": "func formUnion(MLActionClassifier.VideoAugmentationOptions)",
      "desc": "Inserts the elements of another set into this option set."
    },
    {
      "name": "func intersection(MLActionClassifier.VideoAugmentationOptions) -> MLActionClassifier.VideoAugmentationOptions",
      "desc": "Returns a new option set with only the elements contained in both this set and the given set."
    },
    {
      "name": "func formIntersection(MLActionClassifier.VideoAugmentationOptions)",
      "desc": "Removes all elements of this option set that are not also present in the given set."
    },
    {
      "name": "func symmetricDifference(MLActionClassifier.VideoAugmentationOptions) -> MLActionClassifier.VideoAugmentationOptions",
      "desc": "Returns a new option set with the elements contained in this set or in the given set, but not in both."
    },
    {
      "name": "func formSymmetricDifference(MLActionClassifier.VideoAugmentationOptions)",
      "desc": "Replaces this set with a new set containing all elements contained in either this set or the given set, but not in both."
    },
    {
      "name": "func remove(MLActionClassifier.VideoAugmentationOptions) -> MLActionClassifier.VideoAugmentationOptions?",
      "desc": "Removes the given element and all elements subsumed by it."
    },
    {
      "name": "func subtracting(MLActionClassifier.VideoAugmentationOptions) -> MLActionClassifier.VideoAugmentationOptions",
      "desc": "Returns a new set containing the elements of this set that do not occur in the given set."
    },
    {
      "name": "func subtract(MLActionClassifier.VideoAugmentationOptions)",
      "desc": "Removes the elements of the given set from this set."
    },
    {
      "name": "func isDisjoint(with: MLActionClassifier.VideoAugmentationOptions) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the set has no members in common with the given set."
    },
    {
      "name": "func isSubset(of: MLActionClassifier.VideoAugmentationOptions) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the set is a subset of another set."
    },
    {
      "name": "func isStrictSubset(of: MLActionClassifier.VideoAugmentationOptions) -> Bool",
      "desc": "Returns a Boolean value that indicates whether this set is a strict subset of the given set."
    },
    {
      "name": "func isSuperset(of: MLActionClassifier.VideoAugmentationOptions) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the set is a superset of the given set."
    },
    {
      "name": "func isStrictSuperset(of: MLActionClassifier.VideoAugmentationOptions) -> Bool",
      "desc": "Returns a Boolean value that indicates whether this set is a strict superset of the given set."
    },
    {
      "name": "static func != (MLActionClassifier.VideoAugmentationOptions, MLActionClassifier.VideoAugmentationOptions) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are not equal."
    },
    {
      "name": "init(from: Decoder)",
      "desc": "Creates a new instance by decoding from the given decoder, when the type’s RawValue is Int."
    },
    {
      "name": "func encode(to: Encoder)",
      "desc": "Encodes this value into the given encoder, when the type’s RawValue is Int."
    },
    {
      "name": "typealias MLActionClassifier.VideoAugmentationOptions.Element",
      "desc": "The element type of the option set."
    },
    {
      "name": "typealias MLActionClassifier.VideoAugmentationOptions.ArrayLiteralElement",
      "desc": "The type of the elements of an array literal."
    },
    {
      "name": "typealias MLActionClassifier.VideoAugmentationOptions.RawValue",
      "desc": "The raw type that you can use to represent all values of the conforming type."
    }
  ],
  "declaration": "struct VideoAugmentationOptions",
  "conformsTo": [
    "Decodable",
    "Encodable",
    "OptionSet"
  ]
}