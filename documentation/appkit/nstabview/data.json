{
  "path": "/documentation/appkit/nstabview",
  "type": "Class",
  "name": "NSTabView",
  "desc": "A multipage interface that displays one page at a time.",
  "items": [
    {
      "name": "var delegate: NSTabViewDelegate?",
      "desc": "The tab view’s delegate."
    },
    {
      "name": "protocol NSTabViewDelegate",
      "desc": "The NSTabViewDelegate protocol defines the optional methods implemented by delegates of NSTabView objects."
    },
    {
      "name": "func addTabViewItem(NSTabViewItem)",
      "desc": "Adds the specified tab item."
    },
    {
      "name": "func insertTabViewItem(NSTabViewItem, at: Int)",
      "desc": "Inserts the specified item into the tab view’s array of tab view items at the specified index."
    },
    {
      "name": "func removeTabViewItem(NSTabViewItem)",
      "desc": "Removes the specified item from the tab view’s array of tab view items."
    },
    {
      "name": "func indexOfTabViewItem(NSTabViewItem) -> Int",
      "desc": "Returns the index of the specified item in the tab view."
    },
    {
      "name": "func indexOfTabViewItem(withIdentifier: Any) -> Int",
      "desc": "Returns the index of the item that matches the specified identifier or NSNotFound if the item is not found."
    },
    {
      "name": "var numberOfTabViewItems: Int",
      "desc": "The number of items in the tab view’s array of tab view items."
    },
    {
      "name": "func tabViewItem(at: Int) -> NSTabViewItem",
      "desc": "Returns the tab view item at index in the tab view’s array of items."
    },
    {
      "name": "var tabViewItems: [NSTabViewItem]",
      "desc": "The tab view’s array of tab view items."
    },
    {
      "name": "var tabViewType: NSTabView.TabType",
      "desc": "The tab type to display the tabs."
    },
    {
      "name": "enum NSTabView.TabType",
      "desc": "These constants specify the tab view’s type as used by the tabViewType property."
    },
    {
      "name": "var tabPosition: NSTabView.TabPosition"
    },
    {
      "name": "enum NSTabView.TabPosition"
    },
    {
      "name": "var tabViewBorderType: NSTabView.TabViewBorderType"
    },
    {
      "name": "enum NSTabView.TabViewBorderType"
    },
    {
      "name": "func selectFirstTabViewItem(Any?)",
      "desc": "This action method selects the first tab view item."
    },
    {
      "name": "func selectLastTabViewItem(Any?)",
      "desc": "This action method selects the last tab view item."
    },
    {
      "name": "func selectNextTabViewItem(Any?)",
      "desc": "This action method selects the next tab view item in the sequence."
    },
    {
      "name": "func selectPreviousTabViewItem(Any?)",
      "desc": "This action method selects the previous tab view item in the sequence."
    },
    {
      "name": "func selectTabViewItem(NSTabViewItem?)",
      "desc": "Selects the specified tab view item."
    },
    {
      "name": "func selectTabViewItem(at: Int)",
      "desc": "Selects the tab view item specified by index."
    },
    {
      "name": "func selectTabViewItem(withIdentifier: Any)",
      "desc": "Selects the tab view item specified by identifier."
    },
    {
      "name": "var selectedTabViewItem: NSTabViewItem?",
      "desc": "The tab view item for the currently selected tab."
    },
    {
      "name": "func takeSelectedTabViewItemFromSender(Any?)",
      "desc": "Sets the selected tab view item to the selected item obtained from the sender."
    },
    {
      "name": "var font: NSFont",
      "desc": "The font used for the tab view’s label text."
    },
    {
      "name": "var drawsBackground: Bool",
      "desc": "A Boolean value that indicates if the tab view draws a background color when its type is NSNoTabsNoBorder."
    },
    {
      "name": "var minimumSize: NSSize",
      "desc": "The minimum size necessary for the tab view to display tabs in a useful way."
    },
    {
      "name": "var contentRect: NSRect",
      "desc": "The rectangle describing the content area of the tab view."
    },
    {
      "name": "var controlSize: NSControl.ControlSize",
      "desc": "The size of the tab view."
    },
    {
      "name": "var allowsTruncatedLabels: Bool",
      "desc": "A Boolean value that indicates if the tab view allows truncating for labels that don’t fit on a tab."
    },
    {
      "name": "func tabViewItem(at: NSPoint) -> NSTabViewItem?",
      "desc": "Returns the tab view item at the specified point."
    }
  ],
  "declaration": "class NSTabView : NSView",
  "inheritsFrom": [
    "NSView"
  ]
}