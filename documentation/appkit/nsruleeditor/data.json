{
  "path": "/documentation/appkit/nsruleeditor",
  "type": "Class",
  "name": "NSRuleEditor",
  "desc": "An interface for configuring a rule-based list of options.",
  "items": [
    {
      "name": "var delegate: NSRuleEditorDelegate?",
      "desc": "The rule editor’s delegate."
    },
    {
      "name": "protocol NSRuleEditorDelegate",
      "desc": "The NSRuleEditorDelegate protocol defines the optional methods implemented by delegates of NSRuleEditor objects."
    },
    {
      "name": "var isEditable: Bool",
      "desc": "A Boolean value that determines whether the rule editor is editable."
    },
    {
      "name": "var nestingMode: NSRuleEditor.NestingMode",
      "desc": "The rule editor’s nesting mode."
    },
    {
      "name": "enum NSRuleEditor.NestingMode",
      "desc": "Specifies a type for nesting modes."
    },
    {
      "name": "var canRemoveAllRows: Bool",
      "desc": "A Boolean value that indicates whether all the rows can be removed."
    },
    {
      "name": "var rowHeight: CGFloat",
      "desc": "The rule editor’s row height."
    },
    {
      "name": "var formattingDictionary: [String : String]?",
      "desc": "The formatting dictionary for the rule editor."
    },
    {
      "name": "var formattingStringsFilename: String?",
      "desc": "The name of the rule editor’s strings file."
    },
    {
      "name": "func reloadCriteria()",
      "desc": "Instructs the receiver to refetch criteria from its delegate."
    },
    {
      "name": "func setCriteria([Any], andDisplayValues: [Any], forRowAt: Int)",
      "desc": "Modifies the row at a given index to contain the given items and values."
    },
    {
      "name": "func criteria(forRow: Int) -> [Any]",
      "desc": "Returns the currently chosen items for a given row."
    },
    {
      "name": "func displayValues(forRow: Int) -> [Any]",
      "desc": "Returns the chosen values for a given row."
    },
    {
      "name": "var numberOfRows: Int",
      "desc": "The number of rows in the rule editor."
    },
    {
      "name": "func parentRow(forRow: Int) -> Int",
      "desc": "Returns the index of the parent of a given row."
    },
    {
      "name": "func row(forDisplayValue: Any) -> Int",
      "desc": "Returns the index of the row containing a given value."
    },
    {
      "name": "func rowType(forRow: Int) -> NSRuleEditor.RowType",
      "desc": "Returns the type of a given row."
    },
    {
      "name": "enum NSRuleEditor.RowType",
      "desc": "Specifies a type for row types."
    },
    {
      "name": "func subrowIndexes(forRow: Int) -> IndexSet",
      "desc": "Returns the immediate subrows of a given row."
    },
    {
      "name": "var selectedRowIndexes: IndexSet",
      "desc": "The indexes of the rule editor’s selected rows."
    },
    {
      "name": "func selectRowIndexes(IndexSet, byExtendingSelection: Bool)",
      "desc": "Sets in the receiver the indexes of rows that are selected."
    },
    {
      "name": "func addRow(Any?)",
      "desc": "Adds a row to the receiver."
    },
    {
      "name": "func insertRow(at: Int, with: NSRuleEditor.RowType, asSubrowOfRow: Int, animate: Bool)",
      "desc": "Adds a new row of a given type at a given location."
    },
    {
      "name": "func removeRow(at: Int)",
      "desc": "Removes the row at a given index."
    },
    {
      "name": "func removeRows(at: IndexSet, includeSubrows: Bool)",
      "desc": "Removes the rows at given indexes."
    },
    {
      "name": "var predicate: NSPredicate?",
      "desc": "The rule editor’s predicate."
    },
    {
      "name": "func reloadPredicate()",
      "desc": "Instructs the receiver to regenerate its predicate by invoking the corresponding delegate method."
    },
    {
      "name": "func predicate(forRow: Int) -> NSPredicate?",
      "desc": "Returns the predicate for a given row."
    },
    {
      "name": "var rowClass: AnyClass",
      "desc": "The class used to create a new row in the “rows” binding."
    },
    {
      "name": "var rowTypeKeyPath: String",
      "desc": "The key path for the row type."
    },
    {
      "name": "var subrowsKeyPath: String",
      "desc": "The key path for the subrows."
    },
    {
      "name": "var criteriaKeyPath: String",
      "desc": "The criteria key path."
    },
    {
      "name": "var displayValuesKeyPath: String",
      "desc": "The display values key path."
    },
    {
      "name": "class let rowsDidChangeNotification: NSNotification.Name",
      "desc": "This notification is posted to the default notification center whenever the view's rows change."
    }
  ],
  "declaration": "class NSRuleEditor : NSControl",
  "inheritsFrom": [
    "NSControl"
  ]
}