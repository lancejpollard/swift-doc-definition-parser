{
  "path": "/documentation/appkit/nssegmentedcell",
  "type": "Class",
  "name": "NSSegmentedCell",
  "desc": "An NSSegmentedCell object implements the appearance and behavior of a horizontal button divided into multiple segments. This class is used in conjunction with the NSSegmentedControl class to implement a segmented control.",
  "items": [
    {
      "name": "var segmentCount: Int",
      "desc": "The number of segments in the segmented control."
    },
    {
      "name": "func setSelected(Bool, forSegment: Int)",
      "desc": "Sets the selection state of the specified segment."
    },
    {
      "name": "func selectSegment(withTag: Int) -> Bool",
      "desc": "Selects the segment with the specified tag."
    },
    {
      "name": "func makeNextSegmentKey()",
      "desc": "Selects the next segment."
    },
    {
      "name": "func makePreviousSegmentKey()",
      "desc": "Selects the previous segment."
    },
    {
      "name": "var selectedSegment: Int",
      "desc": "The index of the selected segment of the control, or -1 if no segment is selected."
    },
    {
      "name": "func isSelected(forSegment: Int) -> Bool",
      "desc": "Returns a Boolean value indicating whether the specified segment is selected,"
    },
    {
      "name": "var trackingMode: NSSegmentedControl.SwitchTracking",
      "desc": "The tracking mode used for the segments of the control."
    },
    {
      "name": "func setLabel(String, forSegment: Int)",
      "desc": "Sets the label for the specified segment."
    },
    {
      "name": "func label(forSegment: Int) -> String?",
      "desc": "Returns the label of the specified segment."
    },
    {
      "name": "func setImage(NSImage?, forSegment: Int)",
      "desc": "Sets the image for the specified segment."
    },
    {
      "name": "func image(forSegment: Int) -> NSImage?",
      "desc": "Returns the image associated with the specified segment."
    },
    {
      "name": "func setImageScaling(NSImageScaling, forSegment: Int)",
      "desc": "Sets the image scaling mode for the specified segment."
    },
    {
      "name": "func imageScaling(forSegment: Int) -> NSImageScaling",
      "desc": "Returns the image scaling mode associated with the specified segment."
    },
    {
      "name": "func setWidth(CGFloat, forSegment: Int)",
      "desc": "Sets the width of the specified segment."
    },
    {
      "name": "func width(forSegment: Int) -> CGFloat",
      "desc": "Returns the width of the specified segment."
    },
    {
      "name": "func setEnabled(Bool, forSegment: Int)",
      "desc": "Sets the enabled state of the specified segment"
    },
    {
      "name": "func isEnabled(forSegment: Int) -> Bool",
      "desc": "Returns a Boolean value indicating whether the specified segment is enabled."
    },
    {
      "name": "func setMenu(NSMenu?, forSegment: Int)",
      "desc": "Sets the menu for the specified segment."
    },
    {
      "name": "func menu(forSegment: Int) -> NSMenu?",
      "desc": "Returns the menu for the specified segment."
    },
    {
      "name": "func setToolTip(String?, forSegment: Int)",
      "desc": "Sets the tooltip for the specified segment."
    },
    {
      "name": "func toolTip(forSegment: Int) -> String?",
      "desc": "Returns the tooltip of the specified segment."
    },
    {
      "name": "func setTag(Int, forSegment: Int)",
      "desc": "Sets the tag for the specified segment."
    },
    {
      "name": "func tag(forSegment: Int) -> Int",
      "desc": "Returns the tag of the specified segment."
    },
    {
      "name": "func drawSegment(Int, inFrame: NSRect, with: NSView)",
      "desc": "Draws the image and label of the segment in the specified view."
    },
    {
      "name": "func interiorBackgroundStyle(forSegment: Int) -> NSView.BackgroundStyle",
      "desc": "Returns the interior background style for the specified segment."
    },
    {
      "name": "var segmentStyle: NSSegmentedControl.Style",
      "desc": "The visual style used to display the segmented control."
    }
  ],
  "declaration": "class NSSegmentedCell : NSActionCell",
  "inheritsFrom": [
    "NSActionCell"
  ]
}