{
  "path": "/documentation/appkit/nstoolbar",
  "type": "Class",
  "name": "NSToolbar",
  "desc": "An object that manages the space immediately below a window's title bar and above your app's custom content.",
  "items": [
    {
      "name": "init(identifier: NSToolbar.Identifier)",
      "desc": "Initializes a newly allocated toolbar with the specified identifier."
    },
    {
      "name": "init()"
    },
    {
      "name": "var delegate: NSToolbarDelegate?",
      "desc": "The toolbar’s delegate."
    },
    {
      "name": "protocol NSToolbarDelegate",
      "desc": "A set of optional methods implemented by toolbar delegates to configure the toolbar and respond to changes."
    },
    {
      "name": "var identifier: NSToolbar.Identifier",
      "desc": "The receiver’s identifier."
    },
    {
      "name": "typealias NSToolbar.Identifier"
    },
    {
      "name": "var displayMode: NSToolbar.DisplayMode",
      "desc": "The toolbar’s display mode."
    },
    {
      "name": "var showsBaselineSeparator: Bool",
      "desc": "A Boolean value that indicates whether the toolbar shows the separator between the toolbar and the main window contents."
    },
    {
      "name": "var allowsUserCustomization: Bool",
      "desc": "A Boolean value that indicates whether users are allowed to modify the toolbar."
    },
    {
      "name": "var allowsExtensionItems: Bool",
      "desc": "A Boolean value that indicates whether the toolbar can add items for Action extensions."
    },
    {
      "name": "var items: [NSToolbarItem]",
      "desc": "An array containing the toolbar’s current items, in order."
    },
    {
      "name": "var visibleItems: [NSToolbarItem]?",
      "desc": "An array containing the toolbar’s currently visible items."
    },
    {
      "name": "var sizeMode: NSToolbar.SizeMode",
      "desc": "The toolbar’s size mode."
    },
    {
      "name": "func insertItem(withItemIdentifier: NSToolbarItem.Identifier, at: Int)",
      "desc": "Inserts the specified item at the specified index."
    },
    {
      "name": "func removeItem(at: Int)",
      "desc": "Removes the specified item."
    },
    {
      "name": "var selectedItemIdentifier: NSToolbarItem.Identifier?",
      "desc": "Returns the identifier of the receiver’s currently selected item, or nil if there is no selection."
    },
    {
      "name": "var centeredItemIdentifier: NSToolbarItem.Identifier?"
    },
    {
      "name": "var isVisible: Bool",
      "desc": "A Boolean value that indicates whether the toolbar is visible."
    },
    {
      "name": "func runCustomizationPalette(Any?)",
      "desc": "Runs the receiver’s customization palette."
    },
    {
      "name": "var customizationPaletteIsRunning: Bool",
      "desc": "A Boolean value that indicates whether the receiver’s customization palette is running (in use)."
    },
    {
      "name": "var autosavesConfiguration: Bool",
      "desc": "A Boolean value that indicates whether the receiver autosaves its configuration."
    },
    {
      "name": "var configuration: [String : Any]",
      "desc": "A dictionary containing configuration information for the toolbar."
    },
    {
      "name": "func setConfiguration([String : Any])"
    },
    {
      "name": "func validateVisibleItems()",
      "desc": "Called on window updates to validate the visible items."
    },
    {
      "name": "enum NSToolbar.DisplayMode",
      "desc": "These constants specify toolbar display modes and are used by the displayMode property."
    },
    {
      "name": "enum NSToolbar.SizeMode",
      "desc": "These constants specify toolbar display modes and are used by the sizeMode property."
    },
    {
      "name": "class let didRemoveItemNotification: NSNotification.Name",
      "desc": "Posted after an item is removed from a toolbar."
    },
    {
      "name": "class let willAddItemNotification: NSNotification.Name",
      "desc": "Posted before a new item is added to the toolbar."
    }
  ],
  "declaration": "@MainActor class NSToolbar : NSObject",
  "inheritsFrom": [
    "NSObject"
  ]
}