{
  "path": "/documentation/appkit/nswindow/stylemask",
  "type": "Structure",
  "name": "NSWindow.StyleMask",
  "desc": "Constants that specify the style of a window, and that you can combine with the C bitwise OR operator.",
  "items": [
    {
      "name": "static var borderless: NSWindow.StyleMask",
      "desc": "The window displays none of the usual peripheral elements. Useful only for display or caching purposes. A window that uses NSWindowStyleMaskBorderless can’t become key or main, unless the value of canBecomeKey or canBecomeMain is true. Note that you can set a window’s or panel’s style mask to NSWindowStyleMaskBorderless in Interface Builder by deselecting Title Bar in the Appearance section of the Attributes inspector."
    },
    {
      "name": "static var titled: NSWindow.StyleMask",
      "desc": "The window displays a title bar."
    },
    {
      "name": "static var closable: NSWindow.StyleMask",
      "desc": "The window displays a close button."
    },
    {
      "name": "static var miniaturizable: NSWindow.StyleMask",
      "desc": "The window displays a minimize button."
    },
    {
      "name": "static var resizable: NSWindow.StyleMask",
      "desc": "The window can be resized by the user."
    },
    {
      "name": "static var unifiedTitleAndToolbar: NSWindow.StyleMask",
      "desc": "This constant has no effect, because all windows that include a toolbar use the unified style."
    },
    {
      "name": "static var fullScreen: NSWindow.StyleMask",
      "desc": "The window can appear full screen. A fullscreen window does not draw its title bar, and may have special handling for its toolbar. (This mask is automatically toggled when toggleFullScreen(_:) is called.)"
    },
    {
      "name": "static var fullSizeContentView: NSWindow.StyleMask",
      "desc": "When set, the window’s contentView consumes the full size of the window. Although you can combine this constant with other window style masks, it is respected only for windows with a title bar. Note that using this mask opts in to layer-backing. Use the contentLayoutRect or the contentLayoutGuide to lay out views underneath the title bar–toolbar area."
    },
    {
      "name": "static var utilityWindow: NSWindow.StyleMask",
      "desc": "The window is a panel or a subclass of NSPanel."
    },
    {
      "name": "static var docModalWindow: NSWindow.StyleMask",
      "desc": "The window is a document-modal panel (or a subclass of NSPanel)."
    },
    {
      "name": "static var nonactivatingPanel: NSWindow.StyleMask",
      "desc": "The window is a panel or a subclass of NSPanel that does not activate the owning app."
    },
    {
      "name": "static var hudWindow: NSWindow.StyleMask",
      "desc": "The window is a HUD panel."
    },
    {
      "name": "init(rawValue: UInt)",
      "desc": "Creates a style mask using the given raw value."
    }
  ],
  "declaration": "struct StyleMask, @unchecked Sendable",
  "conformsTo": [
    "OptionSet",
    "Sendable"
  ]
}