{
  "path": "/documentation/appkit/nsgridview",
  "type": "Class",
  "name": "NSGridView",
  "desc": "A container that aligns views in a flexible grid of rows and columns.",
  "items": [
    {
      "name": "init(numberOfColumns: Int, rows: Int)",
      "desc": "Creates a newly allocated grid view object with the specified number of columns and rows."
    },
    {
      "name": "init(views: [[NSView]])",
      "desc": "Creates a newly allocated grid view object with the specified array of arrays of views."
    },
    {
      "name": "init(frame: NSRect)",
      "desc": "Creates a newly allocated grid view object with the specified frame rectangle."
    },
    {
      "name": "init?(coder: NSCoder)",
      "desc": "Creates a newly allocated grid view object from the coder."
    },
    {
      "name": "var numberOfRows: Int",
      "desc": "The number of rows in the grid view."
    },
    {
      "name": "var numberOfColumns: Int",
      "desc": "The number of columns in the grid view."
    },
    {
      "name": "func index(of: NSGridColumn) -> Int",
      "desc": "Returns the index of the specified grid column."
    },
    {
      "name": "func row(at: Int) -> NSGridRow",
      "desc": "Returns the grid row object at the specified index."
    },
    {
      "name": "func column(at: Int) -> NSGridColumn",
      "desc": "Returns the grid column object at the specified index."
    },
    {
      "name": "func index(of: NSGridRow) -> Int",
      "desc": "Returns the index of the specified grid row."
    },
    {
      "name": "func addRow(with: [NSView]) -> NSGridRow",
      "desc": "Adds an array of views to a new row."
    },
    {
      "name": "func insertRow(at: Int, with: [NSView]) -> NSGridRow",
      "desc": "Inserts the array of view objects into the grid view at the index."
    },
    {
      "name": "func removeRow(at: Int)",
      "desc": "Removes the row from the grid view at the index."
    },
    {
      "name": "func moveRow(at: Int, to: Int)",
      "desc": "Moves the specified row to the new row location."
    },
    {
      "name": "func addColumn(with: [NSView]) -> NSGridColumn",
      "desc": "Adds a new column containing the array of views."
    },
    {
      "name": "func insertColumn(at: Int, with: [NSView]) -> NSGridColumn",
      "desc": "Inserts the array of view objects at the specified index."
    },
    {
      "name": "func removeColumn(at: Int)",
      "desc": "Removes the column from the grid view at the specified index."
    },
    {
      "name": "func moveColumn(at: Int, to: Int)",
      "desc": "Moves the specified column to a new column location."
    },
    {
      "name": "class let sizedForContent: CGFloat",
      "desc": "The default value for row and column sizes."
    },
    {
      "name": "var columnSpacing: CGFloat",
      "desc": "The column spacing for the grid view."
    },
    {
      "name": "var rowSpacing: CGFloat",
      "desc": "The row spacing for the grid view."
    },
    {
      "name": "var rowAlignment: NSGridRow.Alignment",
      "desc": "The row alignment for the grid view."
    },
    {
      "name": "var xPlacement: NSGridCell.Placement",
      "desc": "The placement of the cell within the grid column."
    },
    {
      "name": "var yPlacement: NSGridCell.Placement",
      "desc": "The placement of the cell within the grid row."
    },
    {
      "name": "func cell(atColumnIndex: Int, rowIndex: Int) -> NSGridCell",
      "desc": "Returns the grid cell object at the specified column and row index."
    },
    {
      "name": "func cell(for: NSView) -> NSGridCell?",
      "desc": "Returns the grid cell object that contains the given view or one of its ancestors."
    },
    {
      "name": "func mergeCells(inHorizontalRange: NSRange, verticalRange: NSRange)",
      "desc": "Expands the cell at the top-leading corner of the horizontal and vertical range to cover the entire area."
    }
  ],
  "declaration": "class NSGridView : NSView",
  "inheritsFrom": [
    "NSView"
  ]
}