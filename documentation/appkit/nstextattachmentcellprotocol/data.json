{
  "path": "/documentation/appkit/nstextattachmentcellprotocol",
  "type": "Protocol",
  "name": "NSTextAttachmentCellProtocol",
  "desc": "A set of methods that declares the interface for objects that draw text attachment icons and handle mouse events on their icons.",
  "items": [
    {
      "name": "var attachment: NSTextAttachment?",
      "desc": "Returns the text attachment object that owns the cell."
    },
    {
      "name": "func draw(withFrame: NSRect, in: NSView?)",
      "desc": "Draws the cell's image in the specified rectangle of the currently focused view."
    },
    {
      "name": "func draw(withFrame: NSRect, in: NSView?, characterIndex: Int)",
      "desc": "Draws the cell's image at the specified index point in the view."
    },
    {
      "name": "func draw(withFrame: NSRect, in: NSView?, characterIndex: Int, layoutManager: NSLayoutManager)",
      "desc": "Draws the cell's image using the specified layout manager."
    },
    {
      "name": "func highlight(Bool, withFrame: NSRect, in: NSView?)",
      "desc": "Draws the receiver’s image with optional highlighting."
    },
    {
      "name": "func cellSize() -> NSSize",
      "desc": "Returns the size of the attachment’s icon."
    },
    {
      "name": "func cellBaselineOffset() -> NSPoint",
      "desc": "Returns the text position where you draw the attachment cell’s image, relative to the current point established in the glyph layout."
    },
    {
      "name": "func cellFrame(for: NSTextContainer, proposedLineFragment: NSRect, glyphPosition: NSPoint, characterIndex: Int) -> NSRect",
      "desc": "Returns the frame of the cell to draw at the specified position in a text container."
    },
    {
      "name": "func wantsToTrackMouse() -> Bool",
      "desc": "Returns a Boolean value that indicates whether the attachment handles mouse events occurring over its image."
    },
    {
      "name": "func wantsToTrackMouse(for: NSEvent, in: NSRect, of: NSView?, atCharacterIndex: Int) -> Bool",
      "desc": "Allows an attachment to specify the events for which it tracks the mouse."
    },
    {
      "name": "func trackMouse(with: NSEvent, in: NSRect, of: NSView?, untilMouseUp: Bool) -> Bool",
      "desc": "Handles a mouse-down event on the cell's image, and optionally waits until a mouse-up event"
    },
    {
      "name": "func trackMouse(with: NSEvent, in: NSRect, of: NSView?, atCharacterIndex: Int, untilMouseUp: Bool) -> Bool",
      "desc": "Handles a mouse-down event on the image at the specified character position."
    }
  ],
  "declaration": "protocol NSTextAttachmentCellProtocol",
  "inheritsFrom": [
    "NSObjectProtocol"
  ]
}