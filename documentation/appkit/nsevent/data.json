{
  "path": "/documentation/appkit/nsevent",
  "type": "Class",
  "name": "NSEvent",
  "desc": "An object that contains information about an input action, such as a mouse click or a key press.",
  "items": [
    {
      "name": "class func keyEvent(with: NSEvent.EventType, location: NSPoint, modifierFlags: NSEvent.ModifierFlags, timestamp: TimeInterval, windowNumber: Int, context: NSGraphicsContext?, characters: String, charactersIgnoringModifiers: String, isARepeat: Bool, keyCode: UInt16) -> NSEvent?",
      "desc": "Returns a new NSEvent object describing a key event."
    },
    {
      "name": "class func mouseEvent(with: NSEvent.EventType, location: NSPoint, modifierFlags: NSEvent.ModifierFlags, timestamp: TimeInterval, windowNumber: Int, context: NSGraphicsContext?, eventNumber: Int, clickCount: Int, pressure: Float) -> NSEvent?",
      "desc": "Returns a new NSEvent object describing a mouse-down, -up, -moved, or -dragged event."
    },
    {
      "name": "class func enterExitEvent(with: NSEvent.EventType, location: NSPoint, modifierFlags: NSEvent.ModifierFlags, timestamp: TimeInterval, windowNumber: Int, context: NSGraphicsContext?, eventNumber: Int, trackingNumber: Int, userData: UnsafeMutableRawPointer?) -> NSEvent?",
      "desc": "Returns a new NSEvent object describing a tracking-rectangle or cursor-update event."
    },
    {
      "name": "class func otherEvent(with: NSEvent.EventType, location: NSPoint, modifierFlags: NSEvent.ModifierFlags, timestamp: TimeInterval, windowNumber: Int, context: NSGraphicsContext?, subtype: Int16, data1: Int, data2: Int) -> NSEvent?",
      "desc": "Returns a new NSEvent object describing a custom event."
    },
    {
      "name": "init?(eventRef: UnsafeRawPointer)",
      "desc": "Creates an event object that is based on a Carbon type of event."
    },
    {
      "name": "init?(cgEvent: CGEvent)",
      "desc": "Creates and returns an event object that is based on a Core Graphics type of event."
    },
    {
      "name": "var type: NSEvent.EventType",
      "desc": "The event’s type."
    },
    {
      "name": "enum NSEvent.EventType",
      "desc": "The types of events handled by responder objects."
    },
    {
      "name": "var subtype: NSEvent.EventSubtype",
      "desc": "The event’s subtype."
    },
    {
      "name": "enum NSEvent.EventSubtype",
      "desc": "Subtypes for various types of events."
    },
    {
      "name": "var modifierFlags: NSEvent.ModifierFlags",
      "desc": "An integer bit field indicating the event’s modifier keys."
    },
    {
      "name": "struct NSEvent.EventTypeMask",
      "desc": "Constants that you use to filter out specific event types from the stream of incoming events."
    },
    {
      "name": "var locationInWindow: NSPoint",
      "desc": "The receiver’s location in the base coordinate system of the associated window."
    },
    {
      "name": "var timestamp: TimeInterval",
      "desc": "The time when the event occurred in seconds since system startup."
    },
    {
      "name": "var window: NSWindow?",
      "desc": "The window object associated with the event."
    },
    {
      "name": "var windowNumber: Int",
      "desc": "The identifier for the window device associated with the event."
    },
    {
      "name": "var eventRef: UnsafeRawPointer?",
      "desc": "An opaque Carbon type associated with this event."
    },
    {
      "name": "var cgEvent: CGEvent?",
      "desc": "The Core Graphics event object corresponding to this event."
    },
    {
      "name": "class var modifierFlags: NSEvent.ModifierFlags",
      "desc": "Returns the currently pressed modifier flags."
    },
    {
      "name": "struct NSEvent.ModifierFlags",
      "desc": "Flags that represent key states in an event object."
    },
    {
      "name": "class var keyRepeatDelay: TimeInterval",
      "desc": "Returns the length of time a key must be held down in order to generate the first key repeat event."
    },
    {
      "name": "class var keyRepeatInterval: TimeInterval",
      "desc": "Returns the length between subsequent key repeat events being posted."
    },
    {
      "name": "var characters: String?",
      "desc": "The characters associated with a key-up or key-down event."
    },
    {
      "name": "var charactersIgnoringModifiers: String?",
      "desc": "The characters generated by a key event as if no modifier key (except for Shift) applies."
    },
    {
      "name": "var isARepeat: Bool",
      "desc": "A Boolean value that indicates whether the key event is a repeat."
    },
    {
      "name": "var keyCode: UInt16",
      "desc": "The virtual key code for the keyboard key associated with a key event."
    },
    {
      "name": "class var pressedMouseButtons: Int",
      "desc": "Returns the indices of the currently depressed mouse buttons."
    },
    {
      "name": "class var doubleClickInterval: TimeInterval",
      "desc": "Returns the time, in seconds, in which a second mouse click must occur in order to be considered a double click."
    },
    {
      "name": "class var mouseLocation: NSPoint",
      "desc": "Reports the current mouse position in screen coordinates."
    },
    {
      "name": "var buttonNumber: Int",
      "desc": "The button number for a mouse event."
    },
    {
      "name": "var clickCount: Int",
      "desc": "The number of mouse clicks associated with a mouse-down or mouse-up event."
    },
    {
      "name": "var associatedEventsMask: NSEvent.EventTypeMask",
      "desc": "The associated events mask of a mouse event."
    },
    {
      "name": "var eventNumber: Int",
      "desc": "The counter value of the latest mouse or tracking-rectangle event object; every system-generated mouse and tracking-rectangle event increments this counter."
    },
    {
      "name": "var trackingNumber: Int",
      "desc": "The identifier of a mouse-tracking event."
    },
    {
      "name": "var trackingArea: NSTrackingArea?",
      "desc": "The NSTrackingArea object for the event."
    },
    {
      "name": "var userData: UnsafeMutableRawPointer?",
      "desc": "The data associated with a mouse-tracking event."
    },
    {
      "name": "var data1: Int",
      "desc": "Additional data associated with this event."
    },
    {
      "name": "var data2: Int",
      "desc": "Additional data associated with this event."
    },
    {
      "name": "var deltaX: CGFloat",
      "desc": "The x-coordinate change for mouse-move, mouse-drag, and swipe events."
    },
    {
      "name": "var deltaY: CGFloat",
      "desc": "The y-coordinate change for mouse-move, mouse-drag, and swipe events."
    },
    {
      "name": "var deltaZ: CGFloat",
      "desc": "The z-coordinate change for a scroll wheel, mouse-move, or mouse-drag event."
    },
    {
      "name": "var pressure: Float",
      "desc": "A value from 0.0 through 1.0 indicating the degree of pressure applied to an appropriate input device."
    },
    {
      "name": "var stage: Int",
      "desc": "A value of 0, 1, or 2, indicating the stage of a gesture event of type NSEvent.EventType.pressure."
    },
    {
      "name": "var stageTransition: CGFloat",
      "desc": "The transition value for the stage of a pressure gesture event of type NSEvent.EventType.pressure."
    },
    {
      "name": "var pressureBehavior: NSEvent.PressureBehavior",
      "desc": "The pressure behavior and progression for an event of type NSEvent.EventType.pressure."
    },
    {
      "name": "enum NSEvent.PressureBehavior",
      "desc": "These constants describe the behavior and progression of a pressure gesture."
    },
    {
      "name": "var capabilityMask: Int",
      "desc": "A mask whose set bits indicate the capabilities of the tablet device that generated this event."
    },
    {
      "name": "var deviceID: Int",
      "desc": "A special identifier that is used to match tablet-pointer and tablet-proximity events."
    },
    {
      "name": "var isEnteringProximity: Bool",
      "desc": "A Boolean value that indicates whether a pointing device is entering or leaving the proximity of its tablet."
    },
    {
      "name": "var pointingDeviceID: Int",
      "desc": "The index of the pointing device currently in proximity with the tablet."
    },
    {
      "name": "var pointingDeviceSerialNumber: Int",
      "desc": "The vendor-assigned serial number of a pointing device."
    },
    {
      "name": "var pointingDeviceType: NSEvent.PointingDeviceType",
      "desc": "The kind of pointing device associated with this event."
    },
    {
      "name": "enum NSEvent.PointingDeviceType",
      "desc": "The pointing-device types for tablet-proximity events or mouse events with a proximity event subtype."
    },
    {
      "name": "var systemTabletID: Int",
      "desc": "The index of the tablet device connected to the system."
    },
    {
      "name": "var tabletID: Int",
      "desc": "The USB model identifier of the tablet device associated with this event."
    },
    {
      "name": "var uniqueID: UInt64",
      "desc": "The unique identifier of the pointing device that generated this event."
    },
    {
      "name": "var vendorID: Int",
      "desc": "The vendor identifier of the tablet associated with the event."
    },
    {
      "name": "var vendorPointingDeviceType: Int",
      "desc": "A coded bit field whose set bits indicate the type of pointing device (within a vendor selection) associated with the event."
    },
    {
      "name": "var absoluteX: Int",
      "desc": "The absolute x coordinate of a pointing device on its tablet at full tablet resolution."
    },
    {
      "name": "var absoluteY: Int",
      "desc": "The absolute y coordinate of a pointing device on its tablet at full tablet resolution."
    },
    {
      "name": "var absoluteZ: Int",
      "desc": "The absolute z coordinate of pointing device on its tablet at full tablet resolution."
    },
    {
      "name": "var buttonMask: NSEvent.ButtonMask",
      "desc": "A bit mask identifying the buttons pressed for a tablet event."
    },
    {
      "name": "struct NSEvent.ButtonMask"
    },
    {
      "name": "var rotation: Float",
      "desc": "The rotation in degrees of the tablet pointing device associated with this event."
    },
    {
      "name": "var tangentialPressure: Float",
      "desc": "The tangential pressure on the device that generated this event."
    },
    {
      "name": "var tilt: NSPoint",
      "desc": "The scaled tilt values of the pointing device that generated this event."
    },
    {
      "name": "var vendorDefined: Any",
      "desc": "An array of three vendor-defined NSNumber objects associated with a pointing-type event."
    },
    {
      "name": "class func startPeriodicEvents(afterDelay: TimeInterval, withPeriod: TimeInterval)",
      "desc": "Begins generating periodic events for the current thread."
    },
    {
      "name": "class func stopPeriodicEvents()",
      "desc": "Stops generating periodic events for the current thread and discards any periodic events remaining in the queue."
    },
    {
      "name": "var magnification: CGFloat",
      "desc": "The change in magnification."
    },
    {
      "name": "func touches(matching: NSTouch.Phase, in: NSView?) -> Set<NSTouch>",
      "desc": "Returns all the NSTouch objects associated with a specific phase."
    },
    {
      "name": "func allTouches() -> Set<NSTouch>"
    },
    {
      "name": "func touches(for: NSView) -> Set<NSTouch>"
    },
    {
      "name": "func coalescedTouches(for: NSTouch) -> [NSTouch]"
    },
    {
      "name": "class var isMouseCoalescingEnabled: Bool"
    },
    {
      "name": "class func addGlobalMonitorForEvents(matching: NSEvent.EventTypeMask, handler: (NSEvent) -> Void) -> Any?",
      "desc": "Installs an event monitor that receives copies of events posted to other applications."
    },
    {
      "name": "class func addLocalMonitorForEvents(matching: NSEvent.EventTypeMask, handler: (NSEvent) -> NSEvent?) -> Any?",
      "desc": "Installs an event monitor that receives copies of events posted to this application before they are dispatched."
    },
    {
      "name": "class func removeMonitor(Any)",
      "desc": "Remove the specified event monitor."
    },
    {
      "name": "var hasPreciseScrollingDeltas: Bool",
      "desc": "A Boolean value that indicates whether precise scrolling deltas are available."
    },
    {
      "name": "var scrollingDeltaX: CGFloat",
      "desc": "The scroll wheel’s horizontal delta."
    },
    {
      "name": "var scrollingDeltaY: CGFloat",
      "desc": "The scroll wheel’s vertical delta."
    },
    {
      "name": "var momentumPhase: NSEvent.Phase",
      "desc": "The momentum phase for a scroll or flick gesture."
    },
    {
      "name": "var phase: NSEvent.Phase",
      "desc": "The phase of a gesture event, such as a magnify, scroll, or pressure change."
    },
    {
      "name": "struct NSEvent.Phase",
      "desc": "Constants that represent the possible phases during an event phase."
    },
    {
      "name": "class var isSwipeTrackingFromScrollEventsEnabled: Bool"
    },
    {
      "name": "func trackSwipeEvent(options: NSEvent.SwipeTrackingOptions, dampenAmountThresholdMin: CGFloat, max: CGFloat, usingHandler: (CGFloat, NSEvent.Phase, Bool, UnsafeMutablePointer<ObjCBool>) -> Void)",
      "desc": "Allows tracking and user interface feedback of scroll wheel events."
    },
    {
      "name": "struct NSEvent.SwipeTrackingOptions",
      "desc": "Constants that specify swipe-tracking options."
    },
    {
      "name": "var isDirectionInvertedFromDevice: Bool",
      "desc": "A Boolean value that indicates whether the user has changed the device inversion."
    },
    {
      "name": "func location(in: SKNode) -> CGPoint",
      "desc": "Returns the location of the receiver in the coordinate system of the given node."
    },
    {
      "name": "var specialKey: NSEvent.SpecialKey?"
    },
    {
      "name": "class let foreverDuration: TimeInterval",
      "desc": "The longest time duration possible."
    },
    {
      "name": "func characters(byApplyingModifiers: NSEvent.ModifierFlags) -> String?"
    },
    {
      "name": "struct NSEvent.SpecialKey"
    },
    {
      "name": "enum NSEvent.GestureAxis",
      "desc": "The gesture tracking axis."
    }
  ],
  "declaration": "class NSEvent : NSObject",
  "inheritsFrom": [
    "NSObject"
  ],
  "conformsTo": [
    "NSCoding",
    "NSCopying"
  ]
}