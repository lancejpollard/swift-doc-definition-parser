{
  "path": "/documentation/appkit/nsevent/specialkey",
  "type": "Structure",
  "name": "NSEvent.SpecialKey",
  "desc": "No overview available.",
  "items": [
    {
      "name": "typealias NSEvent.SpecialKey.RawValue"
    },
    {
      "name": "init(rawValue: Int)"
    },
    {
      "name": "var hashValue: Int"
    },
    {
      "name": "let rawValue: Int"
    },
    {
      "name": "var unicodeScalar: Unicode.Scalar"
    },
    {
      "name": "static let backTab: NSEvent.SpecialKey"
    },
    {
      "name": "static let backspace: NSEvent.SpecialKey"
    },
    {
      "name": "static let begin: NSEvent.SpecialKey"
    },
    {
      "name": "static let `break`: NSEvent.SpecialKey"
    },
    {
      "name": "static let carriageReturn: NSEvent.SpecialKey"
    },
    {
      "name": "static let clearDisplay: NSEvent.SpecialKey"
    },
    {
      "name": "static let clearLine: NSEvent.SpecialKey"
    },
    {
      "name": "static let delete: NSEvent.SpecialKey"
    },
    {
      "name": "static let deleteCharacter: NSEvent.SpecialKey"
    },
    {
      "name": "static let deleteForward: NSEvent.SpecialKey"
    },
    {
      "name": "static let deleteLine: NSEvent.SpecialKey"
    },
    {
      "name": "static let downArrow: NSEvent.SpecialKey"
    },
    {
      "name": "static let end: NSEvent.SpecialKey"
    },
    {
      "name": "static let enter: NSEvent.SpecialKey"
    },
    {
      "name": "static let execute: NSEvent.SpecialKey"
    },
    {
      "name": "static let f1: NSEvent.SpecialKey"
    },
    {
      "name": "static let f10: NSEvent.SpecialKey"
    },
    {
      "name": "static let f11: NSEvent.SpecialKey"
    },
    {
      "name": "static let f12: NSEvent.SpecialKey"
    },
    {
      "name": "static let f13: NSEvent.SpecialKey"
    },
    {
      "name": "static let f14: NSEvent.SpecialKey"
    },
    {
      "name": "static let f15: NSEvent.SpecialKey"
    },
    {
      "name": "static let f16: NSEvent.SpecialKey"
    },
    {
      "name": "static let f17: NSEvent.SpecialKey"
    },
    {
      "name": "static let f18: NSEvent.SpecialKey"
    },
    {
      "name": "static let f19: NSEvent.SpecialKey"
    },
    {
      "name": "static let f2: NSEvent.SpecialKey"
    },
    {
      "name": "static let f20: NSEvent.SpecialKey"
    },
    {
      "name": "static let f21: NSEvent.SpecialKey"
    },
    {
      "name": "static let f22: NSEvent.SpecialKey"
    },
    {
      "name": "static let f23: NSEvent.SpecialKey"
    },
    {
      "name": "static let f24: NSEvent.SpecialKey"
    },
    {
      "name": "static let f25: NSEvent.SpecialKey"
    },
    {
      "name": "static let f26: NSEvent.SpecialKey"
    },
    {
      "name": "static let f27: NSEvent.SpecialKey"
    },
    {
      "name": "static let f28: NSEvent.SpecialKey"
    },
    {
      "name": "static let f29: NSEvent.SpecialKey"
    },
    {
      "name": "static let f3: NSEvent.SpecialKey"
    },
    {
      "name": "static let f30: NSEvent.SpecialKey"
    },
    {
      "name": "static let f31: NSEvent.SpecialKey"
    },
    {
      "name": "static let f32: NSEvent.SpecialKey"
    },
    {
      "name": "static let f33: NSEvent.SpecialKey"
    },
    {
      "name": "static let f34: NSEvent.SpecialKey"
    },
    {
      "name": "static let f35: NSEvent.SpecialKey"
    },
    {
      "name": "static let f4: NSEvent.SpecialKey"
    },
    {
      "name": "static let f5: NSEvent.SpecialKey"
    },
    {
      "name": "static let f6: NSEvent.SpecialKey"
    },
    {
      "name": "static let f7: NSEvent.SpecialKey"
    },
    {
      "name": "static let f8: NSEvent.SpecialKey"
    },
    {
      "name": "static let f9: NSEvent.SpecialKey"
    },
    {
      "name": "static let find: NSEvent.SpecialKey"
    },
    {
      "name": "static let formFeed: NSEvent.SpecialKey"
    },
    {
      "name": "static let help: NSEvent.SpecialKey"
    },
    {
      "name": "static let home: NSEvent.SpecialKey"
    },
    {
      "name": "static let insert: NSEvent.SpecialKey"
    },
    {
      "name": "static let insertCharacter: NSEvent.SpecialKey"
    },
    {
      "name": "static let insertLine: NSEvent.SpecialKey"
    },
    {
      "name": "static let leftArrow: NSEvent.SpecialKey"
    },
    {
      "name": "static let lineSeparator: NSEvent.SpecialKey"
    },
    {
      "name": "static let menu: NSEvent.SpecialKey"
    },
    {
      "name": "static let modeSwitch: NSEvent.SpecialKey"
    },
    {
      "name": "static let newline: NSEvent.SpecialKey"
    },
    {
      "name": "static let next: NSEvent.SpecialKey"
    },
    {
      "name": "static let pageDown: NSEvent.SpecialKey"
    },
    {
      "name": "static let pageUp: NSEvent.SpecialKey"
    },
    {
      "name": "static let paragraphSeparator: NSEvent.SpecialKey"
    },
    {
      "name": "static let pause: NSEvent.SpecialKey"
    },
    {
      "name": "static let prev: NSEvent.SpecialKey"
    },
    {
      "name": "static let print: NSEvent.SpecialKey"
    },
    {
      "name": "static let printScreen: NSEvent.SpecialKey"
    },
    {
      "name": "static let redo: NSEvent.SpecialKey"
    },
    {
      "name": "static let reset: NSEvent.SpecialKey"
    },
    {
      "name": "static let rightArrow: NSEvent.SpecialKey"
    },
    {
      "name": "static let scrollLock: NSEvent.SpecialKey"
    },
    {
      "name": "static let select: NSEvent.SpecialKey"
    },
    {
      "name": "static let stop: NSEvent.SpecialKey"
    },
    {
      "name": "static let sysReq: NSEvent.SpecialKey"
    },
    {
      "name": "static let system: NSEvent.SpecialKey"
    },
    {
      "name": "static let tab: NSEvent.SpecialKey"
    },
    {
      "name": "static let undo: NSEvent.SpecialKey"
    },
    {
      "name": "static let upArrow: NSEvent.SpecialKey"
    },
    {
      "name": "static let user: NSEvent.SpecialKey"
    },
    {
      "name": "func hash(into: inout Hasher)"
    },
    {
      "name": "static func != (NSEvent.SpecialKey, NSEvent.SpecialKey) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are not equal."
    }
  ],
  "declaration": "struct SpecialKey",
  "conformsTo": [
    "Equatable",
    "Hashable",
    "RawRepresentable"
  ]
}