{
  "path": "/documentation/appkit/nsbuttoncell",
  "type": "Class",
  "name": "NSButtonCell",
  "desc": "An object that defines the user interface of a button or other clickable region of a view.",
  "items": [
    {
      "name": "var alternateTitle: String",
      "desc": "The string displayed by the button when it’s in its alternate state."
    },
    {
      "name": "var attributedAlternateTitle: NSAttributedString",
      "desc": "The title displayed by the button when it’s in its alternate state, as an attributed string."
    },
    {
      "name": "var attributedTitle: NSAttributedString",
      "desc": "The title displayed by the button when it’s in its normal state as an attributed string."
    },
    {
      "name": "var title: String!",
      "desc": "The title displayed on the button when it’s in its normal state."
    },
    {
      "name": "var alternateImage: NSImage?",
      "desc": "The image the button displays in its alternate state."
    },
    {
      "name": "var imagePosition: NSControl.ImagePosition",
      "desc": "The position of the button’s image relative to its title."
    },
    {
      "name": "var imageScaling: NSImageScaling",
      "desc": "The scale factor for the button’s image."
    },
    {
      "name": "func getPeriodicDelay(UnsafeMutablePointer<Float>, interval: UnsafeMutablePointer<Float>)",
      "desc": "Returns by reference the delay and interval periods for a continuous button."
    },
    {
      "name": "func setPeriodicDelay(Float, interval: Float)",
      "desc": "Sets the message delay and interval for the button."
    },
    {
      "name": "var keyEquivalent: String",
      "desc": "The button’s key-equivalent character."
    },
    {
      "name": "var keyEquivalentModifierMask: NSEvent.ModifierFlags",
      "desc": "The mask that identifies the modifier keys for the button's key equivalent."
    },
    {
      "name": "var backgroundColor: NSColor?",
      "desc": "The background color of the button."
    },
    {
      "name": "var bezelStyle: NSButton.BezelStyle",
      "desc": "The appearance of the button’s border, if it has one."
    },
    {
      "name": "var imageDimsWhenDisabled: Bool",
      "desc": "A Boolean value that indicates if the button’s image and text appear “dim” when the button is disabled."
    },
    {
      "name": "var isOpaque: Bool",
      "desc": "A Boolean value that indicates if the button is opaque."
    },
    {
      "name": "var isTransparent: Bool",
      "desc": "A Boolean value that indicates if the button is transparent."
    },
    {
      "name": "var showsBorderOnlyWhileMouseInside: Bool",
      "desc": "A Boolean value that indicates if the button displays its border only when the pointer is over it."
    },
    {
      "name": "var highlightsBy: NSCell.StyleMask",
      "desc": "A set of flags that indicate how the button highlights when it receives a mouse-down event (that is, when the button is pressed)."
    },
    {
      "name": "func setButtonType(NSButton.ButtonType)",
      "desc": "Sets how the button highlights while pressed and how it shows its state."
    },
    {
      "name": "var showsStateBy: NSCell.StyleMask",
      "desc": "The flags that indicate how the button cell shows its alternate state."
    },
    {
      "name": "var sound: NSSound?",
      "desc": "The sound that’s played when the user presses the button (that is during a mouse-down event)."
    },
    {
      "name": "func mouseEntered(with: NSEvent)",
      "desc": "Draws the button’s border."
    },
    {
      "name": "func mouseExited(with: NSEvent)",
      "desc": "Erases the button’s border."
    },
    {
      "name": "func performClick(Any?)",
      "desc": "Simulates the user clicking the button with the pointer."
    },
    {
      "name": "func drawBezel(withFrame: NSRect, in: NSView)",
      "desc": "Draws the border of the button using the current bezel style."
    },
    {
      "name": "func drawImage(NSImage, withFrame: NSRect, in: NSView)",
      "desc": "Draws the image associated with the button’s current state."
    },
    {
      "name": "func drawTitle(NSAttributedString, withFrame: NSRect, in: NSView) -> NSRect",
      "desc": "Draws the button’s title centered vertically in a specified rectangle."
    },
    {
      "name": "enum NSButton.BezelStyle",
      "desc": "Bezel styles used by the bezelStyle property."
    },
    {
      "name": "enum NSButton.ButtonType",
      "desc": "Button types that you can specify using setButtonType(_:)."
    },
    {
      "name": "init(coder: NSCoder)"
    },
    {
      "name": "init(imageCell: NSImage?)"
    },
    {
      "name": "init(textCell: String)"
    }
  ],
  "declaration": "class NSButtonCell : NSActionCell",
  "inheritsFrom": [
    "NSActionCell"
  ]
}