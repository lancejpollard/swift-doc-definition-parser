{
  "path": "/documentation/appkit/nsmatrix",
  "type": "Class",
  "name": "NSMatrix",
  "desc": "A legacy interface for grouping radio buttons or other types of cells together.",
  "items": [
    {
      "name": "init(frame: NSRect)",
      "desc": "Initializes a newly allocated matrix with the specified frame."
    },
    {
      "name": "init(frame: NSRect, mode: NSMatrix.Mode, cellClass: AnyClass?, numberOfRows: Int, numberOfColumns: Int)",
      "desc": "Initializes and returns a newly allocated matrix of the specified size using cells of the given class."
    },
    {
      "name": "init(frame: NSRect, mode: NSMatrix.Mode, prototype: NSCell, numberOfRows: Int, numberOfColumns: Int)",
      "desc": "Initializes and returns a newly allocated matrix of the specified size using the given cell as a prototype."
    },
    {
      "name": "var mode: NSMatrix.Mode",
      "desc": "The selection mode of the receiver."
    },
    {
      "name": "var allowsEmptySelection: Bool",
      "desc": "A Boolean that indicates whether a radio-mode matrix supports an empty selection."
    },
    {
      "name": "var isSelectionByRect: Bool",
      "desc": "A Boolean that indicates whether the user can select a rectangle of cells in the receiver by dragging the cursor."
    },
    {
      "name": "var cellClass: AnyClass",
      "desc": "The subclass of NSCell that the matrix uses when creating new (empty) cells."
    },
    {
      "name": "var prototype: NSCell?",
      "desc": "The prototype cell that’s copied whenever the matrix creates a new cell."
    },
    {
      "name": "func addColumn()",
      "desc": "Adds a new column of cells to the right of the last column."
    },
    {
      "name": "func addColumn(with: [NSCell])",
      "desc": "Adds a new column of cells to the right of the last column, using the given cells."
    },
    {
      "name": "func addRow()",
      "desc": "Adds a new row of cells below the last row."
    },
    {
      "name": "func addRow(with: [NSCell])",
      "desc": "Adds a new row of cells below the last row, using the specified cells."
    },
    {
      "name": "func cellFrame(atRow: Int, column: Int) -> NSRect",
      "desc": "Returns the frame rectangle of the cell that would be drawn at the specified location."
    },
    {
      "name": "var cellSize: NSSize",
      "desc": "The size of each cell in the matrix."
    },
    {
      "name": "func getNumberOfRows(UnsafeMutablePointer<Int>?, columns: UnsafeMutablePointer<Int>?)",
      "desc": "Obtains the number of rows and columns in the receiver."
    },
    {
      "name": "func insertColumn(Int)",
      "desc": "Inserts a new column of cells at the specified location. ."
    },
    {
      "name": "func insertColumn(Int, with: [NSCell]?)",
      "desc": "Inserts a new column of cells before the specified column, using the given cells."
    },
    {
      "name": "func insertRow(Int)",
      "desc": "Inserts a new row of cells before the specified row."
    },
    {
      "name": "func insertRow(Int, with: [NSCell]?)",
      "desc": "Inserts a new row of cells before the specified row, using the given cells."
    },
    {
      "name": "var intercellSpacing: NSSize",
      "desc": "The vertical and horizontal spacing between cells in the matrix."
    },
    {
      "name": "func makeCell(atRow: Int, column: Int) -> NSCell",
      "desc": "Creates a new cell at the location specified by the given row and column in the receiver."
    },
    {
      "name": "var numberOfColumns: Int",
      "desc": "The number of columns in the matrix."
    },
    {
      "name": "var numberOfRows: Int",
      "desc": "The number of rows in the matrix."
    },
    {
      "name": "func putCell(NSCell, atRow: Int, column: Int)",
      "desc": "Replaces the cell at the specified row and column with the new cell."
    },
    {
      "name": "func removeColumn(Int)",
      "desc": "Removes the specified column at from the receiver."
    },
    {
      "name": "func removeRow(Int)",
      "desc": "Removes the specified row from the receiver."
    },
    {
      "name": "func renewRows(Int, columns: Int)",
      "desc": "Changes the number of rows and columns in the receiver."
    },
    {
      "name": "func sort(using: (Any, Any, UnsafeMutableRawPointer?) -> Int, context: UnsafeMutableRawPointer?)",
      "desc": "Sorts the receiver’s cells in ascending order as defined by the specified comparison function."
    },
    {
      "name": "func sort(using: Selector)",
      "desc": "Sorts the receiver’s cells in ascending order as defined by the comparison method."
    },
    {
      "name": "var autorecalculatesCellSize: Bool",
      "desc": "A Boolean that indicates whether the matrix auto-recalculates its cell size."
    },
    {
      "name": "func getRow(UnsafeMutablePointer<Int>, column: UnsafeMutablePointer<Int>, for: NSPoint) -> Bool",
      "desc": "Indicates whether the specified point lies within one of the cells of the matrix and returns the location of the cell within which the point lies."
    },
    {
      "name": "func getRow(UnsafeMutablePointer<Int>, column: UnsafeMutablePointer<Int>, of: NSCell) -> Bool",
      "desc": "Searches the receiver for the specified cell and returns the row and column of the cell"
    },
    {
      "name": "func setState(Int, atRow: Int, column: Int)",
      "desc": "Sets the state of the cell at specified location."
    },
    {
      "name": "func setToolTip(String?, for: NSCell)",
      "desc": "Sets the tooltip for the cell."
    },
    {
      "name": "func toolTip(for: NSCell) -> String?",
      "desc": "Returns the tooltip for the specified cell."
    },
    {
      "name": "func selectCell(atRow: Int, column: Int)",
      "desc": "Selects the cell at the specified row and column within the receiver."
    },
    {
      "name": "func selectCell(withTag: Int) -> Bool",
      "desc": "Selects the last cell with the given tag."
    },
    {
      "name": "func selectAll(Any?)",
      "desc": "Selects and highlights all cells in the receiver."
    },
    {
      "name": "var keyCell: NSCell?",
      "desc": "The cell that will be clicked when the user presses the Space bar."
    },
    {
      "name": "func setSelectionFrom(Int, to: Int, anchor: Int, highlight: Bool)",
      "desc": "Programmatically selects a range of cells."
    },
    {
      "name": "func deselectAllCells()",
      "desc": "Deselects all cells in the receiver and, if necessary, redisplays the receiver."
    },
    {
      "name": "func deselectSelectedCell()",
      "desc": "Deselects the selected cell or cells."
    },
    {
      "name": "var selectedCells: [NSCell]",
      "desc": "An array containing all of the matrix’s highlighted cells plus its selected cell."
    },
    {
      "name": "var selectedColumn: Int",
      "desc": "The column number of the selected cell."
    },
    {
      "name": "var selectedRow: Int",
      "desc": "The row number of the selected cell."
    },
    {
      "name": "func cell(atRow: Int, column: Int) -> NSCell?",
      "desc": "Returns the cell at the specified row and column."
    },
    {
      "name": "func cell(withTag: Int) -> NSCell?",
      "desc": "Searches the receiver and returns the last cell matching the specified tag."
    },
    {
      "name": "var cells: [NSCell]",
      "desc": "An array containing the cells of the matrix."
    },
    {
      "name": "var backgroundColor: NSColor",
      "desc": "The background color of the matrix (the space between the cells)."
    },
    {
      "name": "var cellBackgroundColor: NSColor?",
      "desc": "The background color of the matrix’s cells."
    },
    {
      "name": "var drawsBackground: Bool",
      "desc": "A Boolean that indicates whether the matrix draws its background."
    },
    {
      "name": "var drawsCellBackground: Bool",
      "desc": "A Boolean that indicates whether the matrix draws the background within each of its cells."
    },
    {
      "name": "func selectText(Any?)",
      "desc": "Selects text in the currently selected cell or in the key cell."
    },
    {
      "name": "func selectText(atRow: Int, column: Int) -> NSCell?",
      "desc": "Selects the text in the cell at the specified location and returns the cell."
    },
    {
      "name": "func textShouldBeginEditing(NSText) -> Bool",
      "desc": "Requests permission to begin editing text."
    },
    {
      "name": "func textDidBeginEditing(Notification)",
      "desc": "Invoked when there’s a change in the text after the receiver gains first responder status."
    },
    {
      "name": "func textDidChange(Notification)",
      "desc": "Invoked when a key-down event or paste operation occurs that changes the receiver’s contents."
    },
    {
      "name": "func textShouldEndEditing(NSText) -> Bool",
      "desc": "Requests permission to end editing."
    },
    {
      "name": "func textDidEndEditing(Notification)",
      "desc": "Invoked when text editing ends."
    },
    {
      "name": "var tabKeyTraversesCells: Bool",
      "desc": "A Boolean that indicates whether pressing the Tab key advances the key cell to the next selectable cell."
    },
    {
      "name": "var delegate: NSMatrixDelegate?",
      "desc": "The delegate for messages from the field editor."
    },
    {
      "name": "protocol NSMatrixDelegate",
      "desc": "The NSMatrixDelegate protocol defines the optional methods implemented by delegates of NSMatrix objects."
    },
    {
      "name": "var autosizesCells: Bool",
      "desc": "A Boolean that indicates whether the cell sizes change when the receiver is resized."
    },
    {
      "name": "func setValidateSize(Bool)",
      "desc": "Specifies whether the receiver's size information is validated."
    },
    {
      "name": "func sizeToCells()",
      "desc": "Changes the width and the height of the receiver’s frame so it exactly contains the cells."
    },
    {
      "name": "var isAutoscroll: Bool",
      "desc": "A Boolean that indicates whether the receiver is automatically scrolled."
    },
    {
      "name": "func setScrollable(Bool)",
      "desc": "Specifies whether the cells in the matrix are scrollable."
    },
    {
      "name": "func scrollCellToVisible(atRow: Int, column: Int)",
      "desc": "Scrolls the receiver so the specified cell is visible."
    },
    {
      "name": "func drawCell(atRow: Int, column: Int)",
      "desc": "Displays the cell at the specified row and column."
    },
    {
      "name": "func highlightCell(Bool, atRow: Int, column: Int)",
      "desc": "Highlights or unhighlights the cell at the specified row and column location."
    },
    {
      "name": "func sendAction() -> Bool",
      "desc": "If the selected cell has both an action and a target, sends its action to its target."
    },
    {
      "name": "func sendAction(Selector, to: Any, forAllCells: Bool)",
      "desc": "Iterates through the cells in the receiver, sending the specified selector to an object for each cell."
    },
    {
      "name": "var doubleAction: Selector?",
      "desc": "The action sent to the target of the receiver when the user double-clicks a cell."
    },
    {
      "name": "func sendDoubleAction()",
      "desc": "Sends the double-click action message to the target of the receiver."
    },
    {
      "name": "func acceptsFirstMouse(for: NSEvent?) -> Bool",
      "desc": "Returns a Boolean value indicating whether the receiver accepts the first mouse."
    },
    {
      "name": "func mouseDown(with: NSEvent)",
      "desc": "Responds to a mouse-down event."
    },
    {
      "name": "var mouseDownFlags: Int",
      "desc": "The flags in effect at the mouse-down event that started the current tracking session."
    },
    {
      "name": "func performKeyEquivalent(with: NSEvent) -> Bool",
      "desc": "Looks for a cell that has the given key equivalent and, if found, makes that cell respond as if clicked."
    },
    {
      "name": "func resetCursorRects()",
      "desc": "Resets cursor rectangles so the cursor becomes an I-beam over text cells."
    },
    {
      "name": "enum NSMatrix.Mode",
      "desc": "These constants determine how NSCell objects behave when an NSMatrix object is tracking the mouse."
    },
    {
      "name": "func selectedCell() -> NSCell?"
    }
  ],
  "declaration": "class NSMatrix : NSControl",
  "inheritsFrom": [
    "NSControl"
  ],
  "conformsTo": [
    "NSUserInterfaceValidations",
    "NSViewToolTipOwner"
  ]
}