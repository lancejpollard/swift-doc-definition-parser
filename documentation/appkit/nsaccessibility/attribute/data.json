{
  "path": "/documentation/appkit/nsaccessibility/attribute",
  "type": "Structure",
  "name": "NSAccessibility.Attribute",
  "desc": "Constants that describe attributes.",
  "items": [
    {
      "name": "static let activationPoint: NSAccessibility.Attribute"
    },
    {
      "name": "static let allowedValues: NSAccessibility.Attribute",
      "desc": "The allowed values in the slider (NSArray)."
    },
    {
      "name": "static let alternateUIVisible: NSAccessibility.Attribute"
    },
    {
      "name": "static let cancelButton: NSAccessibility.Attribute",
      "desc": "The element that represents the cancel button (id)."
    },
    {
      "name": "static let children: NSAccessibility.Attribute",
      "desc": "The element's child elements in the accessibility hierarchy (NSArray)."
    },
    {
      "name": "static let clearButton: NSAccessibility.Attribute",
      "desc": "The element that represents the clear button in a search field (id)."
    },
    {
      "name": "static let closeButton: NSAccessibility.Attribute",
      "desc": "The element representing the close button (id)."
    },
    {
      "name": "static let columnCount: NSAccessibility.Attribute",
      "desc": "The number of columns in the grid (NSNumber as intValue)."
    },
    {
      "name": "static let columnHeaderUIElements: NSAccessibility.Attribute",
      "desc": "The table's column headers (NSArray)."
    },
    {
      "name": "static let columnIndexRange: NSAccessibility.Attribute",
      "desc": "The column index range of the cell (an NSValue instance that contains the row's starting index and index span in the table)."
    },
    {
      "name": "static let columnTitles: NSAccessibility.Attribute",
      "desc": "The elements that represent the column titles (NSArray)."
    },
    {
      "name": "static let columns: NSAccessibility.Attribute",
      "desc": "The table's columns (NSArray)."
    },
    {
      "name": "static let containsProtectedContent: NSAccessibility.Attribute",
      "desc": "A flag that indicates whether the object contains protected content (true), or not (false) (NSNumber as boolValue)."
    },
    {
      "name": "static let contents: NSAccessibility.Attribute",
      "desc": "Elements that represent the contents in the current element, such as the document view of a scroll view (NSArray)."
    },
    {
      "name": "static let criticalValue: NSAccessibility.Attribute",
      "desc": "The critical value in a level indicator (typically, NSNumber)."
    },
    {
      "name": "static let decrementButton: NSAccessibility.Attribute",
      "desc": "The element that represents a stepper's decrement button (id)."
    },
    {
      "name": "static let defaultButton: NSAccessibility.Attribute",
      "desc": "The element that represents the default button (id)."
    },
    {
      "name": "static let description: NSAccessibility.Attribute",
      "desc": "The purpose of the element, not including the role (NSString)."
    },
    {
      "name": "static let disclosedByRow: NSAccessibility.Attribute",
      "desc": "The row disclosing this row (id)."
    },
    {
      "name": "static let disclosedRows: NSAccessibility.Attribute",
      "desc": "The rows disclosed by this row (NSArray)."
    },
    {
      "name": "static let disclosing: NSAccessibility.Attribute",
      "desc": "A flag that indicates whether a row is disclosing other rows (NSNumber)."
    },
    {
      "name": "static let disclosureLevel: NSAccessibility.Attribute",
      "desc": "The indentation level of this row (NSNumber)."
    },
    {
      "name": "static let document: NSAccessibility.Attribute",
      "desc": "The URL for the file represented by the element (NSString)."
    },
    {
      "name": "static let edited: NSAccessibility.Attribute",
      "desc": "A flag that indicates whether the element has been modified (NSNumber)."
    },
    {
      "name": "static let enabled: NSAccessibility.Attribute",
      "desc": "A flag that indicates the enabled state of the element (NSNumber)."
    },
    {
      "name": "static let expanded: NSAccessibility.Attribute",
      "desc": "A flag that indicates whether the element is expanded (NSNumber)."
    },
    {
      "name": "static let extrasMenuBar: NSAccessibility.Attribute",
      "desc": "The app extras menu bar (id)."
    },
    {
      "name": "static let filename: NSAccessibility.Attribute",
      "desc": "The filename associated with the element (NSString)."
    },
    {
      "name": "static let focused: NSAccessibility.Attribute",
      "desc": "A flag that indicates the presence of keyboard focus (NSNumber)."
    },
    {
      "name": "static let focusedUIElement: NSAccessibility.Attribute",
      "desc": "The element with the current focus (id)."
    },
    {
      "name": "static let focusedWindow: NSAccessibility.Attribute",
      "desc": "The app's window that has current focus (id)."
    },
    {
      "name": "static let frontmost: NSAccessibility.Attribute",
      "desc": "A flag that indicates whether the app is frontmost (NSNumber)."
    },
    {
      "name": "static let fullScreenButton: NSAccessibility.Attribute",
      "desc": "The element that represents the full-screen button (id)."
    },
    {
      "name": "static let growArea: NSAccessibility.Attribute",
      "desc": "The element representing the grow area (id)."
    },
    {
      "name": "static let handles: NSAccessibility.Attribute",
      "desc": "The drag handles of the item (NSArray)."
    },
    {
      "name": "static let header: NSAccessibility.Attribute",
      "desc": "The element that represents a table view's header (id)."
    },
    {
      "name": "static let help: NSAccessibility.Attribute",
      "desc": "The help text for the element (NSString)."
    },
    {
      "name": "static let hidden: NSAccessibility.Attribute",
      "desc": "A flag that indicates whether the app is hidden (NSNumber)."
    },
    {
      "name": "static let horizontalScrollBar: NSAccessibility.Attribute",
      "desc": "The element that represents a scroll view's horizontal scroll bar (id)."
    },
    {
      "name": "static let horizontalUnitDescription: NSAccessibility.Attribute",
      "desc": "The description of the layout view's horizontal units (NSString)."
    },
    {
      "name": "static let horizontalUnits: NSAccessibility.Attribute",
      "desc": "The units that the layout view uses for horizontal values (NSString). See Measurement unit attributes for possible values."
    },
    {
      "name": "static let identifier: NSAccessibility.Attribute",
      "desc": "The identity of the element (NSString)."
    },
    {
      "name": "static let incrementButton: NSAccessibility.Attribute",
      "desc": "The element that represents a stepper's increment button (id)."
    },
    {
      "name": "static let index: NSAccessibility.Attribute",
      "desc": "The index of the row or column represented by the element (NSValue)."
    },
    {
      "name": "static let insertionPointLineNumber: NSAccessibility.Attribute",
      "desc": "The line number containing the insertion point (NSNumber)."
    },
    {
      "name": "static let labelUIElements: NSAccessibility.Attribute",
      "desc": "The elements that represent the slider's labels (NSArray)."
    },
    {
      "name": "static let labelValue: NSAccessibility.Attribute",
      "desc": "The value of the label represented by this element (NSNumber)."
    },
    {
      "name": "static let linkedUIElements: NSAccessibility.Attribute",
      "desc": "The elements with which this element is related (NSArray)."
    },
    {
      "name": "static let main: NSAccessibility.Attribute",
      "desc": "A flag that indicates whether the window is the main window (NSNumber)."
    },
    {
      "name": "static let mainWindow: NSAccessibility.Attribute",
      "desc": "The app's main window (id)."
    },
    {
      "name": "static let markerGroupUIElement: NSAccessibility.Attribute",
      "desc": "A marker group user interface element (id)."
    },
    {
      "name": "static let markerType: NSAccessibility.Attribute",
      "desc": "The type of the marker (NSString). See Ruler Marker Type Values for possible values."
    },
    {
      "name": "static let markerTypeDescription: NSAccessibility.Attribute",
      "desc": "The description of the marker type (NSString)."
    },
    {
      "name": "static let markerUIElements: NSAccessibility.Attribute",
      "desc": "An array of marker user interface elements (NSArray)"
    },
    {
      "name": "static let markerValues: NSAccessibility.Attribute",
      "desc": "The marker values (NSArray of NSNumber)."
    },
    {
      "name": "static let maxValue: NSAccessibility.Attribute",
      "desc": "The element's maximum value (id)."
    },
    {
      "name": "static let menuBar: NSAccessibility.Attribute",
      "desc": "The app's menu bar (id)."
    },
    {
      "name": "static let minValue: NSAccessibility.Attribute",
      "desc": "The element's minimum value (id)."
    },
    {
      "name": "static let minimizeButton: NSAccessibility.Attribute",
      "desc": "The element that represents the minimize button (id)."
    },
    {
      "name": "static let minimized: NSAccessibility.Attribute",
      "desc": "A flag that indicates whether the window is minimized (NSNumber)."
    },
    {
      "name": "static let modal: NSAccessibility.Attribute",
      "desc": "A flag that indicates whether the window represented by this element is modal (NSNumber)."
    },
    {
      "name": "static let nextContents: NSAccessibility.Attribute",
      "desc": "The elements representing the contents that follow the current divider element, such as a subview adjacent to a split view's splitter element (NSArray)."
    },
    {
      "name": "static let numberOfCharacters: NSAccessibility.Attribute",
      "desc": "The number of characters in the text (NSNumber)."
    },
    {
      "name": "static let orderedByRow: NSAccessibility.Attribute",
      "desc": "A flag that indicates whether the grid is ordered row major (true), or column major (false) (NSNumber as boolValue)."
    },
    {
      "name": "static let orientation: NSAccessibility.Attribute",
      "desc": "The element's orientation, which can have the value horizontal or vertical."
    },
    {
      "name": "static let overflowButton: NSAccessibility.Attribute",
      "desc": "The element that represents a toolbar's overflow button (id)."
    },
    {
      "name": "static let parent: NSAccessibility.Attribute",
      "desc": "The element's parent element in the accessibility hierarchy (id)."
    },
    {
      "name": "static let placeholderValue: NSAccessibility.Attribute",
      "desc": "The placeholder value for a control, such as a text field (NSString)."
    },
    {
      "name": "static let position: NSAccessibility.Attribute",
      "desc": "The position in points of the element's lower-left corner in screen-relative coordinates (NSValue)."
    },
    {
      "name": "static let previousContents: NSAccessibility.Attribute",
      "desc": "The elements representing the contents that precede the current divider element, such as a subview adjacent to a split view's splitter bar element (NSArray)."
    },
    {
      "name": "static let proxy: NSAccessibility.Attribute",
      "desc": "The element that represents the window's proxy icon (id)."
    },
    {
      "name": "static let required: NSAccessibility.Attribute"
    },
    {
      "name": "static let role: NSAccessibility.Attribute",
      "desc": "The element's type, such as NSAccessibilityRadioButtonRole (NSString). See Roles for a list of available roles."
    },
    {
      "name": "static let roleDescription: NSAccessibility.Attribute",
      "desc": "A localized, human-intelligible description of the element's role, such as radio button (NSString)."
    },
    {
      "name": "static let rowCount: NSAccessibility.Attribute",
      "desc": "The number of rows in the grid (NSNumber as intValue)."
    },
    {
      "name": "static let rowHeaderUIElements: NSAccessibility.Attribute",
      "desc": "The table's row headers (NSArray)."
    },
    {
      "name": "static let rowIndexRange: NSAccessibility.Attribute",
      "desc": "The row index range of the cell (an NSValue instance that contains the row's starting index and index span in the table)."
    },
    {
      "name": "static let rows: NSAccessibility.Attribute",
      "desc": "The table's rows (NSArray)."
    },
    {
      "name": "static let searchButton: NSAccessibility.Attribute",
      "desc": "The element that represents the search button in a search field (id)."
    },
    {
      "name": "static let searchMenu: NSAccessibility.Attribute",
      "desc": "The element that represents the menu in a search field (id)."
    },
    {
      "name": "static let selected: NSAccessibility.Attribute",
      "desc": "A flag that indicates whether the element is selected (NSNumber)."
    },
    {
      "name": "static let selectedCells: NSAccessibility.Attribute",
      "desc": "The table's selected cells (NSArray). This attribute is required for cell-based tables."
    },
    {
      "name": "static let selectedChildren: NSAccessibility.Attribute",
      "desc": "The currently selected children of the element (NSArray)."
    },
    {
      "name": "static let selectedColumns: NSAccessibility.Attribute",
      "desc": "The table's selected columns (NSArray)."
    },
    {
      "name": "static let selectedRows: NSAccessibility.Attribute",
      "desc": "The table's selected rows (NSArray)."
    },
    {
      "name": "static let selectedText: NSAccessibility.Attribute",
      "desc": "The currently selected text (NSString)."
    },
    {
      "name": "static let selectedTextRange: NSAccessibility.Attribute",
      "desc": "The range of selected text (NSValue)."
    },
    {
      "name": "static let selectedTextRanges: NSAccessibility.Attribute",
      "desc": "An array of NSValue (rangeValue) ranges of selected text (NSArray)."
    },
    {
      "name": "static let servesAsTitleForUIElements: NSAccessibility.Attribute",
      "desc": "The elements for which this element serves as the title (NSArray)."
    },
    {
      "name": "static let sharedCharacterRange: NSAccessibility.Attribute",
      "desc": "The (rangeValue) part of shared text in this view (NSValue)."
    },
    {
      "name": "static let sharedFocusElements: NSAccessibility.Attribute"
    },
    {
      "name": "static let sharedTextUIElements: NSAccessibility.Attribute",
      "desc": "The elements with which the text of this element is shared (NSArray)."
    },
    {
      "name": "static let shownMenu: NSAccessibility.Attribute",
      "desc": "The menu currently being displayed (id)."
    },
    {
      "name": "static let size: NSAccessibility.Attribute",
      "desc": "The element's size in points (NSValue)."
    },
    {
      "name": "static let sortDirection: NSAccessibility.Attribute",
      "desc": "The column's sort direction (NSString). See Column Sort Direction for possible values."
    },
    {
      "name": "static let splitters: NSAccessibility.Attribute",
      "desc": "The views and splitter bar in a split view (NSArray)."
    },
    {
      "name": "static let subrole: NSAccessibility.Attribute",
      "desc": "The element's subrole, such as NSAccessibilityTableRowSubrole (NSString). See Subroles for a list of available subroles."
    },
    {
      "name": "static let tabs: NSAccessibility.Attribute",
      "desc": "The tab elements in a tab view (NSArray)."
    },
    {
      "name": "static let title: NSAccessibility.Attribute",
      "desc": "The title of the element, such as a button's visible text (NSString)."
    },
    {
      "name": "static let titleUIElement: NSAccessibility.Attribute",
      "desc": "An element that represents another element's static text title (id)."
    },
    {
      "name": "static let toolbarButton: NSAccessibility.Attribute",
      "desc": "The element that represents the toolbar button (id)."
    },
    {
      "name": "static let topLevelUIElement: NSAccessibility.Attribute",
      "desc": "The top-level element that contains this element (id)."
    },
    {
      "name": "static let unitDescription: NSAccessibility.Attribute",
      "desc": "The description of ruler units (NSString)."
    },
    {
      "name": "static let units: NSAccessibility.Attribute",
      "desc": "The ruler units (NSString). See Measurement Unit Attributes for possible values."
    },
    {
      "name": "static let url: NSAccessibility.Attribute",
      "desc": "The URL associated with the element (NSURL)."
    },
    {
      "name": "static let value: NSAccessibility.Attribute",
      "desc": "The element's value (id)."
    },
    {
      "name": "static let valueDescription: NSAccessibility.Attribute",
      "desc": "The description of the element's value (NSString)."
    },
    {
      "name": "static let verticalScrollBar: NSAccessibility.Attribute",
      "desc": "The element that represents the vertical scroll bar in a scroll view (id)."
    },
    {
      "name": "static let verticalUnitDescription: NSAccessibility.Attribute",
      "desc": "The description of the layout view's vertical units (NSString)."
    },
    {
      "name": "static let verticalUnits: NSAccessibility.Attribute",
      "desc": "The units that the layout view uses for vertical values (NSString). See Measurement unit attributes for possible values."
    },
    {
      "name": "static let visibleCells: NSAccessibility.Attribute",
      "desc": "The table's visible cells (NSArray). This attribute is required for cell-based tables."
    },
    {
      "name": "static let visibleCharacterRange: NSAccessibility.Attribute",
      "desc": "The range of visible text (NSValue)."
    },
    {
      "name": "static let visibleChildren: NSAccessibility.Attribute",
      "desc": "The element's child elements that are visible (NSArray)."
    },
    {
      "name": "static let visibleColumns: NSAccessibility.Attribute",
      "desc": "The table's visible columns (NSArray)."
    },
    {
      "name": "static let visibleRows: NSAccessibility.Attribute",
      "desc": "The table's visible rows (NSArray)."
    },
    {
      "name": "static let warningValue: NSAccessibility.Attribute",
      "desc": "The warning value in a level indicator (typically, NSNumber)."
    },
    {
      "name": "static let window: NSAccessibility.Attribute",
      "desc": "The window containing the current element (id)."
    },
    {
      "name": "static let windows: NSAccessibility.Attribute",
      "desc": "The app's windows (NSArray)."
    },
    {
      "name": "static let zoomButton: NSAccessibility.Attribute",
      "desc": "The element that represents the zoom button (id)."
    },
    {
      "name": "init(rawValue: String)"
    }
  ],
  "declaration": "struct Attribute, @unchecked Sendable",
  "conformsTo": [
    "Equatable",
    "Hashable",
    "RawRepresentable",
    "Sendable"
  ]
}