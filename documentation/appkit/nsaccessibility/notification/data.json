{
  "path": "/documentation/appkit/nsaccessibility/notification",
  "type": "Structure",
  "name": "NSAccessibility.Notification",
  "desc": "The name of the notification.",
  "items": [
    {
      "name": "static let announcementRequested: NSAccessibility.Notification",
      "desc": "This notification is posted whenever an accessibility element needs to make an announcement to the user. This notification requires a userInfo dictionary with the key announcement and a localized string containing the announcement. To help an assistive app determine the importance of the announcement, add the appropriate priority to the userInfo dictionary."
    },
    {
      "name": "static let applicationActivated: NSAccessibility.Notification",
      "desc": "This notification is posted after the app has been activated. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let applicationDeactivated: NSAccessibility.Notification",
      "desc": "This notification is posted after the app has been deactivated. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let applicationHidden: NSAccessibility.Notification",
      "desc": "This notification is posted after the app is hidden. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let applicationShown: NSAccessibility.Notification",
      "desc": "This notification is posted after the app is shown. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let created: NSAccessibility.Notification",
      "desc": "This notification is posted after an accessibility element is created. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let drawerCreated: NSAccessibility.Notification",
      "desc": "This notification is posted after a drawer appears. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let focusedUIElementChanged: NSAccessibility.Notification",
      "desc": "This notification is posted after an accessibility element gains focus. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let focusedWindowChanged: NSAccessibility.Notification",
      "desc": "This notification is posted after the key window changes. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let helpTagCreated: NSAccessibility.Notification",
      "desc": "This notification is posted after a help tag appears. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let layoutChanged: NSAccessibility.Notification",
      "desc": "This notification is posted after the UI changes in a way that requires the attention of an accessibility client. This notification should be accompanied by a userInfo dictionary with the key uiElements and an array containing the UI elements that have been added or changed. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let mainWindowChanged: NSAccessibility.Notification",
      "desc": "This notification is posted after the main window changes. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let moved: NSAccessibility.Notification",
      "desc": "This notification is posted after an accessibility element moves. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let resized: NSAccessibility.Notification",
      "desc": "This notification is posted after an accessibility element’s size changes. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let rowCollapsed: NSAccessibility.Notification",
      "desc": "This notification is posted after a row collapses. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let rowCountChanged: NSAccessibility.Notification",
      "desc": "This notification is posted after a row is added or deleted. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let rowExpanded: NSAccessibility.Notification",
      "desc": "This notification is posted after a row expands. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let selectedCellsChanged: NSAccessibility.Notification",
      "desc": "This notification is posted after one or more cells in a cell-based table are selected or deselected. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let selectedChildrenChanged: NSAccessibility.Notification",
      "desc": "This notification is posted after one or more child elements are selected or deselected. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let selectedChildrenMoved: NSAccessibility.Notification",
      "desc": "This notification is posted after the selected items in a layout area move. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let selectedColumnsChanged: NSAccessibility.Notification",
      "desc": "This notification is posted after one or more columns are selected or deselected. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let selectedRowsChanged: NSAccessibility.Notification",
      "desc": "This notification is posted after one or more rows are selected or deselected. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let selectedTextChanged: NSAccessibility.Notification",
      "desc": "This notification is posted after text is selected or deselected. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let sheetCreated: NSAccessibility.Notification",
      "desc": "This notification is posted after a sheet appears. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let titleChanged: NSAccessibility.Notification",
      "desc": "This notification is posted after an accessibility element’s title changes. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let uiElementDestroyed: NSAccessibility.Notification",
      "desc": "This notification is posted after an accessibility element is destroyed. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let unitsChanged: NSAccessibility.Notification",
      "desc": "This notification is posted after the units in a layout area change. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let valueChanged: NSAccessibility.Notification",
      "desc": "This notification is posted after an accessibility element’s value changes. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let windowCreated: NSAccessibility.Notification",
      "desc": "This notification is posted after a new window appears. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let windowDeminiaturized: NSAccessibility.Notification",
      "desc": "This notification is posted after a window is restored to full size from the Dock. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let windowMiniaturized: NSAccessibility.Notification",
      "desc": "This notification is posted after a window is put in the Dock. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let windowMoved: NSAccessibility.Notification",
      "desc": "This notification is posted after a window moves. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "static let windowResized: NSAccessibility.Notification",
      "desc": "This notification is posted after a window’s size changes. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance."
    },
    {
      "name": "init(rawValue: String)",
      "desc": "Creates a new instance with the specified raw value."
    }
  ],
  "declaration": "struct Notification, @unchecked Sendable",
  "conformsTo": [
    "Equatable",
    "Hashable",
    "RawRepresentable",
    "Sendable"
  ]
}