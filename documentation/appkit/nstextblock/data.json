{
  "path": "/documentation/appkit/nstextblock",
  "type": "Class",
  "name": "NSTextBlock",
  "desc": "A block of text laid out in a subregion of the text container.",
  "items": [
    {
      "name": "init()",
      "desc": "Initializes and returns an empty text block object."
    },
    {
      "name": "func setValue(CGFloat, type: NSTextBlock.ValueType, for: NSTextBlock.Dimension)",
      "desc": "Sets a dimension of the text block."
    },
    {
      "name": "func value(for: NSTextBlock.Dimension) -> CGFloat",
      "desc": "Returns the value of the specified text block dimension."
    },
    {
      "name": "func valueType(for: NSTextBlock.Dimension) -> NSTextBlock.ValueType",
      "desc": "Returns the value type of the specified text block dimension."
    },
    {
      "name": "func setContentWidth(CGFloat, type: NSTextBlock.ValueType)",
      "desc": "Sets the width of the text block."
    },
    {
      "name": "var contentWidth: CGFloat",
      "desc": "The width of the text block."
    },
    {
      "name": "var contentWidthValueType: NSTextBlock.ValueType",
      "desc": "The type of value stored for the text block width."
    },
    {
      "name": "enum NSTextBlock.Dimension",
      "desc": "The following constants specify values used by the methods setValue(_:type:for:), value(for:), and valueType(for:) to specify text block dimensions."
    },
    {
      "name": "enum NSTextBlock.ValueType",
      "desc": "The following constants specify values used by the methods setValue(_:type:for:) and valueType(for:) to specify text block value types."
    },
    {
      "name": "func setWidth(CGFloat, type: NSTextBlock.ValueType, for: NSTextBlock.Layer, edge: NSRectEdge)",
      "desc": "Sets the width of a specified edge of a specified layer of the text block."
    },
    {
      "name": "func setWidth(CGFloat, type: NSTextBlock.ValueType, for: NSTextBlock.Layer)",
      "desc": "Sets the width of all edges of a specified layer of the text block."
    },
    {
      "name": "func width(for: NSTextBlock.Layer, edge: NSRectEdge) -> CGFloat",
      "desc": "Returns the width of an edge of a specified layer of the text block."
    },
    {
      "name": "func widthValueType(for: NSTextBlock.Layer, edge: NSRectEdge) -> NSTextBlock.ValueType",
      "desc": "Returns the value type of an edge of a specified layer of the text block."
    },
    {
      "name": "enum NSTextBlock.Layer",
      "desc": "The following constants specify values used by the properties and methods contentWidthValueType, setWidth(_:type:for:edge:), setWidth(_:type:for:), width(for:edge:), and widthValueType(for:edge:) to specify text block layer values."
    },
    {
      "name": "var verticalAlignment: NSTextBlock.VerticalAlignment",
      "desc": "The vertical alignment of the text block."
    },
    {
      "name": "enum NSTextBlock.VerticalAlignment",
      "desc": "The following constants specify values used by the property verticalAlignment to specify vertical alignment."
    },
    {
      "name": "var backgroundColor: NSColor?",
      "desc": "The background color of the text block."
    },
    {
      "name": "func setBorderColor(NSColor?, for: NSRectEdge)",
      "desc": "Sets the border color of the specified edge of the text block."
    },
    {
      "name": "func setBorderColor(NSColor?)",
      "desc": "Sets the color of all borders of the text block."
    },
    {
      "name": "func borderColor(for: NSRectEdge) -> NSColor?",
      "desc": "Returns the border color of the specified text block edge."
    },
    {
      "name": "func rectForLayout(at: NSPoint, in: NSRect, textContainer: NSTextContainer, characterRange: NSRange) -> NSRect",
      "desc": "Returns the rectangle within which glyphs should be laid out for the specified arguments."
    },
    {
      "name": "func boundsRect(forContentRect: NSRect, in: NSRect, textContainer: NSTextContainer, characterRange: NSRange) -> NSRect",
      "desc": "Returns the rectangle the text in the block actually occupies, including padding, borders, and margins."
    },
    {
      "name": "func drawBackground(withFrame: NSRect, in: NSView, characterRange: NSRange, layoutManager: NSLayoutManager)",
      "desc": "Called by the layout manager to draw any colors and other decorations before the text is drawn."
    }
  ],
  "declaration": "class NSTextBlock : NSObject",
  "inheritsFrom": [
    "NSObject"
  ],
  "conformsTo": [
    "NSCopying",
    "NSSecureCoding"
  ]
}