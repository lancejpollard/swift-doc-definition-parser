{
  "path": "/documentation/appkit/nssegmentedcontrol",
  "type": "Class",
  "name": "NSSegmentedControl",
  "desc": "Display one or more buttons in a single horizontal group.",
  "items": [
    {
      "name": "init(images: [NSImage], trackingMode: NSSegmentedControl.SwitchTracking, target: Any?, action: Selector?)"
    },
    {
      "name": "init(labels: [String], trackingMode: NSSegmentedControl.SwitchTracking, target: Any?, action: Selector?)"
    },
    {
      "name": "class NSSegmentedCell",
      "desc": "An NSSegmentedCell object implements the appearance and behavior of a horizontal button divided into multiple segments. This class is used in conjunction with the NSSegmentedControl class to implement a segmented control."
    },
    {
      "name": "var trackingMode: NSSegmentedControl.SwitchTracking",
      "desc": "The type of tracking behavior the control exhibits."
    },
    {
      "name": "enum NSSegmentedControl.SwitchTracking",
      "desc": "The following constants specify the type of tracking behavior a segmented control exhibits. They are used by trackingMode."
    },
    {
      "name": "var segmentStyle: NSSegmentedControl.Style",
      "desc": "The visual style used to display the control."
    },
    {
      "name": "enum NSSegmentedControl.Style",
      "desc": "The following constants specify the visual style used to display the segmented control. They are used by segmentStyle."
    },
    {
      "name": "var segmentCount: Int",
      "desc": "The number of segments in the control."
    },
    {
      "name": "func label(forSegment: Int) -> String?",
      "desc": "Returns the label of the specified segment."
    },
    {
      "name": "func setLabel(String, forSegment: Int)",
      "desc": "Sets the label for the specified segment."
    },
    {
      "name": "func setAlignment(NSTextAlignment, forSegment: Int)"
    },
    {
      "name": "func alignment(forSegment: Int) -> NSTextAlignment"
    },
    {
      "name": "func setImage(NSImage?, forSegment: Int)",
      "desc": "Sets the image for the specified segment."
    },
    {
      "name": "func image(forSegment: Int) -> NSImage?",
      "desc": "Returns the image associated with the specified segment."
    },
    {
      "name": "func setImageScaling(NSImageScaling, forSegment: Int)",
      "desc": "Sets the scaling mode used to display the specified segment’s image."
    },
    {
      "name": "func imageScaling(forSegment: Int) -> NSImageScaling",
      "desc": "Returns the scaling mode used to display the specified segment’s image."
    },
    {
      "name": "func setMenu(NSMenu?, forSegment: Int)",
      "desc": "Sets the menu for the specified segment."
    },
    {
      "name": "func menu(forSegment: Int) -> NSMenu?",
      "desc": "Returns the menu for the specified segment."
    },
    {
      "name": "func setShowsMenuIndicator(Bool, forSegment: Int)"
    },
    {
      "name": "func showsMenuIndicator(forSegment: Int) -> Bool"
    },
    {
      "name": "var isSpringLoaded: Bool",
      "desc": "A Boolean value that indicates whether spring loading is enabled for the control."
    },
    {
      "name": "var selectedSegment: Int",
      "desc": "The index of the selected segment of the control, or -1 if no segment is selected."
    },
    {
      "name": "var indexOfSelectedItem: Int"
    },
    {
      "name": "func selectSegment(withTag: Int) -> Bool",
      "desc": "Selects the segment with the specified tag."
    },
    {
      "name": "func setSelected(Bool, forSegment: Int)",
      "desc": "Sets the selection state of the specified segment."
    },
    {
      "name": "func isSelected(forSegment: Int) -> Bool",
      "desc": "Returns a Boolean value indicating whether the specified segment is selected."
    },
    {
      "name": "var selectedSegmentBezelColor: NSColor?",
      "desc": "The color of the selected segment's bezel, in appearances that support it."
    },
    {
      "name": "var doubleValueForSelectedSegment: Double",
      "desc": "When the tracking mode for the control is set to use a momentary accelerator, returns a value for the selected segment."
    },
    {
      "name": "func setWidth(CGFloat, forSegment: Int)",
      "desc": "Sets the width of the specified segment."
    },
    {
      "name": "func width(forSegment: Int) -> CGFloat",
      "desc": "Returns the width of the specified segment."
    },
    {
      "name": "var segmentDistribution: NSSegmentedControl.Distribution"
    },
    {
      "name": "enum NSSegmentedControl.Distribution"
    },
    {
      "name": "var activeCompressionOptions: NSUserInterfaceCompressionOptions"
    },
    {
      "name": "func compress(withPrioritizedCompressionOptions: [NSUserInterfaceCompressionOptions])"
    },
    {
      "name": "func minimumSize(withPrioritizedCompressionOptions: [NSUserInterfaceCompressionOptions]) -> NSSize"
    },
    {
      "name": "func setEnabled(Bool, forSegment: Int)",
      "desc": "Sets the enabled state of the specified segment"
    },
    {
      "name": "func isEnabled(forSegment: Int) -> Bool",
      "desc": "Returns a Boolean value indicating whether the specified segment is enabled."
    },
    {
      "name": "func tag(forSegment: Int) -> Int"
    },
    {
      "name": "func setTag(Int, forSegment: Int)"
    },
    {
      "name": "func setToolTip(String?, forSegment: Int)"
    },
    {
      "name": "func toolTip(forSegment: Int) -> String?"
    }
  ],
  "declaration": "class NSSegmentedControl : NSControl",
  "inheritsFrom": [
    "NSControl"
  ],
  "conformsTo": [
    "NSUserInterfaceCompression"
  ]
}