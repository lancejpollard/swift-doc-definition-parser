{
  "path": "/documentation/appkit/nsmenuitem",
  "type": "Class",
  "name": "NSMenuItem",
  "desc": "A command item in an app menu.",
  "items": [
    {
      "name": "init(title: String, action: Selector?, keyEquivalent: String)",
      "desc": "Returns an initialized instance of NSMenuItem."
    },
    {
      "name": "init(coder: NSCoder)"
    },
    {
      "name": "var isEnabled: Bool",
      "desc": "A Boolean value that indicates whether the menu item is enabled."
    },
    {
      "name": "var isHidden: Bool",
      "desc": "A Boolean value that indicates whether the menu item is hidden."
    },
    {
      "name": "var isHiddenOrHasHiddenAncestor: Bool",
      "desc": "A Boolean value that indicates whether the menu item or any of its superitems is hidden."
    },
    {
      "name": "var target: AnyObject?",
      "desc": "The menu item's target."
    },
    {
      "name": "var action: Selector?",
      "desc": "The menu item's action-method selector."
    },
    {
      "name": "var title: String",
      "desc": "The menu item's title."
    },
    {
      "name": "var attributedTitle: NSAttributedString?",
      "desc": "A custom string for a menu item."
    },
    {
      "name": "var tag: Int",
      "desc": "The menu item's tag."
    },
    {
      "name": "var state: NSControl.StateValue",
      "desc": "The state of the menu item."
    },
    {
      "name": "var image: NSImage?",
      "desc": "The menu item’s image."
    },
    {
      "name": "var onStateImage: NSImage!",
      "desc": "The image of the menu item that indicates an “on” state."
    },
    {
      "name": "var offStateImage: NSImage?",
      "desc": "The image of the menu item that indicates an “off” state."
    },
    {
      "name": "var mixedStateImage: NSImage!",
      "desc": "The image of the menu item that indicates a “mixed” state, that is, a state neither “on” nor “off.”"
    },
    {
      "name": "var submenu: NSMenu?",
      "desc": "The submenu of the menu item."
    },
    {
      "name": "var hasSubmenu: Bool",
      "desc": "A Boolean value that indicates whether the menu item has a submenu."
    },
    {
      "name": "var parent: NSMenuItem?",
      "desc": "The menu item whose submenu contains the receiver."
    },
    {
      "name": "var isSeparatorItem: Bool",
      "desc": "A menu item that is used to separate logical groups of menu commands."
    },
    {
      "name": "class func separator() -> NSMenuItem",
      "desc": "Returns a menu item that is used to separate logical groups of menu commands."
    },
    {
      "name": "var menu: NSMenu?",
      "desc": "The menu item’s menu."
    },
    {
      "name": "var keyEquivalent: String",
      "desc": "The menu item’s unmodified key equivalent."
    },
    {
      "name": "var keyEquivalentModifierMask: NSEvent.ModifierFlags",
      "desc": "The menu item’s keyboard equivalent modifiers."
    },
    {
      "name": "class var usesUserKeyEquivalents: Bool",
      "desc": "Returns a Boolean value that indicates whether menu items conform to user preferences for key equivalents."
    },
    {
      "name": "var userKeyEquivalent: String",
      "desc": "The user-assigned key equivalent for the menu item."
    },
    {
      "name": "var allowsAutomaticKeyEquivalentLocalization: Bool",
      "desc": "A Boolean value that determines whether the system automatically remaps the keyboard shortcut to support localized keyboards."
    },
    {
      "name": "var allowsAutomaticKeyEquivalentMirroring: Bool",
      "desc": "A Boolean value that determines whether the system automatically swaps input strings for some keyboard shortcuts when the interface direction changes."
    },
    {
      "name": "var allowsKeyEquivalentWhenHidden: Bool"
    },
    {
      "name": "var isAlternate: Bool",
      "desc": "A Boolean value that marks the menu item as an alternate to the previous menu item."
    },
    {
      "name": "var indentationLevel: Int",
      "desc": "The menu item indentation level for the menu item."
    },
    {
      "name": "var toolTip: String?",
      "desc": "A help tag for the menu item."
    },
    {
      "name": "var representedObject: Any?",
      "desc": "The object represented by the menu item."
    },
    {
      "name": "var view: NSView?",
      "desc": "The content view for the menu item."
    },
    {
      "name": "var isHighlighted: Bool",
      "desc": "A Boolean value that indicates whether the menu item should be drawn highlighted."
    },
    {
      "name": "class let importFromDeviceIdentifier: NSUserInterfaceItemIdentifier",
      "desc": "The identifier for a Continuity Camera menu item, which takes pictures or scans documents using an iOS device."
    }
  ],
  "declaration": "class NSMenuItem : NSObject",
  "inheritsFrom": [
    "NSObject"
  ],
  "conformsTo": [
    "NSAccessibilityProtocol",
    "NSAccessibilityElementProtocol",
    "NSCoding",
    "NSCopying",
    "NSUserInterfaceItemIdentification",
    "NSValidatedUserInterfaceItem"
  ]
}