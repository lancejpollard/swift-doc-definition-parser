{
  "path": "/documentation/appkit/nsslider",
  "type": "Class",
  "name": "NSSlider",
  "desc": "A display of a bar representing a continuous range of numerical values and a knob representing the currently selected value.",
  "items": [
    {
      "name": "init(target: Any?, action: Selector?)",
      "desc": "Creates a continuous horizontal slider whose values range from 0.0 to 1.0."
    },
    {
      "name": "init(value: Double, minValue: Double, maxValue: Double, target: Any?, action: Selector?)",
      "desc": "Creates a continuous horizontal slider that represents values over the specified range."
    },
    {
      "name": "var sliderType: NSSlider.SliderType",
      "desc": "The type of the slider, such as vertical or circular."
    },
    {
      "name": "enum NSSlider.SliderType",
      "desc": "The types of sliders, used by sliderType."
    },
    {
      "name": "var altIncrementValue: Double",
      "desc": "The amount by which the slider changes its value when the user Option-drags the slider knob."
    },
    {
      "name": "var knobThickness: CGFloat",
      "desc": "The knob’s thickness, in pixels."
    },
    {
      "name": "var isVertical: Bool",
      "desc": "An integer indicating the orientation (horizontal or vertical) of the slider."
    },
    {
      "name": "var trackFillColor: NSColor?",
      "desc": "The color of the filled portion of the slider track, in appearances that support it."
    },
    {
      "name": "var maxValue: Double",
      "desc": "The maximum value the slider can send to its target."
    },
    {
      "name": "var minValue: Double",
      "desc": "The minimum value the slider can send to its target."
    },
    {
      "name": "func acceptsFirstMouse(for: NSEvent?) -> Bool",
      "desc": "Returns a Boolean value indicating whether a mouse-down event both activates the window and starts dragging the slider's knob."
    },
    {
      "name": "var allowsTickMarkValuesOnly: Bool",
      "desc": "A Boolean value that indicates whether the slider fixes its values to those values represented by its tick marks."
    },
    {
      "name": "func closestTickMarkValue(toValue: Double) -> Double",
      "desc": "Returns the value of the tick mark closest to the specified value."
    },
    {
      "name": "func indexOfTickMark(at: NSPoint) -> Int",
      "desc": "Returns the index of the tick mark closest to the location of the slider represented by the given point."
    },
    {
      "name": "var numberOfTickMarks: Int",
      "desc": "The number of tick marks associated with the slider."
    },
    {
      "name": "func rectOfTickMark(at: Int) -> NSRect",
      "desc": "Returns the bounding rectangle of the tick mark at the given index."
    },
    {
      "name": "var tickMarkPosition: NSSlider.TickMarkPosition",
      "desc": "Determines where the slider’s tick marks are displayed."
    },
    {
      "name": "enum NSSlider.TickMarkPosition",
      "desc": "The position where a linear slider’s tick marks appear (above, below, leading, or trailing)."
    },
    {
      "name": "func tickMarkValue(at: Int) -> Double",
      "desc": "Returns the slider’s value represented by the tick mark at the specified index."
    }
  ],
  "declaration": "class NSSlider : NSControl",
  "inheritsFrom": [
    "NSControl"
  ],
  "conformsTo": [
    "NSAccessibilitySlider"
  ]
}