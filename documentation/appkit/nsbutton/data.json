{
  "path": "/documentation/appkit/nsbutton",
  "type": "Class",
  "name": "NSButton",
  "desc": "A control that defines an area on the screen that a user clicks to trigger an action.",
  "items": [
    {
      "name": "init(checkboxWithTitle: String, target: Any?, action: Selector?)",
      "desc": "Creates a standard checkbox with the title you specify."
    },
    {
      "name": "init(image: NSImage, target: Any?, action: Selector?)",
      "desc": "Creates a standard push button with the image you specify."
    },
    {
      "name": "init(radioButtonWithTitle: String, target: Any?, action: Selector?)",
      "desc": "Creates a standard radio button with the title you specify."
    },
    {
      "name": "init(title: String, image: NSImage, target: Any?, action: Selector?)",
      "desc": "Creates a standard push button with a title and image."
    },
    {
      "name": "init(title: String, target: Any?, action: Selector?)",
      "desc": "Creates a standard push button with the title you specify."
    },
    {
      "name": "class NSButtonCell",
      "desc": "An object that defines the user interface of a button or other clickable region of a view."
    },
    {
      "name": "func setButtonType(NSButton.ButtonType)",
      "desc": "Sets the button’s type, which affects its user interface and behavior when clicked."
    },
    {
      "name": "func getPeriodicDelay(UnsafeMutablePointer<Float>, interval: UnsafeMutablePointer<Float>)",
      "desc": "Returns by reference the delay and interval periods for a continuous button."
    },
    {
      "name": "func setPeriodicDelay(Float, interval: Float)",
      "desc": "Sets the message delay and interval periods for a continuous button."
    },
    {
      "name": "var contentTintColor: NSColor?",
      "desc": "A tint color to use for the template image and text content."
    },
    {
      "name": "var hasDestructiveAction: Bool",
      "desc": "A Boolean value that defines whether a button’s action has a destructive effect."
    },
    {
      "name": "var alternateTitle: String",
      "desc": "The title that the button displays when the button is in an on state."
    },
    {
      "name": "var attributedTitle: NSAttributedString",
      "desc": "The title that the button displays in an off state, as an attributed string."
    },
    {
      "name": "var attributedAlternateTitle: NSAttributedString",
      "desc": "The title that the button displays as an attributed string when the button is in an on state."
    },
    {
      "name": "var title: String",
      "desc": "The title displayed on the button when it’s in an off state."
    },
    {
      "name": "var symbolConfiguration: NSImage.SymbolConfiguration?",
      "desc": "The combination of point size, weight, and scale to use when sizing and displaying symbol images."
    },
    {
      "name": "var sound: NSSound?",
      "desc": "The sound that plays when the user clicks the button."
    },
    {
      "name": "var isSpringLoaded: Bool",
      "desc": "A Boolean value that indicates whether spring loading is enabled for the button."
    },
    {
      "name": "var maxAcceleratorLevel: Int",
      "desc": "An integer value indicating the maximum pressure level for a button of type NSMultiLevelAcceleratorButton."
    },
    {
      "name": "var image: NSImage?",
      "desc": "The image that appears on the button when it’s in an off state, or nil if there is no such image."
    },
    {
      "name": "var alternateImage: NSImage?",
      "desc": "An alternate image that appears on the button when the button is in an on state."
    },
    {
      "name": "var imagePosition: NSControl.ImagePosition",
      "desc": "The position of the button’s image relative to its title."
    },
    {
      "name": "enum NSControl.ImagePosition",
      "desc": "A constant for specifying the position of a button’s image relative to its title."
    },
    {
      "name": "var isBordered: Bool",
      "desc": "A Boolean value that determines whether the button has a border."
    },
    {
      "name": "var isTransparent: Bool",
      "desc": "A Boolean value that indicates whether the button is transparent."
    },
    {
      "name": "var bezelStyle: NSButton.BezelStyle",
      "desc": "The appearance of the button’s border."
    },
    {
      "name": "var bezelColor: NSColor?",
      "desc": "The color of the button's bezel, in appearances that support it."
    },
    {
      "name": "var showsBorderOnlyWhileMouseInside: Bool",
      "desc": "A Boolean value that determines whether the button displays its border only when the pointer is over it."
    },
    {
      "name": "var imageHugsTitle: Bool",
      "desc": "A Boolean value that determines how the button’s image and title are positioned together within the button bezel."
    },
    {
      "name": "var imageScaling: NSImageScaling",
      "desc": "The scaling mode applied to make the cell’s image fit the frame of the image view."
    },
    {
      "name": "var activeCompressionOptions: NSUserInterfaceCompressionOptions",
      "desc": "The compression options active for this button."
    },
    {
      "name": "func compress(withPrioritizedCompressionOptions: [NSUserInterfaceCompressionOptions])",
      "desc": "Sets the priority compression options for this button."
    },
    {
      "name": "func minimumSize(withPrioritizedCompressionOptions: [NSUserInterfaceCompressionOptions]) -> NSSize",
      "desc": "Returns the minimum size of the button by using the compression options."
    },
    {
      "name": "var allowsMixedState: Bool",
      "desc": "A Boolean value that indicates whether the button allows a mixed state."
    },
    {
      "name": "var state: NSControl.StateValue",
      "desc": "The button’s state."
    },
    {
      "name": "func setNextState()",
      "desc": "Sets the button to its next state."
    },
    {
      "name": "func highlight(Bool)",
      "desc": "Highlights (or unhighlights) the button."
    },
    {
      "name": "var keyEquivalent: String",
      "desc": "The key-equivalent character of the button."
    },
    {
      "name": "var keyEquivalentModifierMask: NSEvent.ModifierFlags",
      "desc": "The mask specifying the modifier keys for the button’s key equivalent."
    },
    {
      "name": "func performKeyEquivalent(with: NSEvent) -> Bool",
      "desc": "Checks the button's key equivalent against the specified event and, if they match, simulates the button being clicked."
    }
  ],
  "declaration": "class NSButton : NSControl",
  "inheritsFrom": [
    "NSControl"
  ],
  "conformsTo": [
    "NSAccessibilityButton",
    "NSUserInterfaceCompression",
    "NSUserInterfaceValidations"
  ]
}