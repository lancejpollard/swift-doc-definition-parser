{
  "path": "/documentation/appkit/nslayoutconstraint/priority",
  "type": "Structure",
  "name": "NSLayoutConstraint.Priority",
  "desc": "Layout priority used to indicate the relative importance of constraints, allowing Auto Layout to make appropriate tradeoffs when satisfying the constraints of the system as a whole.",
  "items": [
    {
      "name": "static let required: NSLayoutConstraint.Priority",
      "desc": "A required constraint."
    },
    {
      "name": "static let defaultHigh: NSLayoutConstraint.Priority",
      "desc": "Priority level with which a button resists compressing its content."
    },
    {
      "name": "static let dragThatCanResizeWindow: NSLayoutConstraint.Priority",
      "desc": "Appropriate priority level for a drag that may end up resizing the window."
    },
    {
      "name": "static let windowSizeStayPut: NSLayoutConstraint.Priority",
      "desc": "Priority level for the windowâ€™s current size."
    },
    {
      "name": "static let dragThatCannotResizeWindow: NSLayoutConstraint.Priority",
      "desc": "Priority level at which a split view divider, say, is dragged."
    },
    {
      "name": "static let defaultLow: NSLayoutConstraint.Priority",
      "desc": "Priority level at which a button hugs its contents horizontally."
    },
    {
      "name": "static let fittingSizeCompression: NSLayoutConstraint.Priority",
      "desc": "When you send a fittingSize message to a view, the smallest size that is large enough for the view's contents is computed."
    },
    {
      "name": "init(Float)"
    },
    {
      "name": "init(rawValue: Float)"
    }
  ],
  "declaration": "struct Priority, @unchecked Sendable",
  "conformsTo": [
    "Equatable",
    "Hashable",
    "RawRepresentable",
    "Sendable"
  ]
}