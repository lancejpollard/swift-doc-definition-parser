{
  "path": "/documentation/appkit/nswindowcontroller",
  "type": "Class",
  "name": "NSWindowController",
  "desc": "A controller that manages a window, usually a window stored in a nib file.",
  "items": [
    {
      "name": "init(window: NSWindow?)",
      "desc": "Returns a window controller initialized with a given window."
    },
    {
      "name": "init(windowNibName: NSNib.Name)",
      "desc": "Returns a window controller initialized with a nib file."
    },
    {
      "name": "init(windowNibName: NSNib.Name, owner: Any)",
      "desc": "Returns a window controller initialized with a nib file and a specified owner for that nib file."
    },
    {
      "name": "init(windowNibPath: String, owner: Any)",
      "desc": "Returns a window controller initialized with a nib file at an absolute path and a specified owner."
    },
    {
      "name": "func loadWindow()",
      "desc": "Loads the receiver’s window from the nib file."
    },
    {
      "name": "func showWindow(Any?)",
      "desc": "Displays the window associated with the receiver."
    },
    {
      "name": "var isWindowLoaded: Bool",
      "desc": "A Boolean value that indicates whether the nib file containing the receiver’s window has been loaded."
    },
    {
      "name": "var window: NSWindow?",
      "desc": "The window owned by the receiver."
    },
    {
      "name": "func windowDidLoad()",
      "desc": "Sent after the window owned by the receiver has been loaded."
    },
    {
      "name": "func windowWillLoad()",
      "desc": "Sent before the window owned by the receiver is loaded."
    },
    {
      "name": "var document: AnyObject?",
      "desc": "The document associated with the window controller."
    },
    {
      "name": "func setDocumentEdited(Bool)",
      "desc": "Sets the document edited flag for the window controller."
    },
    {
      "name": "func close()",
      "desc": "Closes the window if it was loaded."
    },
    {
      "name": "var shouldCloseDocument: Bool",
      "desc": "A Boolean value that indicates whether the receiver necessarily closes the associated document when the window it manages is closed."
    },
    {
      "name": "var owner: AnyObject?",
      "desc": "The owner of the nib file containing the window managed by the receiver."
    },
    {
      "name": "var storyboard: NSStoryboard?",
      "desc": "The storyboard file from which the window controller was loaded."
    },
    {
      "name": "var windowNibName: NSNib.Name?",
      "desc": "The name of the nib file that stores the window associated with the receiver."
    },
    {
      "name": "var windowNibPath: String?",
      "desc": "The full path of the nib file that stores the window associated with the receiver."
    },
    {
      "name": "var shouldCascadeWindows: Bool",
      "desc": "A Boolean value that indicates whether the window will cascade in relation to other document windows when it is displayed."
    },
    {
      "name": "var windowFrameAutosaveName: NSWindow.FrameAutosaveName",
      "desc": "The name under which the frame rectangle of the window owned by the receiver is stored in the defaults database."
    },
    {
      "name": "func synchronizeWindowTitleWithDocumentName()",
      "desc": "Synchronizes the displayed window title and the represented filename with the information in the associated document."
    },
    {
      "name": "func windowTitle(forDocumentDisplayName: String) -> String",
      "desc": "Returns the window title to be used for a given document display name."
    },
    {
      "name": "var contentViewController: NSViewController?",
      "desc": "The view controller for the window’s content view."
    },
    {
      "name": "func dismissController(Any?)",
      "desc": "Dismisses the window controller."
    },
    {
      "name": "init?(coder: NSCoder)"
    }
  ],
  "declaration": "class NSWindowController : NSResponder",
  "inheritsFrom": [
    "NSResponder"
  ],
  "conformsTo": [
    "NSSeguePerforming"
  ]
}