{
  "path": "/documentation/appkit/nssplitviewitem",
  "type": "Class",
  "name": "NSSplitViewItem",
  "desc": "An item in a split view controller.",
  "items": [
    {
      "name": "init(sidebarWithViewController: NSViewController)",
      "desc": "Creates a split view item that represents a sidebar for the specified view controller."
    },
    {
      "name": "init(contentListWithViewController: NSViewController)",
      "desc": "Creates a split view item that represents a content list for the specified view controller."
    },
    {
      "name": "init(viewController: NSViewController)",
      "desc": "Creates a split view item that represents the specified view controller."
    },
    {
      "name": "var automaticMaximumThickness: CGFloat",
      "desc": "The maximum thickness of the split view item when it resizes due to automatic sizing."
    },
    {
      "name": "var preferredThicknessFraction: CGFloat",
      "desc": "The preferred thickness of the split view item relative to the split view."
    },
    {
      "name": "var minimumThickness: CGFloat",
      "desc": "The minimum thickness of the split view item."
    },
    {
      "name": "var maximumThickness: CGFloat",
      "desc": "The maximum thickness of the split view item."
    },
    {
      "name": "class let unspecifiedDimension: CGFloat",
      "desc": "A constant that resets a dimension’s value."
    },
    {
      "name": "var holdingPriority: NSLayoutConstraint.Priority",
      "desc": "The priority for a split view item to hold its size."
    },
    {
      "name": "var behavior: NSSplitViewItem.Behavior",
      "desc": "The standard behavior type of the split view item."
    },
    {
      "name": "enum NSSplitViewItem.Behavior",
      "desc": "Constants that describe the behavior of the split view item."
    },
    {
      "name": "var isCollapsed: Bool",
      "desc": "A Boolean value that determines whether the child view controller that corresponds to the split view item is in a collapsed state in the split view controller."
    },
    {
      "name": "var canCollapse: Bool",
      "desc": "A Boolean value that determines whether a user interaction can collapse the child view controller that corresponds to the split view item."
    },
    {
      "name": "var collapseBehavior: NSSplitViewItem.CollapseBehavior",
      "desc": "The resizing behavior when the split view item toggles its collapsed state."
    },
    {
      "name": "enum NSSplitViewItem.CollapseBehavior",
      "desc": "Constants that describe the split view item’s collapsing behavior."
    },
    {
      "name": "var isSpringLoaded: Bool",
      "desc": "A Boolean value that determines whether the split view item can temporarily expand during a drag."
    },
    {
      "name": "var allowsFullHeightLayout: Bool",
      "desc": "A Boolean value that indicates whether full-height sidebars appear in the window after you set a style mask."
    },
    {
      "name": "var titlebarSeparatorStyle: NSTitlebarSeparatorStyle",
      "desc": "The type of separator that the app displays between the title bar and content of a window."
    },
    {
      "name": "enum NSTitlebarSeparatorStyle",
      "desc": "Styles that determine the type of separator displayed between the title bar and content of a window."
    },
    {
      "name": "var viewController: NSViewController",
      "desc": "The view controller that the split view item represents."
    }
  ],
  "declaration": "class NSSplitViewItem : NSObject",
  "inheritsFrom": [
    "NSObject"
  ],
  "conformsTo": [
    "NSAnimatablePropertyContainer",
    "NSCoding"
  ]
}