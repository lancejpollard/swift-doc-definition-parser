{
  "path": "/documentation/appkit/nsbindingoption",
  "type": "Structure",
  "name": "NSBindingOption",
  "desc": "Values that are used as keys in the options dictionary passed to the bind(_:to:withKeyPath:options:) method.",
  "items": [
    {
      "name": "static let allowsEditingMultipleValuesSelection: NSBindingOption",
      "desc": "An NSNumber object containing a Boolean value that determines if the binding allows editing when the value represents a multiple selection."
    },
    {
      "name": "static let allowsNullArgument: NSBindingOption",
      "desc": "An NSNumber object containing a Boolean value that determines if the argument bindings allows passing argument values of nil."
    },
    {
      "name": "static let alwaysPresentsApplicationModalAlerts: NSBindingOption",
      "desc": "A number containing a Boolean value that determines if validation and error alert panels displayed as a result of this binding are displayed as application modal alerts."
    },
    {
      "name": "static let conditionallySetsEditable: NSBindingOption",
      "desc": "An NSNumber object containing a Boolean value that determines if the editable state of the user interface item is automatically configured based on the controller's selection."
    },
    {
      "name": "static let conditionallySetsEnabled: NSBindingOption",
      "desc": "An NSNumber object containing a Boolean value that determines if the enabled state of the user interface item is automatically configured based on the controller's selection."
    },
    {
      "name": "static let conditionallySetsHidden: NSBindingOption",
      "desc": "An NSNumber object containing a Boolean value that determines if the hidden state of the user interface item is automatically configured based on the controller's selection."
    },
    {
      "name": "static let contentPlacementTag: NSBindingOption",
      "desc": "A number that specifies the tag id of the popup menu item to replace with the content of the array."
    },
    {
      "name": "static let continuouslyUpdatesValue: NSBindingOption",
      "desc": "An NSNumber object containing a Boolean value that determines whether the value of the binding is updated as edits are made to the user interface item or is updated only when the user interface item resigns as the responder."
    },
    {
      "name": "static let createsSortDescriptor: NSBindingOption",
      "desc": "An NSNumber object containing a Boolean value that determines if a sort descriptor is created for a table column."
    },
    {
      "name": "static let deletesObjectsOnRemove: NSBindingOption",
      "desc": "An NSNumber object containing a Boolean value that determines if an object is deleted from the managed context immediately upon being removed from a relationship."
    },
    {
      "name": "static let displayName: NSBindingOption",
      "desc": "An NSString object containing a human readable string to be displayed for a predicate."
    },
    {
      "name": "static let displayPattern: NSBindingOption",
      "desc": "An NSString object that specifies a format string used to construct the final value of a string."
    },
    {
      "name": "static let handlesContentAsCompoundValue: NSBindingOption",
      "desc": "An NSNumber object containing a Boolean value that determines if the content is treated as a compound value."
    },
    {
      "name": "static let insertsNullPlaceholder: NSBindingOption",
      "desc": "An NSNumber object containing a Boolean value that determines if an additional item which represents nil is inserted into a matrix or pop-up menu before the items in the content array."
    },
    {
      "name": "static let invokesSeparatelyWithArrayObjects: NSBindingOption",
      "desc": "An NSNumber object containing a Boolean value that determines whether the specified selector is invoked with the array as the argument or is invoked repeatedly with each array item as an argument."
    },
    {
      "name": "static let multipleValuesPlaceholder: NSBindingOption",
      "desc": "An object that is used as a placeholder when the key path of the bound controller returns the NSMultipleValuesMarker marker for a binding."
    },
    {
      "name": "static let noSelectionPlaceholder: NSBindingOption",
      "desc": "An object that is used as a placeholder when the key path of the bound controller returns the NSNoSelectionMarker marker for a binding."
    },
    {
      "name": "static let notApplicablePlaceholder: NSBindingOption",
      "desc": "An object that is used as a placeholder when the key path of the bound controller returns the NSNotApplicableMarker marker for a binding."
    },
    {
      "name": "static let nullPlaceholder: NSBindingOption",
      "desc": "An object that is used as a placeholder when the key path of the bound controller returns nil for a binding."
    },
    {
      "name": "static let predicateFormat: NSBindingOption",
      "desc": "An NSString object containing the predicate pattern string for the predicate bindings. Use $value to refer to the value in the search field."
    },
    {
      "name": "static let raisesForNotApplicableKeys: NSBindingOption",
      "desc": "An NSNumber object containing a Boolean value that specifies if an exception is raised when the binding is bound to a key that is not applicableâ€”for example when an object is not key-value coding compliant for a key."
    },
    {
      "name": "static let selectorName: NSBindingOption",
      "desc": "An NSString object that specifies the method selector invoked by the target binding when the user interface item is clicked."
    },
    {
      "name": "static let selectsAllWhenSettingContent: NSBindingOption",
      "desc": "An NSNumber object containing a Boolean value that specifies if all the items in the array controller are selected when the content is set."
    },
    {
      "name": "static let validatesImmediately: NSBindingOption",
      "desc": "An NSNumber object containing a Boolean value that determines if the contents of the binding are validated immediately."
    },
    {
      "name": "static let valueTransformer: NSBindingOption",
      "desc": "An NSValueTransformer instance that is applied to the bound value."
    },
    {
      "name": "static let valueTransformerName: NSBindingOption",
      "desc": "The value for this key is an identifier of a registered NSValueTransformer instance that is applied to the bound value."
    },
    {
      "name": "init(rawValue: String)"
    }
  ],
  "declaration": "struct NSBindingOption, @unchecked Sendable",
  "conformsTo": [
    "Equatable",
    "Hashable",
    "RawRepresentable",
    "Sendable"
  ]
}