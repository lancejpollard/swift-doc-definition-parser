{
  "path": "/documentation/appkit/nsatstypesetter",
  "type": "Class",
  "name": "NSATSTypesetter",
  "desc": "A concrete typesetter object that places glyphs during the text layout process.",
  "items": [
    {
      "name": "class var shared: NSATSTypesetter",
      "desc": "Returns a shared instance of the typesetter."
    },
    {
      "name": "var layoutManager: NSLayoutManager?",
      "desc": "The layout manager for the text being typeset."
    },
    {
      "name": "var usesFontLeading: Bool",
      "desc": "A Boolean value controlling whether the typesetter uses the leading (or line gap) value specified in the font metric information."
    },
    {
      "name": "var typesetterBehavior: NSLayoutManager.TypesetterBehavior",
      "desc": "The current typesetter behavior value."
    },
    {
      "name": "var hyphenationFactor: Float",
      "desc": "The threshold controlling when hyphenation is attempted."
    },
    {
      "name": "var bidiProcessingEnabled: Bool",
      "desc": "A Boolean value controlling whether the typesetter performs bidirectional text processing."
    },
    {
      "name": "var currentTextContainer: NSTextContainer?",
      "desc": "The text container for the text being typeset."
    },
    {
      "name": "var lineFragmentPadding: CGFloat",
      "desc": "The amount (in points) by which text is inset within line fragment rectangles."
    },
    {
      "name": "func substituteFont(for: NSFont) -> NSFont",
      "desc": "Returns a screen font suitable for use in place of the specified original font,."
    },
    {
      "name": "func textTab(forGlyphLocation: CGFloat, writingDirection: NSWritingDirection, maxLocation: CGFloat) -> NSTextTab?",
      "desc": "Returns the text tab closest to the specified glyph location and not beyond a maximum position."
    },
    {
      "name": "var attributedString: NSAttributedString?",
      "desc": "The backing store that contains the text on which this typesetter operates."
    },
    {
      "name": "func setParagraphGlyphRange(NSRange, separatorGlyphRange: NSRange)",
      "desc": "Sets the glyph range being processed and the paragraph separator glyph range (the range of the paragraph separator character or characters)."
    },
    {
      "name": "var paragraphGlyphRange: NSRange",
      "desc": "The current glyph range being processed."
    },
    {
      "name": "var paragraphSeparatorGlyphRange: NSRange",
      "desc": "The current paragraph separator range that contains the current glyph range and extends from one paragraph separator character to the next."
    },
    {
      "name": "func layoutParagraph(at: UnsafeMutablePointer<NSPoint>) -> Int",
      "desc": "Lays out glyphs in the current glyph range until the next paragraph separator is reached."
    },
    {
      "name": "func lineSpacing(afterGlyphAt: Int, withProposedLineFragmentRect: NSRect) -> CGFloat",
      "desc": "Returns the line spacing in effect following the specified glyph."
    },
    {
      "name": "func paragraphSpacing(afterGlyphAt: Int, withProposedLineFragmentRect: NSRect) -> CGFloat",
      "desc": "Returns the number of points of space added following a paragraph, in effect after the specified glyph."
    },
    {
      "name": "func paragraphSpacing(beforeGlyphAt: Int, withProposedLineFragmentRect: NSRect) -> CGFloat",
      "desc": "Returns the number of points of space added before a paragraph, which is in effect before the specified glyph."
    },
    {
      "name": "func boundingBox(forControlGlyphAt: Int, for: NSTextContainer, proposedLineFragment: NSRect, glyphPosition: NSPoint, characterIndex: Int) -> NSRect",
      "desc": "Returns the bounding rectangle for a control glyph, at the specified glyph position and character index in the text container."
    },
    {
      "name": "func getLineFragmentRect(UnsafeMutablePointer<NSRect>, usedRect: UnsafeMutablePointer<NSRect>, forParagraphSeparatorGlyphRange: NSRange, atProposedOrigin: NSPoint)",
      "desc": "Calculates the line fragment rectangle and the portion of the rectangle that contains marks."
    },
    {
      "name": "func hyphenCharacter(forGlyphAt: Int) -> UTF32Char",
      "desc": "Returns the hyphen character to be inserted after the specified glyph when hyphenation is enabled in the layout manager."
    },
    {
      "name": "func hyphenationFactor(forGlyphAt: Int) -> Float",
      "desc": "Returns the hyphenation factor in effect at the specified glyph index."
    },
    {
      "name": "func shouldBreakLine(byHyphenatingBeforeCharacterAt: Int) -> Bool",
      "desc": "Breaks a line by hyphenating before the character at the specified index."
    },
    {
      "name": "func shouldBreakLine(byWordBeforeCharacterAt: Int) -> Bool",
      "desc": "Breaks a line by word-wrapping before the character at the specified index."
    },
    {
      "name": "func willSetLineFragmentRect(UnsafeMutablePointer<NSRect>, forGlyphRange: NSRange, usedRect: UnsafeMutablePointer<NSRect>, baselineOffset: UnsafeMutablePointer<CGFloat>)",
      "desc": "Notifies subclasses that the typesetter is about to set a new line fragment."
    },
    {
      "name": "func setHardInvalidation(Bool, forGlyphRange: NSRange)",
      "desc": "Sets a Boolean value that determines whether the layout manager invalidates the specified portion of the glyph cache."
    }
  ],
  "declaration": "class NSATSTypesetter : NSTypesetter",
  "inheritsFrom": [
    "NSTypesetter"
  ]
}