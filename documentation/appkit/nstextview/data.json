{
  "path": "/documentation/appkit/nstextview",
  "type": "Class",
  "name": "NSTextView",
  "desc": "A view that draws text and handles user interactions with that text.",
  "items": [
    {
      "name": "init(frame: NSRect, textContainer: NSTextContainer?)",
      "desc": "Initializes a text view."
    },
    {
      "name": "init(frame: NSRect)",
      "desc": "Initializes a text view."
    },
    {
      "name": "init?(coder: NSCoder)",
      "desc": "Initializes a text view with data in an unarchiver."
    },
    {
      "name": "var delegate: NSTextViewDelegate?",
      "desc": "The delegate for all text views sharing the receiver’s layout manager."
    },
    {
      "name": "protocol NSTextViewDelegate",
      "desc": "A set of optional methods that text view delegates can use to manage selection, set text attributes, work with the spell checker, and more."
    },
    {
      "name": "class func registerForServices()",
      "desc": "Registers send and return types for the Services facility."
    },
    {
      "name": "class var stronglyReferencesTextStorage: Bool"
    },
    {
      "name": "class func fieldEditor() -> Self"
    },
    {
      "name": "var textContainer: NSTextContainer?",
      "desc": "The receiver’s text container."
    },
    {
      "name": "func replaceTextContainer(NSTextContainer)",
      "desc": "Replaces the text container for the group of text system objects containing the receiver, keeping the association between the receiver and its layout manager intact."
    },
    {
      "name": "var textContainerInset: NSSize",
      "desc": "The empty space the receiver leaves around its associated text container."
    },
    {
      "name": "var textContainerOrigin: NSPoint",
      "desc": "The origin of the receiver’s text container."
    },
    {
      "name": "func invalidateTextContainerOrigin()",
      "desc": "Invalidates the calculated origin of the text container."
    },
    {
      "name": "var textLayoutManager: NSTextLayoutManager?",
      "desc": "The manager that lays out text for the receiver’s text container."
    },
    {
      "name": "var layoutManager: NSLayoutManager?",
      "desc": "The layout manager that lays out text for the receiver’s text container."
    },
    {
      "name": "var textContentStorage: NSTextContentStorage?",
      "desc": "The receiver’s text storage object."
    },
    {
      "name": "var textStorage: NSTextStorage?",
      "desc": "The receiver’s text storage object."
    },
    {
      "name": "var backgroundColor: NSColor",
      "desc": "The receiver’s background color."
    },
    {
      "name": "var drawsBackground: Bool",
      "desc": "A Boolean value that indicates whether the receiver draws its background."
    },
    {
      "name": "var allowsDocumentBackgroundColorChange: Bool",
      "desc": "A Boolean value that indicates whether the receiver allows its background color to change."
    },
    {
      "name": "func changeDocumentBackgroundColor(Any?)",
      "desc": "An action method used to set the background color."
    },
    {
      "name": "func setNeedsDisplay(NSRect, avoidAdditionalLayout: Bool)",
      "desc": "Marks the receiver as requiring display."
    },
    {
      "name": "var shouldDrawInsertionPoint: Bool",
      "desc": "A Boolean value that determines whether the receiver should draw its insertion point."
    },
    {
      "name": "func drawInsertionPoint(in: NSRect, color: NSColor, turnedOn: Bool)",
      "desc": "Draws or erases the insertion point."
    },
    {
      "name": "func drawBackground(in: NSRect)",
      "desc": "Draws the background of the text view."
    },
    {
      "name": "func setConstrainedFrameSize(NSSize)",
      "desc": "Attempts to set the frame size as if by user action."
    },
    {
      "name": "func cleanUpAfterDragOperation()",
      "desc": "Releases the drag information still existing after the dragging session has completed."
    },
    {
      "name": "func showFindIndicator(for: NSRange)",
      "desc": "Causes a temporary highlighting effect to appear around the visible portion (or portions) of the specified range."
    },
    {
      "name": "class func scrollableDocumentContentTextView() -> NSScrollView"
    },
    {
      "name": "class func scrollablePlainDocumentContentTextView() -> NSScrollView"
    },
    {
      "name": "class func scrollableTextView() -> NSScrollView"
    },
    {
      "name": "var allowedInputSourceLocales: [String]?",
      "desc": "An array of locale identifiers representing input sources that are allowed to be enabled when the receiver has the keyboard focus."
    },
    {
      "name": "var allowsUndo: Bool",
      "desc": "A Boolean value that indicates whether the receiver allows undo."
    },
    {
      "name": "var isEditable: Bool",
      "desc": "A Boolean value that controls whether the text views sharing the receiver’s layout manager allow the user to edit text."
    },
    {
      "name": "var isSelectable: Bool",
      "desc": "A Boolean value that controls whether the text views sharing the receiver’s layout manager allow the user to select text."
    },
    {
      "name": "var isFieldEditor: Bool",
      "desc": "A Boolean value that controls whether the text views sharing the receiver’s layout manager behave as field editors."
    },
    {
      "name": "var isRichText: Bool",
      "desc": "A Boolean value that controls whether the text views sharing the receiver’s layout manager allow the user to apply attributes to specific ranges of text."
    },
    {
      "name": "var importsGraphics: Bool",
      "desc": "A Boolean value that controls whether the text views sharing the receiver’s layout manager allow the user to import files by dragging."
    },
    {
      "name": "func setBaseWritingDirection(NSWritingDirection, range: NSRange)",
      "desc": "Sets the base writing direction of a range of text."
    },
    {
      "name": "var defaultParagraphStyle: NSParagraphStyle?",
      "desc": "The receiver’s default paragraph style."
    },
    {
      "name": "func outline(Any?)",
      "desc": "Adds the outline attribute to the selected text attributes if absent; removes the attribute if present."
    },
    {
      "name": "var allowsImageEditing: Bool",
      "desc": "Indicates whether image attachments should permit editing of their images."
    },
    {
      "name": "var isAutomaticQuoteSubstitutionEnabled: Bool",
      "desc": "A Boolean value that enables and disables automatic quotation mark substitution."
    },
    {
      "name": "func toggleAutomaticQuoteSubstitution(Any?)",
      "desc": "Changes the state of automatic quotation mark substitution from enabled to disabled and vice versa."
    },
    {
      "name": "var isAutomaticLinkDetectionEnabled: Bool",
      "desc": "A Boolean value that enables or disables automatic link detection."
    },
    {
      "name": "func toggleAutomaticLinkDetection(Any?)",
      "desc": "Changes the state of automatic link detection from enabled to disabled and vice versa."
    },
    {
      "name": "var displaysLinkToolTips: Bool",
      "desc": "A Boolean value that indicates whether the text view automatically supplies the destination of a link as a tooltip for text that has a link attribute."
    },
    {
      "name": "var isAutomaticTextCompletionEnabled: Bool",
      "desc": "A Boolean value that indicates whether the text view supplies autocompletion suggestions as the user types."
    },
    {
      "name": "func toggleAutomaticTextCompletion(Any?)"
    },
    {
      "name": "var usesAdaptiveColorMappingForDarkAppearance: Bool",
      "desc": "A Boolean value that indicates whether the framework should use adaptive color mapping for dark appearance."
    },
    {
      "name": "var usesRolloverButtonForSelection: Bool"
    },
    {
      "name": "var usesRuler: Bool",
      "desc": "A Boolean value that controls whether the text views sharing the receiver’s layout manager use a ruler."
    },
    {
      "name": "var isRulerVisible: Bool",
      "desc": "A Boolean value that controls whether the scroll view enclosing text views sharing the receiver’s layout manager displays the ruler."
    },
    {
      "name": "var usesInspectorBar: Bool",
      "desc": "A Boolean value that indicates whether this text view uses the inspector bar."
    },
    {
      "name": "var selectedRanges: [NSValue]",
      "desc": "An array containing the ranges of characters selected in the receiver’s layout manager."
    },
    {
      "name": "func setSelectedRange(NSRange)",
      "desc": "Selects the specified range of characters in response to user action."
    },
    {
      "name": "func setSelectedRange(NSRange, affinity: NSSelectionAffinity, stillSelecting: Bool)",
      "desc": "Sets the selection to a range of characters in response to user action."
    },
    {
      "name": "func setSelectedRanges([NSValue], affinity: NSSelectionAffinity, stillSelecting: Bool)",
      "desc": "Sets the selection to the characters in an array of ranges in response to user action."
    },
    {
      "name": "var selectionAffinity: NSSelectionAffinity",
      "desc": "The preferred direction of selection."
    },
    {
      "name": "var selectionGranularity: NSSelectionGranularity",
      "desc": "The selection granularity for subsequent extension of a selection."
    },
    {
      "name": "var insertionPointColor: NSColor",
      "desc": "The color of the insertion point."
    },
    {
      "name": "func updateInsertionPointStateAndRestartTimer(Bool)",
      "desc": "Updates the insertion point’s location and optionally restarts the blinking cursor timer."
    },
    {
      "name": "var selectedTextAttributes: [NSAttributedString.Key : Any]",
      "desc": "The attributes used to indicate the selection."
    },
    {
      "name": "var markedTextAttributes: [NSAttributedString.Key : Any]?",
      "desc": "The attributes used to draw marked text."
    },
    {
      "name": "var linkTextAttributes: [NSAttributedString.Key : Any]?",
      "desc": "The attributes used to draw the onscreen presentation of link text."
    },
    {
      "name": "func characterIndexForInsertion(at: NSPoint) -> Int",
      "desc": "Returns a character index appropriate for placing a zero-length selection for an insertion point associated with the mouse at the given point."
    },
    {
      "name": "func updateCandidates()"
    },
    {
      "name": "func preferredPasteboardType(from: [NSPasteboard.PasteboardType], restrictedToTypesFrom: [NSPasteboard.PasteboardType]?) -> NSPasteboard.PasteboardType?",
      "desc": "Returns whatever type on the pasteboard would be most preferred for copying data."
    },
    {
      "name": "func readSelection(from: NSPasteboard) -> Bool",
      "desc": "Reads the text view’s preferred type of data from the specified pasteboard."
    },
    {
      "name": "func readSelection(from: NSPasteboard, type: NSPasteboard.PasteboardType) -> Bool",
      "desc": "Reads data of the given type from the specified pasteboard."
    },
    {
      "name": "var readablePasteboardTypes: [NSPasteboard.PasteboardType]",
      "desc": "The types this text view can read immediately from the pasteboard."
    },
    {
      "name": "var writablePasteboardTypes: [NSPasteboard.PasteboardType]",
      "desc": "The pasteboard types that can be provided from the current selection."
    },
    {
      "name": "func writeSelection(to: NSPasteboard, type: NSPasteboard.PasteboardType) -> Bool",
      "desc": "Writes the current selection to the specified pasteboard using the given type."
    },
    {
      "name": "func writeSelection(to: NSPasteboard, types: [NSPasteboard.PasteboardType]) -> Bool",
      "desc": "Writes the current selection to the specified pasteboard under each given type."
    },
    {
      "name": "func validRequestor(forSendType: NSPasteboard.PasteboardType?, returnType: NSPasteboard.PasteboardType?) -> Any?",
      "desc": "Returns self if the text view can provide and accept the specified data types, or nil if it can't."
    },
    {
      "name": "func alignJustified(Any?)",
      "desc": "Applies full justification to selected paragraphs (or all text, if the receiver is a plain text object)."
    },
    {
      "name": "func changeAttributes(Any?)",
      "desc": "Changes the attributes of the current selection."
    },
    {
      "name": "func changeColor(Any?)",
      "desc": "Sets the color of the selected text."
    },
    {
      "name": "func setAlignment(NSTextAlignment, range: NSRange)",
      "desc": "Sets the alignment of the paragraphs containing characters in the specified range."
    },
    {
      "name": "var typingAttributes: [NSAttributedString.Key : Any]",
      "desc": "The receiver’s typing attributes."
    },
    {
      "name": "func useStandardKerning(Any?)",
      "desc": "Set the receiver to use pair kerning data for the glyphs in its selection, or for all glyphs if the receiver is a plain text view."
    },
    {
      "name": "func lowerBaseline(Any?)",
      "desc": "Lowers the baseline offset of selected text by 1 point, or of all text if the receiver is a plain text view."
    },
    {
      "name": "func raiseBaseline(Any?)",
      "desc": "Raises the baseline offset of selected text by 1 point, or of all text if the receiver is a plain text view."
    },
    {
      "name": "func turnOffKerning(Any?)",
      "desc": "Sets the receiver to use nominal glyph spacing for the glyphs in its selection, or for all glyphs if the receiver is a plain text view."
    },
    {
      "name": "func loosenKerning(Any?)",
      "desc": "Increases the space between glyphs in the receiver’s selection, or in all text if the receiver is a plain text view."
    },
    {
      "name": "func tightenKerning(Any?)",
      "desc": "Decreases the space between glyphs in the receiver’s selection, or for all glyphs if the receiver is a plain text view."
    },
    {
      "name": "func useStandardLigatures(Any?)",
      "desc": "Sets the receiver to use the standard ligatures available for the fonts and languages used when setting text, for the glyphs in the selection if the receiver is a rich text view, or for all glyphs if it’s a plain text view."
    },
    {
      "name": "func turnOffLigatures(Any?)",
      "desc": "Sets the receiver to use only required ligatures when setting text, for the glyphs in the selection if the receiver is a rich text view, or for all glyphs if it’s a plain text view."
    },
    {
      "name": "func useAllLigatures(Any?)",
      "desc": "Sets the receiver to use all ligatures available for the fonts and languages used when setting text, for the glyphs in the selection if the receiver is a rich text view, or for all glyphs if it’s a plain text view."
    },
    {
      "name": "func clicked(onLink: Any, at: Int)",
      "desc": "Causes the text view to act as if the user clicked on some text with the given link as the value of a link attribute associated with the text."
    },
    {
      "name": "func pasteAsPlainText(Any?)",
      "desc": "Inserts the contents of the pasteboard into the receiver’s text as plain text."
    },
    {
      "name": "func pasteAsRichText(Any?)",
      "desc": "This action method inserts the contents of the pasteboard into the receiver’s text as rich text, maintaining its attributes."
    },
    {
      "name": "func breakUndoCoalescing()",
      "desc": "Informs the receiver that it should begin coalescing successive typing operations in a new undo grouping."
    },
    {
      "name": "var isCoalescingUndo: Bool",
      "desc": "A Boolean value that indicates whether undo coalescing is in progress."
    },
    {
      "name": "func updateFontPanel()",
      "desc": "Updates the Font panel to contain the font attributes of the selection."
    },
    {
      "name": "func updateRuler()",
      "desc": "Updates the ruler view in the receiver’s enclosing scroll view to reflect the selection’s paragraph and marker attributes."
    },
    {
      "name": "var acceptableDragTypes: [NSPasteboard.PasteboardType]",
      "desc": "The data types that the receiver accepts as the destination view of a dragging operation."
    },
    {
      "name": "func updateDragTypeRegistration()",
      "desc": "Updates the acceptable drag types of all text views associated with the receiver's layout manager."
    },
    {
      "name": "func selectionRange(forProposedRange: NSRange, granularity: NSSelectionGranularity) -> NSRange",
      "desc": "Returns an adjusted selected range based on the selection granularity."
    },
    {
      "name": "var rangeForUserCharacterAttributeChange: NSRange",
      "desc": "The range of characters affected by an action method that changes character (not paragraph) attributes."
    },
    {
      "name": "var rangesForUserCharacterAttributeChange: [NSValue]?",
      "desc": "An array containing the ranges of characters affected by an action method that changes character (not paragraph) attributes."
    },
    {
      "name": "var rangeForUserParagraphAttributeChange: NSRange",
      "desc": "The range of characters affected by an action method that changes paragraph (not character) attributes."
    },
    {
      "name": "var rangesForUserParagraphAttributeChange: [NSValue]?",
      "desc": "An array containing the ranges of characters affected by a method that changes paragraph (not character) attributes."
    },
    {
      "name": "var rangeForUserTextChange: NSRange",
      "desc": "The range of characters affected by a method that changes characters (as opposed to attributes)."
    },
    {
      "name": "var rangesForUserTextChange: [NSValue]?",
      "desc": "An array containing the ranges of characters affected by a method that changes characters (as opposed to attributes)."
    },
    {
      "name": "func shouldChangeText(in: NSRange, replacementString: String?) -> Bool",
      "desc": "Initiates a series of delegate messages (and general notifications) to determine whether modifications can be made to the characters and attributes of the receiver’s text."
    },
    {
      "name": "func shouldChangeText(inRanges: [NSValue], replacementStrings: [String]?) -> Bool",
      "desc": "Initiates a series of delegate messages (and general notifications) to determine whether modifications can be made to the characters and attributes of the receiver’s text."
    },
    {
      "name": "func didChangeText()",
      "desc": "Sends out necessary notifications when a text change completes."
    },
    {
      "name": "var smartInsertDeleteEnabled: Bool",
      "desc": "A Boolean value that controls whether the receiver inserts or deletes space around selected words so as to preserve proper spacing and punctuation."
    },
    {
      "name": "func smartDeleteRange(forProposedRange: NSRange) -> NSRange",
      "desc": "Returns an extended range that includes adjacent whitespace that should be deleted along with the proposed range in order to preserve proper spacing and punctuation."
    },
    {
      "name": "func smartInsert(afterStringFor: String, replacing: NSRange) -> String?",
      "desc": "Returns any whitespace that needs to be added after the string to preserve proper spacing and punctuation when the string replaces the characters in the specified range."
    },
    {
      "name": "func smartInsert(beforeStringFor: String, replacing: NSRange) -> String?",
      "desc": "Returns any whitespace that needs to be added before the string to preserve proper spacing and punctuation when the string replaces the characters in the specified range."
    },
    {
      "name": "func smartInsert(for: String, replacing: NSRange, before: AutoreleasingUnsafeMutablePointer<NSString?>?, after: AutoreleasingUnsafeMutablePointer<NSString?>?)",
      "desc": "Determines whether whitespace needs to be added around the string to preserve proper spacing and punctuation when it replaces the characters in the specified range."
    },
    {
      "name": "func toggleSmartInsertDelete(Any?)",
      "desc": "Changes the state of smart insert and delete from enabled to disabled and vice versa."
    },
    {
      "name": "var isContinuousSpellCheckingEnabled: Bool",
      "desc": "A Boolean value that indicates whether the receiver has continuous spell checking enabled."
    },
    {
      "name": "var spellCheckerDocumentTag: Int",
      "desc": "A tag identifying the text view's text as a document for the spell checker server."
    },
    {
      "name": "func toggleContinuousSpellChecking(Any?)",
      "desc": "Toggles whether continuous spell checking is enabled for the receiver."
    },
    {
      "name": "var isGrammarCheckingEnabled: Bool",
      "desc": "Enables and disables grammar checking."
    },
    {
      "name": "func toggleGrammarChecking(Any?)",
      "desc": "Changes the state of grammar checking from enabled to disabled and vice versa."
    },
    {
      "name": "func setSpellingState(Int, range: NSRange)",
      "desc": "Sets the spelling state, which controls the display of the spelling and grammar indicators on the given text range."
    },
    {
      "name": "func orderFrontSharingServicePicker(Any?)",
      "desc": "Creates and displays a new instance of the sharing service picker."
    },
    {
      "name": "func rulerView(NSRulerView, didMove: NSRulerMarker)",
      "desc": "Modifies the paragraph style of the paragraphs containing the selection to record the new location of the marker."
    },
    {
      "name": "func rulerView(NSRulerView, willMove: NSRulerMarker, toLocation: CGFloat) -> CGFloat",
      "desc": "Returns a potentially modified location to which the marker should be moved."
    },
    {
      "name": "func rulerView(NSRulerView, shouldMove: NSRulerMarker) -> Bool",
      "desc": "Returns whether the marker should be moved."
    },
    {
      "name": "func rulerView(NSRulerView, didRemove: NSRulerMarker)",
      "desc": "Modifies the paragraph style of the paragraphs containing the selection—if possible—by removing the specified marker."
    },
    {
      "name": "func rulerView(NSRulerView, shouldRemove: NSRulerMarker) -> Bool",
      "desc": "Returns whether the marker should be removed."
    },
    {
      "name": "func rulerView(NSRulerView, didAdd: NSRulerMarker)",
      "desc": "Modifies the paragraph style of the paragraphs containing the selection to accommodate a new marker."
    },
    {
      "name": "func rulerView(NSRulerView, shouldAdd: NSRulerMarker) -> Bool",
      "desc": "Returns whether a new marker can be added."
    },
    {
      "name": "func rulerView(NSRulerView, willAdd: NSRulerMarker, atLocation: CGFloat) -> CGFloat",
      "desc": "Returns a potentially modified location to which the marker should be added."
    },
    {
      "name": "func rulerView(NSRulerView, handleMouseDownWith: NSEvent)",
      "desc": "Adds a left tab marker to the ruler at the location clicked."
    },
    {
      "name": "func dragImageForSelection(with: NSEvent, origin: NSPointPointer?) -> NSImage?",
      "desc": "Returns an appropriate drag image for the drag initiated by the specified event."
    },
    {
      "name": "func dragOperation(for: NSDraggingInfo, type: NSPasteboard.PasteboardType) -> NSDragOperation",
      "desc": "Returns the type of drag operation that should be performed if the image were released now."
    },
    {
      "name": "func dragSelection(with: NSEvent, offset: NSSize, slideBack: Bool) -> Bool",
      "desc": "Begins dragging the current selected text range."
    },
    {
      "name": "var acceptsGlyphInfo: Bool",
      "desc": "A Boolean value that indicates whether the receiver accepts the glyph info attribute."
    },
    {
      "name": "func startSpeaking(Any?)",
      "desc": "Speaks the selected text, or all text if no selection."
    },
    {
      "name": "func stopSpeaking(Any?)",
      "desc": "Stops the speaking of text."
    },
    {
      "name": "var usesFontPanel: Bool",
      "desc": "A Boolean value that controls whether the text views sharing the receiver’s layout manager use the Font panel and Font menu."
    },
    {
      "name": "var usesFindPanel: Bool",
      "desc": "A Boolean value that indicates whether the receiver allows for a find panel."
    },
    {
      "name": "func performFindPanelAction(Any?)",
      "desc": "Performs a find panel action specified by the sender's tag."
    },
    {
      "name": "func orderFrontLinkPanel(Any?)",
      "desc": "Brings forward a panel allowing the user to manipulate links in the text view."
    },
    {
      "name": "func orderFrontListPanel(Any?)",
      "desc": "Brings forward a panel allowing the user to manipulate text lists in the text view."
    },
    {
      "name": "func orderFrontSpacingPanel(Any?)",
      "desc": "Brings forward a panel allowing the user to manipulate text line heights, interline spacing, and paragraph spacing, in the text view."
    },
    {
      "name": "func orderFrontTablePanel(Any?)",
      "desc": "Brings forward a panel allowing the user to manipulate text tables in the text view."
    },
    {
      "name": "func orderFrontSubstitutionsPanel(Any?)",
      "desc": "Brings forward a panel allowing the user to specify string substitutions in the text view."
    },
    {
      "name": "func complete(Any?)",
      "desc": "Invokes completion in a text view."
    },
    {
      "name": "func completions(forPartialWordRange: NSRange, indexOfSelectedItem: UnsafeMutablePointer<Int>) -> [String]?",
      "desc": "Returns an array of potential completions, in the order to be presented, representing possible word completions available from a partial word."
    },
    {
      "name": "func insertCompletion(String, forPartialWordRange: NSRange, movement: Int, isFinal: Bool)",
      "desc": "Inserts the selected completion into the text at the appropriate location."
    },
    {
      "name": "var rangeForUserCompletion: NSRange",
      "desc": "The partial range from the most recent beginning of a word up to the insertion point."
    },
    {
      "name": "func checkTextInDocument(Any?)",
      "desc": "Performs the default text checking on the entire document."
    },
    {
      "name": "func checkTextInSelection(Any?)",
      "desc": "Performs the default text checking on the current selection."
    },
    {
      "name": "func checkText(in: NSRange, types: NSTextCheckingTypes, options: [NSSpellChecker.OptionKey : Any])",
      "desc": "Check and replace the text in the range using the specified checking types and options."
    },
    {
      "name": "func handleTextCheckingResults([NSTextCheckingResult], forRange: NSRange, types: NSTextCheckingTypes, options: [NSSpellChecker.OptionKey : Any], orthography: NSOrthography, wordCount: Int)",
      "desc": "Handles the text checking results returned by the text view"
    },
    {
      "name": "var enabledTextCheckingTypes: NSTextCheckingTypes",
      "desc": "The default text checking types."
    },
    {
      "name": "var isAutomaticDashSubstitutionEnabled: Bool",
      "desc": "A Boolean value that indicates whether automatic dash substitution is enabled."
    },
    {
      "name": "func toggleAutomaticDashSubstitution(Any?)",
      "desc": "Toggles the state of the automatic dash substitution."
    },
    {
      "name": "var isAutomaticDataDetectionEnabled: Bool",
      "desc": "A Boolean value that indicates whether automatic data detection is enabled."
    },
    {
      "name": "func toggleAutomaticDataDetection(Any?)",
      "desc": "Toggles the state of the automatic data detection."
    },
    {
      "name": "var isAutomaticSpellingCorrectionEnabled: Bool",
      "desc": "A Boolean value that indicates whether automatic spelling correction is enabled."
    },
    {
      "name": "func toggleAutomaticSpellingCorrection(Any?)",
      "desc": "Toggles the state of the automatic spelling correction."
    },
    {
      "name": "var isAutomaticTextReplacementEnabled: Bool",
      "desc": "A Boolean value that indicates whether automatic text replacement is enabled."
    },
    {
      "name": "func toggleAutomaticTextReplacement(Any?)",
      "desc": "Toggles the state of the automatic text replacement."
    },
    {
      "name": "func performValidatedReplacement(in: NSRange, with: NSAttributedString) -> Bool",
      "desc": "Replaces text in the range you specify with the attributed string you provide."
    },
    {
      "name": "func updateQuickLookPreviewPanel()",
      "desc": "Notifies the QuickLook panel that an update may be required."
    },
    {
      "name": "func toggleQuickLookPreviewPanel(Any?)",
      "desc": "An action message that toggles the visibility state of the Quick Look preview panel."
    },
    {
      "name": "func changeLayoutOrientation(Any?)",
      "desc": "An action method that sets the layout orientation of the text."
    },
    {
      "name": "func setLayoutOrientation(NSLayoutManager.TextLayoutOrientation)",
      "desc": "Changes the receiver's layout orientation and invalidates the contents."
    },
    {
      "name": "var usesFindBar: Bool",
      "desc": "A Boolean value that indicates whether to use the find bar for this text view."
    },
    {
      "name": "var isIncrementalSearchingEnabled: Bool",
      "desc": "A Boolean value that indicates whether incremental searching is enabled."
    },
    {
      "name": "enum NSSelectionGranularity",
      "desc": "These constants specify how much the text view extends the selection when the user drags the mouse. They’re used by selectionGranularity, and selectionRange(forProposedRange:granularity:):"
    },
    {
      "name": "enum NSSelectionAffinity",
      "desc": "These constants specify the preferred direction of selection. They’re used by selectionAffinity and setSelectedRange(_:affinity:stillSelecting:)."
    },
    {
      "name": "enum NSFindPanelAction",
      "desc": "These constants define the tags for performFindPanelAction(_:)."
    },
    {
      "name": "enum NSFindPanelSubstringMatchType",
      "desc": "The type of substring matching used by the Find panel."
    },
    {
      "name": "class let didChangeSelectionNotification: NSNotification.Name",
      "desc": "Posted when the selected range of characters changes."
    },
    {
      "name": "class let willChangeNotifyingTextViewNotification: NSNotification.Name",
      "desc": "Posted when a new text view is established as the text view that sends notifications."
    },
    {
      "name": "class let didChangeTypingAttributesNotification: NSNotification.Name",
      "desc": "Posted when there is a change in the typing attributes within a text view."
    },
    {
      "name": "class let didSwitchToNSLayoutManagerNotification: NSNotification.Name",
      "desc": "Posted by the framework after switching to using the compatibility mode layout manager."
    },
    {
      "name": "class let willSwitchToNSLayoutManagerNotification: NSNotification.Name",
      "desc": "Posted by the framework before switching to the compatibility mode layout manager."
    },
    {
      "name": "var allowsCharacterPickerTouchBarItem: Bool"
    },
    {
      "name": "var candidateListTouchBarItem: NSCandidateListTouchBarItem<AnyObject>?"
    },
    {
      "name": "func updateTextTouchBarItems()"
    },
    {
      "name": "func updateTouchBarItemIdentifiers()"
    }
  ],
  "declaration": "class NSTextView : NSText",
  "inheritsFrom": [
    "NSText"
  ],
  "conformsTo": [
    "NSAccessibilityNavigableStaticText",
    "NSCandidateListTouchBarItemDelegate",
    "NSColorChanging",
    "NSDraggingSource",
    "NSMenuItemValidation",
    "NSStandardKeyBindingResponding",
    "NSTextContent",
    "NSTextInput",
    "NSTextInputClient",
    "NSTextLayoutOrientationProvider",
    "NSTouchBarDelegate",
    "NSUserInterfaceValidations"
  ]
}