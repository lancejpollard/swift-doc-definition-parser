{
  "path": "/documentation/kernel/iodispatchqueue",
  "type": "Class",
  "name": "IODispatchQueue",
  "desc": "No overview available.",
  "items": [
    {
      "name": "- Cancel",
      "desc": "Stops the queue from dequeueing any further tasks, and notifies the specified handler when all in-flight tasks finish."
    },
    {
      "name": "- Dispatch"
    },
    {
      "name": "- DispatchAsync",
      "desc": "Schedule a block for asynchronous execution on the current queue."
    },
    {
      "name": "- DispatchAsync_f",
      "desc": "Schedule a C-style function for asynchrous execution on the current queue."
    },
    {
      "name": "- DispatchConcurrent"
    },
    {
      "name": "- DispatchConcurrent_f"
    },
    {
      "name": "- DispatchSync",
      "desc": "Schedule a block for synchronous execution on the current queue."
    },
    {
      "name": "- DispatchSync_f",
      "desc": "Schedule a C-style function for synchronous execution on the current queue."
    },
    {
      "name": "- GetName",
      "desc": "Returns the name of the queue as a C string."
    },
    {
      "name": "- OnQueue",
      "desc": "Returns a Boolean value that indicates whether the current thread matches the dispatch queue's thread."
    },
    {
      "name": "- RunAction"
    },
    {
      "name": "- SetPort"
    },
    {
      "name": "- SetPort_Impl"
    },
    {
      "name": "- Sleep"
    },
    {
      "name": "- Wakeup"
    },
    {
      "name": "- WakeupWithOptions"
    },
    {
      "name": "- free",
      "desc": "Performs any final cleanup for the dispatch queue object."
    },
    {
      "name": "- getMetaClass"
    },
    {
      "name": "- init",
      "desc": "Initializes the dispatch queue object."
    },
    {
      "name": "+ Create",
      "desc": "Creates a new dispatch queue object."
    },
    {
      "name": "+ Create_Call"
    },
    {
      "name": "+ Create_Impl"
    },
    {
      "name": "+ Create_Invoke"
    },
    {
      "name": "+ Log",
      "desc": "Log the current execution context with respect to any queues the current thread holds."
    },
    {
      "name": "+ SetPort_Invoke"
    }
  ],
  "declaration": "class IODispatchQueue : OSObject, IODispatchQueueInterface",
  "inheritsFrom": [
    "IODispatchQueueInterface",
    "OSObject"
  ]
}