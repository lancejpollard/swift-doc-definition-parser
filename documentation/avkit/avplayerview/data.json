{
  "path": "/documentation/avkit/avplayerview",
  "type": "Class",
  "name": "AVPlayerView",
  "desc": "A view that displays content from a player and presents a native user interface to control playback.",
  "items": [
    {
      "name": "var player: AVPlayer?",
      "desc": "The player instance that provides the media content for the view."
    },
    {
      "name": "var delegate: AVPlayerViewDelegate?",
      "desc": "The player view’s delegate object."
    },
    {
      "name": "protocol AVPlayerViewDelegate",
      "desc": "A protocol that defines the methods to implement to participate in the player view’s full-screen presentation life cycle."
    },
    {
      "name": "var controlsStyle: AVPlayerViewControlsStyle",
      "desc": "The player view’s controls style."
    },
    {
      "name": "enum AVPlayerViewControlsStyle",
      "desc": "Constants that indicate which user interface controls the view displays."
    },
    {
      "name": "var showsFrameSteppingButtons: Bool",
      "desc": "A Boolean value that determines whether the player view displays frame stepping buttons."
    },
    {
      "name": "var showsSharingServiceButton: Bool",
      "desc": "A Boolean value that determines whether the player view displays a sharing service button."
    },
    {
      "name": "var showsFullScreenToggleButton: Bool",
      "desc": "A Boolean value that determines whether the player view displays a full-screen toggle button."
    },
    {
      "name": "var showsTimecodes: Bool",
      "desc": "A Boolean value that determines whether the player view displays timecodes, if available."
    },
    {
      "name": "var contentOverlayView: NSView?",
      "desc": "A view that adds additional custom views between the video content and the controls."
    },
    {
      "name": "var actionPopUpButtonMenu: NSMenu?",
      "desc": "An action pop-up button menu that the player view displays."
    },
    {
      "name": "var updatesNowPlayingInfoCenter: Bool",
      "desc": "A Boolean value that indicates whether the player view controller updates the Now Playing info center."
    },
    {
      "name": "var isReadyForDisplay: Bool",
      "desc": "A Boolean value that indicates whether the current player item’s first video frame is ready for display."
    },
    {
      "name": "var videoBounds: NSRect",
      "desc": "The current size and position of the video image that displays within the player view’s bounds."
    },
    {
      "name": "var videoGravity: AVLayerVideoGravity",
      "desc": "A value that determines how the player view displays video content within its bounds."
    },
    {
      "name": "func flashChapterNumber(Int, chapterTitle: String?)",
      "desc": "Displays the chapter number and title in the player view for a brief moment."
    },
    {
      "name": "var allowsPictureInPicturePlayback: Bool",
      "desc": "A Boolean value that determines whether the player view allows Picture in Picture playback."
    },
    {
      "name": "var pictureInPictureDelegate: AVPlayerViewPictureInPictureDelegate?",
      "desc": "The Picture in Picture delegate object."
    },
    {
      "name": "protocol AVPlayerViewPictureInPictureDelegate",
      "desc": "A protocol that defines the methods to implement to respond to Picture in Picture playback events."
    },
    {
      "name": "var canBeginTrimming: Bool",
      "desc": "A Boolean value that indicates whether the player view can begin trimming."
    },
    {
      "name": "func beginTrimming(completionHandler: ((AVPlayerViewTrimResult) -> Void)?)",
      "desc": "Puts the player view into trimming mode."
    },
    {
      "name": "enum AVPlayerViewTrimResult",
      "desc": "Constants that specify an action a user takes when trimming media in a player view."
    }
  ],
  "declaration": "class AVPlayerView : NSView",
  "inheritsFrom": [
    "NSView"
  ]
}