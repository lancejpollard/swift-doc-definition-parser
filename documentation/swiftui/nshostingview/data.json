{
  "path": "/documentation/swiftui/nshostingview",
  "type": "Class",
  "name": "NSHostingView",
  "desc": "An AppKit view that hosts a SwiftUI view hierarchy.",
  "items": [
    {
      "name": "init(rootView: Content)",
      "desc": "Creates a hosting view object that wraps the specified SwiftUI view."
    },
    {
      "name": "init?(coder: NSCoder)",
      "desc": "Creates a hosting view object from the contents of the specified archive."
    },
    {
      "name": "var rootView: Content",
      "desc": "The root view of the SwiftUI view hierarchy managed by this view controller."
    },
    {
      "name": "class var requiresConstraintBasedLayout: Bool"
    },
    {
      "name": "var userInterfaceLayoutDirection: NSUserInterfaceLayoutDirection"
    },
    {
      "name": "var isFlipped: Bool"
    },
    {
      "name": "var layerContentsRedrawPolicy: NSView.LayerContentsRedrawPolicy"
    },
    {
      "name": "func updateConstraints()"
    },
    {
      "name": "func layout()"
    },
    {
      "name": "func mouseDown(with: NSEvent)"
    },
    {
      "name": "func mouseUp(with: NSEvent)"
    },
    {
      "name": "func otherMouseDown(with: NSEvent)"
    },
    {
      "name": "func otherMouseUp(with: NSEvent)"
    },
    {
      "name": "func rightMouseDown(with: NSEvent)"
    },
    {
      "name": "func rightMouseUp(with: NSEvent)"
    },
    {
      "name": "func mouseEntered(with: NSEvent)"
    },
    {
      "name": "func mouseExited(with: NSEvent)"
    },
    {
      "name": "func mouseDragged(with: NSEvent)"
    },
    {
      "name": "func otherMouseDragged(with: NSEvent)"
    },
    {
      "name": "func rightMouseDragged(with: NSEvent)"
    },
    {
      "name": "func touchesBegan(with: NSEvent)"
    },
    {
      "name": "func touchesCancelled(with: NSEvent)"
    },
    {
      "name": "func touchesEnded(with: NSEvent)"
    },
    {
      "name": "func touchesMoved(with: NSEvent)"
    },
    {
      "name": "func magnify(with: NSEvent)"
    },
    {
      "name": "func rotate(with: NSEvent)"
    },
    {
      "name": "func scrollWheel(with: NSEvent)"
    },
    {
      "name": "func draggingSession(NSDraggingSession, sourceOperationMaskFor: NSDraggingContext) -> NSDragOperation"
    },
    {
      "name": "func menu(for: NSEvent) -> NSMenu?"
    },
    {
      "name": "func responds(to: Selector!) -> Bool"
    },
    {
      "name": "func forwardingTarget(for: Selector!) -> Any?"
    },
    {
      "name": "var acceptsFirstResponder: Bool"
    },
    {
      "name": "var needsPanelToBecomeKey: Bool"
    },
    {
      "name": "func viewWillMove(toWindow: NSWindow?)"
    },
    {
      "name": "func viewDidMoveToWindow()"
    },
    {
      "name": "func viewDidMoveToSuperview()"
    },
    {
      "name": "func viewDidChangeBackingProperties()"
    },
    {
      "name": "func viewDidChangeEffectiveAppearance()"
    },
    {
      "name": "func renewGState()"
    },
    {
      "name": "var intrinsicContentSize: NSSize"
    },
    {
      "name": "func setFrameSize(NSSize)"
    },
    {
      "name": "var firstBaselineOffsetFromTop: CGFloat"
    },
    {
      "name": "var lastBaselineOffsetFromBottom: CGFloat"
    },
    {
      "name": "func hitTest(NSPoint) -> NSView?"
    },
    {
      "name": "var accessibilityFocusedUIElement: Any?"
    },
    {
      "name": "func accessibilityChildren() -> [Any]?"
    },
    {
      "name": "func accessibilityHitTest(NSPoint) -> Any?"
    },
    {
      "name": "func validateUserInterfaceItem(NSValidatedUserInterfaceItem) -> Bool"
    },
    {
      "name": "func observeValue(forKeyPath: String?, of: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?)"
    },
    {
      "name": "var firstTextLineCenter: CGFloat?"
    },
    {
      "name": "func accessibilityChildrenInNavigationOrder() -> [NSAccessibilityElementProtocol]?"
    },
    {
      "name": "func doCommand(by: Selector)"
    },
    {
      "name": "func draggingSession(NSDraggingSession, endedAt: NSPoint, operation: NSDragOperation)"
    },
    {
      "name": "func draggingSession(NSDraggingSession, willBeginAt: NSPoint)"
    },
    {
      "name": "func keyDown(with: NSEvent)",
      "desc": "Called when the user presses a key on the keyboard while this view is in the first responderâ€™s chain."
    },
    {
      "name": "func performKeyEquivalent(with: NSEvent) -> Bool"
    },
    {
      "name": "func validRequestor(forSendType: NSPasteboard.PasteboardType?, returnType: NSPasteboard.PasteboardType?) -> Any?"
    }
  ],
  "declaration": "class NSHostingView<Content> where Content : View",
  "inheritsFrom": [
    "NSView"
  ],
  "conformsTo": [
    "CVarArg",
    "CustomDebugStringConvertible",
    "CustomStringConvertible",
    "Equatable",
    "Hashable",
    "NSAccessibilityElementProtocol",
    "NSAccessibilityProtocol",
    "NSAnimatablePropertyContainer",
    "NSAppearanceCustomization",
    "NSCoding",
    "NSDraggingDestination",
    "NSDraggingSource",
    "NSObjectProtocol",
    "NSStandardKeyBindingResponding",
    "NSTouchBarProvider",
    "NSUserActivityRestoring",
    "NSUserInterfaceItemIdentification",
    "NSUserInterfaceValidations"
  ]
}