{
  "path": "/documentation/swiftui/keyequivalent",
  "type": "Structure",
  "name": "KeyEquivalent",
  "desc": "Key equivalents consist of a letter, punctuation, or function key that can be combined with an optional set of modifier keys to specify a keyboard shortcut.",
  "items": [
    {
      "name": "static let upArrow: KeyEquivalent",
      "desc": "Up Arrow (U+F700)"
    },
    {
      "name": "static let downArrow: KeyEquivalent",
      "desc": "Down Arrow (U+F701)"
    },
    {
      "name": "static let leftArrow: KeyEquivalent",
      "desc": "Left Arrow (U+F702)"
    },
    {
      "name": "static let rightArrow: KeyEquivalent",
      "desc": "Right Arrow (U+F703)"
    },
    {
      "name": "static let clear: KeyEquivalent",
      "desc": "Clear (U+F739)"
    },
    {
      "name": "static let delete: KeyEquivalent",
      "desc": "Delete (U+0008)"
    },
    {
      "name": "static let deleteForward: KeyEquivalent",
      "desc": "Delete Forward (U+F728)"
    },
    {
      "name": "static let end: KeyEquivalent",
      "desc": "End (U+F72B)"
    },
    {
      "name": "static let escape: KeyEquivalent",
      "desc": "Escape (U+001B)"
    },
    {
      "name": "static let home: KeyEquivalent",
      "desc": "Home (U+F729)"
    },
    {
      "name": "static let pageDown: KeyEquivalent",
      "desc": "Page Down (U+F72D)"
    },
    {
      "name": "static let pageUp: KeyEquivalent",
      "desc": "Page Up (U+F72C)"
    },
    {
      "name": "static let `return`: KeyEquivalent",
      "desc": "Return (U+000D)"
    },
    {
      "name": "static let space: KeyEquivalent",
      "desc": "Space (U+0020)"
    },
    {
      "name": "static let tab: KeyEquivalent",
      "desc": "Tab (U+0009)"
    },
    {
      "name": "init(Character)",
      "desc": "Creates a new key equivalent from the given character value."
    },
    {
      "name": "var character: Character",
      "desc": "The character value that the key equivalent represents."
    }
  ],
  "declaration": "struct KeyEquivalent",
  "conformsTo": [
    "ExpressibleByExtendedGraphemeClusterLiteral",
    "ExpressibleByUnicodeScalarLiteral"
  ]
}