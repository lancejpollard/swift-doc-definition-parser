{
  "path": "/documentation/SwiftUI/Text",
  "type": "Structure",
  "name": "Text",
  "desc": "A view that displays one or more lines of read-only text.",
  "items": [
    {
      "name": "init(LocalizedStringKey, tableName: String?, bundle: Bundle?, comment: StaticString?)",
      "desc": "Creates a text view that displays localized content identified by a key."
    },
    {
      "name": "init<S>(S)",
      "desc": "Creates a text view that displays a stored string without localization."
    },
    {
      "name": "init(verbatim: String)",
      "desc": "Creates a text view that displays a string literal without localization."
    },
    {
      "name": "init(AttributedString)",
      "desc": "Creates a text view that displays styled attributed content."
    },
    {
      "name": "init(ClosedRange<Date>)",
      "desc": "Creates an instance that displays a localized range between two dates."
    },
    {
      "name": "init(DateInterval)",
      "desc": "Creates an instance that displays a localized time interval."
    },
    {
      "name": "init(Date, style: Text.DateStyle)",
      "desc": "Creates an instance that displays localized dates and times using a specific style."
    },
    {
      "name": "init<F>(F.FormatInput, format: F)",
      "desc": "Creates a text view that displays the formatted representation of a nonstring type supported by a corresponding format style."
    },
    {
      "name": "init<Subject>(Subject, formatter: Formatter)",
      "desc": "Creates a text view that displays the formatted representation of a reference-convertible value."
    },
    {
      "name": "init<Subject>(Subject, formatter: Formatter)",
      "desc": "Creates a text view that displays the formatted representation of a Foundation object."
    },
    {
      "name": "init(Image)",
      "desc": "Creates an instance that wraps an Image, suitable for concatenating with other Text"
    },
    {
      "name": "func font(Font?) -> Text",
      "desc": "Sets the default font for text in the view."
    },
    {
      "name": "func fontWeight(Font.Weight?) -> Text",
      "desc": "Sets the font weight of the text."
    },
    {
      "name": "func foregroundColor(Color?) -> Text",
      "desc": "Sets the color of the text displayed by this view."
    },
    {
      "name": "func bold() -> Text",
      "desc": "Applies a bold font weight to the text."
    },
    {
      "name": "func italic() -> Text",
      "desc": "Applies italics to the text."
    },
    {
      "name": "func strikethrough(Bool, color: Color?) -> Text",
      "desc": "Applies a strikethrough to the text."
    },
    {
      "name": "func underline(Bool, color: Color?) -> Text",
      "desc": "Applies an underline to the text."
    },
    {
      "name": "func monospacedDigit() -> Text",
      "desc": "Modifies the text viewâ€™s font to use fixed-width digits, while leaving other characters proportionally spaced."
    },
    {
      "name": "func kerning(CGFloat) -> Text",
      "desc": "Sets the spacing, or kerning, between characters."
    },
    {
      "name": "func tracking(CGFloat) -> Text",
      "desc": "Sets the tracking for the text."
    },
    {
      "name": "func baselineOffset(CGFloat) -> Text",
      "desc": "Sets the vertical offset for the text relative to its baseline."
    },
    {
      "name": "func textCase(Text.Case?) -> some View",
      "desc": "Sets a transform for the case of the text contained in this view when displayed."
    },
    {
      "name": "func allowsTightening(Bool) -> some View",
      "desc": "Sets whether text in this view can compress the space between characters when necessary to fit text in a line."
    },
    {
      "name": "func minimumScaleFactor(CGFloat) -> some View",
      "desc": "Sets the minimum amount that text in this view scales down to fit in the available space."
    },
    {
      "name": "func truncationMode(Text.TruncationMode) -> some View",
      "desc": "Sets the truncation mode for lines of text that are too long to fit in the available space."
    },
    {
      "name": "func lineLimit(Int?) -> some View",
      "desc": "Sets the maximum number of lines that text can occupy in this view."
    },
    {
      "name": "func lineSpacing(CGFloat) -> some View",
      "desc": "Sets the amount of space between lines of text in this view."
    },
    {
      "name": "func multilineTextAlignment(TextAlignment) -> some View",
      "desc": "Sets the alignment of multiline text in this view."
    },
    {
      "name": "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
      "desc": "Sets whether this view flips its contents horizontally when the layout direction is right-to-left."
    },
    {
      "name": "func speechAdjustedPitch(Double) -> Text",
      "desc": "Raises or lowers the pitch of spoken text."
    },
    {
      "name": "func speechAlwaysIncludesPunctuation(Bool) -> Text",
      "desc": "Sets whether VoiceOver should always speak all punctuation in the text view."
    },
    {
      "name": "func speechAnnouncementsQueued(Bool) -> Text",
      "desc": "Controls whether to queue pending announcements behind existing speech rather than interrupting speech in progress."
    },
    {
      "name": "func speechSpellsOutCharacters(Bool) -> Text",
      "desc": "Sets whether VoiceOver should speak the contents of the text view character by character."
    },
    {
      "name": "func accessibilityHeading(AccessibilityHeadingLevel) -> Text",
      "desc": "Sets the accessibility level of this heading."
    },
    {
      "name": "func accessibilityLabel<S>(S) -> Text",
      "desc": "Adds a label to the view that describes its contents."
    },
    {
      "name": "func accessibilityLabel(Text) -> Text",
      "desc": "Adds a label to the view that describes its contents."
    },
    {
      "name": "func accessibilityLabel(LocalizedStringKey) -> Text",
      "desc": "Adds a label to the view that describes its contents."
    },
    {
      "name": "func accessibilityTextContentType(AccessibilityTextContentType) -> Text",
      "desc": "Sets an accessibility text content type."
    },
    {
      "name": "static func + (Text, Text) -> Text",
      "desc": "Concatenates the text in two text views in a new text view."
    },
    {
      "name": "static func == (Text, Text) -> Bool",
      "desc": "Indicates whether two text views are equal."
    },
    {
      "name": "static func != (Self, Self) -> Bool",
      "desc": "Indicates whether two text views are unequal."
    }
  ],
  "declaration": "@frozen struct Text",
  "conformsTo": [
    "Equatable",
    "View"
  ]
}