{
  "path": "/documentation/swiftui/font",
  "type": "Structure",
  "name": "Font",
  "desc": "An environment-dependent font.",
  "items": [
    {
      "name": "static let largeTitle: Font",
      "desc": "A font with the large title text style."
    },
    {
      "name": "static let title: Font",
      "desc": "A font with the title text style."
    },
    {
      "name": "static let title2: Font",
      "desc": "Create a font for second level hierarchical headings."
    },
    {
      "name": "static let title3: Font",
      "desc": "Create a font for third level hierarchical headings."
    },
    {
      "name": "static let headline: Font",
      "desc": "A font with the headline text style."
    },
    {
      "name": "static let subheadline: Font",
      "desc": "A font with the subheadline text style."
    },
    {
      "name": "static let body: Font",
      "desc": "A font with the body text style."
    },
    {
      "name": "static let callout: Font",
      "desc": "A font with the callout text style."
    },
    {
      "name": "static let caption: Font",
      "desc": "A font with the caption text style."
    },
    {
      "name": "static let caption2: Font",
      "desc": "Create a font with the alternate caption text style."
    },
    {
      "name": "static let footnote: Font",
      "desc": "A font with the footnote text style."
    },
    {
      "name": "static func system(Font.TextStyle, design: Font.Design) -> Font",
      "desc": "Gets a system font with the given style and design."
    },
    {
      "name": "static func system(size: CGFloat, weight: Font.Weight, design: Font.Design) -> Font",
      "desc": "Specifies a system font to use, along with the style, weight, and any design parameters you want applied to the text."
    },
    {
      "name": "enum Design",
      "desc": "A design to use for fonts."
    },
    {
      "name": "enum TextStyle",
      "desc": "A dynamic text style to use for fonts."
    },
    {
      "name": "struct Weight",
      "desc": "A weight to use for fonts."
    },
    {
      "name": "static func custom(String, fixedSize: CGFloat) -> Font",
      "desc": "Create a custom font with the given name and a fixed size that does not scale with Dynamic Type."
    },
    {
      "name": "static func custom(String, size: CGFloat, relativeTo: Font.TextStyle) -> Font",
      "desc": "Create a custom font with the given name and size that scales relative to the given textStyle."
    },
    {
      "name": "static func custom(String, size: CGFloat) -> Font",
      "desc": "Create a custom font with the given name and size that scales with the body text style."
    },
    {
      "name": "init(CTFont)",
      "desc": "Creates a custom font from a platform font instance."
    },
    {
      "name": "func bold() -> Font",
      "desc": "Adds bold styling to the font."
    },
    {
      "name": "func italic() -> Font",
      "desc": "Adds italics to the font."
    },
    {
      "name": "func monospaced() -> Font",
      "desc": "Returns a fixed-width font from the same family as the base font."
    },
    {
      "name": "func monospacedDigit() -> Font",
      "desc": "Returns a modified font that uses fixed-width digits, while leaving other characters proportionally spaced."
    },
    {
      "name": "func smallCaps() -> Font",
      "desc": "Adjusts the font to enable all small capitals."
    },
    {
      "name": "func lowercaseSmallCaps() -> Font",
      "desc": "Adjusts the font to enable lowercase small capitals."
    },
    {
      "name": "func uppercaseSmallCaps() -> Font",
      "desc": "Adjusts the font to enable uppercase small capitals."
    },
    {
      "name": "func weight(Font.Weight) -> Font",
      "desc": "Sets the weight of the font."
    },
    {
      "name": "func leading(Font.Leading) -> Font",
      "desc": "Create a version of self that uses leading (line spacing) adjustment."
    },
    {
      "name": "enum Leading"
    },
    {
      "name": "static func == (Font, Font) -> Bool",
      "desc": "Indicates whether two fonts are equal."
    },
    {
      "name": "static func != (Self, Self) -> Bool",
      "desc": "Indicates whether two fonts are unequal."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of the font by passing them into the given hash function."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hashed value of the font."
    }
  ],
  "declaration": "@frozen struct Font",
  "conformsTo": [
    "Equatable",
    "Hashable"
  ]
}