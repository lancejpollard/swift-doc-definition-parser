{
  "path": "/documentation/swiftui/textfield",
  "type": "Structure",
  "name": "TextField",
  "desc": "A control that displays an editable text interface.",
  "items": [
    {
      "name": "init<S>(S, text: Binding<String>)",
      "desc": "Creates a text field with a text label generated from a title string."
    },
    {
      "name": "init(LocalizedStringKey, text: Binding<String>)",
      "desc": "Creates a text field with a text label generated from a localized title string."
    },
    {
      "name": "init(LocalizedStringKey, text: Binding<String>, prompt: Text?)",
      "desc": "Creates a text field with a text label generated from a localized title string."
    },
    {
      "name": "init<S>(S, text: Binding<String>, prompt: Text?)",
      "desc": "Creates a text field with a text label generated from a title string."
    },
    {
      "name": "init(text: Binding<String>, prompt: Text?, label: () -> Label)",
      "desc": "Creates a text field with a prompt generated from a Text."
    },
    {
      "name": "init<F>(LocalizedStringKey, value: Binding<F.FormatInput>, format: F, prompt: Text?)",
      "desc": "Creates a text field that applies a format style to a bound value, with a label generated from a localized title string."
    },
    {
      "name": "init<S, F>(S, value: Binding<F.FormatInput>, format: F, prompt: Text?)",
      "desc": "Creates a text field that applies a format style to a bound value, with a label generated from a title string."
    },
    {
      "name": "init<F>(value: Binding<F.FormatInput>, format: F, prompt: Text?, label: () -> Label)",
      "desc": "Creates a text field that applies a format style to a bound value, with a label generated from a view builder."
    },
    {
      "name": "init<S, V>(S, value: Binding<V>, formatter: Formatter)",
      "desc": "Create an instance which binds over an arbitrary type, V."
    },
    {
      "name": "init<V>(LocalizedStringKey, value: Binding<V>, formatter: Formatter)",
      "desc": "Create an instance which binds over an arbitrary type, V."
    },
    {
      "name": "init<V>(LocalizedStringKey, value: Binding<V>, formatter: Formatter, prompt: Text?)",
      "desc": "Creates a text field that applies a formatter to a bound value, with a label generated from a localized title string."
    },
    {
      "name": "init<S, V>(S, value: Binding<V>, formatter: Formatter, prompt: Text?)",
      "desc": "Creates a text field that applies a formatter to a bound value, with a label generated from a title string."
    },
    {
      "name": "init<V>(value: Binding<V>, formatter: Formatter, prompt: Text?, label: () -> Label)",
      "desc": "Creates a text field that applies a formatter to a bound optional value, with a label generated from a view builder."
    },
    {
      "name": "init<F>(LocalizedStringKey, value: Binding<F.FormatInput?>, format: F, prompt: Text?)",
      "desc": "Creates a text field that applies a format style to a bound optional value, with a label generated from a localized title string."
    },
    {
      "name": "init<S, F>(S, value: Binding<F.FormatInput?>, format: F, prompt: Text?)",
      "desc": "Creates a text field that applies a format style to a bound optional value, with a label generated from a title string."
    },
    {
      "name": "init<F>(value: Binding<F.FormatInput?>, format: F, prompt: Text?, label: () -> Label)",
      "desc": "Creates a text field that applies a format style to a bound optional value, with a label generated from a view builder."
    },
    {
      "name": "func textFieldStyle<S>(S) -> some View",
      "desc": "Sets the style for text fields within this view."
    },
    {
      "name": "protocol TextFieldStyle",
      "desc": "A specification for the appearance and interaction of a text field."
    },
    {
      "name": "var body: some View",
      "desc": "The content and behavior of the view."
    },
    {
      "name": "typealias Body",
      "desc": "The type of view representing the body of this view."
    }
  ],
  "declaration": "struct TextField<Label> where Label : View",
  "conformsTo": [
    "View"
  ]
}