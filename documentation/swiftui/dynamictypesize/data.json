{
  "path": "/documentation/swiftui/dynamictypesize",
  "type": "Enumeration",
  "name": "DynamicTypeSize",
  "desc": "A Dynamic Type size, which specifies how large scalable content should be.",
  "items": [
    {
      "name": "case xSmall",
      "desc": "An extra small size."
    },
    {
      "name": "case small",
      "desc": "A small size."
    },
    {
      "name": "case medium",
      "desc": "A medium size."
    },
    {
      "name": "case large",
      "desc": "A large size."
    },
    {
      "name": "case xLarge",
      "desc": "An extra large size."
    },
    {
      "name": "case xxLarge",
      "desc": "An extra extra large size."
    },
    {
      "name": "case xxxLarge",
      "desc": "An extra extra extra large size."
    },
    {
      "name": "case accessibility1",
      "desc": "The first accessibility size."
    },
    {
      "name": "case accessibility2",
      "desc": "The second accessibility size."
    },
    {
      "name": "case accessibility3",
      "desc": "The third accessibility size."
    },
    {
      "name": "case accessibility4",
      "desc": "The fourth accessibility size."
    },
    {
      "name": "case accessibility5",
      "desc": "The fifth accessibility size."
    },
    {
      "name": "var isAccessibilitySize: Bool",
      "desc": "A Boolean value indicating whether the size is one that is associated with accessibility."
    },
    {
      "name": "init?(UIContentSizeCategory)",
      "desc": "Create a Dynamic Type size from its UIContentSizeCategory equivalent."
    },
    {
      "name": "static var allCases: [DynamicTypeSize]",
      "desc": "A collection of all values of this type."
    },
    {
      "name": "typealias AllCases",
      "desc": "A type that can represent a collection of all values of this type."
    },
    {
      "name": "static func == (DynamicTypeSize, DynamicTypeSize) -> Bool",
      "desc": "Indicates whether two dynamic type sizes are equal."
    },
    {
      "name": "static func != (Self, Self) -> Bool",
      "desc": "Indicates whether two dynamic type sizes are unequal."
    },
    {
      "name": "static func < (DynamicTypeSize, DynamicTypeSize) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of the dynamic type size by passing them into the given hash function."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hashed value of the dynamic type size."
    }
  ],
  "declaration": "enum DynamicTypeSize",
  "conformsTo": [
    "CaseIterable",
    "Comparable",
    "Equatable",
    "Hashable"
  ]
}