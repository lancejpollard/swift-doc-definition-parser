{
  "path": "/documentation/swiftui/accessibilityrotorentry",
  "type": "Structure",
  "name": "AccessibilityRotorEntry",
  "desc": "A struct representing an entry in an Accessibility Rotor.",
  "items": [
    {
      "name": "init<L>(L, ID, in: Namespace.ID, textRange: Range<String.Index>?, prepare: (() -> Void))",
      "desc": "Create a Rotor entry with a specific label, identifier and namespace, and with an optional range."
    },
    {
      "name": "init(LocalizedStringKey, id: ID, in: Namespace.ID, textRange: Range<String.Index>?, prepare: (() -> Void))",
      "desc": "Create a Rotor entry with a specific label, identifier and namespace, and with an optional range."
    },
    {
      "name": "init(Text, id: ID, in: Namespace.ID, textRange: Range<String.Index>?, prepare: (() -> Void))",
      "desc": "Create a Rotor entry with a specific label, identifier and namespace, and with an optional range."
    },
    {
      "name": "init(Text, id: ID, textRange: Range<String.Index>?, prepare: (() -> Void))",
      "desc": "Create a Rotor entry with a specific label and identifier, with an optional range."
    },
    {
      "name": "init<L>(L, id: ID, textRange: Range<String.Index>?, prepare: (() -> Void))",
      "desc": "Create a Rotor entry with a specific label and identifier, with an optional range."
    },
    {
      "name": "init(LocalizedStringKey, id: ID, textRange: Range<String.Index>?, prepare: (() -> Void))",
      "desc": "Create a Rotor entry with a specific label and identifier, with an optional range."
    },
    {
      "name": "init(LocalizedStringKey, textRange: Range<String.Index>, prepare: (() -> Void))",
      "desc": "Create a Rotor entry with a specific label and range. This Rotor entry will be associated with the Accessibility element that owns the Rotor."
    },
    {
      "name": "init(Text?, textRange: Range<String.Index>, prepare: (() -> Void))",
      "desc": "Create a Rotor entry with a specific label and range. This Rotor entry will be associated with the Accessibility element that owns the Rotor."
    },
    {
      "name": "init<L>(L, textRange: Range<String.Index>, prepare: (() -> Void))",
      "desc": "Create a Rotor entry with a specific label and range. This Rotor entry will be associated with the Accessibility element that owns the Rotor."
    }
  ],
  "declaration": "struct AccessibilityRotorEntry<ID> where ID : Hashable",
  "conformsTo": [
    "AccessibilityRotorContent"
  ]
}