{
  "path": "/documentation/swiftui/symbolvariants",
  "type": "Structure",
  "name": "SymbolVariants",
  "desc": "A variant of a symbol.",
  "items": [
    {
      "name": "static let none: SymbolVariants",
      "desc": "No variant for a symbol."
    },
    {
      "name": "static let circle: SymbolVariants",
      "desc": "A variant that encapsulates the symbol in a circle."
    },
    {
      "name": "static let square: SymbolVariants",
      "desc": "A variant that encapsulates the symbol in a square."
    },
    {
      "name": "static let rectangle: SymbolVariants",
      "desc": "A variant that encapsulates the symbol in a rectangle."
    },
    {
      "name": "static let fill: SymbolVariants",
      "desc": "A variant that fills the symbol."
    },
    {
      "name": "static let slash: SymbolVariants",
      "desc": "A variant that draws a slash through the symbol."
    },
    {
      "name": "var circle: SymbolVariants",
      "desc": "A version of the variant that’s encapsulated in a circle."
    },
    {
      "name": "var square: SymbolVariants",
      "desc": "A version of the variant that’s encapsulated in a square."
    },
    {
      "name": "var rectangle: SymbolVariants",
      "desc": "A version of the variant that’s encapsulated in a rectangle."
    },
    {
      "name": "var fill: SymbolVariants",
      "desc": "A filled version of the variant."
    },
    {
      "name": "var slash: SymbolVariants",
      "desc": "A slashed version of the variant."
    },
    {
      "name": "func contains(SymbolVariants) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the current variant contains the specified variant."
    },
    {
      "name": "static func == (SymbolVariants, SymbolVariants) -> Bool",
      "desc": "Indicates whether two symbol variants are equal."
    },
    {
      "name": "static func != (Self, Self) -> Bool",
      "desc": "Indicates whether two symbol variants are unequal."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of the symbol variant by passing them into the given hash function."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hashed value of the symbol variant."
    }
  ],
  "declaration": "struct SymbolVariants",
  "conformsTo": [
    "Equatable",
    "Hashable"
  ]
}