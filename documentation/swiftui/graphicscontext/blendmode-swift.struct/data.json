{
  "path": "/documentation/swiftui/graphicscontext/blendmode-swift.struct",
  "type": "Structure",
  "name": "GraphicsContext.BlendMode",
  "desc": "The ways that a graphics context combines new content with background content.",
  "items": [
    {
      "name": "static var normal: GraphicsContext.BlendMode",
      "desc": "A mode that paints source image samples over the background image samples."
    },
    {
      "name": "static var darken: GraphicsContext.BlendMode",
      "desc": "A mode that creates composite image samples by choosing the darker samples from either the source image or the background."
    },
    {
      "name": "static var multiply: GraphicsContext.BlendMode",
      "desc": "A mode that multiplies the source image samples with the background image samples."
    },
    {
      "name": "static var colorBurn: GraphicsContext.BlendMode",
      "desc": "A mode that darkens background image samples to reflect the source image samples."
    },
    {
      "name": "static var plusDarker: GraphicsContext.BlendMode",
      "desc": "A mode that adds the inverse of the color components of the source and background images, and then inverts the result, producing a darkened composite."
    },
    {
      "name": "static var lighten: GraphicsContext.BlendMode",
      "desc": "A mode that creates composite image samples by choosing the lighter samples from either the source image or the background."
    },
    {
      "name": "static var screen: GraphicsContext.BlendMode",
      "desc": "A mode that multiplies the inverse of the source image samples with the inverse of the background image samples."
    },
    {
      "name": "static var colorDodge: GraphicsContext.BlendMode",
      "desc": "A mode that brightens the background image samples to reflect the source image samples."
    },
    {
      "name": "static var plusLighter: GraphicsContext.BlendMode",
      "desc": "A mode that adds the components of the source and background images, resulting in a lightened composite."
    },
    {
      "name": "static var overlay: GraphicsContext.BlendMode",
      "desc": "A mode that either multiplies or screens the source image samples with the background image samples, depending on the background color."
    },
    {
      "name": "static var softLight: GraphicsContext.BlendMode",
      "desc": "A mode that either darkens or lightens colors, depending on the source image sample color."
    },
    {
      "name": "static var hardLight: GraphicsContext.BlendMode",
      "desc": "A mode that either multiplies or screens colors, depending on the source image sample color."
    },
    {
      "name": "static var difference: GraphicsContext.BlendMode",
      "desc": "A mode that subtracts the brighter of the source image sample color or the background image sample color from the other."
    },
    {
      "name": "static var exclusion: GraphicsContext.BlendMode",
      "desc": "A mode that produces an effect similar to that produced by the difference blend mode, but with lower contrast."
    },
    {
      "name": "static var hue: GraphicsContext.BlendMode",
      "desc": "A mode that uses the luminance and saturation values of the background with the hue of the source image."
    },
    {
      "name": "static var saturation: GraphicsContext.BlendMode",
      "desc": "A mode that uses the luminance and hue values of the background with the saturation of the source image."
    },
    {
      "name": "static var color: GraphicsContext.BlendMode",
      "desc": "A mode that uses the luminance values of the background with the hue and saturation values of the source image."
    },
    {
      "name": "static var luminosity: GraphicsContext.BlendMode",
      "desc": "A mode that uses the hue and saturation of the background with the luminance of the source image."
    },
    {
      "name": "static var clear: GraphicsContext.BlendMode",
      "desc": "A mode that clears any pixels that the source image overwrites."
    },
    {
      "name": "static var copy: GraphicsContext.BlendMode",
      "desc": "A mode that replaces background image samples with source image samples."
    },
    {
      "name": "static var sourceIn: GraphicsContext.BlendMode",
      "desc": "A mode that you use to paint the source image, including its transparency, onto the opaque parts of the background."
    },
    {
      "name": "static var sourceOut: GraphicsContext.BlendMode",
      "desc": "A mode that you use to paint the source image onto the transparent parts of the background, while erasing the background."
    },
    {
      "name": "static var sourceAtop: GraphicsContext.BlendMode",
      "desc": "A mode that you use to paint the opaque parts of the source image onto the opaque parts of the background."
    },
    {
      "name": "static var destinationOver: GraphicsContext.BlendMode",
      "desc": "A mode that you use to paint the source image under the background."
    },
    {
      "name": "static var destinationIn: GraphicsContext.BlendMode",
      "desc": "A mode that you use to erase any of the background that isnâ€™t covered by opaque source pixels."
    },
    {
      "name": "static var destinationOut: GraphicsContext.BlendMode",
      "desc": "A mode that you use to erase any of the background that is covered by opaque source pixels."
    },
    {
      "name": "static var destinationAtop: GraphicsContext.BlendMode",
      "desc": "A mode that you use to paint the source image under the background, while erasing any of the background not matched by opaque pixels from the source image."
    },
    {
      "name": "static var xor: GraphicsContext.BlendMode",
      "desc": "A mode that you use to clear pixels where both the source and background images are opaque."
    },
    {
      "name": "init(rawValue: Int32)",
      "desc": "Creates a new instance with the specified raw value."
    },
    {
      "name": "let rawValue: Int32",
      "desc": "The corresponding value of the raw type."
    },
    {
      "name": "typealias RawValue",
      "desc": "The raw type that can be used to represent all values of the conforming type."
    }
  ],
  "declaration": "@frozen struct BlendMode",
  "conformsTo": [
    "Equatable",
    "RawRepresentable",
    "Sendable"
  ]
}