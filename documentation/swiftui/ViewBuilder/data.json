{
  "path": "/documentation/swiftui/viewbuilder",
  "type": "Structure",
  "name": "ViewBuilder",
  "desc": "A custom parameter attribute that constructs views from closures.",
  "items": [
    {
      "name": "static func buildBlock() -> EmptyView",
      "desc": "Builds an empty view from a block containing no statements."
    },
    {
      "name": "static func buildBlock<Content>(Content) -> Content",
      "desc": "Passes a single view written as a child view through unmodified."
    },
    {
      "name": "static func buildBlock<C0, C1>(C0, C1) -> TupleView<(C0, C1)>"
    },
    {
      "name": "static func buildBlock<C0, C1, C2>(C0, C1, C2) -> TupleView<(C0, C1, C2)>"
    },
    {
      "name": "static func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> TupleView<(C0, C1, C2, C3)>"
    },
    {
      "name": "static func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> TupleView<(C0, C1, C2, C3, C4)>"
    },
    {
      "name": "static func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> TupleView<(C0, C1, C2, C3, C4, C5)>"
    },
    {
      "name": "static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> TupleView<(C0, C1, C2, C3, C4, C5, C6)>"
    },
    {
      "name": "static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> TupleView<(C0, C1, C2, C3, C4, C5, C6, C7)>"
    },
    {
      "name": "static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> TupleView<(C0, C1, C2, C3, C4, C5, C6, C7, C8)>"
    },
    {
      "name": "static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleView<(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>"
    },
    {
      "name": "static func buildEither<TrueContent, FalseContent>(first: TrueContent) -> _ConditionalContent<TrueContent, FalseContent>",
      "desc": "Provides support for “if” statements in multi-statement closures, producing conditional content for the “then” branch."
    },
    {
      "name": "static func buildEither<TrueContent, FalseContent>(second: FalseContent) -> _ConditionalContent<TrueContent, FalseContent>",
      "desc": "Provides support for “if-else” statements in multi-statement closures, producing conditional content for the “else” branch."
    },
    {
      "name": "static func buildIf<Content>(Content?) -> Content?",
      "desc": "Provides support for “if” statements in multi-statement closures, producing an optional view that is visible only when the condition evaluates to true."
    },
    {
      "name": "static func buildLimitedAvailability<Content>(Content) -> AnyView",
      "desc": "Provides support for “if” statements with #available() clauses in multi-statement closures, producing conditional content for the “then” branch, i.e. the conditionally-available branch."
    }
  ],
  "declaration": "@resultBuilder struct ViewBuilder"
}