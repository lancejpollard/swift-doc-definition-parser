{
  "path": "/documentation/swiftui/accessibilitytechnologies",
  "type": "Structure",
  "name": "AccessibilityTechnologies",
  "desc": "Accessibility technologies available to the system.",
  "items": [
    {
      "name": "static func == (AccessibilityTechnologies, AccessibilityTechnologies) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are equal."
    },
    {
      "name": "init()",
      "desc": "Creates a new accessibility technologies structure with an empy accessibility technology set."
    },
    {
      "name": "func contains(AccessibilityTechnologies) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the given element exists in the set."
    },
    {
      "name": "func formIntersection(AccessibilityTechnologies)",
      "desc": "Removes the elements of this set that arenâ€™t also in the given set."
    },
    {
      "name": "func formSymmetricDifference(AccessibilityTechnologies)",
      "desc": "Removes the elements of the set that are also in the given set and adds the members of the given set that are not already in the set."
    },
    {
      "name": "func formUnion(AccessibilityTechnologies)",
      "desc": "Adds the elements of the given set to the set."
    },
    {
      "name": "func insert(AccessibilityTechnologies) -> (inserted: Bool, memberAfterInsert: AccessibilityTechnologies)",
      "desc": "Inserts the given element in the set if it is not already present."
    },
    {
      "name": "func intersection(AccessibilityTechnologies) -> AccessibilityTechnologies",
      "desc": "Returns a new set with the elements that are common to both this set and the given set."
    },
    {
      "name": "func remove(AccessibilityTechnologies) -> AccessibilityTechnologies?",
      "desc": "Removes the given element and any elements subsumed by the given element."
    },
    {
      "name": "func symmetricDifference(AccessibilityTechnologies) -> AccessibilityTechnologies",
      "desc": "Returns a new set with the elements that are either in this set or in the given set, but not in both."
    },
    {
      "name": "func union(AccessibilityTechnologies) -> AccessibilityTechnologies",
      "desc": "Returns a new set with the elements of both this and the given set."
    },
    {
      "name": "func update(with: AccessibilityTechnologies) -> AccessibilityTechnologies?",
      "desc": "Inserts the given element into the set unconditionally."
    },
    {
      "name": "typealias ArrayLiteralElement",
      "desc": "The type of the elements of an array literal."
    },
    {
      "name": "typealias Element",
      "desc": "A type for which the conforming type provides a containment test."
    },
    {
      "name": "static var switchControl: AccessibilityTechnologies",
      "desc": "The value that represents a switch control, allowing the use of the entire system using controller buttons, a breath-controlled switch or similar hardware."
    },
    {
      "name": "static var voiceOver: AccessibilityTechnologies",
      "desc": "The value that represents the VoiceOver screen reader, allowing use of the system without seeing the screen visually."
    }
  ],
  "declaration": "struct AccessibilityTechnologies",
  "conformsTo": [
    "Equatable",
    "ExpressibleByArrayLiteral",
    "SetAlgebra"
  ]
}