{
  "path": "/documentation/swiftui/color",
  "type": "Structure",
  "name": "Color",
  "desc": "A representation of a color that adapts to a given context.",
  "items": [
    {
      "name": "init(String, bundle: Bundle?)",
      "desc": "Creates a color from a color set that you indicate by name."
    },
    {
      "name": "init(hue: Double, saturation: Double, brightness: Double, opacity: Double)",
      "desc": "Creates a constant color from hue, saturation, and brightness values."
    },
    {
      "name": "init(Color.RGBColorSpace, white: Double, opacity: Double)",
      "desc": "Creates a constant grayscale color."
    },
    {
      "name": "init(Color.RGBColorSpace, red: Double, green: Double, blue: Double, opacity: Double)",
      "desc": "Creates a constant color from red, green, and blue component values."
    },
    {
      "name": "enum RGBColorSpace",
      "desc": "A profile that specifies how to interpret a color value for display."
    },
    {
      "name": "init(uiColor: UIColor)",
      "desc": "Creates a color from a UIKit color."
    },
    {
      "name": "init(nsColor: NSColor)",
      "desc": "Creates a color from an AppKit color."
    },
    {
      "name": "init(cgColor: CGColor)",
      "desc": "Creates a color from a Core Graphics color."
    },
    {
      "name": "var cgColor: CGColor?",
      "desc": "A Core Graphics representation of the color, if available."
    },
    {
      "name": "static let black: Color",
      "desc": "A black color suitable for use in UI elements."
    },
    {
      "name": "static let blue: Color",
      "desc": "A context-dependent blue color suitable for use in UI elements."
    },
    {
      "name": "static let brown: Color",
      "desc": "A context-dependent brown color suitable for use in UI elements."
    },
    {
      "name": "static let clear: Color",
      "desc": "A clear color suitable for use in UI elements."
    },
    {
      "name": "static let cyan: Color",
      "desc": "A context-dependent cyan color suitable for use in UI elements."
    },
    {
      "name": "static let gray: Color",
      "desc": "A context-dependent gray color suitable for use in UI elements."
    },
    {
      "name": "static let green: Color",
      "desc": "A context-dependent green color suitable for use in UI elements."
    },
    {
      "name": "static let indigo: Color",
      "desc": "A context-dependent indigo color suitable for use in UI elements."
    },
    {
      "name": "static let mint: Color",
      "desc": "A context-dependent mint color suitable for use in UI elements."
    },
    {
      "name": "static let orange: Color",
      "desc": "A context-dependent orange color suitable for use in UI elements."
    },
    {
      "name": "static let pink: Color",
      "desc": "A context-dependent pink color suitable for use in UI elements."
    },
    {
      "name": "static let purple: Color",
      "desc": "A context-dependent purple color suitable for use in UI elements."
    },
    {
      "name": "static let red: Color",
      "desc": "A context-dependent red color suitable for use in UI elements."
    },
    {
      "name": "static let teal: Color",
      "desc": "A context-dependent teal color suitable for use in UI elements."
    },
    {
      "name": "static let white: Color",
      "desc": "A white color suitable for use in UI elements."
    },
    {
      "name": "static let yellow: Color",
      "desc": "A context-dependent yellow color suitable for use in UI elements."
    },
    {
      "name": "static var accentColor: Color",
      "desc": "A color that reflects the accent color of the system or app."
    },
    {
      "name": "static let primary: Color",
      "desc": "The color to use for primary content."
    },
    {
      "name": "static let secondary: Color",
      "desc": "The color to use for secondary content."
    },
    {
      "name": "func opacity(Double) -> Color",
      "desc": "Multiplies the opacity of the color by the given amount."
    },
    {
      "name": "var description: String",
      "desc": "A textual representation of the color."
    },
    {
      "name": "static func == (Color, Color) -> Bool",
      "desc": "Indicates whether two colors are equal."
    },
    {
      "name": "static func != (Self, Self) -> Bool",
      "desc": "Indicates whether two colors are unequal."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of the color by feeding them into the given hash function."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hashed value of the color."
    }
  ],
  "declaration": "@frozen struct Color",
  "conformsTo": [
    "CustomStringConvertible",
    "Equatable",
    "Hashable",
    "ShapeStyle",
    "View"
  ]
}