{
  "path": "/documentation/swiftui/localizedstringkey",
  "type": "Structure",
  "name": "LocalizedStringKey",
  "desc": "The key used to look up an entry in a strings file or strings dictionary file.",
  "items": [
    {
      "name": "init(String)",
      "desc": "Creates a localized string key from the given string value."
    },
    {
      "name": "init(stringLiteral: String)",
      "desc": "Creates a localized string key from the given string literal."
    },
    {
      "name": "init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)",
      "desc": "Creates an instance initialized to the given value."
    },
    {
      "name": "init(extendedGraphemeClusterLiteral: Self.StringLiteralType)",
      "desc": "Creates an instance initialized to the given value."
    },
    {
      "name": "typealias StringLiteralType",
      "desc": "A type that represents a string literal."
    },
    {
      "name": "typealias UnicodeScalarLiteralType",
      "desc": "A type that represents a Unicode scalar literal."
    },
    {
      "name": "typealias ExtendedGraphemeClusterLiteralType",
      "desc": "A type that represents an extended grapheme cluster literal."
    },
    {
      "name": "init(stringInterpolation: LocalizedStringKey.StringInterpolation)",
      "desc": "Creates a localized string key from the given string interpolation."
    },
    {
      "name": "struct StringInterpolation",
      "desc": "Represents the contents of a string literal with interpolations while itâ€™s being built, for use in creating a localized string key."
    },
    {
      "name": "static func == (LocalizedStringKey, LocalizedStringKey) -> Bool",
      "desc": "Indicates whether two localized string keys are equal."
    },
    {
      "name": "static func != (Self, Self) -> Bool",
      "desc": "Indicates whether two localized string keys are unequal."
    }
  ],
  "declaration": "@frozen struct LocalizedStringKey",
  "conformsTo": [
    "Equatable",
    "ExpressibleByExtendedGraphemeClusterLiteral",
    "ExpressibleByStringInterpolation",
    "ExpressibleByStringLiteral",
    "ExpressibleByUnicodeScalarLiteral"
  ]
}