{
  "path": "/documentation/swiftui/accessibilitytraits",
  "type": "Structure",
  "name": "AccessibilityTraits",
  "desc": "A set of accessibility traits that describe how an element behaves.",
  "items": [
    {
      "name": "static func == (AccessibilityTraits, AccessibilityTraits) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are equal."
    },
    {
      "name": "init()",
      "desc": "Creates an empty set."
    },
    {
      "name": "func contains(AccessibilityTraits) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the given element exists in the set."
    },
    {
      "name": "func formIntersection(AccessibilityTraits)",
      "desc": "Removes the elements of this set that arenâ€™t also in the given set."
    },
    {
      "name": "func formSymmetricDifference(AccessibilityTraits)",
      "desc": "Removes the elements of the set that are also in the given set and adds the members of the given set that are not already in the set."
    },
    {
      "name": "func formUnion(AccessibilityTraits)",
      "desc": "Adds the elements of the given set to the set."
    },
    {
      "name": "func insert(AccessibilityTraits) -> (inserted: Bool, memberAfterInsert: AccessibilityTraits)",
      "desc": "Inserts the given element in the set if it is not already present."
    },
    {
      "name": "func intersection(AccessibilityTraits) -> AccessibilityTraits",
      "desc": "Returns a new set with the elements that are common to both this set and the given set."
    },
    {
      "name": "func remove(AccessibilityTraits) -> AccessibilityTraits?",
      "desc": "Removes the given element and any elements subsumed by the given element."
    },
    {
      "name": "func symmetricDifference(AccessibilityTraits) -> AccessibilityTraits",
      "desc": "Returns a new set with the elements that are either in this set or in the given set, but not in both."
    },
    {
      "name": "func union(AccessibilityTraits) -> AccessibilityTraits",
      "desc": "Returns a new set with the elements of both this and the given set."
    },
    {
      "name": "func update(with: AccessibilityTraits) -> AccessibilityTraits?",
      "desc": "Inserts the given element into the set unconditionally."
    },
    {
      "name": "typealias ArrayLiteralElement",
      "desc": "The type of the elements of an array literal."
    },
    {
      "name": "typealias Element",
      "desc": "A type for which the conforming type provides a containment test."
    },
    {
      "name": "static let allowsDirectInteraction: AccessibilityTraits",
      "desc": "The accessibility element allows direct touch interaction for VoiceOver users."
    },
    {
      "name": "static let causesPageTurn: AccessibilityTraits",
      "desc": "The accessibility element causes an automatic page turn when VoiceOver finishes reading the text within it."
    },
    {
      "name": "static let isButton: AccessibilityTraits",
      "desc": "The accessibility element is a button."
    },
    {
      "name": "static let isHeader: AccessibilityTraits",
      "desc": "The accessibility element is a header that divides content into sections, like the title of a navigation bar."
    },
    {
      "name": "static let isImage: AccessibilityTraits",
      "desc": "The accessibility element is an image."
    },
    {
      "name": "static let isKeyboardKey: AccessibilityTraits",
      "desc": "The accessibility element behaves as a keyboard key."
    },
    {
      "name": "static let isLink: AccessibilityTraits",
      "desc": "The accessibility element is a link."
    },
    {
      "name": "static let isModal: AccessibilityTraits",
      "desc": "The accessibility element is modal."
    },
    {
      "name": "static let isSearchField: AccessibilityTraits",
      "desc": "The accessibility element is a search field."
    },
    {
      "name": "static let isSelected: AccessibilityTraits",
      "desc": "The accessibility element is currently selected."
    },
    {
      "name": "static let isStaticText: AccessibilityTraits",
      "desc": "The accessibility element is a static text that cannot be modified by the user."
    },
    {
      "name": "static let isSummaryElement: AccessibilityTraits",
      "desc": "The accessibility element provides summary information when the application starts."
    },
    {
      "name": "static let playsSound: AccessibilityTraits",
      "desc": "The accessibility element plays its own sound when activated."
    },
    {
      "name": "static let startsMediaSession: AccessibilityTraits",
      "desc": "The accessibility element starts a media session when it is activated."
    },
    {
      "name": "static let updatesFrequently: AccessibilityTraits",
      "desc": "The accessibility element frequently updates its label or value."
    }
  ],
  "declaration": "struct AccessibilityTraits",
  "conformsTo": [
    "Equatable",
    "ExpressibleByArrayLiteral",
    "SetAlgebra"
  ]
}