{
  "path": "/documentation/swiftui/slider",
  "type": "Structure",
  "name": "Slider",
  "desc": "A control for selecting a value from a bounded linear range of values.",
  "items": [
    {
      "name": "init<V>(value: Binding<V>, in: ClosedRange<V>, onEditingChanged: (Bool) -> Void)",
      "desc": "Creates a slider to select a value from a given range."
    },
    {
      "name": "init<V>(value: Binding<V>, in: ClosedRange<V>, step: V.Stride, onEditingChanged: (Bool) -> Void)",
      "desc": "Creates a slider to select a value from a given range, subject to a step increment."
    },
    {
      "name": "init<V>(value: Binding<V>, in: ClosedRange<V>, label: () -> Label, onEditingChanged: (Bool) -> Void)",
      "desc": "Creates a slider to select a value from a given range, which displays the provided label."
    },
    {
      "name": "init<V>(value: Binding<V>, in: ClosedRange<V>, step: V.Stride, label: () -> Label, onEditingChanged: (Bool) -> Void)",
      "desc": "Creates a slider to select a value from a given range, subject to a step increment, which displays the provided label."
    },
    {
      "name": "init<V>(value: Binding<V>, in: ClosedRange<V>, label: () -> Label, minimumValueLabel: () -> ValueLabel, maximumValueLabel: () -> ValueLabel, onEditingChanged: (Bool) -> Void)",
      "desc": "Creates a slider to select a value from a given range, which displays the provided labels."
    },
    {
      "name": "init<V>(value: Binding<V>, in: ClosedRange<V>, step: V.Stride, label: () -> Label, minimumValueLabel: () -> ValueLabel, maximumValueLabel: () -> ValueLabel, onEditingChanged: (Bool) -> Void)",
      "desc": "Creates a slider to select a value from a given range, subject to a step increment, which displays the provided labels."
    },
    {
      "name": "var body: some View",
      "desc": "The content and behavior of the view."
    },
    {
      "name": "typealias Body",
      "desc": "The type of view representing the body of this view."
    }
  ],
  "declaration": "struct Slider<Label, ValueLabel> where Label : View, ValueLabel : View",
  "conformsTo": [
    "View"
  ]
}