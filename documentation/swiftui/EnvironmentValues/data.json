{
  "path": "/documentation/swiftui/environmentvalues",
  "type": "Structure",
  "name": "EnvironmentValues",
  "desc": "A collection of environment values propagated through a view hierarchy.",
  "items": [
    {
      "name": "init()",
      "desc": "Creates an environment values instance."
    },
    {
      "name": "subscript<K>(K.Type) -> K.Value",
      "desc": "Accesses the environment value associated with a custom key."
    },
    {
      "name": "var description: String",
      "desc": "A string that represents the contents of the environment values instance."
    },
    {
      "name": "var accessibilityDifferentiateWithoutColor: Bool",
      "desc": "Whether the system preference for Differentiate without Color is enabled."
    },
    {
      "name": "var accessibilityEnabled: Bool",
      "desc": "A Boolean value that indicates whether the user has enabled an assistive technology."
    },
    {
      "name": "var accessibilityInvertColors: Bool",
      "desc": "Whether the system preference for Invert Colors is enabled."
    },
    {
      "name": "var accessibilityLargeContentViewerEnabled: Bool",
      "desc": "Whether the Large Content Viewer is enabled."
    },
    {
      "name": "var accessibilityReduceMotion: Bool",
      "desc": "Whether the system preference for Reduce Motion is enabled."
    },
    {
      "name": "var accessibilityReduceTransparency: Bool",
      "desc": "Whether the system preference for Reduce Transparency is enabled."
    },
    {
      "name": "var accessibilityShowButtonShapes: Bool",
      "desc": "Whether the system preference for Show Button Shapes is enabled."
    },
    {
      "name": "var accessibilitySwitchControlEnabled: Bool",
      "desc": "A Boolean value that indicates whether the Switch Control motor accessibility feature is in use."
    },
    {
      "name": "var accessibilityVoiceOverEnabled: Bool",
      "desc": "A Boolean value that indicates whether the VoiceOver screen reader is in use."
    },
    {
      "name": "var legibilityWeight: LegibilityWeight?",
      "desc": "The font weight to apply to text."
    },
    {
      "name": "var dismiss: DismissAction",
      "desc": "An action that dismisses the current presentation."
    },
    {
      "name": "var dismissSearch: DismissSearchAction",
      "desc": "An action that ends the current search interaction."
    },
    {
      "name": "var openURL: OpenURLAction",
      "desc": "An action that opens a URL."
    },
    {
      "name": "var refresh: RefreshAction?",
      "desc": "A refresh action stored in a view’s environment."
    },
    {
      "name": "var resetFocus: ResetFocusAction",
      "desc": "An action that requests the focus system to reevaluate default focus."
    },
    {
      "name": "var colorScheme: ColorScheme",
      "desc": "The color scheme of this environment."
    },
    {
      "name": "var colorSchemeContrast: ColorSchemeContrast",
      "desc": "The contrast associated with the color scheme of this environment."
    },
    {
      "name": "var displayScale: CGFloat",
      "desc": "The display scale of this environment."
    },
    {
      "name": "var horizontalSizeClass: UserInterfaceSizeClass?",
      "desc": "The horizontal size class of this environment."
    },
    {
      "name": "var imageScale: Image.Scale",
      "desc": "The image scale for this environment."
    },
    {
      "name": "var pixelLength: CGFloat",
      "desc": "The size of a pixel on the screen."
    },
    {
      "name": "var verticalSizeClass: UserInterfaceSizeClass?",
      "desc": "The vertical size class of this environment."
    },
    {
      "name": "var widgetFamily: WidgetFamily",
      "desc": "The template of the widget — small, medium, or large."
    },
    {
      "name": "var calendar: Calendar",
      "desc": "The current calendar that views should use when handling dates."
    },
    {
      "name": "var locale: Locale",
      "desc": "The current locale that views should use."
    },
    {
      "name": "var managedObjectContext: NSManagedObjectContext"
    },
    {
      "name": "var timeZone: TimeZone",
      "desc": "The current time zone that views should use when handling dates."
    },
    {
      "name": "var undoManager: UndoManager?",
      "desc": "The undo manager used to register a view’s undo operations."
    },
    {
      "name": "var editMode: Binding<EditMode>?",
      "desc": "An indication of whether the user can edit the contents of a view associated with this environment."
    },
    {
      "name": "var isEnabled: Bool",
      "desc": "A Boolean value that indicates whether the view associated with this environment allows user interaction."
    },
    {
      "name": "var isFocused: Bool",
      "desc": "Returns whether the nearest focusable ancestor has focus."
    },
    {
      "name": "var isLuminanceReduced: Bool",
      "desc": "A Boolean value that indicates whether the display currently requires reduced luminance."
    },
    {
      "name": "var isPresented: Bool",
      "desc": "A Boolean value that indicates whether the view associated with this environment is currently presented."
    },
    {
      "name": "var isSearching: Bool",
      "desc": "A Boolean value that indicates when the user is searching."
    },
    {
      "name": "var scenePhase: ScenePhase",
      "desc": "The current phase of the scene."
    },
    {
      "name": "var allowsTightening: Bool",
      "desc": "A Boolean value that indicates whether inter-character spacing should tighten to fit the text into the available space."
    },
    {
      "name": "var disableAutocorrection: Bool?",
      "desc": "A Boolean value that determines whether the view hierarchy has auto-correction enabled."
    },
    {
      "name": "var dynamicTypeSize: DynamicTypeSize",
      "desc": "The current Dynamic Type size."
    },
    {
      "name": "var font: Font?",
      "desc": "The default font of this environment."
    },
    {
      "name": "var layoutDirection: LayoutDirection",
      "desc": "The layout direction associated with the current environment."
    },
    {
      "name": "var lineLimit: Int?",
      "desc": "The maximum number of lines that text can occupy in a view."
    },
    {
      "name": "var lineSpacing: CGFloat",
      "desc": "The distance in points between the bottom of one line fragment and the top of the next."
    },
    {
      "name": "var minimumScaleFactor: CGFloat",
      "desc": "The minimum permissible proportion to shrink the font size to fit the text into the available space."
    },
    {
      "name": "var multilineTextAlignment: TextAlignment",
      "desc": "A value that indicates how text instance aligns its lines when the content wraps or contains newlines."
    },
    {
      "name": "var textCase: Text.Case?",
      "desc": "A stylistic override to transform the case of Text when displayed, using the environment’s locale."
    },
    {
      "name": "var truncationMode: Text.TruncationMode",
      "desc": "A value that indicates how the layout truncates the last line of text to fit into the available space."
    },
    {
      "name": "var controlSize: ControlSize",
      "desc": "The size to apply to controls within a view."
    },
    {
      "name": "var controlActiveState: ControlActiveState",
      "desc": "The active state of controls in the view."
    },
    {
      "name": "var defaultMinListHeaderHeight: CGFloat?",
      "desc": "The default minimum height of a header in a list."
    },
    {
      "name": "var defaultMinListRowHeight: CGFloat",
      "desc": "The default minimum height of a row in a list."
    },
    {
      "name": "var defaultWheelPickerItemHeight: CGFloat",
      "desc": "The default height of an item in a wheel-style picker, such as a date picker."
    },
    {
      "name": "var headerProminence: Prominence",
      "desc": "The prominence to apply to section headers within a view."
    },
    {
      "name": "var keyboardShortcut: KeyboardShortcut?",
      "desc": "The keyboard shortcut that buttons in this environment will be triggered with."
    },
    {
      "name": "var menuIndicatorVisibility: Visibility",
      "desc": "The menu indicator visibility to apply to controls within a view."
    },
    {
      "name": "var backgroundMaterial: Material?",
      "desc": "The material underneath the current view."
    },
    {
      "name": "var redactionReasons: RedactionReasons",
      "desc": "The current redaction reasons applied to the view hierarchy."
    },
    {
      "name": "var symbolRenderingMode: SymbolRenderingMode?",
      "desc": "The current symbol rendering mode, or nil denoting that the mode is picked automatically using the current image and foreground style as parameters."
    },
    {
      "name": "var symbolVariants: SymbolVariants",
      "desc": "The symbol variant to use in this environment."
    }
  ],
  "declaration": "struct EnvironmentValues",
  "conformsTo": [
    "CustomStringConvertible"
  ]
}