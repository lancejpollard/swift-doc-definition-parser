{
  "path": "/documentation/swiftui/modifiedcontent",
  "type": "Structure",
  "name": "ModifiedContent",
  "desc": "A value with a modifier applied to it.",
  "items": [
    {
      "name": "init(content: Content, modifier: Modifier)",
      "desc": "A structure that the defines the content and modifier needed to produce a new view or view modifier."
    },
    {
      "name": "var content: Content",
      "desc": "The content that the modifier transforms into a new view or new view modifier."
    },
    {
      "name": "var modifier: Modifier",
      "desc": "The view modifier."
    },
    {
      "name": "static func != (Self, Self) -> Bool"
    },
    {
      "name": "static func == (ModifiedContent<Content, Modifier>, ModifiedContent<Content, Modifier>) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are equal."
    },
    {
      "name": "typealias Body",
      "desc": "The type of view representing the body of this view."
    },
    {
      "name": "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Content, Modifier>",
      "desc": "Adds an accessibility action to the view. Actions allow assistive technologies, such as the VoiceOver, to interact with the view by invoking the action."
    },
    {
      "name": "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Content, Modifier>",
      "desc": "Adds an accessibility action to the view. Actions allow assistive technologies, such as the VoiceOver, to interact with the view by invoking the action."
    },
    {
      "name": "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Content, Modifier>",
      "desc": "Adds an accessibility action to the view. Actions allow assistive technologies, such as the VoiceOver, to interact with the view by invoking the action."
    },
    {
      "name": "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Content, Modifier>",
      "desc": "Adds an accessibility action to the view. Actions allow assistive technologies, such as the VoiceOver, to interact with the view by invoking the action."
    },
    {
      "name": "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Content, Modifier>",
      "desc": "Specifies the point where activations occur in the view."
    },
    {
      "name": "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Content, Modifier>",
      "desc": "Specifies the unit point where activations occur in the view."
    },
    {
      "name": "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Content, Modifier>",
      "desc": "Adds the given traits to the view."
    },
    {
      "name": "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Content, Modifier>",
      "desc": "Adds an accessibility adjustable action to the view. Actions allow assistive technologies, such as the VoiceOver, to interact with the view by invoking the action."
    },
    {
      "name": "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Content, Modifier>",
      "desc": "Add additional accessibility information to the view."
    },
    {
      "name": "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Content, Modifier>",
      "desc": "Add additional accessibility information to the view."
    },
    {
      "name": "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Content, Modifier>",
      "desc": "Add additional accessibility information to the view."
    },
    {
      "name": "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Content, Modifier>",
      "desc": "Add additional accessibility information to the view."
    },
    {
      "name": "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Content, Modifier>",
      "desc": "Add additional accessibility information to the view."
    },
    {
      "name": "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Content, Modifier>",
      "desc": "Add additional accessibility information to the view."
    },
    {
      "name": "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Content, Modifier>",
      "desc": "Add additional accessibility information to the view."
    },
    {
      "name": "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Content, Modifier>",
      "desc": "Set the level of this heading."
    },
    {
      "name": "func accessibilityHidden(Bool) -> ModifiedContent<Content, Modifier>",
      "desc": "Specifies whether to hide this view from system accessibility features."
    },
    {
      "name": "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Content, Modifier>",
      "desc": "Communicates to the user what happens after performing the view’s action."
    },
    {
      "name": "func accessibilityHint(Text) -> ModifiedContent<Content, Modifier>",
      "desc": "Communicates to the user what happens after performing the view’s action."
    },
    {
      "name": "func accessibilityHint<S>(S) -> ModifiedContent<Content, Modifier>",
      "desc": "Communicates to the user what happens after performing the view’s action."
    },
    {
      "name": "func accessibilityIdentifier(String) -> ModifiedContent<Content, Modifier>",
      "desc": "Uses the string you specify to identify the view."
    },
    {
      "name": "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Content, Modifier>",
      "desc": "Sets alternate input labels with which users identify a view."
    },
    {
      "name": "func accessibilityInputLabels([Text]) -> ModifiedContent<Content, Modifier>",
      "desc": "Sets alternate input labels with which users identify a view."
    },
    {
      "name": "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Content, Modifier>",
      "desc": "Sets alternate input labels with which users identify a view."
    },
    {
      "name": "func accessibilityLabel<S>(S) -> ModifiedContent<Content, Modifier>",
      "desc": "Adds a label to the view that describes its contents."
    },
    {
      "name": "func accessibilityLabel(Text) -> ModifiedContent<Content, Modifier>",
      "desc": "Adds a label to the view that describes its contents."
    },
    {
      "name": "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Content, Modifier>",
      "desc": "Adds a label to the view that describes its contents."
    },
    {
      "name": "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Content, Modifier>",
      "desc": "Removes the given traits from this view."
    },
    {
      "name": "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Content, Modifier>",
      "desc": "Explicitly set whether this Accessibility element responds to user interaction and would thus be interacted with by technologies such as Switch Control, Voice Control or Full Keyboard Access."
    },
    {
      "name": "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Content, Modifier>",
      "desc": "Adds an accessibility scroll action to the view. Actions allow assistive technologies, such as the VoiceOver, to interact with the view by invoking the action."
    },
    {
      "name": "func accessibilitySortPriority(Double) -> ModifiedContent<Content, Modifier>",
      "desc": "Sets the sort priority order for this view’s accessibility element, relative to other elements at the same level."
    },
    {
      "name": "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Content, Modifier>",
      "desc": "Sets an accessibility text content type."
    },
    {
      "name": "func accessibilityValue(Text) -> ModifiedContent<Content, Modifier>",
      "desc": "Adds a textual description of the value that the view contains."
    },
    {
      "name": "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Content, Modifier>",
      "desc": "Adds a textual description of the value that the view contains."
    },
    {
      "name": "func accessibilityValue<S>(S) -> ModifiedContent<Content, Modifier>",
      "desc": "Adds a textual description of the value that the view contains."
    }
  ],
  "declaration": "@frozen struct ModifiedContent<Content, Modifier>",
  "conformsTo": [
    "DynamicTableRowContent",
    "DynamicViewContent",
    "Equatable",
    "Scene",
    "TableRowContent",
    "View",
    "ViewModifier"
  ]
}