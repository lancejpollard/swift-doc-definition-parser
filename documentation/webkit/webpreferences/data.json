{
  "path": "/documentation/webkit/webpreferences",
  "type": "Class",
  "name": "WebPreferences",
  "desc": "WebPreferences encapsulates the preferences you can change per WebView object. These preferences include font, text encoding, and image settings. Normally a WebView object uses the standard preferences returned by the standard() class method. However, you can modify the preferences for individual WebView instances too. Use the preferencesIdentifier WebView method to change a WebView object’s preferences, or to share preferences between WebView objects. Use the autosaves method to specify if the preferences object should be automatically saved to the user defaults database.",
  "items": [
    {
      "name": "class func standard() -> WebPreferences!",
      "desc": "Returns the standard set of preferences that may be used by all WebView objects."
    },
    {
      "name": "init!(identifier: String!)",
      "desc": "Returns an initialized WebPreferences object, creating one if it does not exist."
    },
    {
      "name": "var identifier: String!",
      "desc": "The receiver’s identifier."
    },
    {
      "name": "var autosaves: Bool",
      "desc": "A Boolean that indicates whether or not the receiver’s attributes are automatically stored in the user defaults database."
    },
    {
      "name": "var isJavaEnabled: Bool",
      "desc": "A Boolean that indicates whether or not the web view allows Java."
    },
    {
      "name": "var isJavaScriptEnabled: Bool",
      "desc": "A Boolean that indicates whether or not the web view allows JavaScript."
    },
    {
      "name": "var javaScriptCanOpenWindowsAutomatically: Bool",
      "desc": "A Boolean that indicates whether or not the web view allows JavaScript to open windows automatically."
    },
    {
      "name": "var arePlugInsEnabled: Bool",
      "desc": "A Boolean that indicates whether or not the web view allows plug-ins."
    },
    {
      "name": "var userStyleSheetEnabled: Bool",
      "desc": "A Boolean that indicates whether or not user style sheets are enabled in the web view."
    },
    {
      "name": "var cursiveFontFamily: String!",
      "desc": "The cursive font family of the web view."
    },
    {
      "name": "var fantasyFontFamily: String!",
      "desc": "The fantasy font family of the web view."
    },
    {
      "name": "var fixedFontFamily: String!",
      "desc": "The fixed font family of the web view."
    },
    {
      "name": "var sansSerifFontFamily: String!",
      "desc": "The sans serif font family of the web view."
    },
    {
      "name": "var serifFontFamily: String!",
      "desc": "The serif font family of the web view."
    },
    {
      "name": "var standardFontFamily: String!",
      "desc": "The standard font family of the web view."
    },
    {
      "name": "var defaultFixedFontSize: Int32",
      "desc": "The default fixed font size of the web view."
    },
    {
      "name": "var defaultFontSize: Int32",
      "desc": "The default font size of the web view."
    },
    {
      "name": "var minimumFontSize: Int32",
      "desc": "The minimum font size of the web view."
    },
    {
      "name": "var minimumLogicalFontSize: Int32",
      "desc": "The minimum logical font size of the web view."
    },
    {
      "name": "var defaultTextEncodingName: String!",
      "desc": "The default text encoding of the web view."
    },
    {
      "name": "var suppressesIncrementalRendering: Bool",
      "desc": "A Boolean that indicates whether incremental rendering should be suppressed."
    },
    {
      "name": "var allowsAnimatedImageLooping: Bool",
      "desc": "A Boolean that indicates whether or not the receiver allows animated images to loop."
    },
    {
      "name": "var allowsAnimatedImages: Bool",
      "desc": "A Boolean that indicates whether or not the receiver allows animated images."
    },
    {
      "name": "var loadsImagesAutomatically: Bool",
      "desc": "A Boolean that indicates whether or not the web view allows images to be loaded automatically."
    },
    {
      "name": "var shouldPrintBackgrounds: Bool",
      "desc": "A Boolean that indicates whether or not the web view should include backgrounds when printing."
    },
    {
      "name": "var privateBrowsingEnabled: Bool",
      "desc": "A Boolean that indicates whether or not private browsing is enabled."
    },
    {
      "name": "var tabsToLinks: Bool",
      "desc": "A Boolean that indicates whether or not the tab key will focus links."
    },
    {
      "name": "var usesPageCache: Bool",
      "desc": "A Boolean that indicates whether the web views associated with the receiver should use the shared page cache."
    },
    {
      "name": "var cacheModel: WebCacheModel",
      "desc": "The cache model for the web views associated with the receiver."
    },
    {
      "name": "enum WebCacheModel",
      "desc": "Specifies the caching model for a web view."
    },
    {
      "name": "static let WebPreferencesChanged: NSNotification.Name",
      "desc": "Posted when the web preference settings are changed."
    },
    {
      "name": "var allowsAirPlayForMediaPlayback: Bool"
    },
    {
      "name": "var userStyleSheetLocation: URL!"
    }
  ],
  "declaration": "class WebPreferences : NSObject",
  "inheritsFrom": [
    "NSObject"
  ],
  "conformsTo": [
    "NSCoding"
  ]
}