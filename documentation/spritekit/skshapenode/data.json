{
  "path": "/documentation/spritekit/skshapenode",
  "type": "Class",
  "name": "SKShapeNode",
  "desc": "A mathematical shape that can be stroked or filled.",
  "items": [
    {
      "name": "init(path: CGPath)",
      "desc": "Creates a shape node from a Core Graphics path."
    },
    {
      "name": "init(path: CGPath, centered: Bool)",
      "desc": "Creates a shape node from a Core Graphics path, centered around its position."
    },
    {
      "name": "var path: CGPath?",
      "desc": "The path that defines the shape."
    },
    {
      "name": "init(rect: CGRect)",
      "desc": "Creates a shape node with a rectangular path."
    },
    {
      "name": "init(rectOf: CGSize)",
      "desc": "Creates a shape node with a rectangular path centered on the node’s origin."
    },
    {
      "name": "init(rect: CGRect, cornerRadius: CGFloat)",
      "desc": "Creates a shape with a rectangular path that has rounded corners."
    },
    {
      "name": "init(rectOf: CGSize, cornerRadius: CGFloat)",
      "desc": "Creates a shape with a rectangular path that has rounded corners centered on the node’s position."
    },
    {
      "name": "init(circleOfRadius: CGFloat)",
      "desc": "Creates a shape node with a circular path centered on the node’s origin."
    },
    {
      "name": "init(ellipseOf: CGSize)",
      "desc": "Creates a shape node with an elliptical path centered on the node’s origin."
    },
    {
      "name": "init(ellipseIn: CGRect)",
      "desc": "Creates a shape node with an elliptical path that fills the specified rectangle."
    },
    {
      "name": "init(points: UnsafeMutablePointer<CGPoint>, count: Int)",
      "desc": "Creates a shape node from a series of points."
    },
    {
      "name": "init(splinePoints: UnsafeMutablePointer<CGPoint>, count: Int)",
      "desc": "Creates a shape node from a series of spline points."
    },
    {
      "name": "var fillColor: UIColor",
      "desc": "The color used to fill the shape."
    },
    {
      "name": "var fillTexture: SKTexture?",
      "desc": "The texture used to fill the shape."
    },
    {
      "name": "var lineWidth: CGFloat",
      "desc": "The width used to stroke the path."
    },
    {
      "name": "var strokeColor: UIColor",
      "desc": "The color used to stroke the shape."
    },
    {
      "name": "var strokeTexture: SKTexture?",
      "desc": "The texture used to stroke the shape."
    },
    {
      "name": "var glowWidth: CGFloat",
      "desc": "A glow that extends outward from the stroked line."
    },
    {
      "name": "var lineCap: CGLineCap",
      "desc": "The style used to render the endpoints of the stroked portion of the shape node."
    },
    {
      "name": "var lineJoin: CGLineJoin",
      "desc": "The junction type used when the stroked portion of the shape node is rendered."
    },
    {
      "name": "var miterLimit: CGFloat",
      "desc": "The miter limit to use when the line is stroked using a miter join style."
    },
    {
      "name": "var isAntialiased: Bool",
      "desc": "A Boolean value that determines whether the stroked path is smoothed when drawn."
    },
    {
      "name": "var blendMode: SKBlendMode",
      "desc": "The blend mode used to blend the shape into the parent’s framebuffer."
    },
    {
      "name": "var lineLength: CGFloat",
      "desc": "The length of the line defined by the shape node."
    },
    {
      "name": "var strokeShader: SKShader?",
      "desc": "A custom shader used to determine the color of the stroked portion of the shape node."
    },
    {
      "name": "var fillShader: SKShader?",
      "desc": "A custom shader used to determine the color of the filled portion of the shape node."
    },
    {
      "name": "var attributeValues: [String : SKAttributeValue]",
      "desc": "The values of each attribute associated with the node's attached shader."
    },
    {
      "name": "func setValue(SKAttributeValue, forAttribute: String)",
      "desc": "Sets an attribute value for an attached shader."
    },
    {
      "name": "func value(forAttributeNamed: String) -> SKAttributeValue?",
      "desc": "The value of a shader attribute."
    }
  ],
  "declaration": "class SKShapeNode : SKNode",
  "inheritsFrom": [
    "SKNode"
  ]
}