{
  "path": "/documentation/spritekit/skscene",
  "type": "Class",
  "name": "SKScene",
  "desc": "An object that organizes all of the active SpriteKit content.",
  "items": [
    {
      "name": "init(size: CGSize)",
      "desc": "Initializes a new scene object."
    },
    {
      "name": "var size: CGSize",
      "desc": "The dimensions of the scene, in points."
    },
    {
      "name": "var scaleMode: SKSceneScaleMode",
      "desc": "A setting that defines how the scene is mapped to the view that presents it."
    },
    {
      "name": "enum SKSceneScaleMode",
      "desc": "The modes that determine how the scene’s area is mapped to the view that presents it."
    },
    {
      "name": "var camera: SKCameraNode?",
      "desc": "The camera node in the scene that determines what part of the scene’s coordinate space is visible in the view."
    },
    {
      "name": "var anchorPoint: CGPoint",
      "desc": "The point in the view’s frame that corresponds to the scene’s origin."
    },
    {
      "name": "func sceneDidLoad()",
      "desc": "Tells you when the scene is presented."
    },
    {
      "name": "func didChangeSize(CGSize)",
      "desc": "Tells you when the scene’s size has changed."
    },
    {
      "name": "func willMove(from: SKView)",
      "desc": "Tells you when the scene is about to be removed from a view."
    },
    {
      "name": "func didMove(to: SKView)",
      "desc": "Tells you when the scene is presented by a view."
    },
    {
      "name": "func update(TimeInterval)",
      "desc": "Tells your app to perform any app-specific logic to update your scene."
    },
    {
      "name": "func didEvaluateActions()",
      "desc": "Tells your app to peform any necessary logic after scene actions are evaluated."
    },
    {
      "name": "func didSimulatePhysics()",
      "desc": "Tells your app to peform any necessary logic after physics simulations are performed."
    },
    {
      "name": "func didApplyConstraints()",
      "desc": "Tells your app to peform any necessary logic after constraints are applied."
    },
    {
      "name": "func didFinishUpdate()",
      "desc": "Tells your app to peform any necessary logic after the scene has finished all of the steps required to process animations."
    },
    {
      "name": "var delegate: SKSceneDelegate?",
      "desc": "A delegate to be called during the animation loop."
    },
    {
      "name": "protocol SKSceneDelegate",
      "desc": "Methods that, when implemented, allow any class to participate in the SpriteKit render loop callbacks."
    },
    {
      "name": "var view: SKView?",
      "desc": "The view that is currently presenting the scene."
    },
    {
      "name": "var backgroundColor: UIColor",
      "desc": "The background color of the scene."
    },
    {
      "name": "var physicsWorld: SKPhysicsWorld",
      "desc": "The physics simulation associated with the scene."
    },
    {
      "name": "var listener: SKNode?",
      "desc": "A node used to determine the position of the listener for positional audio in the scene."
    },
    {
      "name": "var audioEngine: AVAudioEngine",
      "desc": "The AVFoundation audio engine used to play audio from audio nodes contained in the scene."
    },
    {
      "name": "func convertPoint(fromView: CGPoint) -> CGPoint",
      "desc": "Converts a point from view coordinates to scene coordinates."
    },
    {
      "name": "func convertPoint(toView: CGPoint) -> CGPoint",
      "desc": "Converts a point from scene coordinates to view coordinates."
    }
  ],
  "declaration": "class SKScene : SKEffectNode",
  "inheritsFrom": [
    "SKEffectNode"
  ],
  "conformsTo": [
    "GKSceneRootNodeType"
  ]
}