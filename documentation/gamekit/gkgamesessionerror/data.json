{
  "path": "/documentation/gamekit/gkgamesessionerror",
  "type": "Structure",
  "name": "GKGameSessionError",
  "desc": "Error codes for the GKGameSession domain.",
  "items": [
    {
      "name": "var errorCode: Int"
    },
    {
      "name": "var errorUserInfo: [String : Any]"
    },
    {
      "name": "var localizedDescription: String"
    },
    {
      "name": "static var badContainer: GKGameSessionError.Code",
      "desc": "The requested operation could not be completed because the iCloud container is invalid."
    },
    {
      "name": "static var cloudDriveDisabled: GKGameSessionError.Code",
      "desc": "The requested operation could not be completed because iCloud Drive has been disabled for the application."
    },
    {
      "name": "static var cloudQuotaExceeded: GKGameSessionError.Code",
      "desc": "The requested operation could not be completed because the user's iCloud quota would be exceeded."
    },
    {
      "name": "static var connectionCancelledByUser: GKGameSessionError.Code",
      "desc": "The requested operation could not be completed because the connection to the session was cancelled."
    },
    {
      "name": "static var connectionFailed: GKGameSessionError.Code",
      "desc": "The requested operation could not be completed because the session could not find other players to connect to."
    },
    {
      "name": "static var invalidSession: GKGameSessionError.Code",
      "desc": "The requested operation could not be completed because the Game Session does not exist or the player is not part of the game session."
    },
    {
      "name": "static var networkFailure: GKGameSessionError.Code",
      "desc": "The requested operation could not be completed due to an error communicating with the server."
    },
    {
      "name": "static var notAuthenticated: GKGameSessionError.Code",
      "desc": "The requested operation could not be completed because you are not signed in to iCloud."
    },
    {
      "name": "static var sendDataNoRecipients: GKGameSessionError.Code",
      "desc": "The requested operation could not be completed because there are no recipients connected to session."
    },
    {
      "name": "static var sendDataNotConnected: GKGameSessionError.Code",
      "desc": "The requested operation could not be completed because you are not connected to the session."
    },
    {
      "name": "static var sendDataNotReachable: GKGameSessionError.Code",
      "desc": "The requested operation could not be completed because one or more players is not reachable."
    },
    {
      "name": "static var sendRateLimitReached: GKGameSessionError.Code",
      "desc": "The requested operation could not be completed because you have reached the limits for save data request."
    },
    {
      "name": "static var sessionConflict: GKGameSessionError.Code",
      "desc": "The requested operation could not be completed because the session has been updated on the server, causing a conflict."
    },
    {
      "name": "static var sessionHasMaxConnectedPlayers: GKGameSessionError.Code",
      "desc": "The requested operation could not be completed because the session has reached the maximum number of connected players."
    },
    {
      "name": "static var sessionNotShared: GKGameSessionError.Code",
      "desc": "The requested operation could not be completed because this session has not been shared with other players."
    },
    {
      "name": "static var unknown: GKGameSessionError.Code",
      "desc": "The requested operation could not be completed due to an unknown error."
    },
    {
      "name": "enum GKGameSessionError.Code",
      "desc": "Error codes for the GKGameSession domain."
    },
    {
      "name": "static var errorDomain: String"
    },
    {
      "name": "let GKGameSessionErrorDomain: String",
      "desc": "The error domain for game sessions."
    },
    {
      "name": "static func != (GKGameSessionError, GKGameSessionError) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are not equal."
    },
    {
      "name": "init(Code, userInfo: [String : Any])"
    },
    {
      "name": "var code: Code"
    },
    {
      "name": "var hashValue: Int"
    },
    {
      "name": "var userInfo: [String : Any]"
    },
    {
      "name": "func hash(into: inout Hasher)"
    },
    {
      "name": "static func == (GKGameSessionError, GKGameSessionError) -> Bool"
    }
  ],
  "declaration": "struct GKGameSessionError"
}