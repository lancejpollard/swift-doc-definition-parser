{
  "path": "/documentation/realitykit/photogrammetrysession/outputs",
  "type": "Structure",
  "name": "PhotogrammetrySession.Outputs",
  "desc": "An asynchronous sequence of session-related updates.",
  "items": [
    {
      "name": "func makeAsyncIterator() -> PhotogrammetrySession.Outputs.Iterator",
      "desc": "Creates an asynchronous iterator for the collection."
    },
    {
      "name": "typealias PhotogrammetrySession.Outputs.AsyncIterator",
      "desc": "The type of iterator used for Object Capture updates."
    },
    {
      "name": "typealias PhotogrammetrySession.Outputs.Element",
      "desc": "The type of element used for Object Capture updates."
    },
    {
      "name": "struct PhotogrammetrySession.Outputs.Iterator",
      "desc": "An object for iterating over published output objects."
    },
    {
      "name": "func allSatisfy((PhotogrammetrySession.Output) -> Bool) -> Bool",
      "desc": "Returns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfies the given predicate."
    },
    {
      "name": "func compactMap<ElementOfResult>((PhotogrammetrySession.Output) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<PhotogrammetrySession.Outputs, ElementOfResult>",
      "desc": "Creates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value."
    },
    {
      "name": "func compactMap<ElementOfResult>((PhotogrammetrySession.Output) -> ElementOfResult?) -> AsyncCompactMapSequence<PhotogrammetrySession.Outputs, ElementOfResult>",
      "desc": "Creates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value."
    },
    {
      "name": "func contains(where: (PhotogrammetrySession.Output) -> Bool) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate."
    },
    {
      "name": "func drop(while: (PhotogrammetrySession.Output) -> Bool) -> AsyncDropWhileSequence<PhotogrammetrySession.Outputs>",
      "desc": "Omits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements."
    },
    {
      "name": "func dropFirst(Int) -> AsyncDropFirstSequence<PhotogrammetrySession.Outputs>",
      "desc": "Omits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements."
    },
    {
      "name": "func filter((PhotogrammetrySession.Output) -> Bool) -> AsyncFilterSequence<PhotogrammetrySession.Outputs>",
      "desc": "Creates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate."
    },
    {
      "name": "func first(where: (PhotogrammetrySession.Output) -> Bool) -> PhotogrammetrySession.Output?",
      "desc": "Returns the first element of the sequence that satisfies the given predicate."
    },
    {
      "name": "func flatMap<SegmentOfResult>((PhotogrammetrySession.Output) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<PhotogrammetrySession.Outputs, SegmentOfResult>",
      "desc": "Creates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence."
    },
    {
      "name": "func flatMap<SegmentOfResult>((PhotogrammetrySession.Output) -> SegmentOfResult) -> AsyncFlatMapSequence<PhotogrammetrySession.Outputs, SegmentOfResult>",
      "desc": "Creates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence."
    },
    {
      "name": "func map<Transformed>((PhotogrammetrySession.Output) -> Transformed) -> AsyncThrowingMapSequence<PhotogrammetrySession.Outputs, Transformed>",
      "desc": "Creates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements."
    },
    {
      "name": "func map<Transformed>((PhotogrammetrySession.Output) -> Transformed) -> AsyncMapSequence<PhotogrammetrySession.Outputs, Transformed>",
      "desc": "Creates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements."
    },
    {
      "name": "func prefix(Int) -> AsyncPrefixSequence<PhotogrammetrySession.Outputs>",
      "desc": "Returns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence."
    },
    {
      "name": "func prefix(while: (PhotogrammetrySession.Output) -> Bool) -> AsyncPrefixWhileSequence<PhotogrammetrySession.Outputs>",
      "desc": "Returns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate."
    }
  ],
  "declaration": "struct PhotogrammetrySession.Outputs",
  "conformsTo": [
    "AsyncSequence"
  ]
}