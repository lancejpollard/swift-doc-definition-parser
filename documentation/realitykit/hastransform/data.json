{
  "path": "/documentation/realitykit/hastransform",
  "type": "Protocol",
  "name": "HasTransform",
  "desc": "An interface that enables manipulating the scale, rotation, and translation of an entity.",
  "items": [
    {
      "name": "var transform: Transform",
      "desc": "The transform of an entity relative to its parent."
    },
    {
      "name": "struct Transform",
      "desc": "A component that defines the scale, rotation, and translation of an entity."
    },
    {
      "name": "var scale: SIMD3<Float>",
      "desc": "The scale of the entity relative to its parent."
    },
    {
      "name": "func scale(relativeTo: Entity?) -> SIMD3<Float>",
      "desc": "Gets the scale of an entity relative to the given entity."
    },
    {
      "name": "func setScale(SIMD3<Float>, relativeTo: Entity?)",
      "desc": "Sets the scale factor of the entity relative to the given reference entity."
    },
    {
      "name": "var orientation: simd_quatf",
      "desc": "The rotation of the entity relative to its parent."
    },
    {
      "name": "func orientation(relativeTo: Entity?) -> simd_quatf",
      "desc": "Gets the orientation of an entity relative to the given entity."
    },
    {
      "name": "func setOrientation(simd_quatf, relativeTo: Entity?)",
      "desc": "Sets the orientation of the entity relative to the given reference entity."
    },
    {
      "name": "var position: SIMD3<Float>",
      "desc": "The position of the entity relative to its parent."
    },
    {
      "name": "func position(relativeTo: Entity?) -> SIMD3<Float>",
      "desc": "Gets the position of an entity relative to the given entity."
    },
    {
      "name": "func setPosition(SIMD3<Float>, relativeTo: Entity?)",
      "desc": "Sets the position of the entity relative to the given reference entity."
    },
    {
      "name": "func transformMatrix(relativeTo: Entity?) -> float4x4",
      "desc": "Gets the 4 x 4 transform matrix of an entity relative to the given entity."
    },
    {
      "name": "func setTransformMatrix(float4x4, relativeTo: Entity?)",
      "desc": "Sets the transform of the entity relative to the given reference entity using a 4x4 matrix representation."
    },
    {
      "name": "func move(to: Transform, relativeTo: Entity?)",
      "desc": "Moves an entity instantly to a new location given by a transform."
    },
    {
      "name": "func move(to: float4x4, relativeTo: Entity?)",
      "desc": "Moves an entity instantly to a new location given by a 4x4 matrix."
    },
    {
      "name": "func look(at: SIMD3<Float>, from: SIMD3<Float>, upVector: SIMD3<Float>, relativeTo: Entity?)",
      "desc": "Positions and orients the entity to look at a target from a given position."
    },
    {
      "name": "func move(to: Transform, relativeTo: Entity?, duration: TimeInterval, timingFunction: AnimationTimingFunction) -> AnimationPlaybackController",
      "desc": "Moves an entity over a period of time to a new location given by a transform."
    },
    {
      "name": "func move(to: float4x4, relativeTo: Entity?, duration: TimeInterval, timingFunction: AnimationTimingFunction) -> AnimationPlaybackController",
      "desc": "Moves an entity over a period of time to a new location given by a 4x4 matrix."
    },
    {
      "name": "func convert(position: SIMD3<Float>, from: Entity?) -> SIMD3<Float>",
      "desc": "Converts a position from the local space of a reference entity to the local space of the entity on which you called this method."
    },
    {
      "name": "func convert(position: SIMD3<Float>, to: Entity?) -> SIMD3<Float>",
      "desc": "Converts a position from the local space of the entity on which you called this method to the local space of a reference entity."
    },
    {
      "name": "func convert(direction: SIMD3<Float>, from: Entity?) -> SIMD3<Float>",
      "desc": "Converts a direction vector from the local space of a reference entity to the local space of the entity on which you called this method."
    },
    {
      "name": "func convert(direction: SIMD3<Float>, to: Entity?) -> SIMD3<Float>",
      "desc": "Converts a direction vector from the local space of the entity on which you called this method to the local space of a reference entity."
    },
    {
      "name": "func convert(normal: SIMD3<Float>, from: Entity?) -> SIMD3<Float>",
      "desc": "Converts a normal vector from the local space of a reference entity to the local space of the entity on which you called this method."
    },
    {
      "name": "func convert(normal: SIMD3<Float>, to: Entity?) -> SIMD3<Float>",
      "desc": "Converts a normal vector from the local space of the entity on which you called this method to the local space of a reference entity."
    },
    {
      "name": "func convert(transform: Transform, from: Entity?) -> Transform",
      "desc": "Converts the scale, rotation, and position of a transform from the local space of a reference entity to the local space of the entity on which you called this method."
    },
    {
      "name": "func convert(transform: Transform, to: Entity?) -> Transform",
      "desc": "Converts the scale, rotation, and position of a transform from the local space of the entity on which you called this method to the local space of a reference entity."
    },
    {
      "name": "func visualBounds(recursive: Bool, relativeTo: Entity?, excludeInactive: Bool) -> BoundingBox",
      "desc": "Computes a bounding box for the entity in the specified space, optionally including child entities."
    }
  ],
  "declaration": "protocol HasTransform : Entity"
}