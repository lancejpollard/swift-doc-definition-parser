{
  "path": "/documentation/realitykit/arview",
  "type": "Class",
  "name": "ARView",
  "desc": "A view that displays an augmented reality experience that incorporates content from RealityKit.",
  "items": [
    {
      "name": "init(frame: CGRect)",
      "desc": "Creates an AR view with the specified dimensions."
    },
    {
      "name": "init(frame: CGRect, cameraMode: ARView.CameraMode, automaticallyConfigureSession: Bool)",
      "desc": "Creates an AR view with the specified dimensions, camera mode, and session configuration state."
    },
    {
      "name": "init?(coder: NSCoder)",
      "desc": "Creates an AR view initialized from data in a given decoder."
    },
    {
      "name": "typealias ARViewBase",
      "desc": "The platform-specific base class for the view into which RealityKit renders content."
    },
    {
      "name": "var scene: Scene",
      "desc": "The scene that the view renders and simulates."
    },
    {
      "name": "class Scene",
      "desc": "A container that holds the collection of entities rendered by an AR view."
    },
    {
      "name": "var session: ARSession",
      "desc": "The AR session that supports the view’s rendering."
    },
    {
      "name": "var automaticallyConfigureSession: Bool",
      "desc": "An indication of whether to use an automatically configured AR session."
    },
    {
      "name": "var renderOptions: ARView.RenderOptions",
      "desc": "The render options that configure the view’s AR session."
    },
    {
      "name": "struct ARView.RenderOptions",
      "desc": "The available rendering options that you use to selectively disable certain rendering effects."
    },
    {
      "name": "var environment: ARView.Environment",
      "desc": "The view’s background, lighting, and acoustic properties."
    },
    {
      "name": "struct ARView.Environment",
      "desc": "A description of background, lighting, and acoustic properties for a view’s content."
    },
    {
      "name": "var physicsOrigin: Entity?",
      "desc": "The entity that defines the origin of the scene’s physics simulation."
    },
    {
      "name": "var audioListener: Entity?",
      "desc": "The entity that defines the listener position and orientation for spatial audio."
    },
    {
      "name": "var cameraMode: ARView.CameraMode",
      "desc": "A setting that chooses between the AR session’s camera and a virtual one."
    },
    {
      "name": "enum ARView.CameraMode",
      "desc": "The available camera modes."
    },
    {
      "name": "var cameraTransform: Transform",
      "desc": "The transform of the currently active camera."
    },
    {
      "name": "func entity(at: CGPoint) -> Entity?",
      "desc": "Finds the entity in the AR scene closest to the specified point."
    },
    {
      "name": "func entities(at: CGPoint) -> [Entity]",
      "desc": "Finds the collection of entities at the specified point in the scene."
    },
    {
      "name": "func hitTest(CGPoint, query: CollisionCastQueryType, mask: CollisionGroup) -> [CollisionCastHit]",
      "desc": "Searches for objects corresponding to a point in the view based on a query and a collision mask."
    },
    {
      "name": "func hitTest(CGPoint, types: ARHitTestResult.ResultType) -> [ARHitTestResult]",
      "desc": "Searches for objects corresponding to a point in the view based on a set of result types."
    },
    {
      "name": "func makeRaycastQuery(from: CGPoint, allowing: ARRaycastQuery.Target, alignment: ARRaycastQuery.TargetAlignment) -> ARRaycastQuery?",
      "desc": "Creates a ray-cast query originating from a point in the view, centered on the camera’s field of view."
    },
    {
      "name": "func raycast(from: CGPoint, allowing: ARRaycastQuery.Target, alignment: ARRaycastQuery.TargetAlignment) -> [ARRaycastResult]",
      "desc": "Performs a ray cast, where a ray is cast into the scene from the center of the camera through a point in the view, and the results are immediately returned."
    },
    {
      "name": "func trackedRaycast(from: CGPoint, allowing: ARRaycastQuery.Target, alignment: ARRaycastQuery.TargetAlignment, updateHandler: ([ARRaycastResult]) -> Void) -> ARTrackedRaycast?",
      "desc": "Performs a tracked ray cast, where a ray is cast into the scene from the center of the camera through a point in the view."
    },
    {
      "name": "func installGestures(ARView.EntityGestures, for: HasCollision) -> [EntityGestureRecognizer]",
      "desc": "Installs standard gestures onto the given entity, configured to be recognized simultaneously."
    },
    {
      "name": "struct ARView.EntityGestures",
      "desc": "The set of possible entity gesture recognizers."
    },
    {
      "name": "func gestureRecognizer(UIGestureRecognizer, shouldRecognizeSimultaneouslyWith: UIGestureRecognizer) -> Bool",
      "desc": "Determines whether two gesture recognizers should simultaneously recognize a gesture."
    },
    {
      "name": "class EntityRotationGestureRecognizer",
      "desc": "A gesture recognizer that uses rotation gestures involving two touches to rotate a given entity."
    },
    {
      "name": "class EntityScaleGestureRecognizer",
      "desc": "A gesture recognizer that uses a pinch gesture to scale or zoom an entity."
    },
    {
      "name": "class EntityTranslationGestureRecognizer",
      "desc": "A gesture recognizer that uses a pan gesture to move an entity."
    },
    {
      "name": "protocol EntityGestureRecognizer",
      "desc": "An type of gesture recognizer that works on entities."
    },
    {
      "name": "func project(SIMD3<Float>) -> CGPoint?",
      "desc": "Projects a point from the 3D world coordinate system of the scene to the 2D pixel coordinate system of the view."
    },
    {
      "name": "func unproject(CGPoint, ontoPlane: float4x4) -> SIMD3<Float>?",
      "desc": "Maps a 2D point from the view’s coordinate system onto the given plane in 3D space."
    },
    {
      "name": "func unproject(CGPoint, viewport: CGRect) -> SIMD3<Float>?",
      "desc": "Maps a 2D point from the pixel coordinate system of a viewport into a 3D coordinate space."
    },
    {
      "name": "func unproject(CGPoint, ontoPlane: float4x4, relativeToCamera: Bool) -> SIMD3<Float>?",
      "desc": "Maps a 2D point from the pixel coordinate system of a viewport into a 3D coordinate space."
    },
    {
      "name": "func ray(through: CGPoint) -> (origin: SIMD3<Float>, direction: SIMD3<Float>)?",
      "desc": "Determines the position and direction of a ray through the given point in the 2D space of the view."
    },
    {
      "name": "func touchesBegan(Set<UITouch>, with: UIEvent?)",
      "desc": "Tells the view that one or more new touches occurred."
    },
    {
      "name": "func touchesMoved(Set<UITouch>, with: UIEvent?)",
      "desc": "Tells the view when one or more touches associated with an event changed."
    },
    {
      "name": "func touchesEnded(Set<UITouch>, with: UIEvent?)",
      "desc": "Tells the view when one or more fingers are raised from the view."
    },
    {
      "name": "func touchesCancelled(Set<UITouch>, with: UIEvent?)",
      "desc": "Tells the view when a system event (such as a system alert) cancels a touch sequence."
    },
    {
      "name": "var acceptsFirstResponder: Bool",
      "desc": "A Boolean value that indicates whether the view accepts first responder status."
    },
    {
      "name": "func keyDown(with: NSEvent)",
      "desc": "Informs the view that the user has pressed a key."
    },
    {
      "name": "func keyUp(with: NSEvent)",
      "desc": "Informs the view that the user has released a key."
    },
    {
      "name": "func mouseDown(with: NSEvent)",
      "desc": "Informs the view that the user has pressed the left mouse button."
    },
    {
      "name": "func mouseDragged(with: NSEvent)",
      "desc": "Informs the view that the user has moved the mouse with the left button pressed."
    },
    {
      "name": "func mouseUp(with: NSEvent)",
      "desc": "Informs the view that the user has released the left mouse button."
    },
    {
      "name": "func mouseMoved(with: NSEvent)",
      "desc": "Informs the view that the mouse has moved."
    },
    {
      "name": "func rightMouseDown(with: NSEvent)",
      "desc": "Informs the view that the user has pressed the right mouse button."
    },
    {
      "name": "func rightMouseDragged(with: NSEvent)",
      "desc": "Informs the view that the user has moved the mouse with the right button pressed."
    },
    {
      "name": "func rightMouseUp(with: NSEvent)",
      "desc": "Informs the view that the user has released the right mouse button."
    },
    {
      "name": "func otherMouseDown(with: NSEvent)",
      "desc": "Informs the view that the user has pressed a mouse button other than the left or right one."
    },
    {
      "name": "func otherMouseDragged(with: NSEvent)",
      "desc": "Informs the view that the user has moved the mouse with a button other than the left or right button pressed."
    },
    {
      "name": "func otherMouseUp(with: NSEvent)",
      "desc": "Informs the view that the user has released a mouse button other than the left or right button."
    },
    {
      "name": "func scrollWheel(with: NSEvent)",
      "desc": "Informs the view that the mouse’s scroll wheel has moved."
    },
    {
      "name": "var frame: NSRect",
      "desc": "The frame rectangle, which describes the view’s location and size in the coordinate system of the view’s superview."
    },
    {
      "name": "var contentScaleFactor: CGFloat",
      "desc": "The scale factor of the content in the view."
    },
    {
      "name": "func didMoveToSuperview()",
      "desc": "Tells the view that its superview changed."
    },
    {
      "name": "func didMoveToWindow()",
      "desc": "Tells the view that its window property is set to a new value."
    },
    {
      "name": "func layoutSubviews()",
      "desc": "Lays out subviews."
    },
    {
      "name": "class var layerClass: AnyClass",
      "desc": "The class used to create the layer for view instances."
    },
    {
      "name": "func makeBackingLayer() -> CALayer",
      "desc": "Creates the view’s backing layer."
    },
    {
      "name": "func viewDidChangeBackingProperties()",
      "desc": "Tells the view when its backing store properties change."
    },
    {
      "name": "func viewDidMoveToSuperview()",
      "desc": "Tells the view that it has a new superview or that the view’s superview has been removed."
    },
    {
      "name": "func snapshot(saveToHDR: Bool, completion: (ARView.Image?) -> Void)",
      "desc": "Takes a snapshot of the current view in iOS."
    },
    {
      "name": "func snapshot(saveToHDR: Bool, completion: (ARView.Image?) -> Void)",
      "desc": "Takes a snapshot of the current view in macOS."
    },
    {
      "name": "typealias ARView.Image",
      "desc": "A platform-specific type used to represent an image when you take a snapshot."
    },
    {
      "name": "var renderCallbacks: ARView.RenderCallbacks",
      "desc": "A container that holds the view’s render callbacks."
    },
    {
      "name": "struct ARView.RenderCallbacks",
      "desc": "A container for closures that implement postprocessing effects."
    },
    {
      "name": "struct ARView.PostProcessContext",
      "desc": "An object the framework uses to pass data to a postprocess callback."
    },
    {
      "name": "var debugOptions: ARView.DebugOptions",
      "desc": "The current debugging options."
    },
    {
      "name": "struct ARView.DebugOptions",
      "desc": "Options for drawing overlay content in a scene that aids in debugging the scene."
    },
    {
      "name": "func gestureRecognizer(UIGestureRecognizer, shouldReceive: UITouch) -> Bool"
    },
    {
      "name": "func layout()"
    }
  ],
  "declaration": "@objc @MainActor class ARView",
  "conformsTo": [
    "ARSessionProviding",
    "UIGestureRecognizerDelegate"
  ]
}