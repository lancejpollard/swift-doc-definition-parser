{
  "path": "/documentation/realitykit/fromtobyanimation",
  "type": "Generic Structure",
  "name": "FromToByAnimation",
  "desc": "An animation that starts, stops, or increments by a specific value.",
  "items": [
    {
      "name": "init(name: String, from: Value?, to: Value?, by: Value?, duration: TimeInterval, timing: AnimationTimingFunction, isAdditive: Bool, bindTarget: BindTarget?, blendLayer: Int32, repeatMode: AnimationRepeatMode, fillMode: AnimationFillMode, trimStart: TimeInterval?, trimEnd: TimeInterval?, trimDuration: TimeInterval?, offset: TimeInterval, delay: TimeInterval, speed: Float)",
      "desc": "Creates an animation that interpolates between two values for a property of the target entity."
    },
    {
      "name": "init(jointNames: [String], name: String, isScaleAnimated: Bool, isRotationAnimated: Bool, isTranslationAnimated: Bool, from: Value?, to: Value?, by: Value?, duration: TimeInterval, timing: AnimationTimingFunction, isAdditive: Bool, bindTarget: BindTarget?, blendLayer: Int32, repeatMode: AnimationRepeatMode, fillMode: AnimationFillMode, trimStart: TimeInterval?, trimEnd: TimeInterval?, trimDuration: TimeInterval?, offset: TimeInterval, delay: TimeInterval, speed: Float)",
      "desc": "Creates an animation that interpolates between two configurations of the given joints."
    },
    {
      "name": "var name: String",
      "desc": "A textual name for the animation."
    },
    {
      "name": "var bindTarget: BindTarget",
      "desc": "A textual name that identifies the particular property that animates."
    },
    {
      "name": "var blendLayer: Int32",
      "desc": "The order in which the framework composites the animation."
    },
    {
      "name": "var jointNames: [String]",
      "desc": "The names of the joints in the animated skeletal pose."
    },
    {
      "name": "var isScaleAnimated: Bool",
      "desc": "A Boolean value that indicates whether that animation interpolates changes to the target’s size."
    },
    {
      "name": "var isRotationAnimated: Bool",
      "desc": "A Boolean value that indicates whether the animation interpolates rotational changes."
    },
    {
      "name": "var isTranslationAnimated: Bool",
      "desc": "A Boolean value that indicates whether the animation interpolates changes to the target object’s position."
    },
    {
      "name": "var isAdditive: Bool",
      "desc": "A Boolean value that indicates whether the animation blends additively with concurrent animations."
    },
    {
      "name": "var fromValue: JointTransforms?",
      "desc": "The state of the target object’s joints before the animation starts."
    },
    {
      "name": "var fromValue: Transform?",
      "desc": "The state of the target object’s transform before the animation starts."
    },
    {
      "name": "var fromValue: Double?",
      "desc": "The value at the start of the animation when the animated property's type is double precision."
    },
    {
      "name": "var fromValue: Float?",
      "desc": "The value at the start of the animation when the animated property’s type is floating point."
    },
    {
      "name": "var fromValue: simd_quatf?",
      "desc": "The value at the start of the animation when the animated property is a quaternion."
    },
    {
      "name": "var fromValue: SIMD2<Float>?",
      "desc": "A pair of floating-point values that specify the animated property’s state at the start of the animation."
    },
    {
      "name": "var fromValue: SIMD3<Float>?",
      "desc": "A floating-point triplet that specifies the animated property’s value at the start of the animation."
    },
    {
      "name": "var fromValue: SIMD4<Float>?",
      "desc": "A floating-point quadruple that specifies the animated property’s state at the start of the animation."
    },
    {
      "name": "var byValue: JointTransforms?",
      "desc": "Incremental values that the animation interpolates for the joint transforms."
    },
    {
      "name": "var byValue: Transform?",
      "desc": "An incremental scale, rotation, and translation that the animation interpolates for the animated transform."
    },
    {
      "name": "var byValue: Double?",
      "desc": "An incremental value that the animation interpolates when the animated property type is double precision."
    },
    {
      "name": "var byValue: Float?",
      "desc": "An incremental value that the animation interpolates when the animated property type is floating point."
    },
    {
      "name": "var byValue: simd_quatf?",
      "desc": "An incremental value that the animation interpolates when the animated property is a quaternion."
    },
    {
      "name": "var byValue: SIMD2<Float>?",
      "desc": "An incremental value that the animation interpolates when the animated property is a floating-point pair."
    },
    {
      "name": "var byValue: SIMD3<Float>?",
      "desc": "An incremental value that the animation interpolates when the animated property is a floating-point triplet."
    },
    {
      "name": "var byValue: SIMD4<Float>?",
      "desc": "An incremental value that the animation interpolates when the animated property is a floating-point quadruple."
    },
    {
      "name": "var toValue: JointTransforms?",
      "desc": "The state of the target object’s joints after the animation finishes."
    },
    {
      "name": "var toValue: Transform?",
      "desc": "The state of the target object’s transform after the animation finishes."
    },
    {
      "name": "var toValue: Double?",
      "desc": "The state after the animation finishes when the animated property's type is double precision."
    },
    {
      "name": "var toValue: Float?",
      "desc": "The state after the animation finishes when the animated property's type is floating point."
    },
    {
      "name": "var toValue: simd_quatf?",
      "desc": "The state after the animation finishes when the animated property is a quaternion."
    },
    {
      "name": "var toValue: SIMD2<Float>?",
      "desc": "The state after the animation finishes when the animated property is a floating-point pair."
    },
    {
      "name": "var toValue: SIMD3<Float>?",
      "desc": "The state after the animation finishes when the animated property is a floating-point triplet."
    },
    {
      "name": "var toValue: SIMD4<Float>?",
      "desc": "The state after the animation finishes when the animated property is a floating-point quadruple."
    },
    {
      "name": "var speed: Float",
      "desc": "A factor that increases or decreases the animation’s rate of playback."
    },
    {
      "name": "var delay: TimeInterval",
      "desc": "An amount of time that lapses before the animation plays."
    },
    {
      "name": "var duration: TimeInterval",
      "desc": "The total playback time of the animation."
    },
    {
      "name": "var offset: TimeInterval",
      "desc": "The time, in seconds, at which the animation begins within the duration."
    },
    {
      "name": "var timing: AnimationTimingFunction",
      "desc": "An option that determines the animation’s pace over time."
    },
    {
      "name": "var trimDuration: TimeInterval?",
      "desc": "An optional duration that overrides the calculated duration."
    },
    {
      "name": "var trimStart: TimeInterval?",
      "desc": "The time, in seconds, at which the animation plays."
    },
    {
      "name": "var trimEnd: TimeInterval?",
      "desc": "The time, in seconds, at which the animation stops."
    },
    {
      "name": "func trimmed(start: TimeInterval?, end: TimeInterval?, duration: TimeInterval?) -> FromToByAnimation<Value>",
      "desc": "Edits the animation duration according to the specified time."
    },
    {
      "name": "var repeatMode: AnimationRepeatMode",
      "desc": "An option that determines how the animation repeats."
    },
    {
      "name": "var fillMode: AnimationFillMode",
      "desc": "An option that determines which data displays outside of the normal duration."
    },
    {
      "name": "func repeated(count: TimeInterval) -> FromToByAnimation<Value>",
      "desc": "Repeats an animation the number of times specified by a decimal number."
    },
    {
      "name": "func repeated(count: Int) -> FromToByAnimation<Value>",
      "desc": "Repeats an animation the number of times specified by a whole number."
    },
    {
      "name": "func repeatingForever() -> FromToByAnimation<Value>",
      "desc": "Repeats an animation an indefinite number of times."
    }
  ],
  "declaration": "struct FromToByAnimation<Value> where Value : AnimatableData",
  "conformsTo": [
    "AnimationDefinition"
  ]
}