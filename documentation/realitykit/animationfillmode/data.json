{
  "path": "/documentation/realitykit/animationfillmode",
  "type": "Structure",
  "name": "AnimationFillMode",
  "desc": "Options that determine which animation frames display outside of the normal duration.",
  "items": [
    {
      "name": "static let none: AnimationFillMode",
      "desc": "An option that indicates an animation doesn't display frame data outside of its normal duration."
    },
    {
      "name": "static let forwards: AnimationFillMode",
      "desc": "An option that freezes the last frame of the animation until it stops."
    },
    {
      "name": "static let backwards: AnimationFillMode",
      "desc": "An option that shows the first animation frame while playback progresses to the beginning position."
    },
    {
      "name": "static let both: AnimationFillMode",
      "desc": "An option that displays the animation's initial frame or final frame when playback occurs outside of the normal duration."
    },
    {
      "name": "let rawValue: Int8",
      "desc": "The raw value of an animation's fill mode."
    },
    {
      "name": "init()",
      "desc": "Creates an empty option set."
    },
    {
      "name": "init<S>(S)",
      "desc": "Creates a new set from a finite sequence of items."
    },
    {
      "name": "init(arrayLiteral: AnimationFillMode...)",
      "desc": "Creates a set containing the elements of the given array literal."
    },
    {
      "name": "init(rawValue: Int8)",
      "desc": "Creates a fill mode from its backing data type."
    },
    {
      "name": "var isEmpty: Bool",
      "desc": "A Boolean value that indicates whether the set has no elements."
    },
    {
      "name": "func contains(AnimationFillMode) -> Bool",
      "desc": "Returns a Boolean value that indicates whether a given element is a member of the option set."
    },
    {
      "name": "func formIntersection(AnimationFillMode)",
      "desc": "Removes all elements of this option set that are not also present in the given set."
    },
    {
      "name": "func formSymmetricDifference(AnimationFillMode)",
      "desc": "Replaces this set with a new set containing all elements contained in either this set or the given set, but not in both."
    },
    {
      "name": "func formUnion(AnimationFillMode)",
      "desc": "Inserts the elements of another set into this option set."
    },
    {
      "name": "func insert(AnimationFillMode) -> (inserted: Bool, memberAfterInsert: AnimationFillMode)",
      "desc": "Adds the given element to the option set if it is not already a member."
    },
    {
      "name": "func intersection(AnimationFillMode) -> AnimationFillMode",
      "desc": "Returns a new option set with only the elements contained in both this set and the given set."
    },
    {
      "name": "func isDisjoint(with: AnimationFillMode) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the set has no members in common with the given set."
    },
    {
      "name": "func isStrictSubset(of: AnimationFillMode) -> Bool",
      "desc": "Returns a Boolean value that indicates whether this set is a strict subset of the given set."
    },
    {
      "name": "func isStrictSuperset(of: AnimationFillMode) -> Bool",
      "desc": "Returns a Boolean value that indicates whether this set is a strict superset of the given set."
    },
    {
      "name": "func isSubset(of: AnimationFillMode) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the set is a subset of another set."
    },
    {
      "name": "func isSuperset(of: AnimationFillMode) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the set is a superset of the given set."
    },
    {
      "name": "func remove(AnimationFillMode) -> AnimationFillMode?",
      "desc": "Removes the given element and all elements subsumed by it."
    },
    {
      "name": "func subtract(AnimationFillMode)",
      "desc": "Removes the elements of the given set from this set."
    },
    {
      "name": "func subtracting(AnimationFillMode) -> AnimationFillMode",
      "desc": "Returns a new set containing the elements of this set that do not occur in the given set."
    },
    {
      "name": "func symmetricDifference(AnimationFillMode) -> AnimationFillMode",
      "desc": "Returns a new option set with the elements contained in this set or in the given set, but not in both."
    },
    {
      "name": "func union(AnimationFillMode) -> AnimationFillMode",
      "desc": "Returns a new option set of the elements contained in this set, in the given set, or in both."
    },
    {
      "name": "func update(with: AnimationFillMode) -> AnimationFillMode?",
      "desc": "Inserts the given element into the set."
    },
    {
      "name": "static func != (AnimationFillMode, AnimationFillMode) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two fill modes arenâ€™t equal."
    },
    {
      "name": "typealias AnimationFillMode.ArrayLiteralElement",
      "desc": "The type of the elements of an array literal."
    },
    {
      "name": "typealias AnimationFillMode.Element",
      "desc": "The element type of the option set."
    },
    {
      "name": "typealias AnimationFillMode.RawValue",
      "desc": "The backing data type to distinguish fill modes."
    }
  ],
  "declaration": "struct AnimationFillMode",
  "conformsTo": [
    "OptionSet"
  ]
}