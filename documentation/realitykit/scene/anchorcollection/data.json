{
  "path": "/documentation/realitykit/scene/anchorcollection",
  "type": "Structure",
  "name": "Scene.AnchorCollection",
  "desc": "A collection of anchor entities.",
  "items": [
    {
      "name": "func elementsEqual<OtherSequence>(OtherSequence, by: (Element, OtherSequence.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test."
    },
    {
      "name": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Element, PossiblePrefix.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test."
    },
    {
      "name": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Element, Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements."
    },
    {
      "name": "func makeIterator() -> Scene.AnchorCollection.Iterator",
      "desc": "Returns an iterator over the elements of the collection."
    },
    {
      "name": "typealias Scene.AnchorCollection.Iterator",
      "desc": "An iterator that presents the elements of the collection."
    },
    {
      "name": "typealias Scene.AnchorCollection.Element",
      "desc": "The type of element traversed by the iterator."
    },
    {
      "name": "func forEach((Element) -> Void)",
      "desc": "Calls the given closure on each element in the sequence in the same order as a for-in loop."
    },
    {
      "name": "func enumerated() -> EnumeratedSequence<Scene.AnchorCollection>",
      "desc": "Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence."
    },
    {
      "name": "var underestimatedCount: Int",
      "desc": "A value less than or equal to the number of elements in the collection."
    },
    {
      "name": "var count: Int",
      "desc": "The number of elements in the collection."
    },
    {
      "name": "var isEmpty: Bool",
      "desc": "A Boolean value indicating whether the collection is empty."
    },
    {
      "name": "subscript(Int) -> Scene.AnchorCollection.Element",
      "desc": "Accesses the element at the specified position."
    },
    {
      "name": "subscript<R>(R) -> Slice<Scene.AnchorCollection>",
      "desc": "Accesses the contiguous subrange of the collection’s elements specified by a range expression."
    },
    {
      "name": "subscript((UnboundedRange_) -> ()) -> Slice<Scene.AnchorCollection>",
      "desc": "Returns the entire sequence as a slice."
    },
    {
      "name": "subscript(Range<Int>) -> Slice<Scene.AnchorCollection>",
      "desc": "Accesses a contiguous subrange of the collection’s elements."
    },
    {
      "name": "typealias Scene.AnchorCollection.SubSequence",
      "desc": "A sequence that represents a contiguous subrange of the collection’s elements."
    },
    {
      "name": "func append(Scene.AnchorCollection.Element)",
      "desc": "Adds a new anchor at the end of the collection."
    },
    {
      "name": "func append(contentsOf: [Scene.AnchorCollection.Element])",
      "desc": "Adds anchors from an array to the end of this collection."
    },
    {
      "name": "func append<S>(contentsOf: S)",
      "desc": "Adds anchors from a sequence to the end of this collection."
    },
    {
      "name": "func remove(Scene.AnchorCollection.Element)",
      "desc": "Removes the anchor at the specified position."
    },
    {
      "name": "func remove(at: Int)",
      "desc": "Removes and returns the anchor at the specified position."
    },
    {
      "name": "func removeAll()",
      "desc": "Removes all anchors from the collection."
    },
    {
      "name": "func removeAll(keepCapacity: Bool)",
      "desc": "Removes all anchors from the collection."
    },
    {
      "name": "func replaceAll([Scene.AnchorCollection.Element])",
      "desc": "Replaces the existing anchor collection with a provided collection."
    },
    {
      "name": "func replaceAll<S>(S)",
      "desc": "Replaces the existing anchor collection with a provided sequence."
    },
    {
      "name": "func contains(where: (Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate."
    },
    {
      "name": "func allSatisfy((Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate."
    },
    {
      "name": "var first: Element?",
      "desc": "The first element of the collection."
    },
    {
      "name": "func first(where: (Element) -> Bool) -> Element?",
      "desc": "Returns the first element of the sequence that satisfies the given predicate."
    },
    {
      "name": "func min(by: (Element, Element) -> Bool) -> Element?",
      "desc": "Returns the minimum element in the sequence, using the given predicate as the comparison between elements."
    },
    {
      "name": "func max(by: (Element, Element) -> Bool) -> Element?",
      "desc": "Returns the maximum element in the sequence, using the given predicate as the comparison between elements."
    },
    {
      "name": "func filter((Element) -> Bool) -> [Element]",
      "desc": "Returns an array containing, in order, the elements of the sequence that satisfy the given predicate."
    },
    {
      "name": "func prefix(Int) -> Slice<Scene.AnchorCollection>",
      "desc": "Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection."
    },
    {
      "name": "func prefix(through: Int) -> Slice<Scene.AnchorCollection>",
      "desc": "Returns a subsequence from the start of the collection through the specified position."
    },
    {
      "name": "func prefix(upTo: Int) -> Slice<Scene.AnchorCollection>",
      "desc": "Returns a subsequence from the start of the collection up to, but not including, the specified position."
    },
    {
      "name": "func prefix(while: (Element) -> Bool) -> Slice<Scene.AnchorCollection>",
      "desc": "Returns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements."
    },
    {
      "name": "func suffix(Int) -> Slice<Scene.AnchorCollection>",
      "desc": "Returns a subsequence, up to the given maximum length, containing the final elements of the collection."
    },
    {
      "name": "func suffix(from: Int) -> Slice<Scene.AnchorCollection>",
      "desc": "Returns a subsequence from the specified position to the end of the collection."
    },
    {
      "name": "func randomElement() -> Element?",
      "desc": "Returns a random element of the collection."
    },
    {
      "name": "func randomElement<T>(using: inout T) -> Element?",
      "desc": "Returns a random element of the collection, using the given generator as a source for randomness."
    },
    {
      "name": "func map<T>((Element) -> T) -> [T]",
      "desc": "Returns an array containing the results of mapping the given closure over the sequence’s elements."
    },
    {
      "name": "func flatMap<SegmentOfResult>((Element) -> SegmentOfResult) -> [SegmentOfResult.Element]",
      "desc": "Returns an array containing the concatenated results of calling the given transformation with each element of this sequence."
    },
    {
      "name": "func compactMap<ElementOfResult>((Element) -> ElementOfResult?) -> [ElementOfResult]",
      "desc": "Returns an array containing the non-nil results of calling the given transformation with each element of this sequence."
    },
    {
      "name": "func reduce<Result>(Result, (Result, Element) -> Result) -> Result",
      "desc": "Returns the result of combining the elements of the sequence using the given closure."
    },
    {
      "name": "func reduce<Result>(into: Result, (inout Result, Element) -> ()) -> Result",
      "desc": "Returns the result of combining the elements of the sequence using the given closure."
    },
    {
      "name": "var lazy: LazySequence<Scene.AnchorCollection>",
      "desc": "A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily."
    },
    {
      "name": "func sorted(by: (Element, Element) -> Bool) -> [Element]",
      "desc": "Returns the elements of the sequence, sorted using the given predicate as the comparison between elements."
    },
    {
      "name": "func reversed() -> [Element]",
      "desc": "Returns an array containing the elements of this sequence in reverse order."
    },
    {
      "name": "func shuffled() -> [Element]",
      "desc": "Returns the elements of the sequence, shuffled."
    },
    {
      "name": "func shuffled<T>(using: inout T) -> [Element]",
      "desc": "Returns the elements of the sequence, shuffled using the given generator as a source for randomness."
    },
    {
      "name": "func dropFirst(Int) -> Slice<Scene.AnchorCollection>",
      "desc": "Returns a subsequence containing all but the given number of initial elements."
    },
    {
      "name": "func dropLast(Int) -> Slice<Scene.AnchorCollection>",
      "desc": "Returns a subsequence containing all but the specified number of final elements."
    },
    {
      "name": "func drop(while: (Element) -> Bool) -> Slice<Scene.AnchorCollection>",
      "desc": "Returns a subsequence by skipping elements while predicate returns true and returning the remaining elements."
    },
    {
      "name": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Element) -> Bool) -> [Slice<Scene.AnchorCollection>]",
      "desc": "Returns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
    },
    {
      "name": "typealias Scene.AnchorCollection.Index",
      "desc": "A type that represents a position in the collection."
    },
    {
      "name": "typealias Scene.AnchorCollection.Indices",
      "desc": "A type that represents the indices that are valid for subscripting the collection, in ascending order."
    },
    {
      "name": "var startIndex: Int",
      "desc": "The position of the first element in a nonempty collection."
    },
    {
      "name": "var endIndex: Int",
      "desc": "The position one greater than the last valid subscript argument."
    },
    {
      "name": "var indices: DefaultIndices<Scene.AnchorCollection>",
      "desc": "The indices that are valid for subscripting the collection, in ascending order."
    },
    {
      "name": "func index(Int, offsetBy: Int) -> Int",
      "desc": "Returns an index that is the specified distance from the given index."
    },
    {
      "name": "func index(Int, offsetBy: Int, limitedBy: Int) -> Int?",
      "desc": "Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index."
    },
    {
      "name": "func index(after: Int) -> Int",
      "desc": "Returns the position immediately after the given index."
    },
    {
      "name": "func firstIndex(where: (Element) -> Bool) -> Int?",
      "desc": "Returns the first index in which an element of the collection satisfies the given predicate."
    },
    {
      "name": "func formIndex(inout Int, offsetBy: Int)",
      "desc": "Offsets the given index by the specified distance."
    },
    {
      "name": "func formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool",
      "desc": "Offsets the given index by the specified distance, or so that it equals the given limiting index."
    },
    {
      "name": "func formIndex(after: inout Int)",
      "desc": "Replaces the given index with its successor."
    },
    {
      "name": "func distance(from: Int, to: Int) -> Int",
      "desc": "Returns the distance between two indices."
    },
    {
      "name": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Element>) -> R) -> R?",
      "desc": "Executes a closure on the sequence’s contiguous storage."
    },
    {
      "name": "var publisher: Publishers.Sequence<Scene.AnchorCollection, Never>",
      "desc": "Stores changes waiting to be published."
    },
    {
      "name": "var description: String",
      "desc": "A textual representation of this instance."
    },
    {
      "name": "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult"
    },
    {
      "name": "func formatted<S>(S) -> S.FormatOutput"
    },
    {
      "name": "func sorted<Comparator>(using: Comparator) -> [Element]"
    },
    {
      "name": "func sorted<S, Comparator>(using: S) -> [Element]"
    }
  ],
  "declaration": "struct AnchorCollection",
  "conformsTo": [
    "Collection",
    "CustomStringConvertible"
  ]
}