{
  "path": "/documentation/realitykit/jointtransforms",
  "type": "Structure",
  "name": "JointTransforms",
  "desc": "A set of animatable transform values for joints that collectively represent a single skeletal pose.",
  "items": [
    {
      "name": "init()",
      "desc": "Initializes a collection of animatable transforms for a single skeletal pose."
    },
    {
      "name": "init<S>(S)",
      "desc": "Initializes a collection of transforms of a specific type for a single skeletal pose."
    },
    {
      "name": "init(arrayLiteral: Transform...)",
      "desc": "Initializes a collection of animatable transforms using the argument elements for a single skeletal pose."
    },
    {
      "name": "typealias JointTransforms.ArrayLiteralElement",
      "desc": "The type of the elements of an array literal."
    },
    {
      "name": "typealias JointTransforms.Element",
      "desc": "An individual joint transform in the collection."
    },
    {
      "name": "typealias JointTransforms.Index",
      "desc": "A position of an individual joint transform in the collection."
    },
    {
      "name": "typealias JointTransforms.Indices",
      "desc": "A type that represents the indices that are valid for subscripting the collection, in ascending order."
    },
    {
      "name": "typealias JointTransforms.Iterator",
      "desc": "A type that provides the collection's iteration interface and encapsulates its iteration state."
    },
    {
      "name": "typealias JointTransforms.SubSequence",
      "desc": "A sequence that represents a contiguous subrange of the collection's elements."
    },
    {
      "name": "var count: Int",
      "desc": "The number of elements in the collection."
    },
    {
      "name": "var first: Transform?",
      "desc": "The first element of the collection."
    },
    {
      "name": "var indices: DefaultIndices<JointTransforms>",
      "desc": "The indices that are valid for subscripting the collection, in ascending order."
    },
    {
      "name": "var startIndex: JointTransforms.Index",
      "desc": "An index to the first joint transform in the collection."
    },
    {
      "name": "var endIndex: JointTransforms.Index",
      "desc": "An index to the last joint transform in the collection."
    },
    {
      "name": "var isEmpty: Bool",
      "desc": "A Boolean value indicating whether the collection is empty."
    },
    {
      "name": "var last: Transform?",
      "desc": "The last element of the collection."
    },
    {
      "name": "var lazy: LazySequence<JointTransforms>",
      "desc": "A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily."
    },
    {
      "name": "var publisher: Publishers.Sequence<JointTransforms, Never>",
      "desc": "An object that transmits a sequence of joint transforms in real time."
    },
    {
      "name": "var underestimatedCount: Int",
      "desc": "A value less than or equal to the number of elements in the collection."
    },
    {
      "name": "subscript(JointTransforms.Index) -> Transform",
      "desc": "Accesses a single joint transform in the collection at the given index."
    },
    {
      "name": "subscript<R>(R) -> Slice<JointTransforms>",
      "desc": "Accesses the contiguous subrange of the collection’s elements specified by a range expression."
    },
    {
      "name": "subscript((UnboundedRange_) -> ()) -> Slice<JointTransforms>",
      "desc": "Accesses an unbounded subrange of the collection’s elements."
    },
    {
      "name": "subscript(Range<Int>) -> Slice<JointTransforms>",
      "desc": "Accesses a contiguous subrange of the collection’s elements."
    },
    {
      "name": "subscript<R>(R) -> Slice<JointTransforms>",
      "desc": "Provides a contiguous subrange of the collection’s elements that the given range expression specifies."
    },
    {
      "name": "func allSatisfy((Transform) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate."
    },
    {
      "name": "func compactMap<ElementOfResult>((Transform) -> ElementOfResult?) -> [ElementOfResult]",
      "desc": "Returns an array containing the non-nil results of calling the given transformation with each element of this sequence."
    },
    {
      "name": "func contains(Transform) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence contains the given element."
    },
    {
      "name": "func contains(where: (Transform) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate."
    },
    {
      "name": "func difference<C>(from: C) -> CollectionDifference<Transform>",
      "desc": "Returns the difference needed to produce this collection’s ordered elements from the given collection."
    },
    {
      "name": "func difference<C>(from: C, by: (C.Element, Transform) -> Bool) -> CollectionDifference<Transform>",
      "desc": "Returns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test."
    },
    {
      "name": "func distance(from: Int, to: Int) -> Int",
      "desc": "Returns the distance between two indices."
    },
    {
      "name": "func drop(while: (Transform) -> Bool) -> Slice<JointTransforms>",
      "desc": "Returns a subsequence by skipping elements while predicate returns true and returning the remaining elements."
    },
    {
      "name": "func dropFirst(Int) -> Slice<JointTransforms>",
      "desc": "Returns a subsequence containing all but the given number of initial elements."
    },
    {
      "name": "func dropLast(Int) -> Slice<JointTransforms>",
      "desc": "Returns a subsequence containing all but the specified number of final elements."
    },
    {
      "name": "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
      "desc": "Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order."
    },
    {
      "name": "func elementsEqual<OtherSequence>(OtherSequence, by: (Transform, OtherSequence.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test."
    },
    {
      "name": "func enumerated() -> EnumeratedSequence<JointTransforms>",
      "desc": "Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence."
    },
    {
      "name": "func filter((Transform) -> Bool) -> [Transform]",
      "desc": "Returns an array containing, in order, the elements of the sequence that satisfy the given predicate."
    },
    {
      "name": "func first(where: (Transform) -> Bool) -> Transform?",
      "desc": "Returns the first element of the sequence that satisfies the given predicate."
    },
    {
      "name": "func firstIndex(of: Transform) -> Int?",
      "desc": "Returns the first index where the specified value appears in the collection."
    },
    {
      "name": "func firstIndex(where: (Transform) -> Bool) -> Int?",
      "desc": "Returns the first index in which an element of the collection satisfies the given predicate."
    },
    {
      "name": "func flatMap<SegmentOfResult>((Transform) -> SegmentOfResult) -> [SegmentOfResult.Element]",
      "desc": "Returns an array containing the concatenated results of calling the given transformation with each element of this sequence."
    },
    {
      "name": "func forEach((Transform) -> Void)",
      "desc": "Calls the given closure on each element in the sequence in the same order as a for-in loop."
    },
    {
      "name": "func formIndex(inout Int, offsetBy: Int)",
      "desc": "Offsets the given index by the specified distance."
    },
    {
      "name": "func formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool",
      "desc": "Offsets the given index by the specified distance, or so that it equals the given limiting index."
    },
    {
      "name": "func formIndex(after: inout Int)",
      "desc": "Replaces the given index with its successor."
    },
    {
      "name": "func formIndex(before: inout Int)",
      "desc": "Replaces the given index with its predecessor."
    },
    {
      "name": "func formatted<S>(S) -> S.FormatOutput",
      "desc": "Formats a sequence to the given style."
    },
    {
      "name": "func index(Int, offsetBy: Int) -> Int",
      "desc": "Returns an index that is the specified distance from the given index."
    },
    {
      "name": "func index(Int, offsetBy: Int, limitedBy: Int) -> Int?",
      "desc": "Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index."
    },
    {
      "name": "func index(after: JointTransforms.Index) -> JointTransforms.Index",
      "desc": "Returns the position in the sequence of the joint that follows the given position."
    },
    {
      "name": "func index(before: JointTransforms.Index) -> JointTransforms.Index",
      "desc": "Returns the position in the sequence of the joint that preceeds the given position."
    },
    {
      "name": "func last(where: (Transform) -> Bool) -> Transform?",
      "desc": "Returns the last element of the sequence that satisfies the given predicate."
    },
    {
      "name": "func lastIndex(of: Transform) -> Int?",
      "desc": "Returns the last index where the specified value appears in the collection."
    },
    {
      "name": "func lastIndex(where: (Transform) -> Bool) -> Int?",
      "desc": "Returns the index of the last element in the collection that matches the given predicate."
    },
    {
      "name": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Transform, Transform) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements."
    },
    {
      "name": "func makeIterator() -> IndexingIterator<JointTransforms>",
      "desc": "Returns an iterator over the elements of the collection."
    },
    {
      "name": "func map<T>((Transform) -> T) -> [T]",
      "desc": "Returns an array containing the results of mapping the given closure over the sequence’s elements."
    },
    {
      "name": "func max(by: (Transform, Transform) -> Bool) -> Transform?",
      "desc": "Returns the maximum element in the sequence, using the given predicate as the comparison between elements."
    },
    {
      "name": "func min(by: (Transform, Transform) -> Bool) -> Transform?",
      "desc": "Returns the minimum element in the sequence, using the given predicate as the comparison between elements."
    },
    {
      "name": "func partition(by: (Transform) -> Bool) -> Int",
      "desc": "Reorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don’t match."
    },
    {
      "name": "func prefix(Int) -> Slice<JointTransforms>",
      "desc": "Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection."
    },
    {
      "name": "func prefix(through: Int) -> Slice<JointTransforms>",
      "desc": "Returns a subsequence from the start of the collection through the specified position."
    },
    {
      "name": "func prefix(upTo: Int) -> Slice<JointTransforms>",
      "desc": "Returns a subsequence from the start of the collection up to, but not including, the specified position."
    },
    {
      "name": "func prefix(while: (Transform) -> Bool) -> Slice<JointTransforms>",
      "desc": "Returns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements."
    },
    {
      "name": "func randomElement() -> Transform?",
      "desc": "Returns a random element of the collection."
    },
    {
      "name": "func randomElement<T>(using: inout T) -> Transform?",
      "desc": "Returns a random element of the collection, using the given generator as a source for randomness."
    },
    {
      "name": "func reduce<Result>(Result, (Result, Transform) -> Result) -> Result",
      "desc": "Returns the result of combining the elements of the sequence using the given closure."
    },
    {
      "name": "func reduce<Result>(into: Result, (inout Result, Transform) -> ()) -> Result",
      "desc": "Returns the result of combining the elements of the sequence using the given closure."
    },
    {
      "name": "func reverse()",
      "desc": "Reverses the elements of the collection in place."
    },
    {
      "name": "func reversed() -> ReversedCollection<JointTransforms>",
      "desc": "Returns a view presenting the elements of the collection in reverse order."
    },
    {
      "name": "func shuffled() -> [Transform]",
      "desc": "Returns the elements of the sequence, shuffled."
    },
    {
      "name": "func shuffled<T>(using: inout T) -> [Transform]",
      "desc": "Returns the elements of the sequence, shuffled using the given generator as a source for randomness."
    },
    {
      "name": "func sorted(by: (Transform, Transform) -> Bool) -> [Transform]",
      "desc": "Returns the elements of the sequence, sorted using the given predicate as the comparison between elements."
    },
    {
      "name": "func sorted<Comparator>(using: Comparator) -> [Transform]",
      "desc": "Returns a sorted collection of transforms based on one comparator."
    },
    {
      "name": "func sorted<S, Comparator>(using: S) -> [Transform]",
      "desc": "Returns a sorted collection of transforms based on more than one comparator."
    },
    {
      "name": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Transform) -> Bool) -> [Slice<JointTransforms>]",
      "desc": "Returns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
    },
    {
      "name": "func split(separator: Transform, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Slice<JointTransforms>]",
      "desc": "Returns the longest possible subsequences of the collection, in order, around elements equal to the given element."
    },
    {
      "name": "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
      "desc": "Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence."
    },
    {
      "name": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Transform, PossiblePrefix.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test."
    },
    {
      "name": "func suffix(Int) -> Slice<JointTransforms>",
      "desc": "Returns a subsequence, up to the given maximum length, containing the final elements of the collection."
    },
    {
      "name": "func suffix(from: Int) -> Slice<JointTransforms>",
      "desc": "Returns a subsequence from the specified position to the end of the collection."
    },
    {
      "name": "func swapAt(Int, Int)",
      "desc": "Exchanges the values at the specified indices of the collection."
    },
    {
      "name": "func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Transform>) -> R) -> R?",
      "desc": "Executes a closure on the collection’s contiguous storage."
    },
    {
      "name": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Transform>) -> R) -> R?",
      "desc": "Executes a closure on the sequence’s contiguous storage."
    },
    {
      "name": "static func == (JointTransforms, JointTransforms) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two collections of joints are equal."
    },
    {
      "name": "static func != (JointTransforms, JointTransforms) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two collections of joints are not equal."
    },
    {
      "name": "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
      "desc": "Determines how two collections of joints relate to each other in terms of size."
    }
  ],
  "declaration": "struct JointTransforms",
  "conformsTo": [
    "AnimatableData",
    "BidirectionalCollection",
    "Equatable",
    "ExpressibleByArrayLiteral",
    "MutableCollection"
  ]
}