{
  "path": "/documentation/dispatch/dispatchqueue/schedulertimetype",
  "type": "Structure",
  "name": "DispatchQueue.SchedulerTimeType",
  "desc": "The scheduler time type used by the dispatch queue.",
  "items": [
    {
      "name": "init(DispatchTime)",
      "desc": "Creates a dispatch queue time type instance."
    },
    {
      "name": "init(from: Decoder)"
    },
    {
      "name": "struct DispatchQueue.SchedulerTimeType.Stride",
      "desc": "The increment by which the dispatch queue scheduler counts time."
    },
    {
      "name": "func advanced(by: DispatchQueue.SchedulerTimeType.Stride) -> DispatchQueue.SchedulerTimeType"
    },
    {
      "name": "func distance(to: DispatchQueue.SchedulerTimeType) -> DispatchQueue.SchedulerTimeType.Stride"
    },
    {
      "name": "var dispatchTime: DispatchTime",
      "desc": "The dispatch time represented by this type."
    },
    {
      "name": "func hash(into: inout Hasher)"
    },
    {
      "name": "static func != (DispatchQueue.SchedulerTimeType, DispatchQueue.SchedulerTimeType) -> Bool"
    },
    {
      "name": "static func ... (DispatchQueue.SchedulerTimeType) -> PartialRangeFrom<DispatchQueue.SchedulerTimeType>",
      "desc": "Returns a partial range extending upward from a lower bound."
    },
    {
      "name": "static func ... (DispatchQueue.SchedulerTimeType) -> PartialRangeThrough<DispatchQueue.SchedulerTimeType>",
      "desc": "Returns a partial range up to, and including, its upper bound."
    },
    {
      "name": "static func ... (DispatchQueue.SchedulerTimeType, DispatchQueue.SchedulerTimeType) -> ClosedRange<DispatchQueue.SchedulerTimeType>",
      "desc": "Returns a closed range that contains both of its bounds."
    },
    {
      "name": "static func ..< (DispatchQueue.SchedulerTimeType) -> PartialRangeUpTo<DispatchQueue.SchedulerTimeType>",
      "desc": "Returns a partial range up to, but not including, its upper bound."
    },
    {
      "name": "static func ..< (DispatchQueue.SchedulerTimeType, DispatchQueue.SchedulerTimeType) -> Range<DispatchQueue.SchedulerTimeType>",
      "desc": "Returns a half-open range that contains its lower bound but not its upper bound."
    },
    {
      "name": "static func <= (DispatchQueue.SchedulerTimeType, DispatchQueue.SchedulerTimeType) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument."
    },
    {
      "name": "static func == (DispatchQueue.SchedulerTimeType, DispatchQueue.SchedulerTimeType) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are equal."
    },
    {
      "name": "static func > (DispatchQueue.SchedulerTimeType, DispatchQueue.SchedulerTimeType) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument."
    },
    {
      "name": "static func >= (DispatchQueue.SchedulerTimeType, DispatchQueue.SchedulerTimeType) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument."
    },
    {
      "name": "var hashValue: Int"
    },
    {
      "name": "func encode(to: Encoder)"
    },
    {
      "name": "static func < (DispatchQueue.SchedulerTimeType, DispatchQueue.SchedulerTimeType) -> Bool"
    }
  ],
  "declaration": "struct SchedulerTimeType",
  "conformsTo": [
    "Decodable",
    "Encodable",
    "Hashable",
    "Strideable"
  ]
}