{
  "path": "/documentation/dispatch/dispatchio/closeflags",
  "type": "Structure",
  "name": "DispatchIO.CloseFlags",
  "desc": "Additional flags to use when closing an I/O channel.",
  "items": [
    {
      "name": "static let stop: DispatchIO.CloseFlags",
      "desc": "Stop any in-progress read/write operations when closed."
    },
    {
      "name": "init()",
      "desc": "Creates an empty option set."
    },
    {
      "name": "init(arrayLiteral: DispatchIO.CloseFlags...)",
      "desc": "Creates a set containing the elements of the given array literal."
    },
    {
      "name": "init(rawValue: UInt)"
    },
    {
      "name": "let rawValue: UInt"
    },
    {
      "name": "init<S>(S)",
      "desc": "Creates a new set from a finite sequence of items."
    },
    {
      "name": "var DISPATCH_IO_STOP: Int32",
      "desc": "Stop any in-progress read and write operations when closed."
    },
    {
      "name": "typealias DispatchIO.CloseFlags.ArrayLiteralElement"
    },
    {
      "name": "typealias DispatchIO.CloseFlags.Element"
    },
    {
      "name": "typealias DispatchIO.CloseFlags.RawValue"
    },
    {
      "name": "func contains(DispatchIO.CloseFlags) -> Bool",
      "desc": "Returns a Boolean value that indicates whether a given element is a member of the option set."
    },
    {
      "name": "func formIntersection(DispatchIO.CloseFlags)",
      "desc": "Removes all elements of this option set that are not also present in the given set."
    },
    {
      "name": "func formSymmetricDifference(DispatchIO.CloseFlags)",
      "desc": "Replaces this set with a new set containing all elements contained in either this set or the given set, but not in both."
    },
    {
      "name": "func formUnion(DispatchIO.CloseFlags)",
      "desc": "Inserts the elements of another set into this option set."
    },
    {
      "name": "func insert(DispatchIO.CloseFlags) -> (inserted: Bool, memberAfterInsert: DispatchIO.CloseFlags)",
      "desc": "Adds the given element to the option set if it is not already a member."
    },
    {
      "name": "func intersection(DispatchIO.CloseFlags) -> DispatchIO.CloseFlags",
      "desc": "Returns a new option set with only the elements contained in both this set and the given set."
    },
    {
      "name": "func isDisjoint(with: DispatchIO.CloseFlags) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the set has no members in common with the given set."
    },
    {
      "name": "var isEmpty: Bool",
      "desc": "A Boolean value that indicates whether the set has no elements."
    },
    {
      "name": "func isStrictSubset(of: DispatchIO.CloseFlags) -> Bool",
      "desc": "Returns a Boolean value that indicates whether this set is a strict subset of the given set."
    },
    {
      "name": "func isStrictSuperset(of: DispatchIO.CloseFlags) -> Bool",
      "desc": "Returns a Boolean value that indicates whether this set is a strict superset of the given set."
    },
    {
      "name": "func isSubset(of: DispatchIO.CloseFlags) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the set is a subset of another set."
    },
    {
      "name": "func isSuperset(of: DispatchIO.CloseFlags) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the set is a superset of the given set."
    },
    {
      "name": "func remove(DispatchIO.CloseFlags) -> DispatchIO.CloseFlags?",
      "desc": "Removes the given element and all elements subsumed by it."
    },
    {
      "name": "func subtract(DispatchIO.CloseFlags)",
      "desc": "Removes the elements of the given set from this set."
    },
    {
      "name": "func subtracting(DispatchIO.CloseFlags) -> DispatchIO.CloseFlags",
      "desc": "Returns a new set containing the elements of this set that do not occur in the given set."
    },
    {
      "name": "func symmetricDifference(DispatchIO.CloseFlags) -> DispatchIO.CloseFlags",
      "desc": "Returns a new option set with the elements contained in this set or in the given set, but not in both."
    },
    {
      "name": "func union(DispatchIO.CloseFlags) -> DispatchIO.CloseFlags",
      "desc": "Returns a new option set of the elements contained in this set, in the given set, or in both."
    },
    {
      "name": "func update(with: DispatchIO.CloseFlags) -> DispatchIO.CloseFlags?",
      "desc": "Inserts the given element into the set."
    },
    {
      "name": "static func != (DispatchIO.CloseFlags, DispatchIO.CloseFlags) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are not equal."
    }
  ],
  "declaration": "struct CloseFlags",
  "conformsTo": [
    "OptionSet",
    "RawRepresentable"
  ]
}