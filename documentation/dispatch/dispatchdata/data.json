{
  "path": "/documentation/dispatch/dispatchdata",
  "type": "Structure",
  "name": "DispatchData",
  "desc": "An object that manages a memory-based data buffer and exposes it as a contiguous block of memory.",
  "items": [
    {
      "name": "init(bytes: UnsafeRawBufferPointer)",
      "desc": "Creates a new dispatch data object from the specified memory buffer."
    },
    {
      "name": "init(bytesNoCopy: UnsafeRawBufferPointer, deallocator: DispatchData.Deallocator)",
      "desc": "Creates a new dispatch data object using the specified memory buffer and deallocator."
    },
    {
      "name": "func withUnsafeBytes<Result, ContentType>(body: (UnsafePointer<ContentType>) -> Result) -> Result"
    },
    {
      "name": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<UInt8>) -> R) -> R?",
      "desc": "Executes a closure on the sequence’s contiguous storage."
    },
    {
      "name": "enum DispatchData.Deallocator",
      "desc": "Memory deallocators for dispatch data objects."
    },
    {
      "name": "static let empty: DispatchData",
      "desc": "A dispatch data object representing a zero-length memory region."
    },
    {
      "name": "func append(DispatchData)"
    },
    {
      "name": "func append<SourceType>(UnsafeBufferPointer<SourceType>)"
    },
    {
      "name": "func append(UnsafeRawBufferPointer)"
    },
    {
      "name": "func copyBytes(to: UnsafeMutableRawBufferPointer, count: Int)"
    },
    {
      "name": "func copyBytes<DestinationType>(to: UnsafeMutableBufferPointer<DestinationType>, from: Range<DispatchData.Index>?) -> Int"
    },
    {
      "name": "func copyBytes(to: UnsafeMutableRawBufferPointer, from: Range<DispatchData.Index>)"
    },
    {
      "name": "subscript(DispatchData.Index) -> UInt8"
    },
    {
      "name": "subscript<R>(R) -> Slice<DispatchData>",
      "desc": "Accesses the contiguous subrange of the collection’s elements specified by a range expression."
    },
    {
      "name": "subscript((UnboundedRange_) -> ()) -> Slice<DispatchData>"
    },
    {
      "name": "subscript(Range<Int>) -> Slice<DispatchData>"
    },
    {
      "name": "func randomElement() -> UInt8?",
      "desc": "Returns a random element of the collection."
    },
    {
      "name": "func randomElement<T>(using: inout T) -> UInt8?",
      "desc": "Returns a random element of the collection, using the given generator as a source for randomness."
    },
    {
      "name": "var lazy: LazySequence<DispatchData>",
      "desc": "A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily."
    },
    {
      "name": "func region(location: Int) -> (data: DispatchData, offset: Int)"
    },
    {
      "name": "var regions: [DispatchData.Region]"
    },
    {
      "name": "typealias DispatchData.Regions"
    },
    {
      "name": "struct DispatchData.Region"
    },
    {
      "name": "var isEmpty: Bool",
      "desc": "A Boolean value indicating whether the collection is empty."
    },
    {
      "name": "var count: Int",
      "desc": "The number of elements in the collection."
    },
    {
      "name": "var first: UInt8?",
      "desc": "The first element of the collection."
    },
    {
      "name": "var last: UInt8?",
      "desc": "The last element of the collection."
    },
    {
      "name": "var underestimatedCount: Int",
      "desc": "A value less than or equal to the number of elements in the collection."
    },
    {
      "name": "func max() -> UInt8?",
      "desc": "Returns the maximum element in the sequence."
    },
    {
      "name": "func max(by: (UInt8, UInt8) -> Bool) -> UInt8?",
      "desc": "Returns the maximum element in the sequence, using the given predicate as the comparison between elements."
    },
    {
      "name": "func min() -> UInt8?",
      "desc": "Returns the minimum element in the sequence."
    },
    {
      "name": "func min(by: (UInt8, UInt8) -> Bool) -> UInt8?",
      "desc": "Returns the minimum element in the sequence, using the given predicate as the comparison between elements."
    },
    {
      "name": "func distance(from: Int, to: Int) -> Int",
      "desc": "Returns the distance between two indexes."
    },
    {
      "name": "func allSatisfy((UInt8) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate."
    },
    {
      "name": "func firstIndex(of: UInt8) -> Int?",
      "desc": "Returns the first index where the specified value appears in the collection."
    },
    {
      "name": "func firstIndex(where: (UInt8) -> Bool) -> Int?",
      "desc": "Returns the first index in which an element of the collection satisfies the given predicate."
    },
    {
      "name": "func lastIndex(of: UInt8) -> Int?",
      "desc": "Returns the last index where the specified value appears in the collection."
    },
    {
      "name": "func lastIndex(where: (UInt8) -> Bool) -> Int?",
      "desc": "Returns the index of the last element in the collection that matches the given predicate."
    },
    {
      "name": "func index(Int, offsetBy: Int) -> Int",
      "desc": "Returns an index that is the specified distance from the given index."
    },
    {
      "name": "func index(Int, offsetBy: Int, limitedBy: Int) -> Int?",
      "desc": "Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index."
    },
    {
      "name": "func index(after: DispatchData.Index) -> DispatchData.Index"
    },
    {
      "name": "func index(before: DispatchData.Index) -> DispatchData.Index"
    },
    {
      "name": "var startIndex: DispatchData.Index"
    },
    {
      "name": "var endIndex: DispatchData.Index"
    },
    {
      "name": "var indices: DefaultIndices<DispatchData>",
      "desc": "The indices that are valid for subscripting the collection, in ascending order."
    },
    {
      "name": "typealias DispatchData.Index"
    },
    {
      "name": "typealias DispatchData.Indices"
    },
    {
      "name": "func formIndex(inout Int, offsetBy: Int)",
      "desc": "Offsets the given index by the specified distance."
    },
    {
      "name": "func formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool",
      "desc": "Offsets the given index by the specified distance, or so that it equals the given limiting index."
    },
    {
      "name": "func formIndex(after: inout Int)",
      "desc": "Replaces the given index with its successor."
    },
    {
      "name": "func formIndex(before: inout Int)",
      "desc": "Replaces the given index with its predecessor."
    },
    {
      "name": "func first(where: (UInt8) -> Bool) -> UInt8?",
      "desc": "Returns the first element of the sequence that satisfies the given predicate."
    },
    {
      "name": "func last(where: (UInt8) -> Bool) -> UInt8?",
      "desc": "Returns the last element of the sequence that satisfies the given predicate."
    },
    {
      "name": "func filter((UInt8) -> Bool) -> [UInt8]",
      "desc": "Returns an array containing, in order, the elements of the sequence that satisfy the given predicate."
    },
    {
      "name": "func makeIterator() -> DispatchData.Iterator"
    },
    {
      "name": "func forEach((UInt8) -> Void)",
      "desc": "Calls the given closure on each element in the sequence in the same order as a for-in loop."
    },
    {
      "name": "func enumerateBytes((UnsafeBufferPointer<UInt8>, Int, inout Bool) -> Void)"
    },
    {
      "name": "func enumerated() -> EnumeratedSequence<DispatchData>",
      "desc": "Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence."
    },
    {
      "name": "typealias DispatchData.Iterator",
      "desc": "A type that provides the collection's iteration interface and encapsulates its iteration state."
    },
    {
      "name": "func drop(while: (UInt8) -> Bool) -> Slice<DispatchData>",
      "desc": "Returns a subsequence by skipping elements while predicate returns true and returning the remaining elements."
    },
    {
      "name": "func dropFirst(Int) -> Slice<DispatchData>",
      "desc": "Returns a subsequence containing all but the given number of initial elements."
    },
    {
      "name": "func dropLast(Int) -> Slice<DispatchData>",
      "desc": "Returns a subsequence containing all but the specified number of final elements."
    },
    {
      "name": "func prefix(Int) -> Slice<DispatchData>",
      "desc": "Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection."
    },
    {
      "name": "func prefix(through: Int) -> Slice<DispatchData>",
      "desc": "Returns a subsequence from the start of the collection through the specified position."
    },
    {
      "name": "func prefix(upTo: Int) -> Slice<DispatchData>",
      "desc": "Returns a subsequence from the start of the collection up to, but not including, the specified position."
    },
    {
      "name": "func prefix(while: (UInt8) -> Bool) -> Slice<DispatchData>",
      "desc": "Returns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements."
    },
    {
      "name": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (UInt8) -> Bool) -> [Slice<DispatchData>]",
      "desc": "Returns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
    },
    {
      "name": "func split(separator: UInt8, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Slice<DispatchData>]",
      "desc": "Returns the longest possible subsequences of the collection, in order, around elements equal to the given element."
    },
    {
      "name": "func suffix(Int) -> Slice<DispatchData>",
      "desc": "Returns a subsequence, up to the given maximum length, containing the final elements of the collection."
    },
    {
      "name": "func suffix(from: Int) -> Slice<DispatchData>",
      "desc": "Returns a subsequence from the specified position to the end of the collection."
    },
    {
      "name": "func subdata(in: Range<DispatchData.Index>) -> DispatchData"
    },
    {
      "name": "func difference<C>(from: C) -> CollectionDifference<UInt8>",
      "desc": "Returns the difference needed to produce this collection’s ordered elements from the given collection."
    },
    {
      "name": "func difference<C>(from: C, by: (C.Element, UInt8) -> Bool) -> CollectionDifference<UInt8>",
      "desc": "Returns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test."
    },
    {
      "name": "func reduce<Result>(into: Result, (inout Result, UInt8) -> ()) -> Result",
      "desc": "Returns the result of combining the elements of the sequence using the given closure."
    },
    {
      "name": "typealias DispatchData.SubSequence"
    },
    {
      "name": "func contains(UInt8) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence contains the given element."
    },
    {
      "name": "func contains(where: (UInt8) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate."
    },
    {
      "name": "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
      "desc": "Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence."
    },
    {
      "name": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (UInt8, PossiblePrefix.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test."
    },
    {
      "name": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements."
    },
    {
      "name": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (UInt8, UInt8) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements."
    },
    {
      "name": "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
      "desc": "Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order."
    },
    {
      "name": "func elementsEqual<OtherSequence>(OtherSequence, by: (UInt8, OtherSequence.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test."
    },
    {
      "name": "func compactMap<ElementOfResult>((UInt8) -> ElementOfResult?) -> [ElementOfResult]",
      "desc": "Returns an array containing the non-nil results of calling the given transformation with each element of this sequence."
    },
    {
      "name": "func map<T>((UInt8) -> T) -> [T]",
      "desc": "Returns an array containing the results of mapping the given closure over the sequence’s elements."
    },
    {
      "name": "func flatMap<SegmentOfResult>((UInt8) -> SegmentOfResult) -> [SegmentOfResult.Element]",
      "desc": "Returns an array containing the concatenated results of calling the given transformation with each element of this sequence."
    },
    {
      "name": "typealias DispatchData.Element"
    },
    {
      "name": "func sorted() -> [UInt8]",
      "desc": "Returns the elements of the sequence, sorted."
    },
    {
      "name": "func sorted(by: (UInt8, UInt8) -> Bool) -> [UInt8]",
      "desc": "Returns the elements of the sequence, sorted using the given predicate as the comparison between elements."
    },
    {
      "name": "func shuffled() -> [UInt8]",
      "desc": "Returns the elements of the sequence, shuffled."
    },
    {
      "name": "func shuffled<T>(using: inout T) -> [UInt8]",
      "desc": "Returns the elements of the sequence, shuffled using the given generator as a source for randomness."
    },
    {
      "name": "func reversed() -> ReversedCollection<DispatchData>",
      "desc": "Returns a view presenting the elements of the collection in reverse order."
    },
    {
      "name": "var publisher: Publishers.Sequence<DispatchData, Never>"
    },
    {
      "name": "func allSatisfy((UInt8) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate."
    },
    {
      "name": "func append(DispatchData)"
    },
    {
      "name": "func append<SourceType>(UnsafeBufferPointer<SourceType>)"
    },
    {
      "name": "func append(UnsafeRawBufferPointer)"
    },
    {
      "name": "func compactMap<ElementOfResult>((UInt8) -> ElementOfResult?) -> [ElementOfResult]",
      "desc": "Returns an array containing the non-nil results of calling the given transformation with each element of this sequence."
    },
    {
      "name": "func contains(UInt8) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence contains the given element."
    },
    {
      "name": "func contains(where: (UInt8) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate."
    },
    {
      "name": "func copyBytes(to: UnsafeMutableRawBufferPointer, count: Int)"
    },
    {
      "name": "func copyBytes<DestinationType>(to: UnsafeMutableBufferPointer<DestinationType>, from: Range<DispatchData.Index>?) -> Int"
    },
    {
      "name": "func copyBytes(to: UnsafeMutableRawBufferPointer, from: Range<DispatchData.Index>)"
    },
    {
      "name": "func distance(from: Int, to: Int) -> Int",
      "desc": "Returns the distance between two indexes."
    },
    {
      "name": "func drop(while: (UInt8) -> Bool) -> Slice<DispatchData>",
      "desc": "Returns a subsequence by skipping elements while predicate returns true and returning the remaining elements."
    },
    {
      "name": "func dropFirst(Int) -> Slice<DispatchData>",
      "desc": "Returns a subsequence containing all but the given number of initial elements."
    },
    {
      "name": "func dropLast(Int) -> Slice<DispatchData>",
      "desc": "Returns a subsequence containing all but the specified number of final elements."
    },
    {
      "name": "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
      "desc": "Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order."
    },
    {
      "name": "func elementsEqual<OtherSequence>(OtherSequence, by: (UInt8, OtherSequence.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test."
    },
    {
      "name": "func enumerateBytes((UnsafeBufferPointer<UInt8>, Int, inout Bool) -> Void)"
    },
    {
      "name": "func enumerated() -> EnumeratedSequence<DispatchData>",
      "desc": "Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence."
    },
    {
      "name": "func filter((UInt8) -> Bool) -> [UInt8]",
      "desc": "Returns an array containing, in order, the elements of the sequence that satisfy the given predicate."
    },
    {
      "name": "func first(where: (UInt8) -> Bool) -> UInt8?",
      "desc": "Returns the first element of the sequence that satisfies the given predicate."
    },
    {
      "name": "func firstIndex(of: UInt8) -> Int?",
      "desc": "Returns the first index where the specified value appears in the collection."
    },
    {
      "name": "func firstIndex(where: (UInt8) -> Bool) -> Int?",
      "desc": "Returns the first index in which an element of the collection satisfies the given predicate."
    },
    {
      "name": "func forEach((UInt8) -> Void)",
      "desc": "Calls the given closure on each element in the sequence in the same order as a for-in loop."
    },
    {
      "name": "func formIndex(inout Int, offsetBy: Int)",
      "desc": "Offsets the given index by the specified distance."
    },
    {
      "name": "func formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool",
      "desc": "Offsets the given index by the specified distance, or so that it equals the given limiting index."
    },
    {
      "name": "func formIndex(after: inout Int)",
      "desc": "Replaces the given index with its successor."
    },
    {
      "name": "func formIndex(before: inout Int)",
      "desc": "Replaces the given index with its predecessor."
    },
    {
      "name": "func index(Int, offsetBy: Int) -> Int",
      "desc": "Returns an index that is the specified distance from the given index."
    },
    {
      "name": "func index(Int, offsetBy: Int, limitedBy: Int) -> Int?",
      "desc": "Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index."
    },
    {
      "name": "func index(after: DispatchData.Index) -> DispatchData.Index"
    },
    {
      "name": "func index(before: DispatchData.Index) -> DispatchData.Index"
    },
    {
      "name": "func last(where: (UInt8) -> Bool) -> UInt8?",
      "desc": "Returns the last element of the sequence that satisfies the given predicate."
    },
    {
      "name": "func lastIndex(of: UInt8) -> Int?",
      "desc": "Returns the last index where the specified value appears in the collection."
    },
    {
      "name": "func lastIndex(where: (UInt8) -> Bool) -> Int?",
      "desc": "Returns the index of the last element in the collection that matches the given predicate."
    },
    {
      "name": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements."
    },
    {
      "name": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (UInt8, UInt8) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements."
    },
    {
      "name": "func makeIterator() -> DispatchData.Iterator"
    },
    {
      "name": "func map<T>((UInt8) -> T) -> [T]",
      "desc": "Returns an array containing the results of mapping the given closure over the sequence’s elements."
    },
    {
      "name": "func max() -> UInt8?",
      "desc": "Returns the maximum element in the sequence."
    },
    {
      "name": "func max(by: (UInt8, UInt8) -> Bool) -> UInt8?",
      "desc": "Returns the maximum element in the sequence, using the given predicate as the comparison between elements."
    },
    {
      "name": "func min() -> UInt8?",
      "desc": "Returns the minimum element in the sequence."
    },
    {
      "name": "func min(by: (UInt8, UInt8) -> Bool) -> UInt8?",
      "desc": "Returns the minimum element in the sequence, using the given predicate as the comparison between elements."
    },
    {
      "name": "func prefix(Int) -> Slice<DispatchData>",
      "desc": "Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection."
    },
    {
      "name": "func prefix(through: Int) -> Slice<DispatchData>",
      "desc": "Returns a subsequence from the start of the collection through the specified position."
    },
    {
      "name": "func prefix(upTo: Int) -> Slice<DispatchData>",
      "desc": "Returns a subsequence from the start of the collection up to, but not including, the specified position."
    },
    {
      "name": "func prefix(while: (UInt8) -> Bool) -> Slice<DispatchData>",
      "desc": "Returns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements."
    },
    {
      "name": "func randomElement() -> UInt8?",
      "desc": "Returns a random element of the collection."
    },
    {
      "name": "func randomElement<T>(using: inout T) -> UInt8?",
      "desc": "Returns a random element of the collection, using the given generator as a source for randomness."
    },
    {
      "name": "func reduce<Result>(Result, (Result, UInt8) -> Result) -> Result",
      "desc": "Returns the result of combining the elements of the sequence using the given closure."
    },
    {
      "name": "func region(location: Int) -> (data: DispatchData, offset: Int)"
    },
    {
      "name": "func reversed() -> ReversedCollection<DispatchData>",
      "desc": "Returns a view presenting the elements of the collection in reverse order."
    },
    {
      "name": "func shuffled() -> [UInt8]",
      "desc": "Returns the elements of the sequence, shuffled."
    },
    {
      "name": "func shuffled<T>(using: inout T) -> [UInt8]",
      "desc": "Returns the elements of the sequence, shuffled using the given generator as a source for randomness."
    },
    {
      "name": "func sorted() -> [UInt8]",
      "desc": "Returns the elements of the sequence, sorted."
    },
    {
      "name": "func sorted(by: (UInt8, UInt8) -> Bool) -> [UInt8]",
      "desc": "Returns the elements of the sequence, sorted using the given predicate as the comparison between elements."
    },
    {
      "name": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (UInt8) -> Bool) -> [Slice<DispatchData>]",
      "desc": "Returns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."
    },
    {
      "name": "func split(separator: UInt8, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Slice<DispatchData>]",
      "desc": "Returns the longest possible subsequences of the collection, in order, around elements equal to the given element."
    },
    {
      "name": "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
      "desc": "Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence."
    },
    {
      "name": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (UInt8, PossiblePrefix.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test."
    },
    {
      "name": "func subdata(in: Range<DispatchData.Index>) -> DispatchData"
    },
    {
      "name": "func suffix(Int) -> Slice<DispatchData>",
      "desc": "Returns a subsequence, up to the given maximum length, containing the final elements of the collection."
    },
    {
      "name": "func suffix(from: Int) -> Slice<DispatchData>",
      "desc": "Returns a subsequence from the specified position to the end of the collection."
    },
    {
      "name": "func withUnsafeBytes<Result, ContentType>(body: (UnsafePointer<ContentType>) -> Result) -> Result"
    }
  ],
  "declaration": "struct DispatchData",
  "conformsTo": [
    "DataProtocol",
    "RandomAccessCollection"
  ]
}