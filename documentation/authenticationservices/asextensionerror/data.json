{
  "path": "/documentation/authenticationservices/asextensionerror",
  "type": "Structure",
  "name": "ASExtensionError",
  "desc": "A credential provider extension error.",
  "items": [
    {
      "name": "static var errorDomain: String",
      "desc": "The domain for a credential provider extension error."
    },
    {
      "name": "let ASExtensionErrorDomain: String",
      "desc": "The domain for a credential provider extension error."
    },
    {
      "name": "var errorUserInfo: [String : Any]",
      "desc": "User information for a credential provider extension error."
    },
    {
      "name": "var errorCode: Int",
      "desc": "The error code for a credential provider extension error."
    },
    {
      "name": "static var credentialIdentityNotFound: ASExtensionError.Code",
      "desc": "The credential identity was not found."
    },
    {
      "name": "static var failed: ASExtensionError.Code",
      "desc": "The operation failed."
    },
    {
      "name": "static var userCanceled: ASExtensionError.Code",
      "desc": "The user canceled the operation."
    },
    {
      "name": "static var userInteractionRequired: ASExtensionError.Code",
      "desc": "User interaction is required."
    },
    {
      "name": "enum ASExtensionError.Code",
      "desc": "The codes for a credential provider extension error."
    },
    {
      "name": "var localizedDescription: String",
      "desc": "The localized description for an extension error."
    },
    {
      "name": "static func != (ASExtensionError, ASExtensionError) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are not equal."
    },
    {
      "name": "init(Code, userInfo: [String : Any])"
    },
    {
      "name": "var code: Code"
    },
    {
      "name": "var hashValue: Int"
    },
    {
      "name": "var userInfo: [String : Any]"
    },
    {
      "name": "func hash(into: inout Hasher)"
    },
    {
      "name": "static func == (ASExtensionError, ASExtensionError) -> Bool"
    }
  ],
  "declaration": "struct ASExtensionError"
}