{
  "path": "/documentation/cryptotokenkit/tkerror",
  "type": "Structure",
  "name": "TKError",
  "desc": "An error specific to the CryptoTokenKit framework.",
  "items": [
    {
      "name": "static var notImplemented: TKError.Code",
      "desc": "The system doesn’t implement the requested functionality."
    },
    {
      "name": "static var communicationError: TKError.Code",
      "desc": "The system had a communication error."
    },
    {
      "name": "static var corruptedData: TKError.Code",
      "desc": "The system idenfitied the data as corrupted."
    },
    {
      "name": "static var canceledByUser: TKError.Code",
      "desc": "The user canceled the operation."
    },
    {
      "name": "static var authenticationFailed: TKError.Code",
      "desc": "Authentication failed."
    },
    {
      "name": "static var objectNotFound: TKError.Code",
      "desc": "The system didn’t find the object."
    },
    {
      "name": "static var tokenNotFound: TKError.Code",
      "desc": "The system didn’t find the token."
    },
    {
      "name": "static var badParameter: TKError.Code",
      "desc": "An invalid parameter was provided."
    },
    {
      "name": "static var authenticationNeeded: TKError.Code",
      "desc": "Authentication is needed."
    },
    {
      "name": "static var errorDomain: String",
      "desc": "The error domain that the framework uses when issuing errors."
    },
    {
      "name": "var code: Code",
      "desc": "The CryptoTokenKit error code."
    },
    {
      "name": "var errorCode: Int",
      "desc": "An integer that the framework uses to describe an error."
    },
    {
      "name": "var userInfo: [String : Any]",
      "desc": "A dictionary the framework uses to provide information about an error."
    },
    {
      "name": "var errorUserInfo: [String : Any]",
      "desc": "A dictionary the framework uses to provide information about an error."
    },
    {
      "name": "var localizedDescription: String",
      "desc": "A human-readable, localized description of the error."
    },
    {
      "name": "init(Code, userInfo: [String : Any])"
    },
    {
      "name": "static func != (TKError, TKError) -> Bool",
      "desc": "Returns a Boolean value indicating whether two errors are not equal."
    },
    {
      "name": "static func == (TKError, TKError) -> Bool",
      "desc": "Returns a Boolean value indicating whether two errors are equal."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of the error by feeding them into the given hash function."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value of the error."
    },
    {
      "name": "enum TKError.Code",
      "desc": "Error codes from CryptoTokenKit."
    }
  ],
  "declaration": "struct TKError"
}