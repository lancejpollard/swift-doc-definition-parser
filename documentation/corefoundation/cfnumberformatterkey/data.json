{
  "path": "/documentation/corefoundation/cfnumberformatterkey",
  "type": "Structure",
  "name": "CFNumberFormatterKey",
  "desc": "No overview available.",
  "items": [
    {
      "name": "static let alwaysShowDecimalSeparator: CFNumberFormatterKey!",
      "desc": "Specifies if the result of converting a value to a string should always contain the decimal separator, even if the number is an integer."
    },
    {
      "name": "static let currencyCode: CFNumberFormatterKey!",
      "desc": "Specifies the currency code, a CFString object."
    },
    {
      "name": "static let currencyDecimalSeparator: CFNumberFormatterKey!",
      "desc": "Specifies the currency decimal separator, a CFString object."
    },
    {
      "name": "static let currencyGroupingSeparator: CFNumberFormatterKey!",
      "desc": "Specifies the grouping symbol to use when placing a currency value within a string, a CFString object."
    },
    {
      "name": "static let currencySymbol: CFNumberFormatterKey!",
      "desc": "Specifies the symbol for the currency, a CFString object."
    },
    {
      "name": "static let decimalSeparator: CFNumberFormatterKey!",
      "desc": "Specifies the decimal separator, a CFString object."
    },
    {
      "name": "static let defaultFormat: CFNumberFormatterKey!",
      "desc": "The original format string for the formatter (given the date and time style and locale specified at creation), a CFString object."
    },
    {
      "name": "static let exponentSymbol: CFNumberFormatterKey!",
      "desc": "Specifies the exponent symbol (“E” or “e”) in the scientific notation of numbers (for example, as in 1.0e+56), a CFString object."
    },
    {
      "name": "static let formatWidth: CFNumberFormatterKey!",
      "desc": "Specifies the width of a formatted number within a string that is either left justified or right justified based on the value of paddingPosition, a CFNumber object."
    },
    {
      "name": "static let groupingSeparator: CFNumberFormatterKey!",
      "desc": "Specifies the grouping separator, a CFString object."
    },
    {
      "name": "static let groupingSize: CFNumberFormatterKey!",
      "desc": "Specifies how often the “thousands” or grouping separator appears, as in “10,000,000”, a CFNumber object."
    },
    {
      "name": "static let infinitySymbol: CFNumberFormatterKey!",
      "desc": "Specifies the string that is used to represent the symbol for infinity, a CFString object."
    },
    {
      "name": "static let internationalCurrencySymbol: CFNumberFormatterKey!",
      "desc": "Specifies the international currency symbol to use when placing a formatted number within a string, a CFString object."
    },
    {
      "name": "static let isLenient: CFNumberFormatterKey!",
      "desc": "Specifies whether the formatter is lenient, aCFBoolean object."
    },
    {
      "name": "static let maxFractionDigits: CFNumberFormatterKey!",
      "desc": "Specifies the maximum number of digits after a decimal point, a CFNumber object."
    },
    {
      "name": "static let maxIntegerDigits: CFNumberFormatterKey!",
      "desc": "Specifies the maximum number of integer digits before a decimal point, a CFNumber object."
    },
    {
      "name": "static let maxSignificantDigits: CFNumberFormatterKey!",
      "desc": "Specifies the maximum number of significant digits to use, aCFNumber object."
    },
    {
      "name": "static let minFractionDigits: CFNumberFormatterKey!",
      "desc": "Specifies the minimum number of digits after a decimal point, a CFNumber object."
    },
    {
      "name": "static let minIntegerDigits: CFNumberFormatterKey!",
      "desc": "Specifies the minimum number of integer digits before a decimal point, a CFNumber object."
    },
    {
      "name": "static let minSignificantDigits: CFNumberFormatterKey!",
      "desc": "Specifies the minimum number of significant digits to use, aCFNumber object."
    },
    {
      "name": "static let minusSign: CFNumberFormatterKey!",
      "desc": "Specifies the symbol for the minus sign, a CFString object."
    },
    {
      "name": "static let multiplier: CFNumberFormatterKey!",
      "desc": "Specifies the multiplier to use when placing a formatted number within a string, a CFNumber object."
    },
    {
      "name": "static let naNSymbol: CFNumberFormatterKey!",
      "desc": "Specifies the string that is used to represent NaN (“not a number”) when values are converted to strings, a CFString object."
    },
    {
      "name": "static let negativePrefix: CFNumberFormatterKey!",
      "desc": "Specifies the minus sign prefix symbol to use when placing a formatted number within a string, a CFString object."
    },
    {
      "name": "static let negativeSuffix: CFNumberFormatterKey!",
      "desc": "Specifies the minus sign suffix symbol to use when placing a formatted number within a string, a CFString object."
    },
    {
      "name": "static let paddingCharacter: CFNumberFormatterKey!",
      "desc": "Specifies the padding character to use when placing a formatted number within a string, a CFString object."
    },
    {
      "name": "static let paddingPosition: CFNumberFormatterKey!",
      "desc": "Specifies the position of a formatted number within a string, a CFNumber object."
    },
    {
      "name": "static let perMillSymbol: CFNumberFormatterKey!",
      "desc": "Specifies the per mill (1/1000) symbol to use when placing a formatted number within a string, a CFString object."
    },
    {
      "name": "static let percentSymbol: CFNumberFormatterKey!",
      "desc": "Specifies the string that is used to represent the percent symbol, a CFString object."
    },
    {
      "name": "static let plusSign: CFNumberFormatterKey!",
      "desc": "Specifies the symbol for the plus sign, a CFString object."
    },
    {
      "name": "static let positivePrefix: CFNumberFormatterKey!",
      "desc": "Specifies the plus sign prefix symbol to use when placing a formatted number within a string, a CFString object."
    },
    {
      "name": "static let positiveSuffix: CFNumberFormatterKey!",
      "desc": "Specifies the plus sign suffix symbol to use when placing a formatted number within a string, a CFString object."
    },
    {
      "name": "static let roundingIncrement: CFNumberFormatterKey!",
      "desc": "Specifies a positive rounding increment, or 0.0 to disable rounding, a CFNumber object."
    },
    {
      "name": "static let roundingMode: CFNumberFormatterKey!",
      "desc": "Specifies how the last digit is rounded, as when 3.1415926535… is rounded to three decimal places, as in 3.142. See CFNumberFormatterRoundingMode for possible values."
    },
    {
      "name": "static let secondaryGroupingSize: CFNumberFormatterKey!",
      "desc": "Specifies how often the secondary grouping separator appears, a CFNumber object. See Creating and Using CFNumberFormatter Objects for more information."
    },
    {
      "name": "static let useGroupingSeparator: CFNumberFormatterKey!",
      "desc": "Specifies if the grouping separator should be used, a CFBoolean object."
    },
    {
      "name": "static let useSignificantDigits: CFNumberFormatterKey!",
      "desc": "Specifies the whether the formatter uses significant digits, a CFBoolean object."
    },
    {
      "name": "static let zeroSymbol: CFNumberFormatterKey!",
      "desc": "Specifies the string that is used to represent zero, a CFString object."
    },
    {
      "name": "init(rawValue: CFString)"
    }
  ],
  "declaration": "struct CFNumberFormatterKey, @unchecked Sendable",
  "conformsTo": [
    "Equatable",
    "Hashable",
    "RawRepresentable",
    "Sendable"
  ]
}