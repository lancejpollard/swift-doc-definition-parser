{
  "path": "/documentation/mediaplayer/mpmediaquery",
  "type": "Class",
  "name": "MPMediaQuery",
  "desc": "A query that specifies a set of media items from the device’s media library using a filter and a grouping type.",
  "items": [
    {
      "name": "class func albums() -> MPMediaQuery",
      "desc": "Creates a media query that matches music items and that groups and sorts collections by album name."
    },
    {
      "name": "class func artists() -> MPMediaQuery",
      "desc": "Creates a media query that matches music items and that groups and sorts collections by artist name."
    },
    {
      "name": "class func songs() -> MPMediaQuery",
      "desc": "Creates a media query that matches music items and that groups and sorts collections by song name."
    },
    {
      "name": "class func playlists() -> MPMediaQuery",
      "desc": "Creates a media query that matches the entire library and that groups and sorts collections by playlist name."
    },
    {
      "name": "class func podcasts() -> MPMediaQuery",
      "desc": "Creates a media query that matches podcast items and that groups and sorts collections by podcast name."
    },
    {
      "name": "class func audiobooks() -> MPMediaQuery",
      "desc": "Creates a media query that matches audio book items and that groups and sorts collections by audio book name."
    },
    {
      "name": "class func compilations() -> MPMediaQuery",
      "desc": "Creates a media query that matches compilation items and that groups and sorts collections by album name."
    },
    {
      "name": "class func composers() -> MPMediaQuery",
      "desc": "Creates a media query that matches all media items and that groups and sorts collections by composer name."
    },
    {
      "name": "class func genres() -> MPMediaQuery",
      "desc": "Creates a media query that matches all media items and that groups and sorts collections by genre name."
    },
    {
      "name": "init(filterPredicates: Set<MPMediaPredicate>?)",
      "desc": "Initializes a media query with a set of media property predicates."
    },
    {
      "name": "var filterPredicates: Set<MPMediaPredicate>?",
      "desc": "The media property predicates of the media query."
    },
    {
      "name": "func addFilterPredicate(MPMediaPredicate)",
      "desc": "Adds a media property predicate to a query."
    },
    {
      "name": "func removeFilterPredicate(MPMediaPredicate)",
      "desc": "Removes a filter predicate from a query."
    },
    {
      "name": "var groupingType: MPMediaGrouping",
      "desc": "The grouping for collections retrieved with the media query."
    },
    {
      "name": "var itemSections: [MPMediaQuerySection]?",
      "desc": "An array representing the section grouping of the query’s specified media items."
    },
    {
      "name": "var collectionSections: [MPMediaQuerySection]?",
      "desc": "An array representing the section grouping of the query’s specified media item collections."
    },
    {
      "name": "enum MPMediaGrouping",
      "desc": "Keys used to configure a media query."
    },
    {
      "name": "var items: [MPMediaItem]?",
      "desc": "An array of media items that match the media query’s predicate."
    },
    {
      "name": "var collections: [MPMediaItemCollection]?",
      "desc": "An array of media item collections whose contained items match the query’s media property predicate."
    }
  ],
  "declaration": "class MPMediaQuery : NSObject",
  "inheritsFrom": [
    "NSObject"
  ],
  "conformsTo": [
    "NSCopying",
    "NSSecureCoding"
  ]
}