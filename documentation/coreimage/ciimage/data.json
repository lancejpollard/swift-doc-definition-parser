{
  "path": "/documentation/coreimage/ciimage",
  "type": "Class",
  "name": "CIImage",
  "desc": "A representation of an image to be processed or produced by Core Image filters.",
  "items": [
    {
      "name": "class func empty() -> CIImage",
      "desc": "Creates and returns an empty image object."
    },
    {
      "name": "init(color: CIColor)",
      "desc": "Initializes an image of infinite extent whose entire content is the specified color."
    },
    {
      "name": "init(bitmapData: Data, bytesPerRow: Int, size: CGSize, format: CIFormat, colorSpace: CGColorSpace?)",
      "desc": "Initializes an image object with bitmap data."
    },
    {
      "name": "init(cgImage: CGImage)",
      "desc": "Initializes an image object with a Quartz 2D image."
    },
    {
      "name": "init(cgImage: CGImage, options: [CIImageOption : Any]?)",
      "desc": "Initializes an image object with a Quartz 2D image, using the specified options."
    },
    {
      "name": "init?(bitmapImageRep: NSBitmapImageRep)",
      "desc": "Initializes an image object with the specified bitmap image representation."
    },
    {
      "name": "init?(image: UIImage)",
      "desc": "Initializes an image object with the specified UIKit image object."
    },
    {
      "name": "init?(image: UIImage, options: [CIImageOption : Any]?)",
      "desc": "Initializes an image object with the specified UIKit image object, using the specified options."
    },
    {
      "name": "init?(contentsOf: URL)",
      "desc": "Initializes an image object by reading an image from a URL."
    },
    {
      "name": "init?(contentsOf: URL, options: [CIImageOption : Any]?)",
      "desc": "Initializes an image object by reading an image from a URL, using the specified options."
    },
    {
      "name": "init(cvImageBuffer: CVImageBuffer)",
      "desc": "Initializes an image object from the contents of a Core Video image buffer."
    },
    {
      "name": "init(cvImageBuffer: CVImageBuffer, options: [CIImageOption : Any]?)",
      "desc": "Initializes an image object from the contents of a Core Video image buffer, using the specified options."
    },
    {
      "name": "init(cvPixelBuffer: CVPixelBuffer)",
      "desc": "Initializes an image object from the contents of a Core Video pixel buffer."
    },
    {
      "name": "init(cvPixelBuffer: CVPixelBuffer, options: [CIImageOption : Any]?)",
      "desc": "Initializes an image object from the contents of a Core Video pixel buffer using the specified options."
    },
    {
      "name": "init?(data: Data)",
      "desc": "Initializes an image object with the supplied image data."
    },
    {
      "name": "init?(data: Data, options: [CIImageOption : Any]?)",
      "desc": "Initializes an image object with the supplied image data, using the specified options."
    },
    {
      "name": "init(imageProvider: Any, size: Int, Int, format: CIFormat, colorSpace: CGColorSpace?, options: [CIImageOption : Any]?)",
      "desc": "Initializes an image object with data provided by an image provider, using the specified options."
    },
    {
      "name": "static let providerTileSize: CIImageOption",
      "desc": "A key for the image tiles size. The associated value is an NSArray that containsNSNumber objects for the dimensions of the image tiles requested from the image provider."
    },
    {
      "name": "static let providerUserInfo: CIImageOption",
      "desc": "A key for data needed by the image provider. The associated value is an object that contains the needed data."
    },
    {
      "name": "init?(mtlTexture: MTLTexture, options: [CIImageOption : Any]?)",
      "desc": "Initializes an image object with data supplied by a Metal texture."
    },
    {
      "name": "init(ioSurface: IOSurfaceRef)",
      "desc": "Initializes an image with the contents of an IOSurface."
    },
    {
      "name": "init(ioSurface: IOSurfaceRef, options: [CIImageOption : Any]?)",
      "desc": "Initializes, using the specified options, an image with the contents of an IOSurface."
    },
    {
      "name": "func applyingFilter(String, parameters: [String : Any]) -> CIImage",
      "desc": "Returns a new image created by applying a filter to the original image with the specified name and parameters."
    },
    {
      "name": "func applyingFilter(String) -> CIImage",
      "desc": "Applies the filter to an image and returns the output."
    },
    {
      "name": "func transformed(by: CGAffineTransform) -> CIImage",
      "desc": "Returns a new image that represents the original image after applying an affine transform."
    },
    {
      "name": "func cropped(to: CGRect) -> CIImage",
      "desc": "Returns a new image with a cropped portion of the original image."
    },
    {
      "name": "func oriented(forExifOrientation: Int32) -> CIImage",
      "desc": "Returns a new image created by transforming the original image to the specified EXIF orientation."
    },
    {
      "name": "func clampedToExtent() -> CIImage",
      "desc": "Returns a new image created by making the pixel colors along its edges extend infinitely in all directions."
    },
    {
      "name": "func clamped(to: CGRect) -> CIImage",
      "desc": "Returns a new image created by cropping to a specified area, then making the pixel colors along the edges of the cropped image extend infinitely in all directions."
    },
    {
      "name": "func composited(over: CIImage) -> CIImage",
      "desc": "Returns a new image created by compositing the original image over the specified destination image."
    },
    {
      "name": "func matchedToWorkingSpace(from: CGColorSpace) -> CIImage?",
      "desc": "Returns a new image created by color matching from the specified color space to the context’s working color space."
    },
    {
      "name": "func matchedFromWorkingSpace(to: CGColorSpace) -> CIImage?",
      "desc": "Returns a new image created by color matching from the context’s working color space to the specified color space."
    },
    {
      "name": "func premultiplyingAlpha() -> CIImage",
      "desc": "Returns a new image created by multiplying the image’s RGB values by its alpha values."
    },
    {
      "name": "func unpremultiplyingAlpha() -> CIImage",
      "desc": "Returns a new image created by dividing the image’s RGB values by its alpha values."
    },
    {
      "name": "func settingAlphaOne(in: CGRect) -> CIImage",
      "desc": "Returns a new image created by setting all alpha values to 1.0 within the specified rectangle and to 0.0 outside of that area."
    },
    {
      "name": "func applyingGaussianBlur(sigma: Double) -> CIImage",
      "desc": "Returns a new image created by applying a Gaussian Blur filter to the image."
    },
    {
      "name": "func settingProperties([AnyHashable : Any]) -> CIImage",
      "desc": "Returns a new image created by adding the specified metadata properties to the image."
    },
    {
      "name": "func insertingIntermediate() -> CIImage",
      "desc": "Returns a new image created by inserting an intermediate."
    },
    {
      "name": "func insertingIntermediate(cache: Bool) -> CIImage",
      "desc": "Returns a new image created by inserting a cacheable intermediate."
    },
    {
      "name": "var definition: CIFilterShape",
      "desc": "Returns a filter shape object that represents the domain of definition of the image."
    },
    {
      "name": "var extent: CGRect",
      "desc": "A rectangle that specifies the extent of the image."
    },
    {
      "name": "var properties: [String : Any]",
      "desc": "A dictionary containing metadata about the image."
    },
    {
      "name": "var url: URL?",
      "desc": "The URL from which the image was loaded."
    },
    {
      "name": "var colorSpace: CGColorSpace?",
      "desc": "The color space of the image."
    },
    {
      "name": "func orientationTransform(forExifOrientation: Int32) -> CGAffineTransform",
      "desc": "Returns the transformation needed to reorient the image to the specified orientation."
    },
    {
      "name": "func draw(at: NSPoint, from: NSRect, operation: NSCompositingOperation, fraction: CGFloat)",
      "desc": "Draws all or part of the image at the specified point in the current coordinate system."
    },
    {
      "name": "func draw(in: NSRect, from: NSRect, operation: NSCompositingOperation, fraction: CGFloat)",
      "desc": "Draws all or part of the image in the specified rectangle in the current coordinate system"
    },
    {
      "name": "func autoAdjustmentFilters() -> [CIFilter]",
      "desc": "Returns all possible automatically selected and configured filters for adjusting the image."
    },
    {
      "name": "func autoAdjustmentFilters(options: [CIImageAutoAdjustmentOption : Any]?) -> [CIFilter]",
      "desc": "Returns a subset of automatically selected and configured filters for adjusting the image."
    },
    {
      "name": "func regionOfInterest(for: CIImage, in: CGRect) -> CGRect",
      "desc": "Returns the region of interest for the filter chain that generates the image."
    },
    {
      "name": "func oriented(CGImagePropertyOrientation) -> CIImage",
      "desc": "Transforms the original image by a given CGImagePropertyOrientation and returns the result."
    },
    {
      "name": "func orientationTransform(for: CGImagePropertyOrientation) -> CGAffineTransform",
      "desc": "The affine transform for changing the image to the given orientation."
    },
    {
      "name": "func samplingNearest() -> CIImage",
      "desc": "Samples the image using nearest-neighbor and returns the result."
    },
    {
      "name": "func samplingLinear() -> CIImage",
      "desc": "Samples the image using bilinear interpolation and returns the result."
    },
    {
      "name": "var cgImage: CGImage?",
      "desc": "The CoreGraphics image object this image was created from, if applicable."
    },
    {
      "name": "var pixelBuffer: CVPixelBuffer?",
      "desc": "The CoreVideo pixel buffer this image was created from, if applicable."
    },
    {
      "name": "var depthData: AVDepthData?",
      "desc": "AVDepthData representation of the depth image."
    },
    {
      "name": "var portraitEffectsMatte: AVPortraitEffectsMatte?",
      "desc": "AVPortraitEffectsMatte representation of portrait effects."
    },
    {
      "name": "static let colorSpace: CIImageOption",
      "desc": "The key for a color space."
    },
    {
      "name": "static let properties: CIImageOption",
      "desc": "The key for image metadata properties."
    },
    {
      "name": "static let applyOrientationProperty: CIImageOption",
      "desc": "The key for transforming an image according to orientation metadata."
    },
    {
      "name": "static let nearestSampling: CIImageOption",
      "desc": "The key into the properties dictionary to indicate whether to use nearest-neighbor sampling."
    },
    {
      "name": "static let auxiliaryDepth: CIImageOption",
      "desc": "The key into the properties dictionary indicating whether to return an auxiliary depth image."
    },
    {
      "name": "static let auxiliaryDisparity: CIImageOption",
      "desc": "The key into the properties dictionary indicating whether to return an auxiliary disparity image."
    },
    {
      "name": "static let auxiliaryPortraitEffectsMatte: CIImageOption",
      "desc": "The key into the properties dictionary indicating whether to return auxiliary portrait effects matte."
    },
    {
      "name": "init(cgImageSource: CGImageSource, index: Int, options: [CIImageOption : Any]?)"
    },
    {
      "name": "init?(depthData: AVDepthData)"
    },
    {
      "name": "init?(depthData: AVDepthData, options: [String : Any]?)"
    },
    {
      "name": "init?(portaitEffectsMatte: AVPortraitEffectsMatte)"
    },
    {
      "name": "init?(portaitEffectsMatte: AVPortraitEffectsMatte, options: [CIImageOption : Any]?)"
    },
    {
      "name": "init?(semanticSegmentationMatte: AVSemanticSegmentationMatte)"
    },
    {
      "name": "init?(semanticSegmentationMatte: AVSemanticSegmentationMatte, options: [CIImageOption : Any]?)"
    },
    {
      "name": "var semanticSegmentationMatte: AVSemanticSegmentationMatte?"
    },
    {
      "name": "class var black: CIImage"
    },
    {
      "name": "class var blue: CIImage"
    },
    {
      "name": "class var clear: CIImage"
    },
    {
      "name": "class var cyan: CIImage"
    },
    {
      "name": "class var gray: CIImage"
    },
    {
      "name": "class var green: CIImage"
    },
    {
      "name": "class var magenta: CIImage"
    },
    {
      "name": "class var red: CIImage"
    },
    {
      "name": "class var white: CIImage"
    },
    {
      "name": "class var yellow: CIImage"
    },
    {
      "name": "func transformed(by: CGAffineTransform, highQualityDownsample: Bool) -> CIImage"
    }
  ],
  "declaration": "class CIImage : NSObject",
  "inheritsFrom": [
    "NSObject"
  ],
  "conformsTo": [
    "NSCopying",
    "NSSecureCoding"
  ]
}