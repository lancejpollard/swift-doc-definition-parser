{
  "path": "/documentation/coreimage/ciimageoption",
  "type": "Structure",
  "name": "CIImageOption",
  "desc": "No overview available.",
  "items": [
    {
      "name": "init(rawValue: String)"
    },
    {
      "name": "static let applyOrientationProperty: CIImageOption",
      "desc": "The key for transforming an image according to orientation metadata."
    },
    {
      "name": "static let auxiliaryDepth: CIImageOption",
      "desc": "The key into the properties dictionary indicating whether to return an auxiliary depth image."
    },
    {
      "name": "static let auxiliaryDisparity: CIImageOption",
      "desc": "The key into the properties dictionary indicating whether to return an auxiliary disparity image."
    },
    {
      "name": "static let auxiliaryPortraitEffectsMatte: CIImageOption",
      "desc": "The key into the properties dictionary indicating whether to return auxiliary portrait effects matte."
    },
    {
      "name": "static let auxiliarySemanticSegmentationGlassesMatte: CIImageOption"
    },
    {
      "name": "static let auxiliarySemanticSegmentationHairMatte: CIImageOption"
    },
    {
      "name": "static let auxiliarySemanticSegmentationSkinMatte: CIImageOption"
    },
    {
      "name": "static let auxiliarySemanticSegmentationSkyMatte: CIImageOption"
    },
    {
      "name": "static let auxiliarySemanticSegmentationTeethMatte: CIImageOption"
    },
    {
      "name": "static let colorSpace: CIImageOption",
      "desc": "The key for a color space."
    },
    {
      "name": "static let nearestSampling: CIImageOption",
      "desc": "The key into the properties dictionary to indicate whether to use nearest-neighbor sampling."
    },
    {
      "name": "static let properties: CIImageOption",
      "desc": "The key for image metadata properties."
    },
    {
      "name": "static let providerTileSize: CIImageOption",
      "desc": "A key for the image tiles size. The associated value is an NSArray that containsNSNumber objects for the dimensions of the image tiles requested from the image provider."
    },
    {
      "name": "static let providerUserInfo: CIImageOption",
      "desc": "A key for data needed by the image provider. The associated value is an object that contains the needed data."
    },
    {
      "name": "static let toneMapHDRtoSDR: CIImageOption"
    }
  ],
  "declaration": "struct CIImageOption, @unchecked Sendable",
  "conformsTo": [
    "Equatable",
    "Hashable",
    "RawRepresentable",
    "Sendable"
  ]
}