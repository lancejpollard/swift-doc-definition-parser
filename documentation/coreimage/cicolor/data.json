{
  "path": "/documentation/coreimage/cicolor",
  "type": "Class",
  "name": "CIColor",
  "desc": "The component values defining a color in a specific color space.",
  "items": [
    {
      "name": "init(cgColor: CGColor)",
      "desc": "Initializes a Core Image color object with a Core Graphics color."
    },
    {
      "name": "init(color: UIColor)",
      "desc": "Initializes a Core Image color object using a UIKit (or AppKit) color object."
    },
    {
      "name": "init(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)",
      "desc": "Initializes a Core Image color object with the specified red, green, blue, and alpha component values."
    },
    {
      "name": "init?(red: CGFloat, green: CGFloat, blue: CGFloat, colorSpace: CGColorSpace)",
      "desc": "Initializes a Core Image color object with the specified red, green, and blue component values as measured in the specified color space."
    },
    {
      "name": "init?(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat, colorSpace: CGColorSpace)",
      "desc": "Initializes a Core Image color object with the specified red, green, blue, and alpha component values as measured in the specified color space."
    },
    {
      "name": "init(red: CGFloat, green: CGFloat, blue: CGFloat)",
      "desc": "Creates a color object using the specified RGB color component values"
    },
    {
      "name": "init(string: String)",
      "desc": "Creates a color object using the RGBA color component values specified by a string."
    },
    {
      "name": "var colorSpace: CGColorSpace",
      "desc": "The Quartz 2D color space associated with the color."
    },
    {
      "name": "var components: UnsafePointer<CGFloat>",
      "desc": "The color components of the color."
    },
    {
      "name": "var numberOfComponents: Int",
      "desc": "Returns the number of color components in the color."
    },
    {
      "name": "var red: CGFloat",
      "desc": "The unpremultiplied red component of the color."
    },
    {
      "name": "var green: CGFloat",
      "desc": "The unpremultiplied green component of the color."
    },
    {
      "name": "var blue: CGFloat",
      "desc": "The unpremultiplied blue component of the color."
    },
    {
      "name": "var alpha: CGFloat",
      "desc": "The alpha value of the color."
    },
    {
      "name": "var stringRepresentation: String",
      "desc": "A formatted string that specifies the components of the color."
    },
    {
      "name": "class var black: CIColor",
      "desc": "Returns a color object whose RGB values are all 0.0 and whose alpha value is 1.0."
    },
    {
      "name": "class var blue: CIColor",
      "desc": "Returns a color object whose RGB values are 0.0, 0.0, and 1.0 and whose alpha value is 1.0."
    },
    {
      "name": "class var clear: CIColor",
      "desc": "Returns a color object whose RGB and alpha values are all 0.0."
    },
    {
      "name": "class var cyan: CIColor",
      "desc": "Returns a color object whose RGB values are 0.0, 1.0, and 1.0 and whose alpha value is 1.0."
    },
    {
      "name": "class var gray: CIColor",
      "desc": "Returns a color object whose RGB values are all 0.5 and whose alpha value is 1.0."
    },
    {
      "name": "class var green: CIColor",
      "desc": "Returns a color object whose RGB values are 0.0, 1.0, and 0.0 and whose alpha value is 1.0."
    },
    {
      "name": "class var magenta: CIColor",
      "desc": "Returns a color object whose RGB values are 1.0, 0.0, and 1.0 and whose alpha value is 1.0."
    },
    {
      "name": "class var red: CIColor",
      "desc": "Returns a color object whose RGB values are 1.0, 0.0, and 0.0 and whose alpha value is 1.0."
    },
    {
      "name": "class var white: CIColor",
      "desc": "Returns a color object whose RGB values are all 1.0 and whose alpha value is 1.0."
    },
    {
      "name": "class var yellow: CIColor",
      "desc": "Returns a color object whose RGB values are 1.0, 1.0, and 0.0 and whose alpha value is 1.0."
    }
  ],
  "declaration": "class CIColor : NSObject",
  "inheritsFrom": [
    "NSObject"
  ],
  "conformsTo": [
    "NSCopying",
    "NSSecureCoding"
  ]
}