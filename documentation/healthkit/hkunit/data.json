{
  "path": "/documentation/healthkit/hkunit",
  "type": "Class",
  "name": "HKUnit",
  "desc": "A class for managing the units of measure within HealthKit.",
  "items": [
    {
      "name": "init(from: String)",
      "desc": "Returns the unit instance described by the provided string."
    },
    {
      "name": "var unitString: String",
      "desc": "A string representation of the unit object."
    },
    {
      "name": "func isNull() -> Bool",
      "desc": "Returns a Boolean value indicating whether the unit is null."
    },
    {
      "name": "class func energyFormatterUnit(from: HKUnit) -> EnergyFormatter.Unit",
      "desc": "Converts a HealthKit unit object into a corresponding energy formatter enumeration value."
    },
    {
      "name": "init(from: EnergyFormatter.Unit)",
      "desc": "Converts an energy formatter enumeration value into a corresponding HealthKit unit object."
    },
    {
      "name": "class func lengthFormatterUnit(from: HKUnit) -> LengthFormatter.Unit",
      "desc": "Converts a HealthKit unit object into a corresponding length formatter enumeration value."
    },
    {
      "name": "init(from: LengthFormatter.Unit)",
      "desc": "Converts a length formatter enumeration value into a corresponding HealthKit object."
    },
    {
      "name": "class func massFormatterUnit(from: HKUnit) -> MassFormatter.Unit",
      "desc": "Converts a HealthKit unit object into a corresponding mass formatter enumeration value."
    },
    {
      "name": "init(from: MassFormatter.Unit)",
      "desc": "Converts a mass formatter enumeration value into a corresponding HealthKit unit object."
    },
    {
      "name": "class func gram() -> Self",
      "desc": "Returns a HealthKit unit for measuring mass in grams."
    },
    {
      "name": "class func gramUnit(with: HKMetricPrefix) -> Self",
      "desc": "Returns a HealthKit unit for measuring mass, using gram units with the provided prefix."
    },
    {
      "name": "class func ounce() -> Self",
      "desc": "Returns a HealthKit unit for measuring mass in ounces."
    },
    {
      "name": "class func pound() -> Self",
      "desc": "Returns a HealthKit unit for measuring mass in pounds."
    },
    {
      "name": "class func stone() -> Self",
      "desc": "Returns a HealthKit unit for measuring mass in stones."
    },
    {
      "name": "class func moleUnit(withMolarMass: Double) -> Self",
      "desc": "Returns a HealthKit unit for measuring mass in moles for a given molar mass."
    },
    {
      "name": "class func moleUnit(with: HKMetricPrefix, molarMass: Double) -> Self",
      "desc": "Returns a HealthKit unit for measuring mass in moles, with the given prefix and molar mass."
    },
    {
      "name": "var HKUnitMolarMassBloodGlucose: Double",
      "desc": "The molecular mass of blood glucose, typically used to create mole units for blood glucose."
    },
    {
      "name": "class func meter() -> Self",
      "desc": "Returns a HealthKit unit for measuring length in meters."
    },
    {
      "name": "class func meterUnit(with: HKMetricPrefix) -> Self",
      "desc": "Returns a HealthKit unit for measuring length, using meter units with the provided prefix."
    },
    {
      "name": "class func inch() -> Self",
      "desc": "Returns a HealthKit unit for measuring length in inches."
    },
    {
      "name": "class func foot() -> Self",
      "desc": "Returns a HealthKit unit for measuring length in feet."
    },
    {
      "name": "class func yard() -> Self",
      "desc": "Returns a HealthKit unit for measuring length in yards."
    },
    {
      "name": "class func mile() -> Self",
      "desc": "Returns a HealthKit unit for measuring length in miles."
    },
    {
      "name": "class func liter() -> Self",
      "desc": "Returns a HealthKit unit for measuring volume in liters."
    },
    {
      "name": "class func literUnit(with: HKMetricPrefix) -> Self",
      "desc": "Returns a HealthKit unit for measuring volume, using liter units with the provided prefix."
    },
    {
      "name": "class func fluidOunceUS() -> Self",
      "desc": "Returns a HealthKit unit for measuring volume in US fluid ounces."
    },
    {
      "name": "class func fluidOunceImperial() -> Self",
      "desc": "Returns a HealthKit unit for measuring volume in imperial fluid ounces."
    },
    {
      "name": "class func cupUS() -> Self",
      "desc": "Returns a HealthKit unit for measuring volume in US cups."
    },
    {
      "name": "class func cupImperial() -> Self",
      "desc": "Returns a HealthKit unit for measuring volume in imperial cups."
    },
    {
      "name": "class func pintUS() -> Self",
      "desc": "Returns a HealthKit unit for measuring volume in US pints."
    },
    {
      "name": "class func pintImperial() -> Self",
      "desc": "Returns a HealthKit unit for measuring volume in imperial pints."
    },
    {
      "name": "class func pascal() -> Self",
      "desc": "Returns a HealthKit unit for measuring pressure in pascals."
    },
    {
      "name": "class func pascalUnit(with: HKMetricPrefix) -> Self",
      "desc": "Returns a HealthKit unit for measuring pressure, using pascal units with the provided prefix."
    },
    {
      "name": "class func millimeterOfMercury() -> Self",
      "desc": "Returns a HealthKit unit for measuring pressure in millimeters of mercury."
    },
    {
      "name": "class func inchesOfMercury() -> Self",
      "desc": "Returns a HealthKit unit for measuring pressure in inches of mercury."
    },
    {
      "name": "class func centimeterOfWater() -> Self",
      "desc": "Returns a HealthKit unit for measuring pressure in centimeters of water."
    },
    {
      "name": "class func atmosphere() -> Self",
      "desc": "Returns a HealthKit unit for measuring pressure in atmospheres."
    },
    {
      "name": "class func decibelAWeightedSoundPressureLevel() -> Self",
      "desc": "Returns a HealthKit unit for measuring the difference between the local pressure and the ambient atmospheric pressure caused by sound."
    },
    {
      "name": "class func second() -> Self",
      "desc": "Returns a HealthKit unit for measuring time in seconds."
    },
    {
      "name": "class func secondUnit(with: HKMetricPrefix) -> Self",
      "desc": "Returns a HealthKit unit for measuring time, using second units with the provided prefix."
    },
    {
      "name": "class func minute() -> Self",
      "desc": "Returns a HealthKit unit for measuring time in minutes."
    },
    {
      "name": "class func hour() -> Self",
      "desc": "Returns a HealthKit unit for measuring time in hours."
    },
    {
      "name": "class func day() -> Self",
      "desc": "Returns a HealthKit unit for measuring time in days."
    },
    {
      "name": "class func joule() -> Self",
      "desc": "Returns a HealthKit unit for measuring energy in joules."
    },
    {
      "name": "class func jouleUnit(with: HKMetricPrefix) -> Self",
      "desc": "Returns a HealthKit unit for measuring energy, using joule units with the provided prefix."
    },
    {
      "name": "class func kilocalorie() -> Self",
      "desc": "Returns a HealthKit unit for measuring energy in kilocalories."
    },
    {
      "name": "class func largeCalorie() -> Self",
      "desc": "Returns a HealthKit unit for measuring energy in large calories (Cal)."
    },
    {
      "name": "class func smallCalorie() -> Self",
      "desc": "Returns a HealthKit unit for measuring energy in small calories (cal)."
    },
    {
      "name": "class func degreeCelsius() -> Self",
      "desc": "Returns a HealthKit unit for measuring temperature in degrees Celsius."
    },
    {
      "name": "class func degreeFahrenheit() -> Self",
      "desc": "Returns a HealthKit unit for measuring temperature in degrees Fahrenheit."
    },
    {
      "name": "class func kelvin() -> Self",
      "desc": "Returns a HealthKit unit for measuring temperature in kelvins."
    },
    {
      "name": "class func decibelHearingLevel() -> Self",
      "desc": "Returns a HealthKit unit for measuring the intensity of a sound."
    },
    {
      "name": "class func hertz() -> Self",
      "desc": "Returns a HealthKit unit for measuring frequency in hertz."
    },
    {
      "name": "class func hertzUnit(with: HKMetricPrefix) -> Self",
      "desc": "Returns a HealthKit unit for measuring frequency in hertz with the provided prefix."
    },
    {
      "name": "class func siemen() -> Self",
      "desc": "Returns a HealthKit unit for measuring electrical conductance in siemens."
    },
    {
      "name": "class func siemenUnit(with: HKMetricPrefix) -> Self",
      "desc": "Returns a HealthKit unit for measuring electrical conductance, using siemen units with the provided prefix."
    },
    {
      "name": "class func volt() -> Self",
      "desc": "Returns a HealthKit unit for measuring the difference in electrical potential using volts."
    },
    {
      "name": "class func voltUnit(with: HKMetricPrefix) -> Self",
      "desc": "Returns a HealthKit unit for measuring the electrical potential difference in volts with the provided prefix."
    },
    {
      "name": "class func internationalUnit() -> Self",
      "desc": "Returns a HealthKit unit that measures the amount of a biologically active substance in international units (IU)."
    },
    {
      "name": "class func count() -> Self",
      "desc": "Returns a HealthKit unit for measuring counts."
    },
    {
      "name": "class func percent() -> Self",
      "desc": "Returns a HealthKit unit for measuring percentages."
    },
    {
      "name": "func unitMultiplied(by: HKUnit) -> HKUnit",
      "desc": "Creates a complex unit by multiplying the receiving unit with another unit."
    },
    {
      "name": "func unitDivided(by: HKUnit) -> HKUnit",
      "desc": "Creates a complex unit by dividing the receiving unit by another unit."
    },
    {
      "name": "func unitRaised(toPower: Int) -> HKUnit",
      "desc": "Creates a complex unit by raising the unit to the given power."
    },
    {
      "name": "func reciprocal() -> HKUnit",
      "desc": "Returns a complex unit representing the unit’s reciprocal."
    },
    {
      "name": "enum HKMetricPrefix",
      "desc": "Prefixes that can be added to SI units to change the order of magnitude."
    }
  ],
  "declaration": "class HKUnit : NSObject",
  "inheritsFrom": [
    "NSObject"
  ],
  "conformsTo": [
    "NSCopying",
    "NSSecureCoding"
  ]
}