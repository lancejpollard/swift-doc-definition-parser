{
  "path": "/documentation/mlcompute/mlclosslayer",
  "type": "Class",
  "name": "MLCLossLayer",
  "desc": "A layer that estimates the inaccuracies of the model to reduce the loss on the next evaluation.",
  "items": [
    {
      "name": "init(descriptor: MLCLossDescriptor)",
      "desc": "Creates a loss layer with the descriptor you specify."
    },
    {
      "name": "init(descriptor: MLCLossDescriptor, weights: MLCTensor)",
      "desc": "Creates a loss layer with the descriptor and weights you specify."
    },
    {
      "name": "class MLCLossDescriptor",
      "desc": "A configuration object you use to create a loss layer."
    },
    {
      "name": "enum MLCLossType",
      "desc": "A loss function."
    },
    {
      "name": "class func softmaxCrossEntropy(reductionType: MLCReductionType, labelSmoothing: Float, classCount: Int, weight: Float) -> Self",
      "desc": "Creates a softmax cross entropy loss layer with the reduction type, label smoothing, number of classes, and weight you specify."
    },
    {
      "name": "class func categoricalCrossEntropy(reductionType: MLCReductionType, labelSmoothing: Float, classCount: Int, weight: Float) -> Self",
      "desc": "Creates a categorical cross entropy loss layer with the reduction type, label smoothing, number of classes, and weight you specify."
    },
    {
      "name": "class func sigmoidCrossEntropy(reductionType: MLCReductionType, labelSmoothing: Float, weight: Float) -> Self",
      "desc": "Creates a sigmoid cross entropy loss layer with the reduction type, label smoothing, and weight you specify."
    },
    {
      "name": "class func log(reductionType: MLCReductionType, epsilon: Float, weight: Float) -> Self",
      "desc": "Creates a log loss layer with the reduction type, epsilon, and weight you specify."
    },
    {
      "name": "class func huberLoss(reductionType: MLCReductionType, delta: Float, weight: Float) -> Self",
      "desc": "Creates a huber loss layer with the reduction type, delta, and weight you specify."
    },
    {
      "name": "class func meanAbsoluteError(reductionType: MLCReductionType, weight: Float) -> Self",
      "desc": "Creates a mean absolute loss layer with the reduction type and weight."
    },
    {
      "name": "class func meanSquaredError(reductionType: MLCReductionType, weight: Float) -> Self",
      "desc": "Creates a mean squared loss layer with the reduction type and weight you specify."
    },
    {
      "name": "class func hingeLoss(reductionType: MLCReductionType, weight: Float) -> Self",
      "desc": "Creates a hinge loss layer with the reduction type and weight you specify."
    },
    {
      "name": "class func cosineDistance(reductionType: MLCReductionType, weight: Float) -> Self",
      "desc": "Creates a cosine distance loss layer with the reduction type and weight you specify."
    },
    {
      "name": "class func softmaxCrossEntropy(reductionType: MLCReductionType, labelSmoothing: Float, classCount: Int, weights: MLCTensor?) -> Self",
      "desc": "Creates a softmax cross entropy loss layer with the reduction type, label smoothing, number of classes, and weights you specify."
    },
    {
      "name": "class func categoricalCrossEntropy(reductionType: MLCReductionType, labelSmoothing: Float, classCount: Int, weights: MLCTensor?) -> Self",
      "desc": "Creates a categorical cross entropy loss layer with the reduction type, label smoothing, number of classes, and weights you specify."
    },
    {
      "name": "class func sigmoidCrossEntropy(reductionType: MLCReductionType, labelSmoothing: Float, weights: MLCTensor?) -> Self",
      "desc": "Creates a sigmoid cross entropy loss layer with the reduction type, label smoothing, and weights you specify."
    },
    {
      "name": "class func log(reductionType: MLCReductionType, epsilon: Float, weights: MLCTensor?) -> Self",
      "desc": "Creates a log loss layer with the reduction type, epsilon, and weights you specify."
    },
    {
      "name": "class func huberLoss(reductionType: MLCReductionType, delta: Float, weights: MLCTensor?) -> Self",
      "desc": "Creates a huber loss layer with the reduction type, delta, and weights you specify."
    },
    {
      "name": "class func meanAbsoluteError(reductionType: MLCReductionType, weights: MLCTensor?) -> Self",
      "desc": "Creates a mean absolute loss layer with the reduction type and weights you specify."
    },
    {
      "name": "class func meanSquaredError(reductionType: MLCReductionType, weights: MLCTensor?) -> Self",
      "desc": "Creates a mean squared loss layer with the reduction type and weights you specify."
    },
    {
      "name": "class func hingeLoss(reductionType: MLCReductionType, weights: MLCTensor?) -> Self",
      "desc": "Creates a hinge loss layer with the reduction type and weights you specify."
    },
    {
      "name": "class func cosineDistance(reductionType: MLCReductionType, weights: MLCTensor?) -> Self",
      "desc": "Creates a cosine distance loss layer with the reduction type and weights you specify."
    },
    {
      "name": "var descriptor: MLCLossDescriptor",
      "desc": "The configuration object you use to create the loss layer."
    },
    {
      "name": "var weights: MLCTensor?",
      "desc": "The loss label weights tensor."
    }
  ],
  "declaration": "class MLCLossLayer : MLCLayer",
  "inheritsFrom": [
    "MLCLayer"
  ]
}