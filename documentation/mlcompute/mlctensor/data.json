{
  "path": "/documentation/mlcompute/mlctensor",
  "type": "Class",
  "name": "MLCTensor",
  "desc": "The data object you use throughout the framework.",
  "items": [
    {
      "name": "init(descriptor: MLCTensorDescriptor)",
      "desc": "Creates a tensor without data, using the descriptor you specify."
    },
    {
      "name": "init(descriptor: MLCTensorDescriptor, data: MLCTensorData)",
      "desc": "Creates a tensor with the descriptor and data you specify."
    },
    {
      "name": "init(descriptor: MLCTensorDescriptor, fillWithData: NSNumber)",
      "desc": "Creates a tensor with the descriptor and scalar value you specify."
    },
    {
      "name": "init(descriptor: MLCTensorDescriptor, randomInitializerType: MLCRandomInitializerType)",
      "desc": "Creates a tensor with the descriptor and random initializer type you specify."
    },
    {
      "name": "class MLCTensorDescriptor",
      "desc": "A configuration object you use to create a tensor."
    },
    {
      "name": "enum MLCDataType",
      "desc": "A tensor data type."
    },
    {
      "name": "class MLCTensorData",
      "desc": "An encapsulation of the memory that tensor data uses."
    },
    {
      "name": "enum MLCRandomInitializerType",
      "desc": "An initializer type you use to create a tensor with random data."
    },
    {
      "name": "init(shape: [Int])",
      "desc": "Creates a tensor without data, with the shape you specify."
    },
    {
      "name": "init(shape: [Int], dataType: MLCDataType)",
      "desc": "Creates a tensor without data, with the shape and data type you specify."
    },
    {
      "name": "init(shape: [Int], data: MLCTensorData, dataType: MLCDataType)",
      "desc": "Creates a tensor with the shape, data, and data type you specify."
    },
    {
      "name": "init(shape: [Int], fillWithData: NSNumber, dataType: MLCDataType)",
      "desc": "Creates a tensor with the shape, scalar value, and data type you specify."
    },
    {
      "name": "init(shape: [Int], randomInitializerType: MLCRandomInitializerType)",
      "desc": "Creates a tensor with the shape and random initializer type you specify."
    },
    {
      "name": "init(width: Int, height: Int, featureChannelCount: Int, batchSize: Int)",
      "desc": "Creates a tensor without data, with the sizes and number of feature channels you specify."
    },
    {
      "name": "init(width: Int, height: Int, featureChannelCount: Int, batchSize: Int, data: MLCTensorData)",
      "desc": "Creates a tensor with the sizes, number of feature channels, and data you specify."
    },
    {
      "name": "init(width: Int, height: Int, featureChannelCount: Int, batchSize: Int, data: MLCTensorData, dataType: MLCDataType)",
      "desc": "Creates a tensor with the sizes, number of feature channels, data, and data type you specify."
    },
    {
      "name": "init(width: Int, height: Int, featureChannelCount: Int, batchSize: Int, fillWithData: Float, dataType: MLCDataType)",
      "desc": "Creates a tensor with the sizes and number of feature channels, and filled with the data and type you specify."
    },
    {
      "name": "init(width: Int, height: Int, featureChannelCount: Int, batchSize: Int, randomInitializerType: MLCRandomInitializerType)",
      "desc": "Creates a tensor with the sizes, number of feature channels, and random data using the random initializer type you specify."
    },
    {
      "name": "init(sequenceLength: Int, featureChannelCount: Int, batchSize: Int)",
      "desc": "Creates a tensor without data, with the sequence length, number of feature channels, and batch size you specify."
    },
    {
      "name": "init(sequenceLength: Int, featureChannelCount: Int, batchSize: Int, data: MLCTensorData?)",
      "desc": "Creates a tensor with the sequence length, number of feature channels, batch size, and data you specify."
    },
    {
      "name": "init?(sequenceLengths: [Int], sortedSequences: Bool, featureChannelCount: Int, batchSize: Int, data: MLCTensorData?)",
      "desc": "Creates a tensor with the sequence lengths, sorting indicator, number of feature channels, batch size, and data you specify."
    },
    {
      "name": "init(sequenceLength: Int, featureChannelCount: Int, batchSize: Int, randomInitializerType: MLCRandomInitializerType)",
      "desc": "Creates a tensor with the sequence length, number of feature channels, batch size, and random initializer type you specify."
    },
    {
      "name": "init?(sequenceLengths: [Int], sortedSequences: Bool, featureChannelCount: Int, batchSize: Int, randomInitializerType: MLCRandomInitializerType)",
      "desc": "Creates a tensor with the sequence lengths, sorting indicator, number of feature channels, batch size, and random initializer type you specify."
    },
    {
      "name": "var tensorID: Int",
      "desc": "A number that uniquely identifies the tensor, which the framework assigns when it creates a tensor."
    },
    {
      "name": "var descriptor: MLCTensorDescriptor",
      "desc": "The configuration object you use to create a tensor."
    },
    {
      "name": "var data: Data?",
      "desc": "The tensor data."
    },
    {
      "name": "var label: String",
      "desc": "A string that identifes this tensor."
    },
    {
      "name": "var device: MLCDevice?",
      "desc": "The device associated with this tensor."
    },
    {
      "name": "var optimizerData: [MLCTensorData]",
      "desc": "An array that contains optimizer buffers you specify when you create a tensor parameter."
    },
    {
      "name": "var optimizerDeviceData: [MLCTensorOptimizerDeviceData]",
      "desc": "An array that contains the device optimizer buffers you specify."
    },
    {
      "name": "var hasValidNumerics: Bool",
      "desc": "A Boolean that indicates whether a tensor contains NaN or INF values."
    },
    {
      "name": "class MLCTensorOptimizerDeviceData",
      "desc": "An encapsulation of the device memory associated with a tensor that an optimizer uses."
    },
    {
      "name": "func quantized(to: MLCDataType, scale: Float, bias: Int) -> MLCTensor?",
      "desc": "Converts a 32-bit floating-point tensor with the scale and bias you specify."
    },
    {
      "name": "func quantized(to: MLCDataType, scale: MLCTensor, bias: MLCTensor, axis: Int) -> MLCTensor?",
      "desc": "Converts a 32-bit floating-point tensor with the scale and bias you specify."
    },
    {
      "name": "func dequantized(to: MLCDataType, scale: MLCTensor, zeroPoint: MLCTensor) -> MLCTensor?",
      "desc": "Converts a tensor you quantize to a 32-bit floating-point tensor."
    },
    {
      "name": "func dequantized(to: MLCDataType, scale: MLCTensor, bias: MLCTensor, axis: Int) -> MLCTensor?",
      "desc": "Converts a tensor you quantize to a 32-bit floating-point tensor."
    },
    {
      "name": "func synchronizeData() -> Bool",
      "desc": "Synchronizes the data in host memory."
    },
    {
      "name": "func synchronizeOptimizerData() -> Bool",
      "desc": "Synchronizes the optimizer data in host memory."
    },
    {
      "name": "func copyDataFromDeviceMemory(toBytes: UnsafeMutableRawPointer, length: Int, synchronizeWithDevice: Bool) -> Bool",
      "desc": "Copies tensor data from device memory to user-specified memory."
    },
    {
      "name": "func bindAndWriteData(MLCTensorData, to: MLCDevice) -> Bool",
      "desc": "Associates the given data to the tensor, and if the device is a GPU, also copies the data to the device memory."
    },
    {
      "name": "func bindOptimizerData([MLCTensorData], deviceData: [MLCTensorOptimizerDeviceData]?) -> Bool",
      "desc": "Associates the optimizer and device data buffers you specify to the tensor."
    }
  ],
  "declaration": "class MLCTensor : NSObject",
  "inheritsFrom": [
    "NSObject"
  ],
  "conformsTo": [
    "NSCopying"
  ]
}