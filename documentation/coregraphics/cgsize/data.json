{
  "path": "/documentation/coregraphics/cgsize",
  "type": "Structure",
  "name": "CGSize",
  "desc": "A structure that contains width and height values.",
  "items": [
    {
      "name": "var width: CGFloat",
      "desc": "A width value."
    },
    {
      "name": "var height: CGFloat",
      "desc": "A height value."
    },
    {
      "name": "static var zero: CGSize",
      "desc": "The size whose width and height are both zero."
    },
    {
      "name": "init()",
      "desc": "Creates a size with zero width and height."
    },
    {
      "name": "func applying(CGAffineTransform) -> CGSize",
      "desc": "Returns the height and width resulting from a transformation of an existing height and width."
    },
    {
      "name": "var dictionaryRepresentation: CFDictionary",
      "desc": "Returns a dictionary representation of the specified size."
    },
    {
      "name": "init?(dictionaryRepresentation: CFDictionary)",
      "desc": "Creates a size from a canonical dictionary representation."
    },
    {
      "name": "var debugDescription: String",
      "desc": "A textual representation of the size’s dimensions."
    },
    {
      "name": "var customMirror: Mirror",
      "desc": "A representation of the size’s structure and display style for use in debugging."
    },
    {
      "name": "func equalTo(CGSize) -> Bool",
      "desc": "Returns whether two sizes are equal."
    },
    {
      "name": "typealias CGSize.AnimatableData"
    },
    {
      "name": "init(from: Decoder)"
    },
    {
      "name": "init(width: Double, height: Double)",
      "desc": "Creates a size with dimensions specified as floating-point values."
    },
    {
      "name": "init(width: CGFloat, height: CGFloat)",
      "desc": "Creates a size with dimensions specified as CGFloat values."
    },
    {
      "name": "init(width: Int, height: Int)",
      "desc": "Creates a size with dimensions specified as integer values."
    },
    {
      "name": "var animatableData: CGSize.AnimatableData"
    },
    {
      "name": "var hashValue: Int"
    },
    {
      "name": "func encode(to: Encoder)"
    },
    {
      "name": "static func == (CGSize, CGSize) -> Bool"
    }
  ],
  "declaration": "struct CGSize",
  "conformsTo": [
    "Animatable",
    "CustomDebugStringConvertible",
    "CustomReflectable",
    "Decodable",
    "Encodable",
    "Equatable"
  ]
}