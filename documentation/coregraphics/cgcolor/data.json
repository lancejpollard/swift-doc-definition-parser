{
  "path": "/documentation/coregraphics/cgcolor",
  "type": "Class",
  "name": "CGColor",
  "desc": "A set of components that define a color, with a color space specifying how to interpret them.",
  "items": [
    {
      "name": "func copy() -> CGColor?",
      "desc": "Creates a copy of an existing color."
    },
    {
      "name": "func copy(alpha: CGFloat) -> CGColor?",
      "desc": "Creates a copy of an existing color, substituting a new alpha value."
    },
    {
      "name": "init(genericCMYKCyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat)",
      "desc": "Creates a color in the Generic CMYK color space."
    },
    {
      "name": "init(gray: CGFloat, alpha: CGFloat)",
      "desc": "Creates a color in the Generic gray color space."
    },
    {
      "name": "init(genericGrayGamma2_2Gray: CGFloat, alpha: CGFloat)",
      "desc": "Creates a color in the Generic gray color space with a gamma ramp of 2.2."
    },
    {
      "name": "init(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)",
      "desc": "Creates a color in the Generic RGB color space."
    },
    {
      "name": "init(srgbRed: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat)",
      "desc": "Creates a color in the sRGB color space."
    },
    {
      "name": "init?(colorSpace: CGColorSpace, components: UnsafePointer<CGFloat>)",
      "desc": "Creates a color using a list of intensity values (including alpha) and an associated color space."
    },
    {
      "name": "init?(patternSpace: CGColorSpace, pattern: CGPattern, components: UnsafePointer<CGFloat>)",
      "desc": "Creates a color using a list of intensity values (including alpha), a pattern color space, and a pattern."
    },
    {
      "name": "class var black: CGColor",
      "desc": "The black color in the Generic gray color space."
    },
    {
      "name": "class var white: CGColor",
      "desc": "The white color in the Generic gray color space."
    },
    {
      "name": "class var clear: CGColor",
      "desc": "The clear color in the Generic gray color space."
    },
    {
      "name": "var alpha: CGFloat",
      "desc": "Returns the value of the alpha component associated with a color."
    },
    {
      "name": "var colorSpace: CGColorSpace?",
      "desc": "Returns the color space associated with a color."
    },
    {
      "name": "var components: [CGFloat]?",
      "desc": "Returns the values of the color components (including alpha) associated with a color."
    },
    {
      "name": "var numberOfComponents: Int",
      "desc": "Returns the number of color components (including alpha) associated with a color."
    },
    {
      "name": "var pattern: CGPattern?",
      "desc": "Returns the pattern associated with a color in a pattern color space."
    },
    {
      "name": "class let conversionTRCSize: CFString"
    },
    {
      "name": "func converted(to: CGColorSpace, intent: CGColorRenderingIntent, options: CFDictionary?) -> CGColor?",
      "desc": "Creates a new color in a different color space that matches the provided color."
    },
    {
      "name": "class var typeID: CFTypeID",
      "desc": "Returns the Core Foundation type identifier for a color data type."
    },
    {
      "name": "class let conversionBlackPointCompensation: CFString",
      "desc": "An option for whether to apply black point compensation when converting between color profiles."
    }
  ],
  "declaration": "class CGColor"
}