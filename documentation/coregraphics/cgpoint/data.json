{
  "path": "/documentation/coregraphics/cgpoint",
  "type": "Structure",
  "name": "CGPoint",
  "desc": "A structure that contains a point in a two-dimensional coordinate system.",
  "items": [
    {
      "name": "init(x: Double, y: Double)",
      "desc": "Creates a point with coordinates specified as floating-point values."
    },
    {
      "name": "init(x: Int, y: Int)",
      "desc": "Creates a point with coordinates specified as integer values."
    },
    {
      "name": "init(x: CGFloat, y: CGFloat)",
      "desc": "Creates a point with coordinates specified as CGFloat values."
    },
    {
      "name": "static var zero: CGPoint",
      "desc": "The point with location (0,0)."
    },
    {
      "name": "init()",
      "desc": "Creates a point with location (0,0)."
    },
    {
      "name": "var x: CGFloat",
      "desc": "The x-coordinate of the point."
    },
    {
      "name": "var y: CGFloat",
      "desc": "The y-coordinate of the point."
    },
    {
      "name": "func applying(CGAffineTransform) -> CGPoint",
      "desc": "Returns the point resulting from an affine transformation of an existing point."
    },
    {
      "name": "var dictionaryRepresentation: CFDictionary",
      "desc": "Returns a dictionary representation of the specified point."
    },
    {
      "name": "init?(dictionaryRepresentation: CFDictionary)",
      "desc": "Creates a point from a canonical dictionary representation."
    },
    {
      "name": "var debugDescription: String",
      "desc": "A textual representation of the point’s coordinate values."
    },
    {
      "name": "var customMirror: Mirror",
      "desc": "A representation of the point’s structure and display style for use in debugging."
    },
    {
      "name": "func equalTo(CGPoint) -> Bool",
      "desc": "Returns whether two points are equal."
    },
    {
      "name": "typealias CGPoint.AnimatableData"
    },
    {
      "name": "init(from: Decoder)"
    },
    {
      "name": "var animatableData: CGPoint.AnimatableData"
    },
    {
      "name": "func applying(ProjectionTransform) -> CGPoint"
    },
    {
      "name": "func encode(to: Encoder)"
    },
    {
      "name": "static func == (CGPoint, CGPoint) -> Bool"
    }
  ],
  "declaration": "struct CGPoint",
  "conformsTo": [
    "Animatable",
    "CustomDebugStringConvertible",
    "CustomReflectable",
    "Decodable",
    "Encodable",
    "Equatable"
  ]
}