{
  "path": "/documentation/coregraphics/cgeventsource",
  "type": "Class",
  "name": "CGEventSource",
  "desc": "Defines an opaque type that represents the source of a Quartz event.",
  "items": [
    {
      "name": "init?(event: CGEvent?)",
      "desc": "Returns a Quartz event source created from an existing Quartz event."
    },
    {
      "name": "init?(stateID: CGEventSourceStateID)",
      "desc": "Returns a Quartz event source created with a specified source state."
    },
    {
      "name": "var keyboardType: CGEventSourceKeyboardType",
      "desc": "Returns the keyboard type to be used with a Quartz event source."
    },
    {
      "name": "var localEventsSuppressionInterval: CFTimeInterval",
      "desc": "Returns the interval that local hardware events may be suppressed following the posting of a Quartz event."
    },
    {
      "name": "var pixelsPerLine: Double",
      "desc": "Gets the scale of pixels per line in a scrolling event source."
    },
    {
      "name": "var sourceStateID: CGEventSourceStateID",
      "desc": "Returns the source state associated with a Quartz event source."
    },
    {
      "name": "var userData: Int64",
      "desc": "Returns the 64-bit user-specified data for a Quartz event source."
    },
    {
      "name": "class var typeID: CFTypeID",
      "desc": "Returns the type identifier for the opaque type CGEventSourceRef."
    },
    {
      "name": "func getLocalEventsFilterDuringSuppressionState(CGEventSuppressionState) -> CGEventFilterMask",
      "desc": "Returns the mask that indicates which classes of local hardware events are enabled during event suppression."
    },
    {
      "name": "func setLocalEventsFilterDuringSuppressionState(CGEventFilterMask, state: CGEventSuppressionState)",
      "desc": "Sets the mask that indicates which classes of local hardware events are enabled during event suppression."
    },
    {
      "name": "class func buttonState(CGEventSourceStateID, button: CGMouseButton) -> Bool",
      "desc": "Returns a Boolean value indicating the current button state of a Quartz event source."
    },
    {
      "name": "class func counterForEventType(CGEventSourceStateID, eventType: CGEventType) -> UInt32",
      "desc": "Returns a count of events of a given type seen since the window server started."
    },
    {
      "name": "class func flagsState(CGEventSourceStateID) -> CGEventFlags",
      "desc": "Returns the current flags of a Quartz event source."
    },
    {
      "name": "class func keyState(CGEventSourceStateID, key: CGKeyCode) -> Bool",
      "desc": "Returns a Boolean value indicating the current keyboard state of a Quartz event source."
    },
    {
      "name": "class func secondsSinceLastEventType(CGEventSourceStateID, eventType: CGEventType) -> CFTimeInterval",
      "desc": "Returns the elapsed time since the last event for a Quartz event source."
    }
  ],
  "declaration": "class CGEventSource"
}