{
  "path": "/documentation/coregraphics/cgmutablepath",
  "type": "Class",
  "name": "CGMutablePath",
  "desc": "A mutable graphics path: a mathematical description of shapes or lines to be drawn in a graphics context.",
  "items": [
    {
      "name": "init()",
      "desc": "Creates a mutable graphics path."
    },
    {
      "name": "func mutableCopy() -> CGMutablePath?",
      "desc": "Creates a mutable copy of an existing graphics path."
    },
    {
      "name": "func mutableCopy(using: UnsafePointer<CGAffineTransform>?) -> CGMutablePath?",
      "desc": "Creates a mutable copy of a graphics path transformed by a transformation matrix."
    },
    {
      "name": "func move(to: CGPoint, transform: CGAffineTransform)",
      "desc": "Begins a new subpath at the specified point."
    },
    {
      "name": "func addLine(to: CGPoint, transform: CGAffineTransform)",
      "desc": "Appends a straight line segment from the current point to the specified point."
    },
    {
      "name": "func addLines(between: [CGPoint], transform: CGAffineTransform)",
      "desc": "Adds a sequence of connected straight-line segments to the path."
    },
    {
      "name": "func addRect(CGRect, transform: CGAffineTransform)",
      "desc": "Adds a rectangular subpath to the path."
    },
    {
      "name": "func addRects([CGRect], transform: CGAffineTransform)",
      "desc": "Adds a set of rectangular subpaths to the path."
    },
    {
      "name": "func addEllipse(in: CGRect, transform: CGAffineTransform)",
      "desc": "Adds an ellipse that fits inside the specified rectangle."
    },
    {
      "name": "func addRoundedRect(in: CGRect, cornerWidth: CGFloat, cornerHeight: CGFloat, transform: CGAffineTransform)",
      "desc": "Adds a subpath to the path, in the shape of a rectangle with rounded corners."
    },
    {
      "name": "func addArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool, transform: CGAffineTransform)",
      "desc": "Adds an arc of a circle to the path, specified with a radius and angles."
    },
    {
      "name": "func addArc(tangent1End: CGPoint, tangent2End: CGPoint, radius: CGFloat, transform: CGAffineTransform)",
      "desc": "Adds an arc of a circle to the path, specified with a radius and two tangent lines."
    },
    {
      "name": "func addRelativeArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, delta: CGFloat, transform: CGAffineTransform)",
      "desc": "Adds an arc of a circle to the path, specified with a radius and a difference in angle."
    },
    {
      "name": "func addCurve(to: CGPoint, control1: CGPoint, control2: CGPoint, transform: CGAffineTransform)",
      "desc": "Adds a cubic Bézier curve to the path, with the specified end point and control points."
    },
    {
      "name": "func addQuadCurve(to: CGPoint, control: CGPoint, transform: CGAffineTransform)",
      "desc": "Adds a quadratic Bézier curve to the path, with the specified end point and control point."
    },
    {
      "name": "func addPath(CGPath, transform: CGAffineTransform)",
      "desc": "Appends another path object to the path."
    },
    {
      "name": "func closeSubpath()",
      "desc": "Closes and completes a subpath in a mutable graphics path."
    }
  ],
  "declaration": "class CGMutablePath : CGPath",
  "inheritsFrom": [
    "CGPath"
  ]
}