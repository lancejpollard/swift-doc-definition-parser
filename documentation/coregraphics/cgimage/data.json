{
  "path": "/documentation/coregraphics/cgimage",
  "type": "Class",
  "name": "CGImage",
  "desc": "A bitmap image or image mask.",
  "items": [
    {
      "name": "init?(width: Int, height: Int, bitsPerComponent: Int, bitsPerPixel: Int, bytesPerRow: Int, space: CGColorSpace, bitmapInfo: CGBitmapInfo, provider: CGDataProvider, decode: UnsafePointer<CGFloat>?, shouldInterpolate: Bool, intent: CGColorRenderingIntent)",
      "desc": "Creates a bitmap image from data supplied by a data provider."
    },
    {
      "name": "init?(jpegDataProviderSource: CGDataProvider, decode: UnsafePointer<CGFloat>?, shouldInterpolate: Bool, intent: CGColorRenderingIntent)",
      "desc": "Creates a bitmap image using JPEG-encoded data supplied by a data provider."
    },
    {
      "name": "init?(pngDataProviderSource: CGDataProvider, decode: UnsafePointer<CGFloat>?, shouldInterpolate: Bool, intent: CGColorRenderingIntent)",
      "desc": "Creates a bitmap image using PNG-encoded data supplied by a data provider."
    },
    {
      "name": "var isMask: Bool",
      "desc": "Returns whether a bitmap image is an image mask."
    },
    {
      "name": "var width: Int",
      "desc": "Returns the width of a bitmap image."
    },
    {
      "name": "var height: Int",
      "desc": "Returns the height of a bitmap image."
    },
    {
      "name": "var bitsPerComponent: Int",
      "desc": "Returns the number of bits allocated for a single color component of a bitmap image."
    },
    {
      "name": "var bitsPerPixel: Int",
      "desc": "Returns the number of bits allocated for a single pixel in a bitmap image."
    },
    {
      "name": "var bytesPerRow: Int",
      "desc": "Returns the number of bytes allocated for a single row of a bitmap image."
    },
    {
      "name": "var colorSpace: CGColorSpace?",
      "desc": "Return the color space for a bitmap image."
    },
    {
      "name": "var alphaInfo: CGImageAlphaInfo",
      "desc": "Returns the alpha channel information for a bitmap image."
    },
    {
      "name": "enum CGImageAlphaInfo",
      "desc": "Storage options for alpha component data."
    },
    {
      "name": "var dataProvider: CGDataProvider?",
      "desc": "Returns the data provider for a bitmap image."
    },
    {
      "name": "var decode: UnsafePointer<CGFloat>?",
      "desc": "Returns the decode array for a bitmap image."
    },
    {
      "name": "var shouldInterpolate: Bool",
      "desc": "Returns the interpolation setting for a bitmap image."
    },
    {
      "name": "var renderingIntent: CGColorRenderingIntent",
      "desc": "Returns the rendering intent setting for a bitmap image."
    },
    {
      "name": "var bitmapInfo: CGBitmapInfo",
      "desc": "Returns the bitmap information for a bitmap image."
    },
    {
      "name": "struct CGBitmapInfo",
      "desc": "Component information for a bitmap image."
    },
    {
      "name": "var utType: CFString?",
      "desc": "The Universal Type Identifier for the image."
    },
    {
      "name": "func copy() -> CGImage?",
      "desc": "Creates a copy of a bitmap image."
    },
    {
      "name": "func copy(colorSpace: CGColorSpace) -> CGImage?",
      "desc": "Creates a copy of a bitmap image, replacing its colorspace."
    },
    {
      "name": "func cropping(to: CGRect) -> CGImage?",
      "desc": "Creates a bitmap image using the data contained within a subregion of an existing bitmap image."
    },
    {
      "name": "func masking(CGImage) -> CGImage?",
      "desc": "Creates a bitmap image from an existing image and an image mask."
    },
    {
      "name": "func copy(maskingColorComponents: [CGFloat]) -> CGImage?",
      "desc": "Creates a bitmap image by masking an existing bitmap image with the provided color values."
    },
    {
      "name": "init?(maskWidth: Int, height: Int, bitsPerComponent: Int, bitsPerPixel: Int, bytesPerRow: Int, provider: CGDataProvider, decode: UnsafePointer<CGFloat>?, shouldInterpolate: Bool)",
      "desc": "Creates a bitmap image mask from data supplied by a data provider."
    },
    {
      "name": "class var typeID: CFTypeID",
      "desc": "Returns the type identifier for CGImage objects."
    },
    {
      "name": "init?(windowListFromArrayScreenBounds: CGRect, windowArray: CFArray, imageOption: CGWindowImageOption)",
      "desc": "Returns a composite image of the specified windows."
    },
    {
      "name": "var byteOrderInfo: CGImageByteOrderInfo"
    },
    {
      "name": "var pixelFormatInfo: CGImagePixelFormatInfo"
    }
  ],
  "declaration": "class CGImage"
}