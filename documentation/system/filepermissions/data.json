{
  "path": "/documentation/system/filepermissions",
  "type": "Structure",
  "name": "FilePermissions",
  "desc": "The access permissions for a file.",
  "items": [
    {
      "name": "static var ownerRead: FilePermissions",
      "desc": "Indicates that the owner has read-only permission."
    },
    {
      "name": "static var ownerWrite: FilePermissions",
      "desc": "Indicates that the owner has write-only permission."
    },
    {
      "name": "static var ownerExecute: FilePermissions",
      "desc": "Indicates that the owner has execute-only permission."
    },
    {
      "name": "static var ownerReadWrite: FilePermissions",
      "desc": "Indicates that the owner has read-write permission."
    },
    {
      "name": "static var ownerReadExecute: FilePermissions",
      "desc": "Indicates that the owner has read-execute permission."
    },
    {
      "name": "static var ownerWriteExecute: FilePermissions",
      "desc": "Indicates that the owner has write-execute permission."
    },
    {
      "name": "static var ownerReadWriteExecute: FilePermissions",
      "desc": "Indicates that the owner has read, write, and execute permission."
    },
    {
      "name": "static var groupRead: FilePermissions",
      "desc": "Indicates that the group has read-only permission."
    },
    {
      "name": "static var groupWrite: FilePermissions",
      "desc": "Indicates that the group has write-only permission."
    },
    {
      "name": "static var groupExecute: FilePermissions",
      "desc": "Indicates that the group has execute-only permission."
    },
    {
      "name": "static var groupReadWrite: FilePermissions",
      "desc": "Indicates that the group has read-write permission."
    },
    {
      "name": "static var groupReadExecute: FilePermissions",
      "desc": "Indicates that the group has read-execute permission."
    },
    {
      "name": "static var groupWriteExecute: FilePermissions",
      "desc": "Indicates that the group has write-execute permission."
    },
    {
      "name": "static var groupReadWriteExecute: FilePermissions",
      "desc": "Indicates that the group has read, write, and execute permission."
    },
    {
      "name": "static var otherRead: FilePermissions",
      "desc": "Indicates that other users have read-only permission."
    },
    {
      "name": "static var otherWrite: FilePermissions",
      "desc": "Indicates that other users have write-only permission."
    },
    {
      "name": "static var otherExecute: FilePermissions",
      "desc": "Indicates that other users have execute-only permission."
    },
    {
      "name": "static var otherReadWrite: FilePermissions",
      "desc": "Indicates that other users have read-write permission."
    },
    {
      "name": "static var otherReadExecute: FilePermissions",
      "desc": "Indicates that other users have read-execute permission."
    },
    {
      "name": "static var otherWriteExecute: FilePermissions",
      "desc": "Indicates that other users have write-execute permission."
    },
    {
      "name": "static var otherReadWriteExecute: FilePermissions",
      "desc": "Indicates that other users have read, write, and execute permission."
    },
    {
      "name": "static var setUserID: FilePermissions",
      "desc": "Indicates that the file is executed as the owner."
    },
    {
      "name": "static var setGroupID: FilePermissions",
      "desc": "Indicates that the file is executed as the group."
    },
    {
      "name": "static var saveText: FilePermissions",
      "desc": "Indicates that executable’s text segment should be kept in swap space even after it exits."
    },
    {
      "name": "init(rawValue: CModeT)",
      "desc": "Create a strongly-typed file permission from a raw C value."
    },
    {
      "name": "let rawValue: CModeT",
      "desc": "The raw C file permissions."
    },
    {
      "name": "typealias CModeT"
    },
    {
      "name": "typealias RawValue",
      "desc": "The raw type that can be used to represent all values of the conforming type."
    },
    {
      "name": "var description: String",
      "desc": "A textual representation of the file permissions."
    },
    {
      "name": "var debugDescription: String",
      "desc": "A textual representation of the file permissions, suitable for debugging."
    },
    {
      "name": "static func != (Self, Self) -> Bool"
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": ""
    },
    {
      "name": "var hashValue: Int",
      "desc": ""
    },
    {
      "name": "init(from: Decoder) throws",
      "desc": "Creates a new instance by decoding from the given decoder, when the type’s RawValue is UInt16."
    },
    {
      "name": "func encode(to: Encoder) throws",
      "desc": "Encodes this value into the given encoder, when the type’s RawValue is UInt16."
    },
    {
      "name": "init()",
      "desc": "Creates an empty option set."
    },
    {
      "name": "init<S>(S)",
      "desc": "Creates a new set from a finite sequence of items."
    },
    {
      "name": "init(arrayLiteral: Self.Element...)",
      "desc": "Creates a set containing the elements of the given array literal."
    },
    {
      "name": "func contains(Self) -> Bool",
      "desc": "Returns a Boolean value that indicates whether a given element is a member of the option set."
    },
    {
      "name": "func formIntersection(Self)",
      "desc": "Removes all elements of this option set that are not also present in the given set."
    },
    {
      "name": "func formIntersection(Self)",
      "desc": "Removes all elements of this option set that are not also present in the given set."
    },
    {
      "name": "func formSymmetricDifference(Self)",
      "desc": "Replaces this set with a new set containing all elements contained in either this set or the given set, but not in both."
    },
    {
      "name": "func formUnion(Self)",
      "desc": "Inserts the elements of another set into this option set."
    },
    {
      "name": "func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)",
      "desc": "Adds the given element to the option set if it is not already a member."
    },
    {
      "name": "func intersection(Self) -> Self",
      "desc": "Returns a new option set with only the elements contained in both this set and the given set."
    },
    {
      "name": "func isDisjoint(with: Self) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the set has no members in common with the given set."
    },
    {
      "name": "var isEmpty: Bool",
      "desc": "A Boolean value that indicates whether the set has no elements."
    },
    {
      "name": "func isStrictSubset(of: Self) -> Bool",
      "desc": "Returns a Boolean value that indicates whether this set is a strict subset of the given set."
    },
    {
      "name": "func isStrictSuperset(of: Self) -> Bool",
      "desc": "Returns a Boolean value that indicates whether this set is a strict superset of the given set."
    },
    {
      "name": "func isSubset(of: Self) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the set is a subset of another set."
    },
    {
      "name": "func isSuperset(of: Self) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the set is a superset of the given set."
    },
    {
      "name": "func remove(Self.Element) -> Self.Element?",
      "desc": "Removes the given element and all elements subsumed by it."
    },
    {
      "name": "func subtract(Self)",
      "desc": "Removes the elements of the given set from this set."
    },
    {
      "name": "func subtracting(Self) -> Self",
      "desc": "Returns a new set containing the elements of this set that do not occur in the given set."
    },
    {
      "name": "func symmetricDifference(Self) -> Self",
      "desc": "Returns a new option set with the elements contained in this set or in the given set, but not in both."
    },
    {
      "name": "func union(Self) -> Self",
      "desc": "Returns a new option set of the elements contained in this set, in the given set, or in both."
    },
    {
      "name": "func update(with: Self.Element) -> Self.Element?",
      "desc": "Inserts the given element into the set."
    },
    {
      "name": "typealias ArrayLiteralElement",
      "desc": "The type of the elements of an array literal."
    },
    {
      "name": "typealias Element",
      "desc": "The element type of the option set."
    }
  ],
  "declaration": "@frozen struct FilePermissions",
  "conformsTo": [
    "CustomDebugStringConvertible",
    "CustomStringConvertible",
    "Decodable",
    "Encodable",
    "Equatable",
    "ExpressibleByArrayLiteral",
    "Hashable",
    "OptionSet",
    "RawRepresentable",
    "Sendable",
    "SetAlgebra"
  ]
}