{
  "path": "/documentation/pdfkit/pdfpage",
  "type": "Class",
  "name": "PDFPage",
  "desc": "PDFPage, a subclass of NSObject, defines methods used to render PDF pages and work with annotations, text, and selections.",
  "items": [
    {
      "name": "init?(image: UIImage)",
      "desc": "Creates a new PDFPage object and initializes it with the specified NSImage object."
    },
    {
      "name": "var document: PDFDocument?",
      "desc": "Returns the PDFDocument object with which the page is associated."
    },
    {
      "name": "var label: String?",
      "desc": "Returns the label for the page."
    },
    {
      "name": "func bounds(for: PDFDisplayBox) -> CGRect",
      "desc": "Returns the bounds for the specified PDF display box."
    },
    {
      "name": "func setBounds(CGRect, for: PDFDisplayBox)",
      "desc": "Sets the bounds for the specified box."
    },
    {
      "name": "var rotation: Int",
      "desc": "Sets the rotation angle for the page in degrees."
    },
    {
      "name": "var annotations: [PDFAnnotation]",
      "desc": "Returns an array containing the pageâ€™s annotations."
    },
    {
      "name": "var displaysAnnotations: Bool",
      "desc": "Returns a Boolean value indicating whether annotations are displayed for the page."
    },
    {
      "name": "func addAnnotation(PDFAnnotation)",
      "desc": "Adds the specified annotation object to the page."
    },
    {
      "name": "func removeAnnotation(PDFAnnotation)",
      "desc": "Removes the specified annotation from the page."
    },
    {
      "name": "func annotation(at: CGPoint) -> PDFAnnotation?",
      "desc": "Returns the annotation, if there is one, at the specified point."
    },
    {
      "name": "var numberOfCharacters: Int",
      "desc": "Returns the number of characters on the page, including whitespace characters."
    },
    {
      "name": "var string: String?",
      "desc": "Returns an NSString object representing the text on the page."
    },
    {
      "name": "var attributedString: NSAttributedString?",
      "desc": "Returns an NSAttributedString object representing the text on the page."
    },
    {
      "name": "func characterBounds(at: Int) -> CGRect",
      "desc": "Returns the bounds, in page space, of the character at the specified index."
    },
    {
      "name": "func characterIndex(at: CGPoint) -> Int",
      "desc": "Returns the character index value for the specified point in page space."
    },
    {
      "name": "func selection(for: CGRect) -> PDFSelection?",
      "desc": "Returns the text enclosed within the specified rectangle, expressed in page (user) coordinates."
    },
    {
      "name": "func selectionForWord(at: CGPoint) -> PDFSelection?",
      "desc": "Returns the whole word that includes the specified point."
    },
    {
      "name": "func selectionForLine(at: CGPoint) -> PDFSelection?",
      "desc": "Returns the whole line of text that includes the specified point."
    },
    {
      "name": "func selection(from: CGPoint, to: CGPoint) -> PDFSelection?",
      "desc": "Returns the text between the two specified points in page space."
    },
    {
      "name": "func selection(for: NSRange) -> PDFSelection?",
      "desc": "Returns the text contained within the specified range."
    },
    {
      "name": "enum PDFDisplayBox",
      "desc": "The following box types may be used with PDFPage drawing and bounds-setting methods. See the Adobe PDF Specification for more information on box types, units, and coordinate systems."
    },
    {
      "name": "enum PDFDisplayDirection"
    },
    {
      "name": "init()"
    },
    {
      "name": "var dataRepresentation: Data?",
      "desc": "Returns the PDF data (that is, a PDF document) representing this page. This method does not preserve external page links."
    },
    {
      "name": "var pageRef: CGPDFPage?"
    },
    {
      "name": "func draw(with: PDFDisplayBox, to: CGContext)"
    },
    {
      "name": "func thumbnail(of: CGSize, for: PDFDisplayBox) -> UIImage"
    },
    {
      "name": "func transform(CGContext, for: PDFDisplayBox)"
    },
    {
      "name": "func transform(for: PDFDisplayBox) -> CGAffineTransform"
    }
  ],
  "declaration": "class PDFPage : NSObject",
  "inheritsFrom": [
    "NSObject"
  ],
  "conformsTo": [
    "NSCopying"
  ]
}