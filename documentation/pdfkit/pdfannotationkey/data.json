{
  "path": "/documentation/pdfkit/pdfannotationkey",
  "type": "Structure",
  "name": "PDFAnnotationKey",
  "desc": "Keys for setting properties of annotations.",
  "items": [
    {
      "name": "static let contents: PDFAnnotationKey",
      "desc": "The text that the annotation displays or represents."
    },
    {
      "name": "static let date: PDFAnnotationKey",
      "desc": "The date, or string representation of a date, of the annotation’s most recent modification."
    },
    {
      "name": "static let flags: PDFAnnotationKey",
      "desc": "An integer value that specifies flags for the annotation."
    },
    {
      "name": "static let name: PDFAnnotationKey",
      "desc": "A string that uniquely identifies the annotation among all annotations on the same page."
    },
    {
      "name": "static let page: PDFAnnotationKey",
      "desc": "A dictionary or PDF page object that includes the annotation."
    },
    {
      "name": "static let parent: PDFAnnotationKey",
      "desc": "A dictionary or annotation object that a pop-up or widget belongs to."
    },
    {
      "name": "static let quadPoints: PDFAnnotationKey",
      "desc": "An array of floating point values that specifies a rectangular region of a page."
    },
    {
      "name": "static let rect: PDFAnnotationKey",
      "desc": "The rectangle that the annotation occupies on the page, in page-space coordinates."
    },
    {
      "name": "static let subtype: PDFAnnotationKey",
      "desc": "The type of annotation that the entries in a dictionary describe."
    },
    {
      "name": "static let textLabel: PDFAnnotationKey",
      "desc": "A string that represents the title of the annotation."
    },
    {
      "name": "static let appearanceDictionary: PDFAnnotationKey",
      "desc": "A dictionary that contains properties for controlling the annotation’s visual appearance."
    },
    {
      "name": "static let appearanceState: PDFAnnotationKey",
      "desc": "A string that specifies the appearance stream for the annotation."
    },
    {
      "name": "static let border: PDFAnnotationKey",
      "desc": "An array of integers or border objects that describes the border of the annotation."
    },
    {
      "name": "static let borderStyle: PDFAnnotationKey",
      "desc": "A dictionary that contains the properties of the annotation’s border."
    },
    {
      "name": "static let color: PDFAnnotationKey",
      "desc": "An array of floats or a color object that specifies the annotation’s color."
    },
    {
      "name": "static let defaultAppearance: PDFAnnotationKey",
      "desc": "A string value a free text annotation uses to format the text."
    },
    {
      "name": "static let highlightingMode: PDFAnnotationKey",
      "desc": "A string value that defines the way an annotation highlights when the user activates it, such as when clicking or tapping a link."
    },
    {
      "name": "struct PDFAnnotationHighlightingMode"
    },
    {
      "name": "static let iconName: PDFAnnotationKey",
      "desc": "A string value that specifies the name of an icon for a text or stamp annotation."
    },
    {
      "name": "static let interiorColor: PDFAnnotationKey",
      "desc": "An array of floating point values or a PDF color object that annotations use to fill interior space, such as line endings, squares, or circles."
    },
    {
      "name": "static let quadding: PDFAnnotationKey",
      "desc": "An integer value that specifies left, right, or center justification."
    },
    {
      "name": "static let lineEndingStyles: PDFAnnotationKey",
      "desc": "An array of string values that specifies the styles to use for the ends of lines."
    },
    {
      "name": "enum PDFLineStyle",
      "desc": "The following constants specify the available line ending styles."
    },
    {
      "name": "static let linePoints: PDFAnnotationKey",
      "desc": "An array of floating point values that specifies the starting and ending points, in page-space coordinates, of a line."
    },
    {
      "name": "struct PDFAnnotationLineEndingStyle"
    },
    {
      "name": "static let popup: PDFAnnotationKey",
      "desc": "A dictionary or annotation object that specifies the annotation to pop up for text entry or editing."
    },
    {
      "name": "static let open: PDFAnnotationKey",
      "desc": "A Boolean value that specifies whether the pop-up is in an opened state, showing its text content, or in a closed state and showing an icon."
    },
    {
      "name": "static let widgetAppearanceDictionary: PDFAnnotationKey",
      "desc": "A dictionary or appearance characteristic object that contains properties for controlling the widget’s visual appearance."
    },
    {
      "name": "static let widgetBackgroundColor: PDFAnnotationKey",
      "desc": "An array of floating point values or a PDF color object that specifies the widget’s background color."
    },
    {
      "name": "static let widgetBorderColor: PDFAnnotationKey",
      "desc": "An array of floating point values or a PDF color object that specifies the widget’s border color."
    },
    {
      "name": "static let widgetCaption: PDFAnnotationKey",
      "desc": "A string that a push button widget displays when it isn’t in a pressed state."
    },
    {
      "name": "static let widgetDefaultValue: PDFAnnotationKey",
      "desc": "A default value for the widget."
    },
    {
      "name": "static let widgetDownCaption: PDFAnnotationKey",
      "desc": "A string that a push button widgets displays when it’s in a pressed state."
    },
    {
      "name": "static let widgetFieldFlags: PDFAnnotationKey",
      "desc": "An integer value that specifies flags for a widget."
    },
    {
      "name": "static let widgetFieldType: PDFAnnotationKey",
      "desc": "A string that specifies the type of widget, such as button, checkbox, or signature field."
    },
    {
      "name": "static let widgetMaxLen: PDFAnnotationKey",
      "desc": "An integer value that specifies the maximum length of a text field, in characters."
    },
    {
      "name": "static let widgetOptions: PDFAnnotationKey",
      "desc": "An array that specifies the options to present in radio buttons or choice lists."
    },
    {
      "name": "static let widgetRolloverCaption: PDFAnnotationKey",
      "desc": "A string that push button widgets display when the pointer is over the button, but not clicking it."
    },
    {
      "name": "static let widgetRotation: PDFAnnotationKey",
      "desc": "An integer value that specifies the rotation of the widget."
    },
    {
      "name": "static let widgetTextLabelUI: PDFAnnotationKey",
      "desc": "A user-visible alternative field name that identifies the widget, typically for accessibility purposes."
    },
    {
      "name": "static let widgetValue: PDFAnnotationKey",
      "desc": "The widget’s value, typically for text and choice widgets."
    },
    {
      "name": "struct PDFAnnotationWidgetSubtype"
    },
    {
      "name": "static let destination: PDFAnnotationKey",
      "desc": "An array, name, or string that represents the destination of an action."
    },
    {
      "name": "static let action: PDFAnnotationKey",
      "desc": "A dictionary or PDF action object that represents an action to take, such as when the user clicks or taps a button."
    },
    {
      "name": "static let additionalActions: PDFAnnotationKey",
      "desc": "A dictionary or PDF action object that represents additional actions an annotation can perform, such as when it receives input focus."
    },
    {
      "name": "static let inklist: PDFAnnotationKey",
      "desc": "An array of arrays that represents stroked paths."
    },
    {
      "name": "init(rawValue: String)",
      "desc": "Creates an annotation key using the specified raw string value."
    }
  ],
  "declaration": "struct PDFAnnotationKey, @unchecked Sendable",
  "conformsTo": [
    "Equatable",
    "Hashable",
    "RawRepresentable",
    "Sendable"
  ]
}