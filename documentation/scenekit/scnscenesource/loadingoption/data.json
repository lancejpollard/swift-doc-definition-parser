{
  "path": "/documentation/scenekit/scnscenesource/loadingoption",
  "type": "Structure",
  "name": "SCNSceneSource.LoadingOption",
  "desc": "Options for creating scene sources and loading the scenes they contain.",
  "items": [
    {
      "name": "static let animationImportPolicy: SCNSceneSource.LoadingOption",
      "desc": "An option for controlling the playback of animations in a scene file."
    },
    {
      "name": "struct SCNSceneSource.AnimationImportPolicy",
      "desc": "Options for playing animations loaded from a scene file, used with the animationImportPolicy key in options dictionaries."
    },
    {
      "name": "static let assetDirectoryURLs: SCNSceneSource.LoadingOption",
      "desc": "Locations to use for resolving relative URLs to external resources."
    },
    {
      "name": "static let checkConsistency: SCNSceneSource.LoadingOption",
      "desc": "An option to validate scene files while loading."
    },
    {
      "name": "static let convertToYUp: SCNSceneSource.LoadingOption",
      "desc": "An option for whether to transform assets loaded from the scene file for use in a coordinate system where the y-axis points up."
    },
    {
      "name": "static let convertUnitsToMeters: SCNSceneSource.LoadingOption",
      "desc": "An option for whether to automatically scale the sceneâ€™s contents."
    },
    {
      "name": "static let createNormalsIfAbsent: SCNSceneSource.LoadingOption",
      "desc": "An option for automatically generating surface normals if they are absent when loading geometry."
    },
    {
      "name": "static let flattenScene: SCNSceneSource.LoadingOption",
      "desc": "An option for automatically merging portions of a scene graph during loading."
    },
    {
      "name": "static let overrideAssetURLs: SCNSceneSource.LoadingOption",
      "desc": "An option to attempt loading external resources using their URLs as specified in a scene file."
    },
    {
      "name": "static let preserveOriginalTopology: SCNSceneSource.LoadingOption"
    },
    {
      "name": "static let strictConformance: SCNSceneSource.LoadingOption",
      "desc": "An option to interpret scene files exactly as specified by the scene file format."
    },
    {
      "name": "init(rawValue: String)"
    }
  ],
  "declaration": "struct LoadingOption, @unchecked Sendable",
  "conformsTo": [
    "Equatable",
    "Hashable",
    "RawRepresentable",
    "Sendable"
  ]
}