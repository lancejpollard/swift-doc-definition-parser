{
  "path": "/documentation/scenekit/scnprogram",
  "type": "Class",
  "name": "SCNProgram",
  "desc": "A complete Metal or OpenGL shader program that replaces SceneKit's rendering of a geometry or material.",
  "items": [
    {
      "name": "var vertexShader: String?",
      "desc": "GLSL source code for the program’s vertex shader."
    },
    {
      "name": "var fragmentShader: String?",
      "desc": "GLSL source code for the program’s fragment shader."
    },
    {
      "name": "var geometryShader: String?",
      "desc": "GLSL source code for the program’s optional geometry shader."
    },
    {
      "name": "var tessellationControlShader: String?",
      "desc": "GLSL source code for the program’s optional tessellation control shader."
    },
    {
      "name": "var tessellationEvaluationShader: String?",
      "desc": "GLSL source code for the program’s optional tessellation evaluation shader."
    },
    {
      "name": "func setSemantic(String?, forSymbol: String, options: [String : Any]?)",
      "desc": "Associates a SceneKit semantic identifier with the specified GLSL vertex attribute or uniform variable."
    },
    {
      "name": "let SCNProgramMappingChannelKey: String",
      "desc": "The mapping channel to be used for a texture coordinate semantic."
    },
    {
      "name": "func semantic(forSymbol: String) -> String?",
      "desc": "Returns the SceneKit semantic identifiers associated with the specified GLSL vertex attribute or uniform variable."
    },
    {
      "name": "let SCNModelTransform: String",
      "desc": "A 4 x 4 matrix for transforming coordinates from model space to scene (or world) space."
    },
    {
      "name": "let SCNModelViewProjectionTransform: String",
      "desc": "A 4 x 4 matrix containing the concatenation of the Model, View, and Projection transformations."
    },
    {
      "name": "let SCNModelViewTransform: String",
      "desc": "A 4 x 4 matrix containing the concatenation of the Model and View transformations."
    },
    {
      "name": "let SCNNormalTransform: String",
      "desc": "A 4 x 4 matrix for transforming surface normal vectors from model space to view (or eye) space."
    },
    {
      "name": "let SCNProjectionTransform: String",
      "desc": "A 4 x 4 matrix for transforming coordinates from view (or eye) space to clip space."
    },
    {
      "name": "let SCNViewTransform: String",
      "desc": "A 4 x 4 matrix for transforming coordinates from scene (or world) space to view (or eye) space."
    },
    {
      "name": "var delegate: SCNProgramDelegate?",
      "desc": "The delegate of the program object."
    },
    {
      "name": "protocol SCNProgramDelegate",
      "desc": "The interface for tracking errors that occur when compiling shader source code."
    },
    {
      "name": "var isOpaque: Bool",
      "desc": "A Boolean value that indicates whether fragments rendered by the program are fully opaque."
    },
    {
      "name": "func handleBinding(ofBufferNamed: String, frequency: SCNBufferFrequency, handler: SCNBufferBindingBlock)",
      "desc": "Registers a block for SceneKit to call at render time for binding a Metal buffer to the shader program."
    },
    {
      "name": "enum SCNBufferFrequency",
      "desc": "Options for how often SceneKit should execute the binding handler you provide with the handleBinding(ofBufferNamed:frequency:handler:) method."
    },
    {
      "name": "typealias SCNBufferBindingBlock",
      "desc": "A block SceneKit calls at render time for working with buffers in a Metal shader, used by the handleBinding(ofBufferNamed:frequency:handler:) method."
    },
    {
      "name": "var vertexFunctionName: String?",
      "desc": "The name of the vertex shader function to load from a Metal shader library."
    },
    {
      "name": "var fragmentFunctionName: String?",
      "desc": "The name of the fragment shader function to load from a Metal shader library."
    },
    {
      "name": "var library: MTLLibrary?",
      "desc": "The Metal shader library containing shader functions to be used by this program."
    }
  ],
  "declaration": "class SCNProgram : NSObject",
  "inheritsFrom": [
    "NSObject"
  ],
  "conformsTo": [
    "NSCopying",
    "NSSecureCoding"
  ]
}