{
  "path": "/documentation/uniformtypeidentifiers/uttypereference",
  "type": "Class",
  "name": "UTTypeReference",
  "desc": "An object that represents a type of data to load, send, or receive.",
  "items": [
    {
      "name": "class func types(tag: String, tagClass: String, conformingTo: UTType?) -> [UTType]",
      "desc": "Returns an array of types from the provided tag and tag class."
    },
    {
      "name": "init(exportedAs: String)",
      "desc": "Creates and returns a type your app owns with the provided identifier."
    },
    {
      "name": "init(exportedAs: String, conformingTo: UTType)",
      "desc": "Creates and returns a type your app owns with the provided identifier that also conforms to an existing type."
    },
    {
      "name": "init(importedAs: String)",
      "desc": "Creates and returns a type your app uses but does not own with the provided identifier."
    },
    {
      "name": "init(importedAs: String, conformingTo: UTType)",
      "desc": "Creates and returns a type your app uses but does not own with the provided identifier that also conforms to an existing type."
    },
    {
      "name": "init?(String)",
      "desc": "Create and return a type with the provided identifier."
    },
    {
      "name": "init?(filenameExtension: String)",
      "desc": "Create and return a type based on the provided filename extension."
    },
    {
      "name": "init?(filenameExtension: String, conformingTo: UTType)",
      "desc": "Create and return a type based on the provided filename extension that conforms to an existing type."
    },
    {
      "name": "init?(mimeType: String)",
      "desc": "Create and return a type based on the provided MIME type."
    },
    {
      "name": "init?(mimeType: String, conformingTo: UTType)",
      "desc": "Create and return a type based on the provided MIME type that conforms to an existing type."
    },
    {
      "name": "init?(tag: String, tagClass: String, conformingTo: UTType?)",
      "desc": "Create and return a type based on the provided tag and tag class that conforms to an existing type."
    },
    {
      "name": "var identifier: String",
      "desc": "Returns a string that represents the type."
    },
    {
      "name": "var preferredFilenameExtension: String?",
      "desc": "Returns the preferred filename extension for this type."
    },
    {
      "name": "var preferredMIMEType: String?",
      "desc": "Returns the preferred MIME type for this type."
    },
    {
      "name": "var tags: [String : [String]]",
      "desc": "Returns the tag specification dictionary of this type."
    },
    {
      "name": "var isDeclared: Bool",
      "desc": "Returns a Boolean value indicating that the system declares the type."
    },
    {
      "name": "var isDynamic: Bool",
      "desc": "Returns a Boolean that indicates the system dynamically generated the type."
    },
    {
      "name": "var isPublic: Bool",
      "desc": "Returns a Boolean value indicating that the type is in the public domain."
    },
    {
      "name": "var referenceURL: URL?",
      "desc": "Returns the reference URL of the type."
    },
    {
      "name": "var version: NSNumber?",
      "desc": "Returns the typeâ€™s version."
    },
    {
      "name": "var supertypes: Set<UTType>",
      "desc": "Returns the set of types to which this type conforms, directly or indirectly."
    },
    {
      "name": "func conforms(to: UTType) -> Bool",
      "desc": "Tests for a conformance relationship between this type and the provided type."
    },
    {
      "name": "func isSubtype(of: UTType) -> Bool",
      "desc": "Tests to determine if the provided type is higher in a hierachy than this type."
    },
    {
      "name": "func isSupertype(of: UTType) -> Bool",
      "desc": "Tests to determine if the provided type is lower in a hierachy than this type."
    },
    {
      "name": "var localizedDescription: String?",
      "desc": "The localized description of the type."
    }
  ],
  "declaration": "class UTTypeReference : NSObject",
  "inheritsFrom": [
    "NSObject"
  ],
  "conformsTo": [
    "NSCopying",
    "NSSecureCoding"
  ]
}