{
  "path": "/documentation/uniformtypeidentifiers/uttagclass",
  "type": "Structure",
  "name": "UTTagClass",
  "desc": "A type that represents tag classes.",
  "items": [
    {
      "name": "init(rawValue: String)",
      "desc": "Creates a new tag class with the provided string."
    },
    {
      "name": "static var filenameExtension: UTTagClass",
      "desc": "A type property that returns the tag class used to map a type to a filename extension."
    },
    {
      "name": "static var mimeType: UTTagClass",
      "desc": "A type property that returns the tag class used to map a type to a MIME type."
    },
    {
      "name": "typealias UTTagClass.RawValue",
      "desc": "An alias for the raw value of the tag class."
    },
    {
      "name": "let rawValue: String",
      "desc": "Returns the raw value of the tag class."
    },
    {
      "name": "var description: String",
      "desc": "A textual description of the tag class."
    },
    {
      "name": "var debugDescription: String",
      "desc": "A textual description of the tag class, suitable for debugging."
    },
    {
      "name": "func encode(to: Encoder)",
      "desc": "Encodes the tag class using the provided encoder."
    },
    {
      "name": "init(from: Decoder)",
      "desc": "Decodes a tag class from the provided decoder."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of this tag class by feeding them into the given hasher."
    },
    {
      "name": "var hashValue: Int",
      "desc": "Returns the hash value for the tag class."
    },
    {
      "name": "static func == (UTTagClass, UTTagClass) -> Bool",
      "desc": "Compares two tag classes to determine if they are equal."
    },
    {
      "name": "static func != (UTTagClass, UTTagClass) -> Bool",
      "desc": "Compares two tag classes to determine if they arenâ€™t equal."
    }
  ],
  "declaration": "struct UTTagClass",
  "conformsTo": [
    "CustomDebugStringConvertible",
    "CustomStringConvertible",
    "Decodable",
    "Encodable",
    "Equatable",
    "Hashable",
    "RawRepresentable"
  ]
}