{
  "path": "/documentation/tvmlkit/tvviewelementstyle",
  "type": "Class",
  "name": "TVViewElementStyle",
  "desc": "A style applied to a view element.",
  "items": [
    {
      "name": "func value(propertyName: String) -> Any?",
      "desc": "Returns the value associated with a given style name."
    },
    {
      "name": "var height: CGFloat",
      "desc": "The height, in pixels, for an element."
    },
    {
      "name": "var maxHeight: CGFloat",
      "desc": "The maximum height, in pixels, for the element."
    },
    {
      "name": "var maxWidth: CGFloat",
      "desc": "The maximum width, in pixels, for an element."
    },
    {
      "name": "var minHeight: CGFloat",
      "desc": "The minimum height, in pixels, for an element."
    },
    {
      "name": "var minWidth: CGFloat",
      "desc": "The minimum width, in pixels, for an element."
    },
    {
      "name": "var width: CGFloat",
      "desc": "The width, in pixels, for an element."
    },
    {
      "name": "var alignment: TVElementAlignment",
      "desc": "A value indicating how an item is aligned inside of an element."
    },
    {
      "name": "enum TVElementAlignment",
      "desc": "Location of an item inside of an element on the horizontal axis."
    },
    {
      "name": "var contentAlignment: TVElementContentAlignment",
      "desc": "A value indicating how items inside of an element are aligned."
    },
    {
      "name": "enum TVElementContentAlignment",
      "desc": "Location of items inside of an element on the vertical axis."
    },
    {
      "name": "var focusMargin: UIEdgeInsets",
      "desc": "The amount of space, in pixels, a custom cell requires when it comes into focus."
    },
    {
      "name": "var interitemSpacing: CGFloat",
      "desc": "The spacing, in pixels, between items inside of an element."
    },
    {
      "name": "var margin: UIEdgeInsets",
      "desc": "The amount of space, in pixels, between the element and other elements."
    },
    {
      "name": "var padding: UIEdgeInsets",
      "desc": "The amount of space, in pixels, between the border and the contents of the element."
    },
    {
      "name": "var position: TVElementPosition",
      "desc": "A value indicating the position of the element relative to the screen or its containing element."
    },
    {
      "name": "enum TVElementPosition",
      "desc": "Location of an element relative to the screen or its containing element."
    },
    {
      "name": "var fontSize: CGFloat",
      "desc": "The font size applied to any text contained in the element."
    },
    {
      "name": "var fontWeight: String?",
      "desc": "A string indicating how thick or thin the font is."
    },
    {
      "name": "var maxTextLines: Int",
      "desc": "The maximum number of lines of text allowed inside of the element."
    },
    {
      "name": "var textAlignment: NSTextAlignment",
      "desc": "The horizontal alignment of text within an element."
    },
    {
      "name": "var textHighlightStyle: String?",
      "desc": "A string indicating how a label reacts when it is in focus."
    },
    {
      "name": "var textMinimumScaleFactor: CGFloat",
      "desc": "The minimum size text can be if the original text size does not fit in an element."
    },
    {
      "name": "var textStyle: String?",
      "desc": "The style applied to the text in an element."
    },
    {
      "name": "var imageTreatmentName: String?",
      "desc": "A value that determines how an image is displayed."
    },
    {
      "name": "var ratingStyle: String?",
      "desc": "A string indicating the style to be used by a rating element."
    },
    {
      "name": "var backgroundColor: TVColor?",
      "desc": "The background color for an element."
    },
    {
      "name": "var color: TVColor?",
      "desc": "The color for an element."
    },
    {
      "name": "var highlightColor: TVColor?",
      "desc": "The color of the element when it is highlighted."
    },
    {
      "name": "var tintColor: TVColor?",
      "desc": "The tint color applied to an element."
    }
  ],
  "declaration": "class TVViewElementStyle : NSObject",
  "inheritsFrom": [
    "NSObject"
  ],
  "conformsTo": [
    "NSCopying"
  ]
}