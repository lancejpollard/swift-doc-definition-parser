{
  "path": "/documentation/storekittest/sktesterror",
  "type": "Structure",
  "name": "SKTestError",
  "desc": "Information about an error that the testing environment returns.",
  "items": [
    {
      "name": "static var errorDomain: String",
      "desc": "A string containing the error domain for the StoreKit test environment."
    },
    {
      "name": "var code: Code",
      "desc": "The error code."
    },
    {
      "name": "var errorCode: Int",
      "desc": "The integer error code."
    },
    {
      "name": "var userInfo: [String : Any]",
      "desc": "A dictionary of information that provides additional details about the error."
    },
    {
      "name": "var errorUserInfo: [String : Any]",
      "desc": "A dictionary of error information that provides additional details about the error."
    },
    {
      "name": "var localizedDescription: String",
      "desc": "A description of the error that’s localized for the environment."
    },
    {
      "name": "static var fileNotFound: SKTestError.Code",
      "desc": "The initializer can’t find the file."
    },
    {
      "name": "static var invalidAction: SKTestError.Code",
      "desc": "The action is invalid."
    },
    {
      "name": "static var invalidProductIdentifier: SKTestError.Code",
      "desc": "The product identifier is invalid."
    },
    {
      "name": "static var invalidProductType: SKTestError.Code",
      "desc": "The product type is invalid."
    },
    {
      "name": "static var invalidURL: SKTestError.Code",
      "desc": "The URL is invalid."
    },
    {
      "name": "static var noSubscriptionFound: SKTestError.Code",
      "desc": "The test environment didn’t find a subscription."
    },
    {
      "name": "static var noTransactionFound: SKTestError.Code",
      "desc": "The test environment didn’t find a transaction."
    },
    {
      "name": "static var serviceUnavailable: SKTestError.Code",
      "desc": "The service isn’t available."
    },
    {
      "name": "enum SKTestError.Code",
      "desc": "Error codes in the testing environment."
    },
    {
      "name": "static func != (SKTestError, SKTestError) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the two given values are not equal."
    },
    {
      "name": "static func == (SKTestError, SKTestError) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the two given values are equal."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of this value by feeding them into the given hasher."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value."
    },
    {
      "name": "init(Code, userInfo: [String : Any])"
    }
  ],
  "declaration": "struct SKTestError"
}