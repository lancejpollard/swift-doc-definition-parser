{
  "path": "/documentation/contacts/cncontactstore",
  "type": "Class",
  "name": "CNContactStore",
  "desc": "The object that fetches and saves contacts, groups, and containers from the user's contacts database.",
  "items": [
    {
      "name": "func requestAccess(for: CNEntityType, completionHandler: (Bool, Error?) -> Void)",
      "desc": "Requests access to the user's contacts."
    },
    {
      "name": "class func authorizationStatus(for: CNEntityType) -> CNAuthorizationStatus",
      "desc": "Returns the current authorization status to access the contact data."
    },
    {
      "name": "enum CNAuthorizationStatus",
      "desc": "An authorization status the user can grant for an app to access the specified entity type."
    },
    {
      "name": "enum CNEntityType",
      "desc": "The entities the user can grant access to."
    },
    {
      "name": "func enumerateContacts(with: CNContactFetchRequest, usingBlock: (CNContact, UnsafeMutablePointer<ObjCBool>) -> Void)",
      "desc": "Returns a Boolean value that indicates whether the enumeration of all contacts matching a contact fetch request executed successfully."
    },
    {
      "name": "func unifiedMeContactWithKeys(toFetch: [CNKeyDescriptor]) -> CNContact",
      "desc": "Fetches the unified contact thatâ€™s the me card."
    },
    {
      "name": "func unifiedContact(withIdentifier: String, keysToFetch: [CNKeyDescriptor]) -> CNContact",
      "desc": "Fetches a unified contact for the specified contact identifier."
    },
    {
      "name": "func unifiedContacts(matching: NSPredicate, keysToFetch: [CNKeyDescriptor]) -> [CNContact]",
      "desc": "Fetches all unified contacts matching the specified predicate."
    },
    {
      "name": "func defaultContainerIdentifier() -> String",
      "desc": "Returns the identifier of the default container."
    },
    {
      "name": "func groups(matching: NSPredicate?) -> [CNGroup]",
      "desc": "Fetches all groups matching the specified predicate."
    },
    {
      "name": "func containers(matching: NSPredicate?) -> [CNContainer]",
      "desc": "Fetches all containers matching the specified predicate."
    },
    {
      "name": "var currentHistoryToken: Data?",
      "desc": "The current history token."
    },
    {
      "name": "func execute(CNSaveRequest)",
      "desc": "Executes a save request and returns success or failure."
    },
    {
      "name": "static let CNContactStoreDidChange: NSNotification.Name",
      "desc": "Posted when changes occur to the contact store."
    }
  ],
  "declaration": "class CNContactStore : NSObject",
  "inheritsFrom": [
    "NSObject"
  ]
}