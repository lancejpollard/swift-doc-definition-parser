{
  "path": "/documentation/xctest/xctestcase",
  "type": "Class",
  "name": "XCTestCase",
  "desc": "The primary class for defining test cases, test methods, and performance tests.",
  "items": [
    {
      "name": "class func setUp()",
      "desc": "Provides an opportunity to customize initial state before a test case begins."
    },
    {
      "name": "func addTeardownBlock(() -> Void)",
      "desc": "Registers a block of teardown code to run after the current test method ends."
    },
    {
      "name": "class func tearDown()",
      "desc": "Provides an opportunity to perform cleanup after a test case ends."
    },
    {
      "name": "class var runsForEachTargetApplicationUIConfiguration: Bool",
      "desc": "A Boolean value that indicates whether your UI tests run once for each possible combination of orientation, localization, and other appearance settings your app supports."
    },
    {
      "name": "var continueAfterFailure: Bool",
      "desc": "A Boolean value that indicates whether a test method should continue running after a failure occurs."
    },
    {
      "name": "var executionTimeAllowance: TimeInterval",
      "desc": "The number of seconds, rounded up to the nearest minute, for a test to run before it fails with a timeout error."
    },
    {
      "name": "func measure(() -> Void)",
      "desc": "Measures the performance of a block of code."
    },
    {
      "name": "func measureMetrics([XCTPerformanceMetric], automaticallyStartMeasuring: Bool, for: () -> Void)",
      "desc": "Measures the performance of a block of code, optionally deferring the starting point for measurement."
    },
    {
      "name": "func measure(metrics: [XCTMetric], block: () -> Void)",
      "desc": "Records the selected metrics for a block of code."
    },
    {
      "name": "func measure(metrics: [XCTMetric], options: XCTMeasureOptions, block: () -> Void)",
      "desc": "Records the selected metrics, using the specified measurement options, for a block of code."
    },
    {
      "name": "func measure(options: XCTMeasureOptions, block: () -> Void)",
      "desc": "Records the performance, using the specified measurement options, for a block of code."
    },
    {
      "name": "func startMeasuring()",
      "desc": "Starts recording performance metrics within a block of code."
    },
    {
      "name": "func stopMeasuring()",
      "desc": "Ends recording performance metrics within a block of code."
    },
    {
      "name": "class var defaultPerformanceMetrics: [XCTPerformanceMetric]",
      "desc": "An array of default performance metrics the test records."
    },
    {
      "name": "class var defaultMetrics: [XCTMetric]",
      "desc": "An array of default metrics the test uses to record performance."
    },
    {
      "name": "class var defaultMeasureOptions: XCTMeasureOptions",
      "desc": "The default measurement options the test uses to record performance."
    },
    {
      "name": "struct XCTPerformanceMetric",
      "desc": "Performance metrics that the test records."
    },
    {
      "name": "func expectation(description: String) -> XCTestExpectation",
      "desc": "Creates a new expectation with an associated description."
    },
    {
      "name": "func expectation(for: NSPredicate, evaluatedWith: Any?, handler: XCTNSPredicateExpectation.Handler?) -> XCTestExpectation",
      "desc": "Creates an expectation that the test fulfills by evaluating the predicate with the specified object."
    },
    {
      "name": "func expectation(forNotification: NSNotification.Name, object: Any?, handler: XCTNSNotificationExpectation.Handler?) -> XCTestExpectation",
      "desc": "Creates an expectation that the test fulfills when it receives a specific notification for a specified object."
    },
    {
      "name": "func expectation(forNotification: NSNotification.Name, object: Any?, notificationCenter: NotificationCenter, handler: XCTNSNotificationExpectation.Handler?) -> XCTestExpectation",
      "desc": "Creates an expectation that the test fulfills when it receives a specific notification from a specific notification center for a specified object."
    },
    {
      "name": "func keyValueObservingExpectation(for: Any, keyPath: String, expectedValue: Any?) -> XCTestExpectation",
      "desc": "Creates an expectation that uses Key-Value Observing to observe a value until it matches an expected value."
    },
    {
      "name": "func keyValueObservingExpectation(for: Any, keyPath: String, handler: XCTKVOExpectation.Handler?) -> XCTestExpectation",
      "desc": "Creates an expectation that uses Key-Value Observing to observe a value and respond to changes in that value by calling a provided handler."
    },
    {
      "name": "func wait(for: [XCTestExpectation], timeout: TimeInterval)",
      "desc": "Waits for the test to fulfill a set of expectations within a specified time."
    },
    {
      "name": "func wait(for: [XCTestExpectation], timeout: TimeInterval, enforceOrder: Bool)",
      "desc": "Waits for the test to satisfy an array of expectations and specifies whether they must occur in the array’s order."
    },
    {
      "name": "func waitForExpectations(timeout: TimeInterval, handler: XCWaitCompletionHandler?)",
      "desc": "Waits until the test fulfills all expectations or until it times out."
    },
    {
      "name": "typealias XCWaitCompletionHandler",
      "desc": "A block the test runner calls when the test fulfills a waiter’s expectations, or when it times out."
    },
    {
      "name": "struct XCTestError",
      "desc": "A type of error that can occur while the test waits to fulfill expectations."
    },
    {
      "name": "func addUIInterruptionMonitor(withDescription: String, handler: (XCUIElement) -> Bool) -> NSObjectProtocol",
      "desc": "Adds a handler to the current context."
    },
    {
      "name": "func removeUIInterruptionMonitor(NSObjectProtocol)",
      "desc": "Removes a handler using the token from when you added the handler."
    },
    {
      "name": "init(invocation: NSInvocation?)",
      "desc": "Initializes a test case with an invocation."
    },
    {
      "name": "init(selector: Selector)",
      "desc": "Initializes a test case with a selector."
    },
    {
      "name": "class var testInvocations: [NSInvocation]",
      "desc": "An array of invocations that represents each test method in the test case."
    },
    {
      "name": "var invocation: NSInvocation?",
      "desc": "The invocation for running the test."
    },
    {
      "name": "func invokeTest()",
      "desc": "Invokes the test."
    },
    {
      "name": "func record(XCTIssue)",
      "desc": "Records an issue during test execution."
    },
    {
      "name": "class var defaultTestSuite: XCTestSuite",
      "desc": "A test suite that contains test cases for all of the tests in the class."
    }
  ],
  "declaration": "class XCTestCase : XCTest",
  "inheritsFrom": [
    "XCTest"
  ],
  "conformsTo": [
    "XCTActivity",
    "XCTWaiterDelegate"
  ]
}