{
  "path": "/documentation/corebluetooth/cbperipheral",
  "type": "Class",
  "name": "CBPeripheral",
  "desc": "A remote peripheral device.",
  "items": [
    {
      "name": "var name: String?",
      "desc": "The name of the peripheral."
    },
    {
      "name": "var delegate: CBPeripheralDelegate?",
      "desc": "The delegate object specified to receive peripheral events."
    },
    {
      "name": "func discoverServices([CBUUID]?)",
      "desc": "Discovers the specified services of the peripheral."
    },
    {
      "name": "func discoverIncludedServices([CBUUID]?, for: CBService)",
      "desc": "Discovers the specified included services of a previously-discovered service."
    },
    {
      "name": "var services: [CBService]?",
      "desc": "A list of a peripheral’s discovered services."
    },
    {
      "name": "func discoverCharacteristics([CBUUID]?, for: CBService)",
      "desc": "Discovers the specified characteristics of a service."
    },
    {
      "name": "func discoverDescriptors(for: CBCharacteristic)",
      "desc": "Discovers the descriptors of a characteristic."
    },
    {
      "name": "func readValue(for: CBCharacteristic)",
      "desc": "Retrieves the value of a specified characteristic."
    },
    {
      "name": "func readValue(for: CBDescriptor)",
      "desc": "Retrieves the value of a specified characteristic descriptor."
    },
    {
      "name": "func writeValue(Data, for: CBCharacteristic, type: CBCharacteristicWriteType)",
      "desc": "Writes the value of a characteristic."
    },
    {
      "name": "func writeValue(Data, for: CBDescriptor)",
      "desc": "Writes the value of a characteristic descriptor."
    },
    {
      "name": "func maximumWriteValueLength(for: CBCharacteristicWriteType) -> Int",
      "desc": "The maximum amount of data, in bytes, you can send to a characteristic in a single write type."
    },
    {
      "name": "enum CBCharacteristicWriteType",
      "desc": "Values representing the possible write types to a characteristic’s value."
    },
    {
      "name": "func setNotifyValue(Bool, for: CBCharacteristic)",
      "desc": "Sets notifications or indications for the value of a specified characteristic."
    },
    {
      "name": "var state: CBPeripheralState",
      "desc": "The connection state of the peripheral."
    },
    {
      "name": "enum CBPeripheralState",
      "desc": "Values representing the connection state of a peripheral."
    },
    {
      "name": "var canSendWriteWithoutResponse: Bool",
      "desc": "A Boolean value that indicates whether the remote device can send a write without a response."
    },
    {
      "name": "func readRSSI()",
      "desc": "Retrieves the current RSSI value for the peripheral while connected to the central manager."
    },
    {
      "name": "func openL2CAPChannel(CBL2CAPPSM)",
      "desc": "Attempts to open an L2CAP channel to the peripheral using the supplied Protocol/Service Multiplexer (PSM)."
    },
    {
      "name": "class CBL2CAPChannel",
      "desc": "A live L2CAP connection to a remote device."
    },
    {
      "name": "typealias CBL2CAPPSM",
      "desc": "The type of PSM identifiers."
    },
    {
      "name": "var ancsAuthorized: Bool",
      "desc": "A Boolean value that indicates if the remote device has authorization to receive data over ANCS protocol."
    }
  ],
  "declaration": "class CBPeripheral : CBPeer",
  "inheritsFrom": [
    "CBPeer"
  ]
}