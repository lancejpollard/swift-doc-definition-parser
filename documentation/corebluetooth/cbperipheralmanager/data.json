{
  "path": "/documentation/corebluetooth/cbperipheralmanager",
  "type": "Class",
  "name": "CBPeripheralManager",
  "desc": "An object that manages and advertises peripheral services exposed by this app.",
  "items": [
    {
      "name": "init()",
      "desc": "Initializes the peripheral manager without a delegate."
    },
    {
      "name": "init(delegate: CBPeripheralManagerDelegate?, queue: DispatchQueue?)",
      "desc": "Initializes the peripheral manager with a specified delegate and dispatch queue."
    },
    {
      "name": "init(delegate: CBPeripheralManagerDelegate?, queue: DispatchQueue?, options: [String : Any]?)",
      "desc": "Initializes the peripheral manager with a specified delegate, dispatch queue, and initialization options."
    },
    {
      "name": "var delegate: CBPeripheralManagerDelegate?",
      "desc": "The delegate object specified to receive peripheral events."
    },
    {
      "name": "func add(CBMutableService)",
      "desc": "Publishes a service and any of its associated characteristics and characteristic descriptors to the local GATT database."
    },
    {
      "name": "func remove(CBMutableService)",
      "desc": "Removes a specified published service from the local GATT database."
    },
    {
      "name": "func removeAllServices()",
      "desc": "Removes all published services from the local GATT database."
    },
    {
      "name": "func startAdvertising([String : Any]?)",
      "desc": "Advertises peripheral manager data."
    },
    {
      "name": "func stopAdvertising()",
      "desc": "Stops advertising peripheral manager data."
    },
    {
      "name": "var isAdvertising: Bool",
      "desc": "A Boolean value that indicates whether the peripheral is advertising data."
    },
    {
      "name": "func updateValue(Data, for: CBMutableCharacteristic, onSubscribedCentrals: [CBCentral]?) -> Bool",
      "desc": "Send an updated characteristic value to one or more subscribed centrals, using a notification or indication."
    },
    {
      "name": "func respond(to: CBATTRequest, withResult: CBATTError.Code)",
      "desc": "Responds to a read or write request from a connected central."
    },
    {
      "name": "func setDesiredConnectionLatency(CBPeripheralManagerConnectionLatency, for: CBCentral)",
      "desc": "Sets the desired connection latency for an existing connection to a central device."
    },
    {
      "name": "enum CBPeripheralManagerConnectionLatency",
      "desc": "Values representing the connection latency of the peripheral manager."
    },
    {
      "name": "func publishL2CAPChannel(withEncryption: Bool)",
      "desc": "Creates a listener for incoming L2CAP channel connections."
    },
    {
      "name": "func unpublishL2CAPChannel(CBL2CAPPSM)",
      "desc": "Removes a published service from the local system."
    }
  ],
  "declaration": "class CBPeripheralManager : CBManager",
  "inheritsFrom": [
    "CBManager"
  ]
}