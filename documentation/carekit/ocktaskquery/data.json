{
  "path": "/documentation/carekit/ocktaskquery",
  "type": "Structure",
  "name": "OCKTaskQuery",
  "desc": "A query that limits which tasks your fetch returns.",
  "items": [
    {
      "name": "init(for: Date)",
      "desc": "Creates a new task query with a specific date for which to query."
    },
    {
      "name": "init(dateInterval: DateInterval)",
      "desc": "Creates a new task query with a date interval."
    },
    {
      "name": "init(OCKAnyTaskQuery)",
      "desc": "Creates a new task query from a specific query."
    },
    {
      "name": "var carePlanIDs: [String]",
      "desc": "An array of care plan identifiers you can use to match tasks in the query-returned results."
    },
    {
      "name": "var carePlanVersionIDs: [OCKLocalVersionID]",
      "desc": "An array of care plan version identifiers you can use to match tasks in the query-returned results."
    },
    {
      "name": "var carePlanRemoteIDs: [String]",
      "desc": "An array of care plan remote identifiers you can use to match tasks in the query-returned results."
    },
    {
      "name": "var excludesTasksWithNoEvents: Bool",
      "desc": "A Boolean value that indicates whether your query will include tasks with no events."
    },
    {
      "name": "var ids: [String]",
      "desc": "An array of unique identifiers that belong to the entities that match the query."
    },
    {
      "name": "var remoteIDs: [String]",
      "desc": "An array of remote IDs for entities that match the query."
    },
    {
      "name": "var groupIdentifiers: [String]",
      "desc": "An array of group identifers that match the query."
    },
    {
      "name": "var dateInterval: DateInterval?",
      "desc": "A date interval for entities that match the query."
    },
    {
      "name": "var limit: Int?",
      "desc": "The maximum number of results the query returns."
    },
    {
      "name": "var offset: Int",
      "desc": "An integer value that indicates how much to offset the query results, and which can be used to paginate results."
    },
    {
      "name": "var tags: [String]",
      "desc": "An array of tags by which to limit the query results."
    },
    {
      "name": "var versionIDs: [OCKLocalVersionID]",
      "desc": "An array of version identifiers by which to limit the query results."
    },
    {
      "name": "var sortDescriptors: [OCKTaskSortDescriptor]",
      "desc": "The order in which you want to sort the query results."
    },
    {
      "name": "enum OCKTaskSortDescriptor",
      "desc": "The values that indicate how you want to sort queried tasks."
    },
    {
      "name": "init()"
    },
    {
      "name": "init(OCKEntityQuery)"
    },
    {
      "name": "init(id: String)"
    },
    {
      "name": "static func != (OCKTaskQuery, OCKTaskQuery) -> Bool"
    }
  ],
  "declaration": "struct OCKTaskQuery",
  "conformsTo": [
    "Equatable",
    "OCKAnyTaskQuery"
  ]
}