{
  "path": "/documentation/naturallanguage/nltag",
  "type": "Structure",
  "name": "NLTag",
  "desc": "A token type, lexical class, name, lemma, language, or script returned by a linguistic tagger for natural language text.",
  "items": [
    {
      "name": "static let word: NLTag",
      "desc": "A tag indicating that the token is a word."
    },
    {
      "name": "static let punctuation: NLTag",
      "desc": "A tag indicating that the token is punctuation."
    },
    {
      "name": "static let whitespace: NLTag",
      "desc": "A tag indicating that the token is white space of any sort."
    },
    {
      "name": "static let other: NLTag",
      "desc": "A tag indicating that the token is a non-linguistic item, such as a symbol."
    },
    {
      "name": "static let noun: NLTag",
      "desc": "A tag indicating that the token is a noun."
    },
    {
      "name": "static let verb: NLTag",
      "desc": "A tag indicating that the token is a verb."
    },
    {
      "name": "static let adjective: NLTag",
      "desc": "A tag indicating that the token is an adjective"
    },
    {
      "name": "static let adverb: NLTag",
      "desc": "A tag indicating that the token is an adverb."
    },
    {
      "name": "static let pronoun: NLTag",
      "desc": "A tag indicating that the token is a pronoun."
    },
    {
      "name": "static let determiner: NLTag",
      "desc": "A tag indicating that the token is a determiner."
    },
    {
      "name": "static let particle: NLTag",
      "desc": "A tag indicating that the token is a particle."
    },
    {
      "name": "static let preposition: NLTag",
      "desc": "A tag indicating that the token is a preposition."
    },
    {
      "name": "static let number: NLTag",
      "desc": "A tag indicating that the token is a number."
    },
    {
      "name": "static let conjunction: NLTag",
      "desc": "A tag indicating that the token is a conjunction."
    },
    {
      "name": "static let interjection: NLTag",
      "desc": "A tag indicating that the token is an interjection."
    },
    {
      "name": "static let classifier: NLTag",
      "desc": "A tag indicating that the token is a classifier."
    },
    {
      "name": "static let idiom: NLTag",
      "desc": "A tag indicating that the token is an idiom."
    },
    {
      "name": "static let otherWord: NLTag",
      "desc": "A tag indicating that the token is a word other than a kind described by other lexical classes (noun, verb, adjective, adverb, pronoun, determiner, particle, preposition, number, conjunction, interjection, classifier, and idiom)."
    },
    {
      "name": "static let sentenceTerminator: NLTag",
      "desc": "A tag indicating that the token is punctuation at the end of a sentence."
    },
    {
      "name": "static let openQuote: NLTag",
      "desc": "A tag indicating that the token is an open quote."
    },
    {
      "name": "static let closeQuote: NLTag",
      "desc": "A tag indicating that the token is a close quote."
    },
    {
      "name": "static let openParenthesis: NLTag",
      "desc": "A tag indicating that the token is an open parenthesis."
    },
    {
      "name": "static let closeParenthesis: NLTag",
      "desc": "A tag indicating that the token is a close parenthesis."
    },
    {
      "name": "static let wordJoiner: NLTag",
      "desc": "A tag indicating that the token is a word joiner, signifying that two tokens on each side should not be broken up."
    },
    {
      "name": "static let dash: NLTag",
      "desc": "A tag indicating that the token is a dash."
    },
    {
      "name": "static let otherPunctuation: NLTag",
      "desc": "A tag indicating that the token is punctuation other than a kind described by other lexical classes (sentence terminator, open or close quote, open or close parenthesis, word joiner, and dash)."
    },
    {
      "name": "static let paragraphBreak: NLTag",
      "desc": "A tag indicating that the token is a paragraph break."
    },
    {
      "name": "static let otherWhitespace: NLTag",
      "desc": "A tag indicating that the token is whitespace other than a kind described by other lexical classes (paragraph break)."
    },
    {
      "name": "static let personalName: NLTag",
      "desc": "A tag indicating that the token is a personal name."
    },
    {
      "name": "static let organizationName: NLTag",
      "desc": "A tag indicating that the token is an organization name."
    },
    {
      "name": "static let placeName: NLTag",
      "desc": "A tag indicating that the token is a place name."
    },
    {
      "name": "init(String)"
    },
    {
      "name": "init(rawValue: String)"
    }
  ],
  "declaration": "struct NLTag, @unchecked Sendable",
  "conformsTo": [
    "Equatable",
    "Hashable",
    "RawRepresentable",
    "Sendable"
  ]
}