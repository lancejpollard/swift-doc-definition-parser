{
  "path": "/documentation/metalperformanceshadersgraph/mpsgraph",
  "type": "Class",
  "name": "MPSGraph",
  "desc": "No overview available.",
  "items": [
    {
      "name": "init()"
    },
    {
      "name": "var options: MPSGraphOptions"
    },
    {
      "name": "var placeholderTensors: [MPSGraphTensor]"
    },
    {
      "name": "func L2NormPooling4D(MPSGraphTensor, descriptor: MPSGraphPooling4DOpDescriptor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func L2NormPooling4DGradient(MPSGraphTensor, source: MPSGraphTensor, descriptor: MPSGraphPooling4DOpDescriptor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func absolute(with: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func acos(with: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func acosh(with: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func addition(MPSGraphTensor, MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func applyStochasticGradientDescent(learningRate: MPSGraphTensor, variable: MPSGraphVariableOp, gradient: MPSGraphTensor, name: String?) -> MPSGraphOperation"
    },
    {
      "name": "func asin(with: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func asinh(with: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func assign(MPSGraphTensor, tensor: MPSGraphTensor, name: String?) -> MPSGraphOperation"
    },
    {
      "name": "func atan(with: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func atan2(withPrimaryTensor: MPSGraphTensor, secondaryTensor: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func atanh(with: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func avgPooling2D(withSourceTensor: MPSGraphTensor, descriptor: MPSGraphPooling2DOpDescriptor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func avgPooling2DGradient(withGradientTensor: MPSGraphTensor, sourceTensor: MPSGraphTensor, descriptor: MPSGraphPooling2DOpDescriptor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func avgPooling4D(MPSGraphTensor, descriptor: MPSGraphPooling4DOpDescriptor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func avgPooling4DGradient(MPSGraphTensor, source: MPSGraphTensor, descriptor: MPSGraphPooling4DOpDescriptor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func bandPart(MPSGraphTensor, numLower: Int, numUpper: Int, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func bandPart(MPSGraphTensor, numLowerTensor: MPSGraphTensor, numUpperTensor: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func broadcast(MPSGraphTensor, shape: [NSNumber], name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func broadcast(MPSGraphTensor, shapeTensor: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func cast(MPSGraphTensor, to: MPSDataType, name: String) -> MPSGraphTensor"
    },
    {
      "name": "func ceil(with: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func clamp(MPSGraphTensor, min: MPSGraphTensor, max: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func compile(with: MPSGraphDevice?, feeds: [MPSGraphTensor : MPSGraphShapedType], targetTensors: [MPSGraphTensor], targetOperations: [MPSGraphOperation]?, compilationDescriptor: MPSGraphCompilationDescriptor?) -> MPSGraphExecutable"
    },
    {
      "name": "func concatTensor(MPSGraphTensor, with: MPSGraphTensor, dimension: Int, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func concatTensors([MPSGraphTensor], dimension: Int, interleave: Bool, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func concatTensors([MPSGraphTensor], dimension: Int, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func constant(Double, dataType: MPSDataType) -> MPSGraphTensor"
    },
    {
      "name": "func constant(Data, shape: [NSNumber], dataType: MPSDataType) -> MPSGraphTensor"
    },
    {
      "name": "func constant(Double, shape: [NSNumber], dataType: MPSDataType) -> MPSGraphTensor"
    },
    {
      "name": "func controlDependency(with: [MPSGraphOperation], dependentBlock: MPSGraphControlFlowDependencyBlock, name: String?) -> [MPSGraphTensor]"
    },
    {
      "name": "func convolution2D(MPSGraphTensor, weights: MPSGraphTensor, descriptor: MPSGraphConvolution2DOpDescriptor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func convolution2DDataGradient(MPSGraphTensor, weights: MPSGraphTensor, outputShapeTensor: MPSGraphTensor, forwardConvolutionDescriptor: MPSGraphConvolution2DOpDescriptor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func convolution2DDataGradient(MPSGraphTensor, weights: MPSGraphTensor, outputShape: [NSNumber], forwardConvolutionDescriptor: MPSGraphConvolution2DOpDescriptor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func convolution2DWeightsGradient(MPSGraphTensor, source: MPSGraphTensor, outputShapeTensor: MPSGraphTensor, forwardConvolutionDescriptor: MPSGraphConvolution2DOpDescriptor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func convolution2DWeightsGradient(MPSGraphTensor, source: MPSGraphTensor, outputShape: [NSNumber], forwardConvolutionDescriptor: MPSGraphConvolution2DOpDescriptor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func convolutionTranspose2D(MPSGraphTensor, weights: MPSGraphTensor, outputShapeTensor: MPSGraphTensor, descriptor: MPSGraphConvolution2DOpDescriptor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func convolutionTranspose2D(MPSGraphTensor, weights: MPSGraphTensor, outputShape: [NSNumber], descriptor: MPSGraphConvolution2DOpDescriptor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func convolutionTranspose2DDataGradient(MPSGraphTensor, weights: MPSGraphTensor, outputShapeTensor: MPSGraphTensor, forwardConvolutionDescriptor: MPSGraphConvolution2DOpDescriptor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func convolutionTranspose2DDataGradient(MPSGraphTensor, weights: MPSGraphTensor, outputShape: [NSNumber], forwardConvolutionDescriptor: MPSGraphConvolution2DOpDescriptor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func convolutionTranspose2DWeightsGradient(MPSGraphTensor, weights: MPSGraphTensor, outputShapeTensor: MPSGraphTensor, forwardConvolutionDescriptor: MPSGraphConvolution2DOpDescriptor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func convolutionTranspose2DWeightsGradient(MPSGraphTensor, weights: MPSGraphTensor, outputShape: [NSNumber], forwardConvolutionDescriptor: MPSGraphConvolution2DOpDescriptor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func coordinate(alongAxis: Int, withShape: [NSNumber], name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func coordinate(alongAxis: Int, withShapeTensor: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func coordinate(alongAxisTensor: MPSGraphTensor, withShape: [NSNumber], name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func coordinate(alongAxisTensor: MPSGraphTensor, withShapeTensor: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func cos(with: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func cosh(with: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func depth(toSpace2DTensor: MPSGraphTensor, widthAxis: Int, heightAxis: Int, depthAxis: Int, blockSize: Int, usePixelShuffleOrder: Bool, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func depth(toSpace2DTensor: MPSGraphTensor, widthAxisTensor: MPSGraphTensor, heightAxisTensor: MPSGraphTensor, depthAxisTensor: MPSGraphTensor, blockSize: Int, usePixelShuffleOrder: Bool, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func depthwiseConvolution2D(MPSGraphTensor, weights: MPSGraphTensor, descriptor: MPSGraphDepthwiseConvolution2DOpDescriptor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func depthwiseConvolution2DDataGradient(MPSGraphTensor, weights: MPSGraphTensor, outputShape: [NSNumber], descriptor: MPSGraphDepthwiseConvolution2DOpDescriptor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func depthwiseConvolution2DWeightsGradient(MPSGraphTensor, source: MPSGraphTensor, outputShape: [NSNumber], descriptor: MPSGraphDepthwiseConvolution2DOpDescriptor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func depthwiseConvolution3D(MPSGraphTensor, weights: MPSGraphTensor, descriptor: MPSGraphDepthwiseConvolution3DOpDescriptor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func depthwiseConvolution3DDataGradient(MPSGraphTensor, weights: MPSGraphTensor, outputShape: [NSNumber]?, descriptor: MPSGraphDepthwiseConvolution3DOpDescriptor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func depthwiseConvolution3DWeightsGradient(MPSGraphTensor, source: MPSGraphTensor, outputShape: [NSNumber], descriptor: MPSGraphDepthwiseConvolution3DOpDescriptor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func division(MPSGraphTensor, MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func divisionNoNaN(MPSGraphTensor, MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func dropout(MPSGraphTensor, rate: Double, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func dropout(MPSGraphTensor, rate: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func encode(to: MPSCommandBuffer, feeds: [MPSGraphTensor : MPSGraphTensorData], targetOperations: [MPSGraphOperation]?, resultsDictionary: [MPSGraphTensor : MPSGraphTensorData], executionDescriptor: MPSGraphExecutionDescriptor?)"
    },
    {
      "name": "func encode(to: MPSCommandBuffer, feeds: [MPSGraphTensor : MPSGraphTensorData], targetTensors: [MPSGraphTensor], targetOperations: [MPSGraphOperation]?, executionDescriptor: MPSGraphExecutionDescriptor?) -> [MPSGraphTensor : MPSGraphTensorData]"
    },
    {
      "name": "func equal(MPSGraphTensor, MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func erf(with: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func expandDims(MPSGraphTensor, axes: [NSNumber], name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func expandDims(MPSGraphTensor, axesTensor: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func expandDims(MPSGraphTensor, axis: Int, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func exponent(with: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func exponentBase10(with: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func exponentBase2(with: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func flatten2D(MPSGraphTensor, axis: Int, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func flatten2D(MPSGraphTensor, axisTensor: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func floor(with: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func floorModulo(MPSGraphTensor, MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func `for`(lowerBound: MPSGraphTensor, upperBound: MPSGraphTensor, step: MPSGraphTensor, initialBodyArguments: [MPSGraphTensor], body: MPSGraphForLoopBodyBlock, name: String?) -> [MPSGraphTensor]"
    },
    {
      "name": "func `for`(numberOfIterations: MPSGraphTensor, initialBodyArguments: [MPSGraphTensor], body: MPSGraphForLoopBodyBlock, name: String?) -> [MPSGraphTensor]"
    },
    {
      "name": "func gather(withUpdatesTensor: MPSGraphTensor, indicesTensor: MPSGraphTensor, axis: Int, batchDimensions: Int, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func gatherAlongAxis(Int, updates: MPSGraphTensor, indices: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func gatherAlongAxisTensor(MPSGraphTensor, updates: MPSGraphTensor, indices: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func gatherND(withUpdatesTensor: MPSGraphTensor, indicesTensor: MPSGraphTensor, batchDimensions: Int, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func gradients(of: MPSGraphTensor, with: [MPSGraphTensor], name: String?) -> [MPSGraphTensor : MPSGraphTensor]"
    },
    {
      "name": "func greaterThan(MPSGraphTensor, MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func greaterThanOrEqualTo(MPSGraphTensor, MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func identity(with: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func `if`(MPSGraphTensor, then: MPSGraphIfThenElseBlock, else: MPSGraphIfThenElseBlock?, name: String?) -> [MPSGraphTensor]"
    },
    {
      "name": "func isFinite(with: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func isInfinite(with: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func isNaN(with: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func leakyReLU(with: MPSGraphTensor, alpha: Double, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func leakyReLU(with: MPSGraphTensor, alphaTensor: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func leakyReLUGradient(withIncomingGradient: MPSGraphTensor, sourceTensor: MPSGraphTensor, alphaTensor: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func lessThan(MPSGraphTensor, MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func lessThanOrEqualTo(MPSGraphTensor, MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func logarithm(with: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func logarithmBase10(with: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func logarithmBase2(with: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func logicalAND(MPSGraphTensor, MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func logicalNAND(MPSGraphTensor, MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func logicalNOR(MPSGraphTensor, MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func logicalOR(MPSGraphTensor, MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func logicalXNOR(MPSGraphTensor, MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func logicalXOR(MPSGraphTensor, MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func matrixMultiplication(primary: MPSGraphTensor, secondary: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func maxPooling2D(withSourceTensor: MPSGraphTensor, descriptor: MPSGraphPooling2DOpDescriptor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func maxPooling2DGradient(withGradientTensor: MPSGraphTensor, sourceTensor: MPSGraphTensor, descriptor: MPSGraphPooling2DOpDescriptor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func maxPooling2DReturnIndices(MPSGraphTensor, descriptor: MPSGraphPooling2DOpDescriptor, name: String?) -> [MPSGraphTensor]"
    },
    {
      "name": "func maxPooling4D(MPSGraphTensor, descriptor: MPSGraphPooling4DOpDescriptor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func maxPooling4DGradient(MPSGraphTensor, source: MPSGraphTensor, descriptor: MPSGraphPooling4DOpDescriptor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func maxPooling4DReturnIndices(MPSGraphTensor, descriptor: MPSGraphPooling4DOpDescriptor, name: String?) -> [MPSGraphTensor]"
    },
    {
      "name": "func maximum(MPSGraphTensor, MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func maximumWithNaNPropagation(MPSGraphTensor, MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func mean(of: MPSGraphTensor, axes: [NSNumber], name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func minimum(MPSGraphTensor, MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func minimumWithNaNPropagation(MPSGraphTensor, MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func modulo(MPSGraphTensor, MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func multiplication(MPSGraphTensor, MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func negative(with: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func normalize(MPSGraphTensor, mean: MPSGraphTensor, variance: MPSGraphTensor, gamma: MPSGraphTensor?, beta: MPSGraphTensor?, epsilon: Float, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func normalizationBetaGradient(withIncomingGradientTensor: MPSGraphTensor, sourceTensor: MPSGraphTensor, reductionAxes: [NSNumber], name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func normalizationGammaGradient(withIncomingGradientTensor: MPSGraphTensor, sourceTensor: MPSGraphTensor, mean: MPSGraphTensor, varianceTensor: MPSGraphTensor, reductionAxes: [NSNumber], epsilon: Float, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func normalizationGradient(withIncomingGradientTensor: MPSGraphTensor, sourceTensor: MPSGraphTensor, mean: MPSGraphTensor, varianceTensor: MPSGraphTensor, gammaTensor: MPSGraphTensor?, gammaGradientTensor: MPSGraphTensor?, betaGradientTensor: MPSGraphTensor?, reductionAxes: [NSNumber], epsilon: Float, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func not(with: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func notEqual(MPSGraphTensor, MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func oneHot(withIndicesTensor: MPSGraphTensor, depth: Int, axis: Int, dataType: MPSDataType, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func oneHot(withIndicesTensor: MPSGraphTensor, depth: Int, axis: Int, dataType: MPSDataType, onValue: Double, offValue: Double, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func oneHot(withIndicesTensor: MPSGraphTensor, depth: Int, axis: Int, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func oneHot(withIndicesTensor: MPSGraphTensor, depth: Int, dataType: MPSDataType, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func oneHot(withIndicesTensor: MPSGraphTensor, depth: Int, dataType: MPSDataType, onValue: Double, offValue: Double, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func oneHot(withIndicesTensor: MPSGraphTensor, depth: Int, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func padGradient(withIncomingGradientTensor: MPSGraphTensor, sourceTensor: MPSGraphTensor, paddingMode: MPSGraphPaddingMode, leftPadding: [NSNumber], rightPadding: [NSNumber], name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func padTensor(MPSGraphTensor, with: MPSGraphPaddingMode, leftPadding: [NSNumber], rightPadding: [NSNumber], constantValue: Double, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func placeholder(shape: [NSNumber]?, dataType: MPSDataType, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func placeholder(shape: [NSNumber]?, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func power(MPSGraphTensor, MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func randomPhiloxStateTensor(withCounterLow: Int, counterHigh: Int, key: Int, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func randomPhiloxStateTensor(withSeed: Int, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func randomTensor(withShape: [NSNumber], descriptor: MPSGraphRandomOpDescriptor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func randomTensor(withShape: [NSNumber], descriptor: MPSGraphRandomOpDescriptor, seed: Int, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func randomTensor(withShape: [NSNumber], descriptor: MPSGraphRandomOpDescriptor, stateTensor: MPSGraphTensor, name: String?) -> [MPSGraphTensor]"
    },
    {
      "name": "func randomTensor(withShapeTensor: MPSGraphTensor, descriptor: MPSGraphRandomOpDescriptor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func randomTensor(withShapeTensor: MPSGraphTensor, descriptor: MPSGraphRandomOpDescriptor, seed: Int, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func randomTensor(withShapeTensor: MPSGraphTensor, descriptor: MPSGraphRandomOpDescriptor, stateTensor: MPSGraphTensor, name: String?) -> [MPSGraphTensor]"
    },
    {
      "name": "func randomUniformTensor(withShape: [NSNumber], name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func randomUniformTensor(withShape: [NSNumber], seed: Int, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func randomUniformTensor(withShape: [NSNumber], stateTensor: MPSGraphTensor, name: String?) -> [MPSGraphTensor]"
    },
    {
      "name": "func randomUniformTensor(withShapeTensor: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func randomUniformTensor(withShapeTensor: MPSGraphTensor, seed: Int, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func randomUniformTensor(withShapeTensor: MPSGraphTensor, stateTensor: MPSGraphTensor, name: String?) -> [MPSGraphTensor]"
    },
    {
      "name": "func reLU(with: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func reLUGradient(withIncomingGradient: MPSGraphTensor, sourceTensor: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func read(MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func reciprocal(with: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func reductionAnd(with: MPSGraphTensor, axes: [NSNumber]?, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func reductionAnd(with: MPSGraphTensor, axis: Int, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func reductionArgMaximum(with: MPSGraphTensor, axis: Int, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func reductionArgMinimum(with: MPSGraphTensor, axis: Int, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func reductionMaximum(with: MPSGraphTensor, axes: [NSNumber]?, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func reductionMaximum(with: MPSGraphTensor, axis: Int, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func reductionMaximumPropagateNaN(with: MPSGraphTensor, axes: [NSNumber]?, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func reductionMaximumPropagateNaN(with: MPSGraphTensor, axis: Int, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func reductionMinimum(with: MPSGraphTensor, axes: [NSNumber]?, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func reductionMinimum(with: MPSGraphTensor, axis: Int, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func reductionMinimumPropagateNaN(with: MPSGraphTensor, axes: [NSNumber]?, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func reductionMinimumPropagateNaN(with: MPSGraphTensor, axis: Int, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func reductionOr(with: MPSGraphTensor, axes: [NSNumber]?, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func reductionOr(with: MPSGraphTensor, axis: Int, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func reductionProduct(with: MPSGraphTensor, axes: [NSNumber]?, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func reductionProduct(with: MPSGraphTensor, axis: Int, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func reductionSum(with: MPSGraphTensor, axes: [NSNumber]?, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func reductionSum(with: MPSGraphTensor, axis: Int, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func reshape(MPSGraphTensor, shapeTensor: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func reshape(MPSGraphTensor, shape: [NSNumber], name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func resize(MPSGraphTensor, size: [NSNumber], mode: MPSGraphResizeMode, centerResult: Bool, alignCorners: Bool, layout: MPSGraphTensorNamedDataLayout, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func resize(MPSGraphTensor, sizeTensor: MPSGraphTensor, mode: MPSGraphResizeMode, centerResult: Bool, alignCorners: Bool, layout: MPSGraphTensorNamedDataLayout, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func resize(withGradientTensor: MPSGraphTensor, input: MPSGraphTensor, mode: MPSGraphResizeMode, centerResult: Bool, alignCorners: Bool, layout: MPSGraphTensorNamedDataLayout, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func reverse(MPSGraphTensor, axes: [NSNumber], name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func reverse(MPSGraphTensor, axesTensor: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func reverse(MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func reverseSquareRoot(with: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func rint(with: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func round(with: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func run(with: MTLCommandQueue, feeds: [MPSGraphTensor : MPSGraphTensorData], targetOperations: [MPSGraphOperation]?, resultsDictionary: [MPSGraphTensor : MPSGraphTensorData])"
    },
    {
      "name": "func run(with: MTLCommandQueue, feeds: [MPSGraphTensor : MPSGraphTensorData], targetTensors: [MPSGraphTensor], targetOperations: [MPSGraphOperation]?) -> [MPSGraphTensor : MPSGraphTensorData]"
    },
    {
      "name": "func run(feeds: [MPSGraphTensor : MPSGraphTensorData], targetTensors: [MPSGraphTensor], targetOperations: [MPSGraphOperation]?) -> [MPSGraphTensor : MPSGraphTensorData]"
    },
    {
      "name": "func runAsync(with: MTLCommandQueue, feeds: [MPSGraphTensor : MPSGraphTensorData], targetOperations: [MPSGraphOperation]?, resultsDictionary: [MPSGraphTensor : MPSGraphTensorData], executionDescriptor: MPSGraphExecutionDescriptor?)"
    },
    {
      "name": "func runAsync(with: MTLCommandQueue, feeds: [MPSGraphTensor : MPSGraphTensorData], targetTensors: [MPSGraphTensor], targetOperations: [MPSGraphOperation]?, executionDescriptor: MPSGraphExecutionDescriptor?) -> [MPSGraphTensor : MPSGraphTensorData]"
    },
    {
      "name": "func runAsync(feeds: [MPSGraphTensor : MPSGraphTensorData], targetTensors: [MPSGraphTensor], targetOperations: [MPSGraphOperation]?, executionDescriptor: MPSGraphExecutionDescriptor?) -> [MPSGraphTensor : MPSGraphTensorData]"
    },
    {
      "name": "func scatter(MPSGraphTensor, indices: MPSGraphTensor, shape: [NSNumber], axis: Int, mode: MPSGraphScatterMode, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func scatterAlongAxis(Int, data: MPSGraphTensor, updates: MPSGraphTensor, indices: MPSGraphTensor, mode: MPSGraphScatterMode, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func scatterAlongAxis(Int, updates: MPSGraphTensor, indices: MPSGraphTensor, shape: [NSNumber], mode: MPSGraphScatterMode, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func scatterAlongAxisTensor(MPSGraphTensor, data: MPSGraphTensor, updates: MPSGraphTensor, indices: MPSGraphTensor, mode: MPSGraphScatterMode, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func scatterAlongAxisTensor(MPSGraphTensor, updates: MPSGraphTensor, indices: MPSGraphTensor, shape: [NSNumber], mode: MPSGraphScatterMode, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func scatterND(withUpdatesTensor: MPSGraphTensor, indicesTensor: MPSGraphTensor, shape: [NSNumber], batchDimensions: Int, mode: MPSGraphScatterMode, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func scatterND(withUpdatesTensor: MPSGraphTensor, indicesTensor: MPSGraphTensor, shape: [NSNumber], batchDimensions: Int, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func scatterNDWithData(MPSGraphTensor, updates: MPSGraphTensor, indices: MPSGraphTensor, batchDimensions: Int, mode: MPSGraphScatterMode, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func scatterWithData(MPSGraphTensor, updates: MPSGraphTensor, indices: MPSGraphTensor, axis: Int, mode: MPSGraphScatterMode, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func select(predicate: MPSGraphTensor, trueTensor: MPSGraphTensor, falseTensor: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func shapeOf(MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func sigmoid(with: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func sigmoidGradient(withIncomingGradient: MPSGraphTensor, sourceTensor: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func sign(with: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func signbit(with: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func sin(with: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func sinh(with: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func sliceGradientTensor(MPSGraphTensor, fwdInShapeTensor: MPSGraphTensor, starts: [NSNumber], ends: [NSNumber], strides: [NSNumber], name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func sliceGradientTensor(MPSGraphTensor, fwdInShapeTensor: MPSGraphTensor, starts: [NSNumber], ends: [NSNumber], strides: [NSNumber], startMask: UInt32, endMask: UInt32, squeezeMask: UInt32, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func sliceTensor(MPSGraphTensor, dimension: Int, start: Int, length: Int, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func sliceTensor(MPSGraphTensor, starts: [NSNumber], ends: [NSNumber], strides: [NSNumber], name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func sliceTensor(MPSGraphTensor, starts: [NSNumber], ends: [NSNumber], strides: [NSNumber], startMask: UInt32, endMask: UInt32, squeezeMask: UInt32, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func softMax(with: MPSGraphTensor, axis: Int, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func softMaxCrossEntropy(MPSGraphTensor, labels: MPSGraphTensor, axis: Int, reuctionType: MPSGraphLossReductionType, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func softMaxCrossEntropyGradient(MPSGraphTensor, source: MPSGraphTensor, labels: MPSGraphTensor, axis: Int, reuctionType: MPSGraphLossReductionType, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func softMaxGradient(withIncomingGradient: MPSGraphTensor, sourceTensor: MPSGraphTensor, axis: Int, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func space(toDepth2DTensor: MPSGraphTensor, widthAxis: Int, heightAxis: Int, depthAxis: Int, blockSize: Int, usePixelShuffleOrder: Bool, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func space(toDepth2DTensor: MPSGraphTensor, widthAxisTensor: MPSGraphTensor, heightAxisTensor: MPSGraphTensor, depthAxisTensor: MPSGraphTensor, blockSize: Int, usePixelShuffleOrder: Bool, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func sparseTensor(sparseTensorWithDescriptor: MPSGraphCreateSparseOpDescriptor, tensors: [MPSGraphTensor], shape: [NSNumber], name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func sparseTensor(sparseTensorWithType: MPSGraphSparseStorageType, tensors: [MPSGraphTensor], shape: [NSNumber], dataType: MPSDataType, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func split(MPSGraphTensor, numSplits: Int, axis: Int, name: String?) -> [MPSGraphTensor]"
    },
    {
      "name": "func split(MPSGraphTensor, splitSizes: [NSNumber], axis: Int, name: String?) -> [MPSGraphTensor]"
    },
    {
      "name": "func split(MPSGraphTensor, splitSizesTensor: MPSGraphTensor, axis: Int, name: String?) -> [MPSGraphTensor]"
    },
    {
      "name": "func square(with: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func squareRoot(with: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func squeeze(MPSGraphTensor, axes: [NSNumber], name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func squeeze(MPSGraphTensor, axesTensor: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func squeeze(MPSGraphTensor, axis: Int, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func squeeze(MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func stack([MPSGraphTensor], axis: Int, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func stencil(withSourceTensor: MPSGraphTensor, weightsTensor: MPSGraphTensor, descriptor: MPSGraphStencilOpDescriptor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func stochasticGradientDescent(learningRate: MPSGraphTensor, values: MPSGraphTensor, gradient: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func subtraction(MPSGraphTensor, MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func tan(with: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func tanh(with: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func tileGradient(withIncomingGradientTensor: MPSGraphTensor, sourceTensor: MPSGraphTensor, withMultiplier: [NSNumber], name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func tileTensor(MPSGraphTensor, withMultiplier: [NSNumber], name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func topK(MPSGraphTensor, k: Int, name: String?) -> [MPSGraphTensor]"
    },
    {
      "name": "func topK(MPSGraphTensor, kTensor: MPSGraphTensor, name: String?) -> [MPSGraphTensor]"
    },
    {
      "name": "func topKGradient(MPSGraphTensor, input: MPSGraphTensor, k: Int, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func topKGradient(MPSGraphTensor, input: MPSGraphTensor, kTensor: MPSGraphTensor, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func transposeTensor(MPSGraphTensor, dimension: Int, withDimension: Int, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func variable(with: Data, shape: [NSNumber], dataType: MPSDataType, name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func variance(of: MPSGraphTensor, axes: [NSNumber], name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func variance(of: MPSGraphTensor, mean: MPSGraphTensor, axes: [NSNumber], name: String?) -> MPSGraphTensor"
    },
    {
      "name": "func `while`(initialInputs: [MPSGraphTensor], before: MPSGraphWhileBeforeBlock, after: MPSGraphWhileAfterBlock, name: String?) -> [MPSGraphTensor]"
    },
    {
      "name": "class func new() -> Self"
    }
  ],
  "declaration": "class MPSGraph : NSObject",
  "inheritsFrom": [
    "NSObject"
  ]
}