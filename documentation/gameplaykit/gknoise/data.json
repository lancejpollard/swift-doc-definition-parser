{
  "path": "/documentation/gameplaykit/gknoise",
  "type": "Class",
  "name": "GKNoise",
  "desc": "A representation of procedural noise, generated by a noise source, that you can use to process, transform, or combine noise.",
  "items": [
    {
      "name": "init(GKNoiseSource)",
      "desc": "Initializes a noise object with the specified noise source."
    },
    {
      "name": "init(GKNoiseSource, gradientColors: [NSNumber : UIColor])",
      "desc": "Initializes a noise object with the specified noise source, with colors for later use in generating noise textures."
    },
    {
      "name": "init(componentNoises: [GKNoise], selectionNoise: GKNoise)",
      "desc": "Creates a noise object by combining the specified noise objects, using another noise object to select which regions of the output correspond to which input noise."
    },
    {
      "name": "init(componentNoises: [GKNoise], selectionNoise: GKNoise, componentBoundaries: [NSNumber], boundaryBlendDistances: [NSNumber])",
      "desc": "Creates a noise object by combining the specified noise objects, using another noise object and the specified boundaries to select which regions of the output correspond to which input noise."
    },
    {
      "name": "var gradientColors: [NSNumber : UIColor]",
      "desc": "A dictionary mapping noise values to colors for use in colorizing generated noise."
    },
    {
      "name": "func applyAbsoluteValue()",
      "desc": "Replaces all negative values in the noise field with their positive absolute values."
    },
    {
      "name": "func invert()",
      "desc": "Replaces all values in the noise field with their opposite, reversing the range of noise values."
    },
    {
      "name": "func raiseToPower(Double)",
      "desc": "Replaces all values in the noise field by raising each value to the specified power."
    },
    {
      "name": "func clamp(lowerBound: Double, upperBound: Double)",
      "desc": "Replaces values in the noise field outside the specified range with the values at the endpoints of that range."
    },
    {
      "name": "func remapValues(toCurveWithControlPoints: [NSNumber : NSNumber])",
      "desc": "Replaces values in the noise field by mapping them to a curve that passes through the specified control points."
    },
    {
      "name": "func remapValues(toTerracesWithPeaks: [NSNumber], terracesInverted: Bool)",
      "desc": "Replaces values in the noise field by mapping them to a terrace-like curve that passes through the specified control points."
    },
    {
      "name": "func add(GKNoise)",
      "desc": "Replaces values in the noise field by adding them to values from the specified noise object."
    },
    {
      "name": "func multiply(GKNoise)",
      "desc": "Replaces values in the noise field by multiplying them with values from the specified noise object."
    },
    {
      "name": "func raiseToPower(GKNoise)",
      "desc": "Replaces values in the noise field by exponentiating them with values from the specified noise object."
    },
    {
      "name": "func maximum(GKNoise)",
      "desc": "Replaces values in the noise field by choosing the lesser of each value and a corresponding value in the specified noise object."
    },
    {
      "name": "func minimum(GKNoise)",
      "desc": "Replaces values in the noise field by choosing the lesser of each value and a corresponding value in the specified noise object."
    },
    {
      "name": "func displaceWithNoises(x: GKNoise, y: GKNoise, z: GKNoise)",
      "desc": "Replaces values in the noise field by shifting each value along a vector whose x-, y-, and z-components are based on the specified noise objects."
    },
    {
      "name": "func applyTurbulence(frequency: Double, power: Double, roughness: Int32, seed: Int32)",
      "desc": "Replaces values in the noise field by applying a randomized distortion effect."
    },
    {
      "name": "func move(by: vector_double3)",
      "desc": "Translates the entire noise field by the specified x, y, and z offsets."
    },
    {
      "name": "func rotate(by: vector_double3)",
      "desc": "Rotates the entire noise field by the specified x, y, and z angles."
    },
    {
      "name": "func scale(by: vector_double3)",
      "desc": "Scales the entire noise field by the specified x, y, and z factors."
    },
    {
      "name": "init()"
    },
    {
      "name": "func value(atPosition: vector_float2) -> Float"
    }
  ],
  "declaration": "class GKNoise : NSObject",
  "inheritsFrom": [
    "NSObject"
  ]
}