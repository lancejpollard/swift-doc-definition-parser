{
  "path": "/documentation/sirikit/inmediasearch",
  "type": "Class",
  "name": "INMediaSearch",
  "desc": "An object that describes a media type to search for, such as a station name, song name, or album name.",
  "items": [
    {
      "name": "init(mediaType: INMediaItemType, sortOrder: INMediaSortOrder, mediaName: String?, artistName: String?, albumName: String?, genreNames: [String]?, moodNames: [String]?, releaseDate: INDateComponentsRange?, reference: INMediaReference, mediaIdentifier: String?)",
      "desc": "Creates a new media search object with the specified parameters."
    },
    {
      "name": "var genreNames: [String]?",
      "desc": "The media genres to search."
    },
    {
      "name": "var mediaIdentifier: String?",
      "desc": "The unique media identifier to search for."
    },
    {
      "name": "var mediaName: String?",
      "desc": "The name of the media to search for."
    },
    {
      "name": "var mediaType: INMediaItemType",
      "desc": "The type of media to search for."
    },
    {
      "name": "var moodNames: [String]?",
      "desc": "The moods to search for."
    },
    {
      "name": "var reference: INMediaReference",
      "desc": "A reference for the media item to search for."
    },
    {
      "name": "enum INMediaReference",
      "desc": "Constants that describe a reference for a media item."
    },
    {
      "name": "var releaseDate: INDateComponentsRange?",
      "desc": "The release date to search for."
    },
    {
      "name": "var sortOrder: INMediaSortOrder",
      "desc": "The sort order for the found media items."
    },
    {
      "name": "enum INMediaSortOrder",
      "desc": "Constants indicating the sort order for the found media items."
    },
    {
      "name": "var albumName: String?",
      "desc": "The name of the album to search for."
    },
    {
      "name": "var artistName: String?",
      "desc": "The name of the artist to search for."
    }
  ],
  "declaration": "class INMediaSearch : NSObject",
  "inheritsFrom": [
    "NSObject"
  ],
  "conformsTo": [
    "NSCopying",
    "NSSecureCoding"
  ]
}