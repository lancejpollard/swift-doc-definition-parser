{
  "path": "/documentation/sirikit/inshortcut",
  "type": "Enumeration",
  "name": "INShortcut",
  "desc": "An action available in your app that the system may suggest to a user or a user may add to Siri.",
  "items": [
    {
      "name": "init?(intent: INIntent)",
      "desc": "Creates a shortcut with the specified intent."
    },
    {
      "name": "init(userActivity: NSUserActivity)",
      "desc": "Creates a shortcut with the specified user activity."
    },
    {
      "name": "var intent: INIntent?",
      "desc": "The intent that performs the action when invoking the shortcut."
    },
    {
      "name": "var userActivity: NSUserActivity?",
      "desc": "The user activity that defines the action to perform when invoking the shortcut."
    },
    {
      "name": "static func != (INShortcut, INShortcut) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values aren’t equal."
    },
    {
      "name": "static func == (INShortcut, INShortcut) -> Bool",
      "desc": "Compares two shortcuts for equality."
    },
    {
      "name": "var debugDescription: String",
      "desc": "A textual description of the shortcut suitable for debugging."
    },
    {
      "name": "var description: String",
      "desc": "A textual description of the shortcut."
    },
    {
      "name": "class INShortcutReference",
      "desc": "An object representing an action available in your app that the system may suggest to a user or a user may add to Siri."
    },
    {
      "name": "typealias INShortcut.ReferenceType",
      "desc": "An alias for this value type’s equivalent reference type."
    },
    {
      "name": "case intent(INIntent)",
      "desc": "The intent that performs the action when invoking the shortcut."
    },
    {
      "name": "case userActivity(NSUserActivity)",
      "desc": "The user activity that defines the action to perform when invoking the shortcut."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of this value by feeding them into the given hasher."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The computed hash value of the shortcut."
    }
  ],
  "declaration": "enum INShortcut",
  "conformsTo": [
    "CustomDebugStringConvertible",
    "CustomStringConvertible",
    "Equatable",
    "Hashable",
    "ReferenceConvertible"
  ]
}