{
  "path": "/documentation/blockstoragedevicedriverkit/iouserblockstoragedevice",
  "type": "Class",
  "name": "IOUserBlockStorageDevice",
  "desc": "A DriverKit provider object that manages communications with a block storage device.",
  "items": [
    {
      "name": "- init",
      "desc": "Handles the basic initialization of the service."
    },
    {
      "name": "- Start",
      "desc": "Starts the current service and associates it with the specified provider."
    },
    {
      "name": "- Stop",
      "desc": "Stops the service associated with the specified provider."
    },
    {
      "name": "- free",
      "desc": "Performs any final cleanup for the service."
    },
    {
      "name": "- GetVendorString",
      "desc": "Gets a string that identifies the vendor in response to a call from the framework."
    },
    {
      "name": "- GetProductString",
      "desc": "Gets a string that identifies the product in response to a call from the framework."
    },
    {
      "name": "- GetRevisionString",
      "desc": "Gets a string that identifies the current revision in response to a call from the framework."
    },
    {
      "name": "- GetAdditionalInfoString",
      "desc": "Gets a string that provides additional information in response to a call from the framework."
    },
    {
      "name": "- GetDeviceParams",
      "desc": "Gets device parameters in response to a call from the framework."
    },
    {
      "name": "- ReportEjectability",
      "desc": "Returns a Boolean value that indicates whether the media is ejectable, in response to a call from the framework."
    },
    {
      "name": "- ReportRemovability",
      "desc": "Returns a Boolean value that indicates whether the media is removable, in response to a call from the framework."
    },
    {
      "name": "- ReportWriteProtection",
      "desc": "Returns a Boolean value that indicates whether the media is write protected, in response to a call from the framework."
    },
    {
      "name": "- DoAsyncUnmap",
      "desc": "Sends an asynchronous request to the dext to reclaim storage by unmapping."
    },
    {
      "name": "- DoAsyncSynchronize",
      "desc": "Forces the hardware buffer to flush data blocks to the media."
    },
    {
      "name": "- DoAsyncEjectMedia",
      "desc": "Ejects the media."
    },
    {
      "name": "- Complete",
      "desc": "Indicates that the dext completed an asynchronous call."
    },
    {
      "name": "- DoAsyncReadWrite",
      "desc": "Starts an asynchronous read or write operation."
    },
    {
      "name": "- CompleteIO",
      "desc": "Indicates that the dext completed an asynchronous read-write call."
    },
    {
      "name": "- DoAsyncUnmapPriv"
    },
    {
      "name": "- RegisterDext"
    }
  ],
  "declaration": "class IOUserBlockStorageDevice : IOService",
  "inheritsFrom": [
    "IOService"
  ]
}