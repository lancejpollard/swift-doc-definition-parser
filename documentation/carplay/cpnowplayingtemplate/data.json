{
  "path": "/documentation/carplay/cpnowplayingtemplate",
  "type": "Class",
  "name": "CPNowPlayingTemplate",
  "desc": "A shared system template that displays Now Playing information.",
  "items": [
    {
      "name": "class var shared: CPNowPlayingTemplate",
      "desc": "The Now Playing template the system provides."
    },
    {
      "name": "var nowPlayingButtons: [CPNowPlayingButton]",
      "desc": "The Now Playing templateâ€™s playback control buttons."
    },
    {
      "name": "func updateNowPlayingButtons([CPNowPlayingButton])",
      "desc": "Updates the playback control buttons the template displays."
    },
    {
      "name": "class CPNowPlayingButton",
      "desc": "The abstract base class that Now Playing template buttons use."
    },
    {
      "name": "class CPNowPlayingImageButton",
      "desc": "A button that displays an image."
    },
    {
      "name": "class CPNowPlayingAddToLibraryButton",
      "desc": "A button for adding the current playing item to a collection."
    },
    {
      "name": "class CPNowPlayingMoreButton",
      "desc": "A button for presenting more options to the user."
    },
    {
      "name": "class CPNowPlayingPlaybackRateButton",
      "desc": "A button for cycling through the available playback rates."
    },
    {
      "name": "class CPNowPlayingRepeatButton",
      "desc": "A button for cycling through the available repeat modes."
    },
    {
      "name": "class CPNowPlayingShuffleButton",
      "desc": "A button for cycling through the available shuffle modes."
    },
    {
      "name": "var isAlbumArtistButtonEnabled: Bool",
      "desc": "A Boolean value that indicates whether the album and artist string is a button."
    },
    {
      "name": "var isUpNextButtonEnabled: Bool",
      "desc": "A Boolean value that manages the display of the Up Next button."
    },
    {
      "name": "var upNextTitle: String",
      "desc": "The title for the Up Next button."
    },
    {
      "name": "func add(CPNowPlayingTemplateObserver)",
      "desc": "Registers an observer that receives Now Playing template events."
    },
    {
      "name": "func remove(CPNowPlayingTemplateObserver)",
      "desc": "Removes an observer from receiving Now Playing template events."
    },
    {
      "name": "protocol CPNowPlayingTemplateObserver",
      "desc": "The methods for responding to the user interacting with the Now Playing template."
    }
  ],
  "declaration": "class CPNowPlayingTemplate : CPTemplate",
  "inheritsFrom": [
    "CPTemplate"
  ]
}