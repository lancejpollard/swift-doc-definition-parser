{
  "path": "/documentation/uikit/uiimage",
  "type": "Class",
  "name": "UIImage",
  "desc": "An object that manages image data in your app.",
  "items": [
    {
      "name": "init?(named: String, in: Bundle?, compatibleWith: UITraitCollection?)",
      "desc": "Creates an image object using the named image asset that is compatible with the specified trait collection."
    },
    {
      "name": "init?(named: String, in: Bundle?, with: UIImage.Configuration?)",
      "desc": "Creates an image object using the named image asset that is compatible with the specified configuration."
    },
    {
      "name": "init?(named: String)",
      "desc": "Creates an image object from the specified named asset."
    },
    {
      "name": "init(imageLiteralResourceName: String)",
      "desc": "Returns the image object for the specified resource."
    },
    {
      "name": "init?(systemName: String, withConfiguration: UIImage.Configuration?)",
      "desc": "Creates an image object that contains a system symbol image with the specified configuration."
    },
    {
      "name": "init?(systemName: String, compatibleWith: UITraitCollection?)",
      "desc": "Creates an image object that contains a system symbol image appropriate for the specified traits."
    },
    {
      "name": "init?(systemName: String)",
      "desc": "Creates an image object that contains a system symbol image."
    },
    {
      "name": "init?(contentsOfFile: String)",
      "desc": "Initializes and returns the image object with the contents of the specified file."
    },
    {
      "name": "init?(data: Data)",
      "desc": "Initializes and returns the image object with the specified data."
    },
    {
      "name": "init?(data: Data, scale: CGFloat)",
      "desc": "Initializes and returns the image object with the specified data and scale factor."
    },
    {
      "name": "init(cgImage: CGImage)",
      "desc": "Initializes and returns the image object with the specified Quartz image reference."
    },
    {
      "name": "init(cgImage: CGImage, scale: CGFloat, orientation: UIImage.Orientation)",
      "desc": "Initializes and returns an image object with the specified scale and orientation factors."
    },
    {
      "name": "init(ciImage: CIImage)",
      "desc": "Initializes and returns an image object with the specified Core Image object."
    },
    {
      "name": "init(ciImage: CIImage, scale: CGFloat, orientation: UIImage.Orientation)",
      "desc": "Initializes and returns an image object with the specified Core Image object and properties."
    },
    {
      "name": "class func animatedImageNamed(String, duration: TimeInterval) -> UIImage?",
      "desc": "Creates and returns an animated image."
    },
    {
      "name": "class func animatedImage(with: [UIImage], duration: TimeInterval) -> UIImage?",
      "desc": "Creates and returns an animated image from an existing set of images."
    },
    {
      "name": "class func animatedResizableImageNamed(String, capInsets: UIEdgeInsets, duration: TimeInterval) -> UIImage?",
      "desc": "Creates and returns an animated image with end caps."
    },
    {
      "name": "class func animatedResizableImageNamed(String, capInsets: UIEdgeInsets, resizingMode: UIImage.ResizingMode, duration: TimeInterval) -> UIImage?",
      "desc": "Creates and returns an animated image with end caps and a specific resizing mode."
    },
    {
      "name": "func withConfiguration(UIImage.Configuration) -> UIImage",
      "desc": "Returns a new version of the current image, replacing the current configuration attributes with the specified attributes."
    },
    {
      "name": "func applyingSymbolConfiguration(UIImage.SymbolConfiguration) -> UIImage?",
      "desc": "Returns a new version of the current image, applying the specified configuration attributes on top of the current attributes."
    },
    {
      "name": "func imageFlippedForRightToLeftLayoutDirection() -> UIImage",
      "desc": "Returns a new version of the current image that flips horizontally when it’s in a right-to-left layout."
    },
    {
      "name": "func withHorizontallyFlippedOrientation() -> UIImage",
      "desc": "Returns a new version of the image that’s a mirror of the original image."
    },
    {
      "name": "func withRenderingMode(UIImage.RenderingMode) -> UIImage",
      "desc": "Returns a new version of the image that uses the specified rendering mode."
    },
    {
      "name": "func withAlignmentRectInsets(UIEdgeInsets) -> UIImage",
      "desc": "Returns a new version of the image that uses the specified alignment insets."
    },
    {
      "name": "func resizableImage(withCapInsets: UIEdgeInsets) -> UIImage",
      "desc": "Returns a new version of the image with the specified cap insets."
    },
    {
      "name": "func resizableImage(withCapInsets: UIEdgeInsets, resizingMode: UIImage.ResizingMode) -> UIImage",
      "desc": "Returns a new version of the image with the specified cap insets and options."
    },
    {
      "name": "func imageWithoutBaseline() -> UIImage",
      "desc": "Creates a copy of the current image object without any baseline information."
    },
    {
      "name": "func withBaselineOffset(fromBottom: CGFloat) -> UIImage",
      "desc": "Creates a new image with a baseline at the specified offset from the bottom of the image."
    },
    {
      "name": "class UIImage.Configuration",
      "desc": "A configuration object that contains the traits that the system uses when selecting the current image variant."
    },
    {
      "name": "class UIImage.SymbolConfiguration",
      "desc": "An object that contains the specific font, size, style, and weight attributes to apply to a symbol image."
    },
    {
      "name": "class var add: UIImage",
      "desc": "The standard image for indicating the addition of content."
    },
    {
      "name": "class var remove: UIImage",
      "desc": "The standard image for indicating the removal of content."
    },
    {
      "name": "class var actions: UIImage",
      "desc": "The standard image for indicating user-initiated actions."
    },
    {
      "name": "class var checkmark: UIImage",
      "desc": "The standard image for a checkmark on a filled-circle background."
    },
    {
      "name": "class var strokedCheckmark: UIImage",
      "desc": "The standard image for a checkmark on a tinted circle with a white-stroked border."
    },
    {
      "name": "var cgImage: CGImage?",
      "desc": "The underlying Quartz image data."
    },
    {
      "name": "var ciImage: CIImage?",
      "desc": "The underlying Core Image data."
    },
    {
      "name": "var images: [UIImage]?",
      "desc": "The complete array of image objects that compose the animation of an animated object."
    },
    {
      "name": "var imageAsset: UIImageAsset?",
      "desc": "The image asset (if any) for the image."
    },
    {
      "name": "var scale: CGFloat",
      "desc": "The scale factor of the image."
    },
    {
      "name": "var size: CGSize",
      "desc": "The logical dimensions, in points, for the image."
    },
    {
      "name": "var imageOrientation: UIImage.Orientation",
      "desc": "The orientation of the receiver’s image."
    },
    {
      "name": "enum UIImage.Orientation",
      "desc": "Constants that specify the intended display orientation for an image."
    },
    {
      "name": "var flipsForRightToLeftLayoutDirection: Bool",
      "desc": "A Boolean value that indicates whether the image flips in a right-to-left layout."
    },
    {
      "name": "var resizingMode: UIImage.ResizingMode",
      "desc": "The resizing mode of the image."
    },
    {
      "name": "enum UIImage.ResizingMode",
      "desc": "Constants that specify the possible resizing modes for an image."
    },
    {
      "name": "var duration: TimeInterval",
      "desc": "The time interval for displaying an animated image."
    },
    {
      "name": "var capInsets: UIEdgeInsets",
      "desc": "The end-cap insets."
    },
    {
      "name": "var alignmentRectInsets: UIEdgeInsets",
      "desc": "The alignment metadata for positioning the image during layout."
    },
    {
      "name": "var isSymbolImage: Bool",
      "desc": "A Boolean value that indicates whether the image is a symbol."
    },
    {
      "name": "var configuration: UIImage.Configuration?",
      "desc": "The configuration details for the image."
    },
    {
      "name": "var symbolConfiguration: UIImage.SymbolConfiguration?",
      "desc": "The configuration details for a symbol image."
    },
    {
      "name": "var traitCollection: UITraitCollection",
      "desc": "The trait collection that describes the current variant of the image."
    },
    {
      "name": "var baselineOffsetFromBottom: CGFloat?",
      "desc": "The position of the baseline relative to the bottom of the image."
    },
    {
      "name": "var renderingMode: UIImage.RenderingMode",
      "desc": "A setting that determines how the app renders an image."
    },
    {
      "name": "enum UIImage.RenderingMode",
      "desc": "Constants that specify the possible rendering modes for an image."
    },
    {
      "name": "var imageRendererFormat: UIGraphicsImageRendererFormat",
      "desc": "The preferred image renderer format for the image."
    },
    {
      "name": "func withTintColor(UIColor) -> UIImage",
      "desc": "Returns a new version of the current image with the specified tint color."
    },
    {
      "name": "func withTintColor(UIColor, renderingMode: UIImage.RenderingMode) -> UIImage",
      "desc": "Returns a new version of the image with a tint color that uses the specified rendering mode."
    },
    {
      "name": "func draw(at: CGPoint)",
      "desc": "Draws the image at the specified point in the current context."
    },
    {
      "name": "func draw(at: CGPoint, blendMode: CGBlendMode, alpha: CGFloat)",
      "desc": "Draws the entire image at the specified point using the custom compositing options."
    },
    {
      "name": "func draw(in: CGRect)",
      "desc": "Draws the entire image in the specified rectangle, scaling it as necessary to fit."
    },
    {
      "name": "func draw(in: CGRect, blendMode: CGBlendMode, alpha: CGFloat)",
      "desc": "Draws the entire image in the specified rectangle using the specified compositing options."
    },
    {
      "name": "func drawAsPattern(in: CGRect)",
      "desc": "Draws a tiled Quartz pattern using the receiver’s contents as the tile pattern."
    },
    {
      "name": "func jpegData(compressionQuality: CGFloat) -> Data?",
      "desc": "Returns a data object that contains the specified image in JPEG format."
    },
    {
      "name": "func pngData() -> Data?",
      "desc": "Returns a data object that contains the specified image in PNG format."
    },
    {
      "name": "func prepareForDisplay(completionHandler: (UIImage?) -> Void)",
      "desc": "Decodes an image asynchronously and provides a new one for display in views and animations."
    },
    {
      "name": "func prepareThumbnail(of: CGSize, completionHandler: (UIImage?) -> Void)",
      "desc": "Creates a thumbnail image at the specified size asynchronously on a background thread."
    },
    {
      "name": "func preparingForDisplay() -> UIImage?",
      "desc": "Decodes an image synchronously and provides a new one for display in views and animations."
    },
    {
      "name": "func preparingThumbnail(of: CGSize) -> UIImage?",
      "desc": "Returns a new thumbnail image at the specified size."
    }
  ],
  "declaration": "class UIImage : NSObject",
  "inheritsFrom": [
    "NSObject"
  ],
  "conformsTo": [
    "NSItemProviderReading",
    "NSItemProviderWriting",
    "NSSecureCoding",
    "UIAccessibilityIdentification",
    "UIItemProviderPresentationSizeProviding"
  ]
}