{
  "path": "/documentation/uikit/uisplitviewcontroller",
  "type": "Class",
  "name": "UISplitViewController",
  "desc": "A container view controller that implements a hierarchical interface.",
  "items": [
    {
      "name": "init(style: UISplitViewController.Style)",
      "desc": "Creates a split view controller with the specified column style."
    },
    {
      "name": "init(nibName: String?, bundle: Bundle?)",
      "desc": "Creates a split view controller with the nib file in the specified bundle."
    },
    {
      "name": "init?(coder: NSCoder)",
      "desc": "Creates a split view controller from data in an unarchiver."
    },
    {
      "name": "var style: UISplitViewController.Style",
      "desc": "The style that determines the number of columns that the split view interface displays."
    },
    {
      "name": "enum UISplitViewController.Style",
      "desc": "Constants that describe the number of columns the split view interface displays."
    },
    {
      "name": "var delegate: UISplitViewControllerDelegate?",
      "desc": "The delegate you use to manage changes to a split view interface."
    },
    {
      "name": "protocol UISplitViewControllerDelegate",
      "desc": "The methods adopted by the object you use to manage changes to a split view interface."
    },
    {
      "name": "enum UISplitViewController.Column",
      "desc": "Constants that describe the columns within the split view interface."
    },
    {
      "name": "func setViewController(UIViewController?, for: UISplitViewController.Column)",
      "desc": "Presents the provided view controller in the specified column of the split view interface."
    },
    {
      "name": "func viewController(for: UISplitViewController.Column) -> UIViewController?",
      "desc": "Returns the view controller associated with the specified column of the split view interface."
    },
    {
      "name": "var viewControllers: [UIViewController]",
      "desc": "The array of view controllers the split view controller manages."
    },
    {
      "name": "func show(UISplitViewController.Column)",
      "desc": "Presents the view controller in the specified column of the split view interface."
    },
    {
      "name": "func hide(UISplitViewController.Column)",
      "desc": "Dismisses the view controller in the specified column of the split view interface."
    },
    {
      "name": "func show(UIViewController, sender: Any?)",
      "desc": "Presents the specified view controller as the primary view controller in the split view interface."
    },
    {
      "name": "func showDetailViewController(UIViewController, sender: Any?)",
      "desc": "Presents the specified view controller as the secondary view controller of the split view interface."
    },
    {
      "name": "var preferredDisplayMode: UISplitViewController.DisplayMode",
      "desc": "The preferred arrangement of the split view interface."
    },
    {
      "name": "var displayMode: UISplitViewController.DisplayMode",
      "desc": "The current arrangement of the split view interface."
    },
    {
      "name": "var displayModeButtonItem: UIBarButtonItem",
      "desc": "A button that changes the display mode of the split view controller."
    },
    {
      "name": "var presentsWithGesture: Bool",
      "desc": "Specifies whether a hidden view controller can be presented and dismissed using a swipe gesture."
    },
    {
      "name": "var showsSecondaryOnlyButton: Bool",
      "desc": "Specifies whether the secondary view controller shows a button to toggle to and from the secondary-only display mode."
    },
    {
      "name": "enum UISplitViewController.DisplayMode",
      "desc": "Constants that describe the possible arrangements for a split view interface."
    },
    {
      "name": "var displayModeButtonVisibility: UISplitViewController.DisplayModeButtonVisibility"
    },
    {
      "name": "enum UISplitViewController.DisplayModeButtonVisibility"
    },
    {
      "name": "var preferredSplitBehavior: UISplitViewController.SplitBehavior",
      "desc": "The preferred behavior that determines how the child view controllers appear in relation to each other."
    },
    {
      "name": "var splitBehavior: UISplitViewController.SplitBehavior",
      "desc": "The current behavior that determines how the child view controllers appear in relation to each other."
    },
    {
      "name": "enum UISplitViewController.SplitBehavior",
      "desc": "Constants that describe the possible ways that the child view controllers appear in relation to each other."
    },
    {
      "name": "var isCollapsed: Bool",
      "desc": "A Boolean value that indicates whether only one of the child view controllers displays."
    },
    {
      "name": "var preferredPrimaryColumnWidthFraction: CGFloat",
      "desc": "The relative width of the primary view controller’s content."
    },
    {
      "name": "var preferredPrimaryColumnWidth: CGFloat",
      "desc": "The preferred width, in points, of the primary view controller’s content."
    },
    {
      "name": "var primaryColumnWidth: CGFloat",
      "desc": "The width, in points, of the primary view controller’s content."
    },
    {
      "name": "var minimumPrimaryColumnWidth: CGFloat",
      "desc": "The minimum width, in points, for the primary view controller’s content."
    },
    {
      "name": "var maximumPrimaryColumnWidth: CGFloat",
      "desc": "The maximum width, in points, for the primary view controller’s content."
    },
    {
      "name": "var preferredSupplementaryColumnWidthFraction: CGFloat",
      "desc": "The relative width of the supplementary view controller’s content."
    },
    {
      "name": "var preferredSupplementaryColumnWidth: CGFloat",
      "desc": "The preferred width, in points, of the supplementary view controller’s content."
    },
    {
      "name": "var supplementaryColumnWidth: CGFloat",
      "desc": "The width, in points, of the supplementary view controller’s content."
    },
    {
      "name": "var minimumSupplementaryColumnWidth: CGFloat",
      "desc": "The minimum width, in points, for the supplementary view controller’s content."
    },
    {
      "name": "var maximumSupplementaryColumnWidth: CGFloat",
      "desc": "The maximum width, in points, for the supplementary view controller’s content."
    },
    {
      "name": "class let automaticDimension: CGFloat",
      "desc": "The default value to apply to a dimension."
    },
    {
      "name": "var primaryEdge: UISplitViewController.PrimaryEdge",
      "desc": "The side on which the primary view controller sits."
    },
    {
      "name": "enum UISplitViewController.PrimaryEdge",
      "desc": "Constants that indicate the side on which the primary view controller sits."
    },
    {
      "name": "var primaryBackgroundStyle: UISplitViewController.BackgroundStyle",
      "desc": "The background style of the primary view controller."
    },
    {
      "name": "enum UISplitViewController.BackgroundStyle",
      "desc": "Styles that apply a visual effect to the background of a primary view controller."
    }
  ],
  "declaration": "@MainActor class UISplitViewController : UIViewController",
  "inheritsFrom": [
    "UIViewController"
  ]
}