{
  "path": "/documentation/uikit/uisegmentedcontrol",
  "type": "Class",
  "name": "UISegmentedControl",
  "desc": "A horizontal control that consists of multiple segments, each segment functioning as a discrete button.",
  "items": [
    {
      "name": "init(items: [Any]?)",
      "desc": "Creates a segmented control with segments having the given titles or images."
    },
    {
      "name": "init(frame: CGRect, actions: [UIAction])",
      "desc": "Creates a segmented control with the given frame and adds segments for the actions you specify."
    },
    {
      "name": "init(frame: CGRect)",
      "desc": "Creates an empty segmented control with the frame you specify."
    },
    {
      "name": "init?(coder: NSCoder)",
      "desc": "Creates a segmented control with data from an unarchiver."
    },
    {
      "name": "func setImage(UIImage?, forSegmentAt: Int)",
      "desc": "Sets the content of a segment to a given image."
    },
    {
      "name": "func imageForSegment(at: Int) -> UIImage?",
      "desc": "Returns the image for a specific segment."
    },
    {
      "name": "func setTitle(String?, forSegmentAt: Int)",
      "desc": "Sets the title of a segment."
    },
    {
      "name": "func titleForSegment(at: Int) -> String?",
      "desc": "Returns the title of the specified segment."
    },
    {
      "name": "func actionForSegment(at: Int) -> UIAction?",
      "desc": "Fetches the action of the segment at the index you specify, if one exists."
    },
    {
      "name": "func setAction(UIAction, forSegmentAt: Int)",
      "desc": "Sets the action for the segment at the index you specify."
    },
    {
      "name": "var numberOfSegments: Int",
      "desc": "Returns the number of segments the receiver has."
    },
    {
      "name": "func segmentIndex(identifiedBy: UIAction.Identifier) -> Int",
      "desc": "The index of a segment with an action that has an identifier matching the identifier you specify."
    },
    {
      "name": "func insertSegment(action: UIAction, at: Int, animated: Bool)",
      "desc": "Insert a segment with the action you specify at the given index."
    },
    {
      "name": "func insertSegment(with: UIImage?, at: Int, animated: Bool)",
      "desc": "Inserts a segment at the position you specify and gives it an image as content."
    },
    {
      "name": "func insertSegment(withTitle: String?, at: Int, animated: Bool)",
      "desc": "Inserts a segment at the position you specify and gives it a title as content."
    },
    {
      "name": "func removeAllSegments()",
      "desc": "Removes all segments of the segmented control."
    },
    {
      "name": "func removeSegment(at: Int, animated: Bool)",
      "desc": "Removes the segment you specify from the segmented control, optionally animating the transition."
    },
    {
      "name": "var selectedSegmentIndex: Int",
      "desc": "The index number that identifies the selected segment that the user last touched."
    },
    {
      "name": "var isMomentary: Bool",
      "desc": "A Boolean value that determines whether segments in the receiver show selected state."
    },
    {
      "name": "func setEnabled(Bool, forSegmentAt: Int)",
      "desc": "Enables the segment you specify."
    },
    {
      "name": "func isEnabledForSegment(at: Int) -> Bool",
      "desc": "Returns whether the indicated segment is enabled."
    },
    {
      "name": "func setContentOffset(CGSize, forSegmentAt: Int)",
      "desc": "Adjusts the offset for drawing the content (image or text) of the specified segment."
    },
    {
      "name": "func contentOffsetForSegment(at: Int) -> CGSize",
      "desc": "Returns the offset for drawing the content (image or text) of the segment you specify."
    },
    {
      "name": "func setWidth(CGFloat, forSegmentAt: Int)",
      "desc": "Sets the width of the segment at the index you specify."
    },
    {
      "name": "func widthForSegment(at: Int) -> CGFloat",
      "desc": "Returns the width of the segment at the index you specify."
    },
    {
      "name": "var apportionsSegmentWidthsByContent: Bool",
      "desc": "Indicates whether the control attempts to adjust segment widths based on their content widths."
    },
    {
      "name": "var selectedSegmentTintColor: UIColor?",
      "desc": "The color to use for highlighting the currently selected segment."
    },
    {
      "name": "func backgroundImage(for: UIControl.State, barMetrics: UIBarMetrics) -> UIImage?",
      "desc": "Returns the background image for a given state and bar metrics."
    },
    {
      "name": "func setBackgroundImage(UIImage?, for: UIControl.State, barMetrics: UIBarMetrics)",
      "desc": "Sets the background image for given state and bar metrics."
    },
    {
      "name": "func contentPositionAdjustment(forSegmentType: UISegmentedControl.Segment, barMetrics: UIBarMetrics) -> UIOffset",
      "desc": "Returns the positioning offset for a given segment and bar metrics."
    },
    {
      "name": "func setContentPositionAdjustment(UIOffset, forSegmentType: UISegmentedControl.Segment, barMetrics: UIBarMetrics)",
      "desc": "Sets the content positioning offset for a given segment and bar metrics."
    },
    {
      "name": "enum UISegmentedControl.Segment",
      "desc": "Constants for specifying a segment in a control"
    },
    {
      "name": "func dividerImage(forLeftSegmentState: UIControl.State, rightSegmentState: UIControl.State, barMetrics: UIBarMetrics) -> UIImage?",
      "desc": "Returns the divider image used for a given combination of left and right segment states and bar metrics."
    },
    {
      "name": "func setDividerImage(UIImage?, forLeftSegmentState: UIControl.State, rightSegmentState: UIControl.State, barMetrics: UIBarMetrics)",
      "desc": "Sets the divider image to use for a given combination of left and right segment states and bar metrics."
    },
    {
      "name": "func titleTextAttributes(for: UIControl.State) -> [NSAttributedString.Key : Any]?",
      "desc": "Returns the text attributes of the title for a given control state."
    },
    {
      "name": "func setTitleTextAttributes([NSAttributedString.Key : Any]?, for: UIControl.State)",
      "desc": "Sets the text attributes of the title for a given control state."
    }
  ],
  "declaration": "@MainActor class UISegmentedControl : UIControl",
  "inheritsFrom": [
    "UIControl"
  ],
  "conformsTo": [
    "NSCoding",
    "UISpringLoadedInteractionSupporting"
  ]
}