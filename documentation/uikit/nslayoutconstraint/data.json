{
  "path": "/documentation/uikit/nslayoutconstraint",
  "type": "Class",
  "name": "NSLayoutConstraint",
  "desc": "The relationship between two user interface objects that must be satisfied by the constraint-based layout system.",
  "items": [
    {
      "name": "class func constraints(withVisualFormat: String, options: NSLayoutConstraint.FormatOptions, metrics: [String : Any]?, views: [String : Any]) -> [NSLayoutConstraint]",
      "desc": "Creates constraints described by an ASCII art-like visual format string."
    },
    {
      "name": "init(item: Any, attribute: NSLayoutConstraint.Attribute, relatedBy: NSLayoutConstraint.Relation, toItem: Any?, attribute: NSLayoutConstraint.Attribute, multiplier: CGFloat, constant: CGFloat)",
      "desc": "Creates a constraint that defines the relationship between the specified attributes of the given views."
    },
    {
      "name": "var isActive: Bool",
      "desc": "The active state of the constraint."
    },
    {
      "name": "class func activate([NSLayoutConstraint])",
      "desc": "Activates each constraint in the specified array."
    },
    {
      "name": "class func deactivate([NSLayoutConstraint])",
      "desc": "Deactivates each constraint in the specified array."
    },
    {
      "name": "var firstItem: AnyObject?",
      "desc": "The first object participating in the constraint."
    },
    {
      "name": "var firstAttribute: NSLayoutConstraint.Attribute",
      "desc": "The attribute of the first object participating in the constraint."
    },
    {
      "name": "var relation: NSLayoutConstraint.Relation",
      "desc": "The relation between the two attributes in the constraint."
    },
    {
      "name": "var secondItem: AnyObject?",
      "desc": "The second object participating in the constraint."
    },
    {
      "name": "var secondAttribute: NSLayoutConstraint.Attribute",
      "desc": "The attribute of the second object participating in the constraint."
    },
    {
      "name": "var multiplier: CGFloat",
      "desc": "The multiplier applied to the second attribute participating in the constraint."
    },
    {
      "name": "var constant: CGFloat",
      "desc": "The constant added to the multiplied second attribute participating in the constraint."
    },
    {
      "name": "var firstAnchor: NSLayoutAnchor<AnyObject>",
      "desc": "The first anchor that defines the constraint."
    },
    {
      "name": "var secondAnchor: NSLayoutAnchor<AnyObject>?",
      "desc": "The second anchor that defines the constraint."
    },
    {
      "name": "var priority: UILayoutPriority",
      "desc": "The priority of the constraint."
    },
    {
      "name": "struct UILayoutPriority",
      "desc": "The layout priority is used to indicate to the constraint-based layout system which constraints are more important, allowing the system to make appropriate tradeoffs when satisfying the constraints of the system as a whole."
    },
    {
      "name": "static let required: UILayoutPriority",
      "desc": "A required constraint."
    },
    {
      "name": "static let defaultHigh: UILayoutPriority",
      "desc": "The priority level with which a button resists compressing its content."
    },
    {
      "name": "static let defaultLow: UILayoutPriority",
      "desc": "The priority level at which a button hugs its contents horizontally."
    },
    {
      "name": "static let fittingSizeLevel: UILayoutPriority",
      "desc": "The priority level with which the view wants to conform to the target size in that computation."
    },
    {
      "name": "struct NSLayoutConstraint.Priority",
      "desc": "Layout priority used to indicate the relative importance of constraints, allowing Auto Layout to make appropriate tradeoffs when satisfying the constraints of the system as a whole."
    },
    {
      "name": "var identifier: String?",
      "desc": "The name that identifies the constraint."
    },
    {
      "name": "var shouldBeArchived: Bool",
      "desc": "A Boolean value that determines whether the constraint should be archived by its owning view."
    },
    {
      "name": "enum NSLayoutConstraint.Relation",
      "desc": "The relation between the first attribute and the modified second attribute in a constraint."
    },
    {
      "name": "enum NSLayoutConstraint.Attribute",
      "desc": "The part of the objectâ€™s visual representation that should be used to get the value for the constraint."
    },
    {
      "name": "struct NSLayoutConstraint.FormatOptions",
      "desc": "A bit mask that specifies both a part of an interface element to align and a direction for the alignment between two interface elements."
    },
    {
      "name": "enum NSLayoutConstraint.Orientation",
      "desc": "The layout constraint orientation, either horizontal or vertical, that the constraint uses to enforce layout between objects."
    },
    {
      "name": "enum NSLayoutConstraint.Axis",
      "desc": "Keys that specify a horizontal or vertical layout constraint between objects."
    },
    {
      "name": "struct NSEdgeInsets",
      "desc": "A description of the distance between the edges of two rectangles."
    },
    {
      "name": "var NSLAYOUTCONSTRAINT_H: Int32"
    }
  ],
  "declaration": "@MainActor class NSLayoutConstraint : NSObject",
  "inheritsFrom": [
    "NSObject"
  ],
  "conformsTo": [
    "NSAnimatablePropertyContainer"
  ]
}