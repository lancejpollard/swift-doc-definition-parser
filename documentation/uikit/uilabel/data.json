{
  "path": "/documentation/uikit/uilabel",
  "type": "Class",
  "name": "UILabel",
  "desc": "A view that displays one or more lines of informational text.",
  "items": [
    {
      "name": "var text: String?",
      "desc": "The text that the label displays."
    },
    {
      "name": "var attributedText: NSAttributedString?",
      "desc": "The styled text that the label displays."
    },
    {
      "name": "var font: UIFont!",
      "desc": "The font of the text."
    },
    {
      "name": "var textColor: UIColor!",
      "desc": "The color of the text."
    },
    {
      "name": "var textAlignment: NSTextAlignment",
      "desc": "The technique for aligning the text."
    },
    {
      "name": "var lineBreakMode: NSLineBreakMode",
      "desc": "The technique for wrapping and truncating the label’s text."
    },
    {
      "name": "var lineBreakStrategy: NSParagraphStyle.LineBreakStrategy",
      "desc": "The strategy that the system uses to break lines when laying out multiple lines of text."
    },
    {
      "name": "var isEnabled: Bool",
      "desc": "A Boolean value that determines whether the label draws its text in an enabled state."
    },
    {
      "name": "var enablesMarqueeWhenAncestorFocused: Bool",
      "desc": "A Boolean value that determines whether the label scrolls its text while one of its containing views has focus."
    },
    {
      "name": "var showsExpansionTextWhenTruncated: Bool",
      "desc": "A Boolean value that determines whether the full text of the label displays when the pointer hovers over the truncated text."
    },
    {
      "name": "var adjustsFontSizeToFitWidth: Bool",
      "desc": "A Boolean value that determines whether the label reduces the text’s font size to fit the title string into the label’s bounding rectangle."
    },
    {
      "name": "var allowsDefaultTighteningForTruncation: Bool",
      "desc": "A Boolean value that determines whether the label tightens text before truncating."
    },
    {
      "name": "var baselineAdjustment: UIBaselineAdjustment",
      "desc": "An option that controls whether the text's baseline remains fixed when text needs to shrink to fit in the label."
    },
    {
      "name": "var minimumScaleFactor: CGFloat",
      "desc": "The minimum scale factor for the label’s text."
    },
    {
      "name": "var numberOfLines: Int",
      "desc": "The maximum number of lines for rendering text."
    },
    {
      "name": "var highlightedTextColor: UIColor?",
      "desc": "The highlight color for the label’s text."
    },
    {
      "name": "var isHighlighted: Bool",
      "desc": "A Boolean value that determines whether the label draws its text with a highlight."
    },
    {
      "name": "var shadowColor: UIColor?",
      "desc": "The shadow color of the text."
    },
    {
      "name": "var shadowOffset: CGSize",
      "desc": "The shadow offset, in points, for the text."
    },
    {
      "name": "func textRect(forBounds: CGRect, limitedToNumberOfLines: Int) -> CGRect",
      "desc": "Returns the drawing rectangle for the label’s text."
    },
    {
      "name": "func drawText(in: CGRect)",
      "desc": "Draws the label’s text, or its shadow, in the specified rectangle."
    },
    {
      "name": "var preferredMaxLayoutWidth: CGFloat",
      "desc": "The preferred maximum width, in points, for a multiline label."
    },
    {
      "name": "var isUserInteractionEnabled: Bool",
      "desc": "A Boolean value that determines whether the system ignores and removes user events for this label from the event queue."
    },
    {
      "name": "enum NSTextAlignment",
      "desc": "Constants that specify text alignment."
    }
  ],
  "declaration": "@MainActor class UILabel : UIView",
  "inheritsFrom": [
    "UIView"
  ],
  "conformsTo": [
    "NSCoding",
    "UIContentSizeCategoryAdjusting"
  ]
}