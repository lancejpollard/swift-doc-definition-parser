{
  "path": "/documentation/uikit/uitableview",
  "type": "Class",
  "name": "UITableView",
  "desc": "A view that presents data using rows in a single column.",
  "items": [
    {
      "name": "init(frame: CGRect, style: UITableView.Style)",
      "desc": "Creates and returns a table view with the specified frame and style."
    },
    {
      "name": "init?(coder: NSCoder)",
      "desc": "Creates a table view object from data in an unarchiver."
    },
    {
      "name": "var dataSource: UITableViewDataSource?",
      "desc": "The object that acts as the data source of the table view."
    },
    {
      "name": "var prefetchDataSource: UITableViewDataSourcePrefetching?",
      "desc": "The object that acts as the prefetching data source for the table view, receiving notifications of upcoming cell data requirements."
    },
    {
      "name": "protocol UITableViewDataSource",
      "desc": "The methods that an object adopts to manage data and provide cells for a table view."
    },
    {
      "name": "protocol UITableViewDataSourcePrefetching",
      "desc": "A protocol that provides advance warning of the data requirements for a table view, allowing you to start potentially long-running data operations early."
    },
    {
      "name": "func register(UINib?, forCellReuseIdentifier: String)",
      "desc": "Registers a nib object that contains a cell with the table view under a specified identifier."
    },
    {
      "name": "func register(AnyClass?, forCellReuseIdentifier: String)",
      "desc": "Registers a class to use in creating new table cells."
    },
    {
      "name": "func dequeueReusableCell(withIdentifier: String, for: IndexPath) -> UITableViewCell",
      "desc": "Returns a reusable table-view cell object for the specified reuse identifier and adds it to the table."
    },
    {
      "name": "func dequeueReusableCell(withIdentifier: String) -> UITableViewCell?",
      "desc": "Returns a reusable table-view cell object after locating it by its identifier."
    },
    {
      "name": "func register(UINib?, forHeaderFooterViewReuseIdentifier: String)",
      "desc": "Registers a nib object that contains a header or footer with the table view under a specified identifier."
    },
    {
      "name": "func register(AnyClass?, forHeaderFooterViewReuseIdentifier: String)",
      "desc": "Registers a class to use in creating new table header or footer views."
    },
    {
      "name": "func dequeueReusableHeaderFooterView(withIdentifier: String) -> UITableViewHeaderFooterView?",
      "desc": "Returns a reusable header or footer view after locating it by its identifier."
    },
    {
      "name": "var delegate: UITableViewDelegate?",
      "desc": "The object that acts as the delegate of the table view."
    },
    {
      "name": "protocol UITableViewDelegate",
      "desc": "Methods for managing selections, configuring section headers and footers, deleting and reordering cells, and performing other actions in a table view."
    },
    {
      "name": "var style: UITableView.Style",
      "desc": "The style of the table view."
    },
    {
      "name": "enum UITableView.Style",
      "desc": "Constants for the table view styles."
    },
    {
      "name": "var tableHeaderView: UIView?",
      "desc": "The view that displays above the table's content."
    },
    {
      "name": "var tableFooterView: UIView?",
      "desc": "The view that displays below the table's content."
    },
    {
      "name": "var backgroundView: UIView?",
      "desc": "The background view of the table view."
    },
    {
      "name": "var rowHeight: CGFloat",
      "desc": "The default height in points of each row in the table view."
    },
    {
      "name": "var estimatedRowHeight: CGFloat",
      "desc": "The estimated height of rows in the table view."
    },
    {
      "name": "var cellLayoutMarginsFollowReadableWidth: Bool",
      "desc": "A Boolean value that indicates whether the cell margins derive from the width of the readable content guide."
    },
    {
      "name": "var insetsContentViewsToSafeArea: Bool",
      "desc": "A Boolean value that indicates whether the table view adjusts the content views of its cells, headers, and footers to fit within the safe area."
    },
    {
      "name": "var sectionHeaderHeight: CGFloat",
      "desc": "The height of section headers in the table view."
    },
    {
      "name": "var sectionFooterHeight: CGFloat",
      "desc": "The height of section footers in the table view."
    },
    {
      "name": "var estimatedSectionHeaderHeight: CGFloat",
      "desc": "The estimated height of section headers in the table view."
    },
    {
      "name": "var estimatedSectionFooterHeight: CGFloat",
      "desc": "The estimated height of section footers in the table view."
    },
    {
      "name": "var sectionHeaderTopPadding: CGFloat",
      "desc": "The amount of padding above each section header."
    },
    {
      "name": "var separatorStyle: UITableViewCell.SeparatorStyle",
      "desc": "The style for table cells to use as separators."
    },
    {
      "name": "enum UITableViewCell.SeparatorStyle",
      "desc": "The style for cells to use as separators."
    },
    {
      "name": "var separatorColor: UIColor?",
      "desc": "The color of separator rows in the table view."
    },
    {
      "name": "var separatorEffect: UIVisualEffect?",
      "desc": "The effect to apply to table separators."
    },
    {
      "name": "var separatorInset: UIEdgeInsets",
      "desc": "The default inset of cell separators."
    },
    {
      "name": "var separatorInsetReference: UITableView.SeparatorInsetReference",
      "desc": "An indicator of how to interpret the separator inset value."
    },
    {
      "name": "enum UITableView.SeparatorInsetReference",
      "desc": "Constants that indicate how to interpret the separator inset value of a table view."
    },
    {
      "name": "func numberOfRows(inSection: Int) -> Int",
      "desc": "Returns the number of rows (table cells) in a specified section."
    },
    {
      "name": "var numberOfSections: Int",
      "desc": "The number of sections in the table view."
    },
    {
      "name": "func cellForRow(at: IndexPath) -> UITableViewCell?",
      "desc": "Returns the table cell at the index path you specify."
    },
    {
      "name": "func headerView(forSection: Int) -> UITableViewHeaderFooterView?",
      "desc": "Returns the header view for the specified section."
    },
    {
      "name": "func footerView(forSection: Int) -> UITableViewHeaderFooterView?",
      "desc": "Returns the footer view for the specified section."
    },
    {
      "name": "func indexPath(for: UITableViewCell) -> IndexPath?",
      "desc": "Returns an index path that represents the row and section of a specified table-view cell."
    },
    {
      "name": "func indexPathForRow(at: CGPoint) -> IndexPath?",
      "desc": "Returns an index path that identifies the row and section at the specified point."
    },
    {
      "name": "func indexPathsForRows(in: CGRect) -> [IndexPath]?",
      "desc": "Returns an array of index paths, each representing a row that the specified rectangle encloses."
    },
    {
      "name": "var visibleCells: [UITableViewCell]",
      "desc": "The table cells that are visible in the table view."
    },
    {
      "name": "var indexPathsForVisibleRows: [IndexPath]?",
      "desc": "An array of index paths, each identifying a visible row in the table view."
    },
    {
      "name": "var indexPathForSelectedRow: IndexPath?",
      "desc": "An index path that identifies the row and section of the selected row."
    },
    {
      "name": "var indexPathsForSelectedRows: [IndexPath]?",
      "desc": "The index paths that represent the selected rows."
    },
    {
      "name": "func selectRow(at: IndexPath?, animated: Bool, scrollPosition: UITableView.ScrollPosition)",
      "desc": "Selects a row in the table view that an index path identifies, optionally scrolling the row to a location in the table view."
    },
    {
      "name": "func deselectRow(at: IndexPath, animated: Bool)",
      "desc": "Deselects a row that an index path identifies, with an option to animate the deselection."
    },
    {
      "name": "var allowsSelection: Bool",
      "desc": "A Boolean value that determines whether users can select a row."
    },
    {
      "name": "var allowsMultipleSelection: Bool",
      "desc": "A Boolean value that determines whether users can select more than one row outside of editing mode."
    },
    {
      "name": "var allowsSelectionDuringEditing: Bool",
      "desc": "A Boolean value that determines whether users can select cells while the table view is in editing mode."
    },
    {
      "name": "var allowsMultipleSelectionDuringEditing: Bool",
      "desc": "A Boolean value that controls whether users can select more than one cell simultaneously in editing mode."
    },
    {
      "name": "var selectionFollowsFocus: Bool",
      "desc": "A Boolean value that triggers an automatic selection when focus moves to a cell."
    },
    {
      "name": "class let selectionDidChangeNotification: NSNotification.Name",
      "desc": "A notification that posts when the selected row in the posting table view changes."
    },
    {
      "name": "func insertRows(at: [IndexPath], with: UITableView.RowAnimation)",
      "desc": "Inserts rows in the table view at the locations that an array of index paths identifies, with an option to animate the insertion."
    },
    {
      "name": "func deleteRows(at: [IndexPath], with: UITableView.RowAnimation)",
      "desc": "Deletes the rows that an array of index paths identifies, with an option to animate the deletion."
    },
    {
      "name": "func insertSections(IndexSet, with: UITableView.RowAnimation)",
      "desc": "Inserts one or more sections in the table view, with an option to animate the insertion."
    },
    {
      "name": "func deleteSections(IndexSet, with: UITableView.RowAnimation)",
      "desc": "Deletes one or more sections in the table view, with an option to animate the deletion."
    },
    {
      "name": "enum UITableView.RowAnimation",
      "desc": "The type of animation to use when inserting or deleting rows."
    },
    {
      "name": "func moveRow(at: IndexPath, to: IndexPath)",
      "desc": "Moves the row at a specified location to a destination location."
    },
    {
      "name": "func moveSection(Int, toSection: Int)",
      "desc": "Moves a section to a new location in the table view."
    },
    {
      "name": "func performBatchUpdates((() -> Void)?, completion: ((Bool) -> Void)?)",
      "desc": "Animates multiple insert, delete, reload, and move operations as a group."
    },
    {
      "name": "func beginUpdates()",
      "desc": "Begins a series of method calls that insert, delete, or select rows and sections of the table view."
    },
    {
      "name": "func endUpdates()",
      "desc": "Concludes a series of method calls that insert, delete, select, or reload rows and sections of the table view."
    },
    {
      "name": "var sectionIndexMinimumDisplayRowCount: Int",
      "desc": "The number of table rows at which to display the index list on the right edge of the table."
    },
    {
      "name": "var sectionIndexColor: UIColor?",
      "desc": "The color to use for the table view’s index text."
    },
    {
      "name": "var sectionIndexBackgroundColor: UIColor?",
      "desc": "The color to use for the background of the table view’s section index."
    },
    {
      "name": "var sectionIndexTrackingBackgroundColor: UIColor?",
      "desc": "The color to use for the table view’s index background area."
    },
    {
      "name": "class let indexSearch: String",
      "desc": "A constant for adding the magnifying glass icon to the section index of a table view."
    },
    {
      "name": "var hasUncommittedUpdates: Bool",
      "desc": "A Boolean value that indicates whether the table view's appearance contains changes that aren't present in its data source."
    },
    {
      "name": "func reconfigureRows(at: [IndexPath])",
      "desc": "Updates the data for the rows at the index paths you specify, preserving the existing cells for the rows."
    },
    {
      "name": "func reloadData()",
      "desc": "Reloads the rows and sections of the table view."
    },
    {
      "name": "func reloadRows(at: [IndexPath], with: UITableView.RowAnimation)",
      "desc": "Reloads the specified rows using the provided animation effect."
    },
    {
      "name": "func reloadSections(IndexSet, with: UITableView.RowAnimation)",
      "desc": "Reloads the specified sections using the provided animation effect."
    },
    {
      "name": "func reloadSectionIndexTitles()",
      "desc": "Reloads the items in the index bar along the right side of the table view."
    },
    {
      "name": "var dragDelegate: UITableViewDragDelegate?",
      "desc": "The delegate object that manages the dragging of items from the table view."
    },
    {
      "name": "protocol UITableViewDragDelegate",
      "desc": "The interface for initiating drags from a table view."
    },
    {
      "name": "var hasActiveDrag: Bool",
      "desc": "A Boolean value that indicates whether the table view is currently tracking a drag session."
    },
    {
      "name": "var dragInteractionEnabled: Bool",
      "desc": "A Boolean value that indicates whether the table view supports dragging content."
    },
    {
      "name": "var dropDelegate: UITableViewDropDelegate?",
      "desc": "The delegate object that manages the dropping of content into the table view."
    },
    {
      "name": "protocol UITableViewDropDelegate",
      "desc": "The interface for handling drops in a table view."
    },
    {
      "name": "var hasActiveDrop: Bool",
      "desc": "A Boolean value that indicates whether the table view is currently tracking a drop session."
    },
    {
      "name": "func scrollToRow(at: IndexPath, at: UITableView.ScrollPosition, animated: Bool)",
      "desc": "Scrolls through the table view until a row that an index path identifies is at a particular location on the screen."
    },
    {
      "name": "func scrollToNearestSelectedRow(at: UITableView.ScrollPosition, animated: Bool)",
      "desc": "Scrolls the table view so that the selected row nearest to a specified position in the table view is at that position."
    },
    {
      "name": "enum UITableView.ScrollPosition",
      "desc": "The position in the table view (top, middle, bottom) to scroll a specified row to."
    },
    {
      "name": "func setEditing(Bool, animated: Bool)",
      "desc": "Toggles the table view into and out of editing mode."
    },
    {
      "name": "var isEditing: Bool",
      "desc": "A Boolean value that determines whether the table view is in editing mode."
    },
    {
      "name": "func rect(forSection: Int) -> CGRect",
      "desc": "Returns the drawing area for a specified section of the table view."
    },
    {
      "name": "func rectForRow(at: IndexPath) -> CGRect",
      "desc": "Returns the drawing area for a row that an index path identifies."
    },
    {
      "name": "func rectForFooter(inSection: Int) -> CGRect",
      "desc": "Returns the drawing area for the footer of the specified section."
    },
    {
      "name": "func rectForHeader(inSection: Int) -> CGRect",
      "desc": "Returns the drawing area for the header of the specified section."
    },
    {
      "name": "var remembersLastFocusedIndexPath: Bool",
      "desc": "A Boolean value that indicates whether the table view automatically returns the focus to the cell at the last focused index path."
    },
    {
      "name": "var allowsFocus: Bool"
    },
    {
      "name": "var allowsFocusDuringEditing: Bool"
    },
    {
      "name": "var contextMenuInteraction: UIContextMenuInteraction?"
    },
    {
      "name": "var fillerRowHeight: CGFloat",
      "desc": "The height for empty rows that fill the table view."
    },
    {
      "name": "var isPrefetchingEnabled: Bool",
      "desc": "A Boolean value that indicates whether to allow cell and data prefetching."
    }
  ],
  "declaration": "@MainActor class UITableView : UIScrollView",
  "inheritsFrom": [
    "UIScrollView"
  ],
  "conformsTo": [
    "NSCoding",
    "UIDataSourceTranslating",
    "UISpringLoadedInteractionSupporting"
  ]
}