{
  "path": "/documentation/uikit/uislider",
  "type": "Class",
  "name": "UISlider",
  "desc": "A control for selecting a single value from a continuous range of values.",
  "items": [
    {
      "name": "var value: Float",
      "desc": "The slider’s current value."
    },
    {
      "name": "func setValue(Float, animated: Bool)",
      "desc": "Sets the slider’s current value, allowing you to animate the change visually."
    },
    {
      "name": "var minimumValue: Float",
      "desc": "The minimum value of the slider."
    },
    {
      "name": "var maximumValue: Float",
      "desc": "The maximum value of the slider."
    },
    {
      "name": "var isContinuous: Bool",
      "desc": "A Boolean value indicating whether changes in the slider’s value generate continuous update events."
    },
    {
      "name": "var behavioralStyle: UIBehavioralStyle",
      "desc": "The style that determines how the slider behaves."
    },
    {
      "name": "var preferredBehavioralStyle: UIBehavioralStyle",
      "desc": "The preferred behavioral style."
    },
    {
      "name": "enum UIBehavioralStyle",
      "desc": "Constants that indicate how a control behaves in apps built with Mac Catalyst."
    },
    {
      "name": "var minimumValueImage: UIImage?",
      "desc": "The image that represents the slider’s minimum value."
    },
    {
      "name": "var maximumValueImage: UIImage?",
      "desc": "The image representing the slider’s maximum value."
    },
    {
      "name": "var minimumTrackTintColor: UIColor?",
      "desc": "The color used to tint the default minimum track images."
    },
    {
      "name": "var currentMinimumTrackImage: UIImage?",
      "desc": "The minimum track image currently being used to render the slider."
    },
    {
      "name": "func minimumTrackImage(for: UIControl.State) -> UIImage?",
      "desc": "Returns the minimum track image associated with the specified control state."
    },
    {
      "name": "func setMinimumTrackImage(UIImage?, for: UIControl.State)",
      "desc": "Assigns a minimum track image to the specified control states."
    },
    {
      "name": "var maximumTrackTintColor: UIColor?",
      "desc": "The color used to tint the default maximum track images."
    },
    {
      "name": "var currentMaximumTrackImage: UIImage?",
      "desc": "Contains the maximum track image currently being used to render the slider."
    },
    {
      "name": "func maximumTrackImage(for: UIControl.State) -> UIImage?",
      "desc": "Returns the maximum track image associated with the specified control state."
    },
    {
      "name": "func setMaximumTrackImage(UIImage?, for: UIControl.State)",
      "desc": "Assigns a maximum track image to the specified control states."
    },
    {
      "name": "var thumbTintColor: UIColor?",
      "desc": "The color used to tint the default thumb images."
    },
    {
      "name": "var currentThumbImage: UIImage?",
      "desc": "The thumb image currently being used to render the slider."
    },
    {
      "name": "func thumbImage(for: UIControl.State) -> UIImage?",
      "desc": "Returns the thumb image associated with the specified control state."
    },
    {
      "name": "func setThumbImage(UIImage?, for: UIControl.State)",
      "desc": "Assigns a thumb image to the specified control states."
    },
    {
      "name": "func maximumValueImageRect(forBounds: CGRect) -> CGRect",
      "desc": "Returns the drawing rectangle for the maximum value image."
    },
    {
      "name": "func minimumValueImageRect(forBounds: CGRect) -> CGRect",
      "desc": "Returns the drawing rectangle for the minimum value image."
    },
    {
      "name": "func trackRect(forBounds: CGRect) -> CGRect",
      "desc": "Returns the drawing rectangle for the slider’s track."
    },
    {
      "name": "func thumbRect(forBounds: CGRect, trackRect: CGRect, value: Float) -> CGRect",
      "desc": "Returns the drawing rectangle for the slider’s thumb image."
    }
  ],
  "declaration": "@MainActor class UISlider : UIControl",
  "inheritsFrom": [
    "UIControl"
  ],
  "conformsTo": [
    "NSCoding"
  ]
}