{
  "path": "/documentation/uikit/uibutton/configuration",
  "type": "Structure",
  "name": "UIButton.Configuration",
  "desc": "A configuration that specifies the appearance and behavior of a button and its contents.",
  "items": [
    {
      "name": "static func plain() -> UIButton.Configuration",
      "desc": "Creates a configuration for a button with a transparent background."
    },
    {
      "name": "static func filled() -> UIButton.Configuration",
      "desc": "Creates a configuration for a button with a background filled with the button’s tint color."
    },
    {
      "name": "static func gray() -> UIButton.Configuration",
      "desc": "Creates a configuration for a button with a gray background."
    },
    {
      "name": "static func tinted() -> UIButton.Configuration",
      "desc": "Creates a configuration for a button with a tinted background color."
    },
    {
      "name": "func updated(for: UIButton) -> UIButton.Configuration",
      "desc": "Returns a copy of the configuration, updated for the given button."
    },
    {
      "name": "var title: String?",
      "desc": "The text of the title label the button displays."
    },
    {
      "name": "var subtitle: String?",
      "desc": "The text the subtitle label of the button displays."
    },
    {
      "name": "var attributedTitle: AttributedString?",
      "desc": "The text and style attributes for the button’s title label."
    },
    {
      "name": "var attributedSubtitle: AttributedString?",
      "desc": "The text and style attributes for the button’s subtitle label."
    },
    {
      "name": "var titleTextAttributesTransformer: UIConfigurationTextAttributesTransformer?",
      "desc": "A structure to update the attributed title when the button state changes."
    },
    {
      "name": "var subtitleTextAttributesTransformer: UIConfigurationTextAttributesTransformer?",
      "desc": "A structure to update the attributed subtitle when the button state changes."
    },
    {
      "name": "struct UIConfigurationTextAttributesTransformer",
      "desc": "Defines a text transformation that can affect the visual appearance of a string."
    },
    {
      "name": "var titlePadding: CGFloat",
      "desc": "The distance between the title and subtitle labels."
    },
    {
      "name": "var titleAlignment: UIButton.Configuration.TitleAlignment",
      "desc": "The text alignment the button uses to lay out the title and subtitle."
    },
    {
      "name": "enum UIButton.Configuration.TitleAlignment",
      "desc": "Specifies how to align a button’s title and subtitle."
    },
    {
      "name": "var image: UIImage?",
      "desc": "The foreground image the button displays."
    },
    {
      "name": "var imagePadding: CGFloat",
      "desc": "The distance between the button’s image and text."
    },
    {
      "name": "var showsActivityIndicator: Bool",
      "desc": "A Boolean value that determines whether the button displays an activity indicator instead of an image."
    },
    {
      "name": "var imagePlacement: NSDirectionalRectEdge",
      "desc": "The edge against which the button places the image."
    },
    {
      "name": "var imageColorTransformer: UIConfigurationColorTransformer?",
      "desc": "A block that transforms the image color when the button state changes."
    },
    {
      "name": "var preferredSymbolConfigurationForImage: UIImage.SymbolConfiguration?",
      "desc": "A requested configuration object for the button symbol image."
    },
    {
      "name": "var buttonSize: UIButton.Configuration.Size",
      "desc": "A size that requests a preferred size for the button."
    },
    {
      "name": "var contentInsets: NSDirectionalEdgeInsets",
      "desc": "The distance from the button’s content area to its bounds."
    },
    {
      "name": "enum UIButton.Configuration.Size",
      "desc": "A predefined size for button elements."
    },
    {
      "name": "var baseBackgroundColor: UIColor?",
      "desc": "The untransformed color for background views."
    },
    {
      "name": "var baseForegroundColor: UIColor?",
      "desc": "The untransformed color for foreground views."
    },
    {
      "name": "var background: UIBackgroundConfiguration",
      "desc": "The configuration to customize the button background."
    },
    {
      "name": "var cornerStyle: UIButton.Configuration.CornerStyle",
      "desc": "The button style that controls the display behavior of the background corner radius."
    },
    {
      "name": "enum UIButton.Configuration.CornerStyle",
      "desc": "Settings that determine the appearance of the background corner radius."
    },
    {
      "name": "var macIdiomStyle: UIButton.Configuration.MacIdiomStyle",
      "desc": "The style to use when this button appears in macOS."
    },
    {
      "name": "enum UIButton.Configuration.MacIdiomStyle",
      "desc": "The button style your app uses when running in macOS."
    },
    {
      "name": "static func == (UIButton.Configuration, UIButton.Configuration) -> Bool",
      "desc": "Indicates whether two button configurations are equal."
    },
    {
      "name": "static func != (UIButton.Configuration, UIButton.Configuration) -> Bool",
      "desc": "Indicates whether two button configurations aren’t equal."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of the button configuration by feeding them into the given hash function."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value of the configuration."
    },
    {
      "name": "var activityIndicatorColorTransformer: UIConfigurationColorTransformer?"
    },
    {
      "name": "var automaticallyUpdateForSelection: Bool"
    },
    {
      "name": "func setDefaultContentInsets()"
    },
    {
      "name": "static func bordered() -> UIButton.Configuration"
    },
    {
      "name": "static func borderedProminent() -> UIButton.Configuration"
    },
    {
      "name": "static func borderedTinted() -> UIButton.Configuration"
    },
    {
      "name": "static func borderless() -> UIButton.Configuration"
    }
  ],
  "declaration": "struct Configuration",
  "conformsTo": [
    "Hashable"
  ]
}