{
  "path": "/documentation/uikit/uisearchbar",
  "type": "Class",
  "name": "UISearchBar",
  "desc": "A specialized view for receiving search-related information from the user.",
  "items": [
    {
      "name": "init()",
      "desc": "Initializes the search bar to its default state."
    },
    {
      "name": "init?(coder: NSCoder)",
      "desc": "Creates a search bar from data in a given unarchiver."
    },
    {
      "name": "init(frame: CGRect)",
      "desc": "Creates a search bar with a specified frame."
    },
    {
      "name": "var delegate: UISearchBarDelegate?",
      "desc": "The search bar’s delegate object."
    },
    {
      "name": "protocol UISearchBarDelegate",
      "desc": "A collection of optional methods that you implement to make a search bar control functional."
    },
    {
      "name": "var placeholder: String?",
      "desc": "The string that is displayed when there is no other text in the text field."
    },
    {
      "name": "var prompt: String?",
      "desc": "A single line of text displayed at the top of the search bar."
    },
    {
      "name": "var text: String?",
      "desc": "The current or starting search text."
    },
    {
      "name": "var searchTextField: UISearchTextField",
      "desc": "The text field that the user enters a search query into."
    },
    {
      "name": "var barTintColor: UIColor?",
      "desc": "The tint color to apply to the search bar background."
    },
    {
      "name": "var searchBarStyle: UISearchBar.Style",
      "desc": "A search bar style that specifies the search bar’s appearance."
    },
    {
      "name": "enum UISearchBar.Style",
      "desc": "Specifies whether the search bar has a background."
    },
    {
      "name": "var tintColor: UIColor!",
      "desc": "The tint color to apply to key elements in the search bar."
    },
    {
      "name": "var isTranslucent: Bool",
      "desc": "A Boolean value that indicates whether the search bar is translucent (true) or not (false)."
    },
    {
      "name": "var barStyle: UIBarStyle",
      "desc": "A bar style that specifies the search bar’s appearance."
    },
    {
      "name": "enum UIBarStyle",
      "desc": "Defines the stylistic appearance of different types of views."
    },
    {
      "name": "var inputAssistantItem: UITextInputAssistantItem",
      "desc": "The input assistant to use for configuring the keyboard’s shortcuts bar."
    },
    {
      "name": "var showsBookmarkButton: Bool",
      "desc": "A Boolean value indicating whether the bookmark button is displayed."
    },
    {
      "name": "var showsCancelButton: Bool",
      "desc": "A Boolean value indicating whether the cancel button is displayed."
    },
    {
      "name": "func setShowsCancelButton(Bool, animated: Bool)",
      "desc": "Sets the display state of the cancel button optionally with animation."
    },
    {
      "name": "var showsSearchResultsButton: Bool",
      "desc": "A Boolean value indicating whether the search results button is displayed."
    },
    {
      "name": "var isSearchResultsButtonSelected: Bool",
      "desc": "A Boolean value indicating whether the search results button is selected."
    },
    {
      "name": "var backgroundImage: UIImage?",
      "desc": "The background image for the search bar."
    },
    {
      "name": "func backgroundImage(for: UIBarPosition, barMetrics: UIBarMetrics) -> UIImage?",
      "desc": "Returns the image used for the background in a given position and with given metrics."
    },
    {
      "name": "func setBackgroundImage(UIImage?, for: UIBarPosition, barMetrics: UIBarMetrics)",
      "desc": "Sets the image to use for the background in a given position and with given metrics."
    },
    {
      "name": "func image(for: UISearchBar.Icon, state: UIControl.State) -> UIImage?",
      "desc": "Returns the image for a given search bar icon type and control state."
    },
    {
      "name": "func setImage(UIImage?, for: UISearchBar.Icon, state: UIControl.State)",
      "desc": "Sets the image for a given search bar icon type and control state."
    },
    {
      "name": "func positionAdjustment(for: UISearchBar.Icon) -> UIOffset",
      "desc": "Returns the position adjustment for a given icon."
    },
    {
      "name": "func setPositionAdjustment(UIOffset, for: UISearchBar.Icon)",
      "desc": "Returns the position adjustment for a given icon."
    },
    {
      "name": "var inputAccessoryView: UIView?",
      "desc": "A custom input accessory view for the keyboard of the search bar."
    },
    {
      "name": "func searchFieldBackgroundImage(for: UIControl.State) -> UIImage?",
      "desc": "Returns the search text field image for a given state."
    },
    {
      "name": "func setSearchFieldBackgroundImage(UIImage?, for: UIControl.State)",
      "desc": "Sets the search text field image for a given state."
    },
    {
      "name": "var searchFieldBackgroundPositionAdjustment: UIOffset",
      "desc": "The offset of the search text field background in the search bar."
    },
    {
      "name": "var searchTextPositionAdjustment: UIOffset",
      "desc": "The offset of the text within the search text field background."
    },
    {
      "name": "var scopeButtonTitles: [String]?",
      "desc": "An array of strings indicating the titles of the scope buttons."
    },
    {
      "name": "var selectedScopeButtonIndex: Int",
      "desc": "The index of the selected scope button."
    },
    {
      "name": "var showsScopeBar: Bool",
      "desc": "Specifies whether the scope bar is displayed."
    },
    {
      "name": "func setShowsScope(Bool, animated: Bool)",
      "desc": "Specifies whether the scope bar is displayed, optionally using an animation."
    },
    {
      "name": "var scopeBarBackgroundImage: UIImage?",
      "desc": "The background image for the scope bar."
    },
    {
      "name": "func scopeBarButtonBackgroundImage(for: UIControl.State) -> UIImage?",
      "desc": "Returns the background image for the scope bar button in a given state."
    },
    {
      "name": "func setScopeBarButtonBackgroundImage(UIImage?, for: UIControl.State)",
      "desc": "Sets the background image for the scope bar button in a given state."
    },
    {
      "name": "func scopeBarButtonDividerImage(forLeftSegmentState: UIControl.State, rightSegmentState: UIControl.State) -> UIImage?",
      "desc": "Returns the divider image to use for a given combination of left and right segment states."
    },
    {
      "name": "func setScopeBarButtonDividerImage(UIImage?, forLeftSegmentState: UIControl.State, rightSegmentState: UIControl.State)",
      "desc": "Sets the divider image to use for a given combination of left and right segment states."
    },
    {
      "name": "func scopeBarButtonTitleTextAttributes(for: UIControl.State) -> [NSAttributedString.Key : Any]?",
      "desc": "Returns the text attributes for the search bar’s button’s title string for a given state."
    },
    {
      "name": "func setScopeBarButtonTitleTextAttributes([NSAttributedString.Key : Any]?, for: UIControl.State)",
      "desc": "Sets the text attributes for the search bar’ button’s title string for a given state."
    },
    {
      "name": "enum UISearchBar.Icon",
      "desc": "Constants to identify the icons used in the search bar."
    }
  ],
  "declaration": "@MainActor class UISearchBar : UIView",
  "inheritsFrom": [
    "UIView"
  ],
  "conformsTo": [
    "UIBarPositioning",
    "UITextInputTraits"
  ]
}