{
  "path": "/documentation/uikit/uibezierpath",
  "type": "Class",
  "name": "UIBezierPath",
  "desc": "A path that consists of straight and curved line segments that you can render in your custom views.",
  "items": [
    {
      "name": "init(rect: CGRect)",
      "desc": "Creates and returns a new Bézier path object with a rectangular path."
    },
    {
      "name": "init(ovalIn: CGRect)",
      "desc": "Creates and returns a new Bézier path object with an inscribed oval path in the specified rectangle."
    },
    {
      "name": "init(roundedRect: CGRect, cornerRadius: CGFloat)",
      "desc": "Creates and returns a new Bézier path object with a rounded rectangular path."
    },
    {
      "name": "init(roundedRect: CGRect, byRoundingCorners: UIRectCorner, cornerRadii: CGSize)",
      "desc": "Creates and returns a new Bézier path object with a rectangular path rounded at the specified corners."
    },
    {
      "name": "init(arcCenter: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool)",
      "desc": "Creates and returns a new Bézier path object with an arc of a circle."
    },
    {
      "name": "init(cgPath: CGPath)",
      "desc": "Creates and returns a new Bézier path object with the contents of a Core Graphics path."
    },
    {
      "name": "func reversing() -> UIBezierPath",
      "desc": "Creates and returns a new Bézier path object with the reversed contents of the current path."
    },
    {
      "name": "init()",
      "desc": "Creates and returns an empty path object."
    },
    {
      "name": "init?(coder: NSCoder)",
      "desc": "Creates a Bézier path object from data in an unarchiver."
    },
    {
      "name": "func move(to: CGPoint)",
      "desc": "Moves the path‘s current point to the specified location."
    },
    {
      "name": "func addLine(to: CGPoint)",
      "desc": "Appends a straight line to the path."
    },
    {
      "name": "func addArc(withCenter: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool)",
      "desc": "Appends an arc to the path."
    },
    {
      "name": "func addCurve(to: CGPoint, controlPoint1: CGPoint, controlPoint2: CGPoint)",
      "desc": "Appends a cubic Bézier curve to the path."
    },
    {
      "name": "func addQuadCurve(to: CGPoint, controlPoint: CGPoint)",
      "desc": "Appends a quadratic Bézier curve to the path."
    },
    {
      "name": "func close()",
      "desc": "Closes the most recent subpath."
    },
    {
      "name": "func removeAllPoints()",
      "desc": "Removes all points from the path, effectively deleting all subpaths."
    },
    {
      "name": "func append(UIBezierPath)",
      "desc": "Appends the contents of the specified path object to the path."
    },
    {
      "name": "var cgPath: CGPath",
      "desc": "The Core Graphics representation of the path."
    },
    {
      "name": "var currentPoint: CGPoint",
      "desc": "The current point in the graphics path."
    },
    {
      "name": "var lineWidth: CGFloat",
      "desc": "The line width of the path."
    },
    {
      "name": "var lineCapStyle: CGLineCap",
      "desc": "The shape of the endpoints of a stroked path."
    },
    {
      "name": "var lineJoinStyle: CGLineJoin",
      "desc": "The shape of the joints between connected segments of a stroked path."
    },
    {
      "name": "var miterLimit: CGFloat",
      "desc": "The limiting value that helps avoid spikes at junctions between connected line segments."
    },
    {
      "name": "var flatness: CGFloat",
      "desc": "The factor that determines the rendering accuracy for curved path segments."
    },
    {
      "name": "var usesEvenOddFillRule: Bool",
      "desc": "A Boolean value that indicates whether the even-odd winding rule is in use for drawing paths."
    },
    {
      "name": "func setLineDash(UnsafePointer<CGFloat>?, count: Int, phase: CGFloat)",
      "desc": "Sets the line-stroking pattern for the path."
    },
    {
      "name": "func getLineDash(UnsafeMutablePointer<CGFloat>?, count: UnsafeMutablePointer<Int>?, phase: UnsafeMutablePointer<CGFloat>?)",
      "desc": "Retrieves the line-stroking pattern for the path."
    },
    {
      "name": "func fill()",
      "desc": "Uses the current drawing properties to paint the region that the path encloses."
    },
    {
      "name": "func fill(with: CGBlendMode, alpha: CGFloat)",
      "desc": "Uses the specified blend mode and transparency values to paint the region that the path encloses."
    },
    {
      "name": "func stroke()",
      "desc": "Draws a line along the path using the current drawing properties."
    },
    {
      "name": "func stroke(with: CGBlendMode, alpha: CGFloat)",
      "desc": "Draws a line along the path using the specified blend mode and transparency values."
    },
    {
      "name": "func addClip()",
      "desc": "Uses the clipping path of the current graphics context to intersect the region that the path encloses, and makes the resulting shape the current clipping path."
    },
    {
      "name": "func contains(CGPoint) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the specified point is within the region that the path encloses."
    },
    {
      "name": "var isEmpty: Bool",
      "desc": "A Boolean value that indicates whether the path has any valid elements."
    },
    {
      "name": "var bounds: CGRect",
      "desc": "The bounding rectangle of the path."
    },
    {
      "name": "func apply(CGAffineTransform)",
      "desc": "Transforms all points in the path using the specified affine transform matrix."
    },
    {
      "name": "struct UIRectCorner",
      "desc": "The corners of a rectangle."
    }
  ],
  "declaration": "class UIBezierPath : NSObject",
  "inheritsFrom": [
    "NSObject"
  ],
  "conformsTo": [
    "NSCopying",
    "NSSecureCoding"
  ]
}