{
  "path": "/documentation/avfoundation/avcaption",
  "type": "Class",
  "name": "AVCaption",
  "desc": "An object that represents text to present over a time range.",
  "items": [
    {
      "name": "init(String, timeRange: CMTimeRange)",
      "desc": "Creates a caption that contains text and a time range."
    },
    {
      "name": "var text: String",
      "desc": "The caption text."
    },
    {
      "name": "var timeRange: CMTimeRange",
      "desc": "The time range over which the system presents the caption."
    },
    {
      "name": "var region: AVCaptionRegion?",
      "desc": "The region in which the caption exists."
    },
    {
      "name": "func fontStyle(at: String.Index) -> (AVCaption.FontStyle, Range<String.Index>)",
      "desc": "Returns the font style and range at the index position."
    },
    {
      "name": "enum AVCaption.FontStyle",
      "desc": "Font styles for caption text."
    },
    {
      "name": "func fontWeight(at: String.Index) -> (AVCaption.FontWeight, Range<String.Index>)",
      "desc": "Returns the font weight and range at the index position."
    },
    {
      "name": "enum AVCaption.FontWeight",
      "desc": "Font weights for a caption."
    },
    {
      "name": "func decoration(at: String.Index) -> (AVCaption.Decoration, Range<String.Index>)",
      "desc": "Returns the text decoration at the index position."
    },
    {
      "name": "struct AVCaption.Decoration",
      "desc": "Text decorations for caption text."
    },
    {
      "name": "func textColor(at: String.Index) -> (CGColor?, Range<String.Index>)",
      "desc": "Returns the text color at the index position."
    },
    {
      "name": "func backgroundColor(at: String.Index) -> (CGColor?, Range<String.Index>)",
      "desc": "Returns the background color at the index position."
    },
    {
      "name": "var textAlignment: AVCaption.TextAlignment",
      "desc": "The alignment for the caption text."
    },
    {
      "name": "enum AVCaption.TextAlignment",
      "desc": "Text alignment options for a caption."
    },
    {
      "name": "var animation: AVCaption.Animation",
      "desc": "The animation that the system applies to this caption."
    },
    {
      "name": "enum AVCaption.Animation",
      "desc": "Animation options for a caption."
    },
    {
      "name": "func ruby(at: String.Index) -> (AVCaption.Ruby?, Range<String.Index>)",
      "desc": "Returns the ruby text at the index position."
    },
    {
      "name": "class AVCaption.Ruby",
      "desc": "An object that presents ruby characters."
    },
    {
      "name": "func textCombine(at: String.Index) -> (AVCaption.TextCombine, Range<String.Index>)",
      "desc": "Returns the text combine at the index position."
    },
    {
      "name": "enum AVCaption.TextCombine",
      "desc": "The captionâ€™s supported rendering policy options."
    }
  ],
  "declaration": "class AVCaption : NSObject",
  "inheritsFrom": [
    "NSObject"
  ],
  "conformsTo": [
    "NSCopying",
    "NSMutableCopying",
    "NSSecureCoding"
  ]
}