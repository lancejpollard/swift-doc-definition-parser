{
  "path": "/documentation/avfoundation/avmutablemovietrack",
  "type": "Class",
  "name": "AVMutableMovieTrack",
  "desc": "A mutable track that conforms to the QuickTime or ISO base media file format.",
  "items": [
    {
      "name": "func addTrackAssociation(to: AVMovieTrack, type: AVAssetTrack.AssociationType)",
      "desc": "Creates a specific type of track association between two tracks."
    },
    {
      "name": "func removeTrackAssociation(to: AVMovieTrack, type: AVAssetTrack.AssociationType)",
      "desc": "Removes a specific type of track association between two tracks."
    },
    {
      "name": "var alternateGroupID: Int",
      "desc": "An number that identifies the track as a member of a particular alternate group."
    },
    {
      "name": "var isEnabled: Bool",
      "desc": "A Boolean value that indicates whether the track is enabled by default for presentation."
    },
    {
      "name": "var hasProtectedContent: Bool",
      "desc": "A Boolean value that indicates whether a track contains protected content."
    },
    {
      "name": "var mediaDataStorage: AVMediaDataStorage?",
      "desc": "A storage container for the media data to be added to a track."
    },
    {
      "name": "var isModified: Bool",
      "desc": "A Boolean value that indicates whether a track has been modified."
    },
    {
      "name": "var sampleReferenceBaseURL: URL?",
      "desc": "The base URL for sample references."
    },
    {
      "name": "var timescale: CMTimeScale",
      "desc": "The time scale for tracks that contain the moov atom."
    },
    {
      "name": "var metadata: [AVMetadataItem]",
      "desc": "A array of metadata stored by the track."
    },
    {
      "name": "var naturalSize: CGSize",
      "desc": "The dimensions used to display the visual media data for the track."
    },
    {
      "name": "var preferredTransform: CGAffineTransform",
      "desc": "The transform performed on the visual media data of the track for display purposes."
    },
    {
      "name": "var layer: Int",
      "desc": "The layer level for the visual media of the track."
    },
    {
      "name": "var cleanApertureDimensions: CGSize",
      "desc": "The clean aperture dimension of the track."
    },
    {
      "name": "var productionApertureDimensions: CGSize",
      "desc": "The production aperture dimensions of the track."
    },
    {
      "name": "var encodedPixelsDimensions: CGSize",
      "desc": "The encoded pixels dimensions of the track."
    },
    {
      "name": "var preferredVolume: Float",
      "desc": "The preferred volume for the audible medata data of the track."
    },
    {
      "name": "var languageCode: String?",
      "desc": "A ISO 639-2/T language code that indicates the language associated with the track."
    },
    {
      "name": "var extendedLanguageTag: String?",
      "desc": "An IETF BCP 47 language identifier that identifies the language tag associated with the track."
    },
    {
      "name": "func insertTimeRange(CMTimeRange, of: AVAssetTrack, at: CMTime, copySampleData: Bool)",
      "desc": "Inserts a portion of an asset track into the target movie."
    },
    {
      "name": "func insertEmptyTimeRange(CMTimeRange)",
      "desc": "Adds an empty time range to a track."
    },
    {
      "name": "func removeTimeRange(CMTimeRange)",
      "desc": "Removes the specified time range from a track."
    },
    {
      "name": "func scaleTimeRange(CMTimeRange, toDuration: CMTime)",
      "desc": "Changes the duration of a time range in a track."
    },
    {
      "name": "var preferredMediaChunkAlignment: Int",
      "desc": "The boundary for media chunk alignment for file types that support media chunk alignment."
    },
    {
      "name": "var preferredMediaChunkDuration: CMTime",
      "desc": "The maximum duration to be used for each chunk of sample data written to the file for file types that support media chunk duration."
    },
    {
      "name": "var preferredMediaChunkSize: Int",
      "desc": "The maximum size to be used for each chunk of sample data written to the file for file types that support media chunk duration."
    },
    {
      "name": "func append(CMSampleBuffer, decodeTime: UnsafeMutablePointer<CMTime>?, presentationTime: UnsafeMutablePointer<CMTime>?)",
      "desc": "Appends sample data to a media file and adds sample references for the added data to a track's media sample tables."
    },
    {
      "name": "func insertMediaTimeRange(CMTimeRange, into: CMTimeRange) -> Bool",
      "desc": "Inserts a reference to a media time range into a track."
    },
    {
      "name": "func replaceFormatDescription(CMFormatDescription, with: CMFormatDescription)",
      "desc": "Replaces a receiver's format description with a new format description."
    }
  ],
  "declaration": "class AVMutableMovieTrack : AVMovieTrack",
  "inheritsFrom": [
    "AVMovieTrack"
  ]
}