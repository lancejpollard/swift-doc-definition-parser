{
  "path": "/documentation/avfoundation/avcomposition",
  "type": "Class",
  "name": "AVComposition",
  "desc": "An object that combines and arranges media from multiple assets into a single composite asset that you can play or process.",
  "items": [
    {
      "name": "static var tracks: AVAsyncProperty<Root, [AVCompositionTrack]>",
      "desc": "The tracks that a composition contains."
    },
    {
      "name": "func loadTrack(withTrackID: CMPersistentTrackID, completionHandler: (AVCompositionTrack?, Error?) -> Void)",
      "desc": "Loads a track that contains the specified identifier."
    },
    {
      "name": "func loadTracks(withMediaType: AVMediaType, completionHandler: ([AVCompositionTrack]?, Error?) -> Void)",
      "desc": "Loads tracks that contain media of a specified type."
    },
    {
      "name": "func loadTracks(withMediaCharacteristic: AVMediaCharacteristic, completionHandler: ([AVCompositionTrack]?, Error?) -> Void)",
      "desc": "Loads tracks that contain media of a specified characteristic."
    },
    {
      "name": "var tracks: [AVCompositionTrack]",
      "desc": "The tracks that a composition contains."
    },
    {
      "name": "func track(withTrackID: CMPersistentTrackID) -> AVCompositionTrack?",
      "desc": "Returns a track that contains the specified identifier."
    },
    {
      "name": "func tracks(withMediaType: AVMediaType) -> [AVCompositionTrack]",
      "desc": "Returns tracks that contain media of a specified type."
    },
    {
      "name": "func tracks(withMediaCharacteristic: AVMediaCharacteristic) -> [AVCompositionTrack]",
      "desc": "Returns tracks that contain media of a specified characteristic."
    },
    {
      "name": "var naturalSize: CGSize",
      "desc": "The authored size of the visual portion of the composition."
    },
    {
      "name": "var urlAssetInitializationOptions: [String : Any]",
      "desc": "The options that initialized a compostion."
    }
  ],
  "declaration": "class AVComposition : AVAsset",
  "inheritsFrom": [
    "AVAsset"
  ],
  "conformsTo": [
    "NSMutableCopying"
  ]
}