{
  "path": "/documentation/avfoundation/averror",
  "type": "Structure",
  "name": "AVError",
  "desc": "A structure that defines the errors that the framework generates.",
  "items": [
    {
      "name": "static var errorDomain: String",
      "desc": "The error domain for framework errors."
    },
    {
      "name": "enum AVError.Code",
      "desc": "The enumerated error codes for framework operations."
    },
    {
      "name": "static var airPlayControllerRequiresInternet: AVError.Code",
      "desc": "The AirPlay controller requires an internet connection to function."
    },
    {
      "name": "static var airPlayReceiverRequiresInternet: AVError.Code",
      "desc": "The AirPlay receiver requires an internet connection to function."
    },
    {
      "name": "static var applicationIsNotAuthorized: AVError.Code",
      "desc": "The app isn’t authorized to play media."
    },
    {
      "name": "static var applicationIsNotAuthorizedToUseDevice: AVError.Code",
      "desc": "The user denied this app permission to capture media."
    },
    {
      "name": "static var compositionTrackSegmentsNotContiguous: AVError.Code",
      "desc": "The composition can’t add the source media because it contains gaps."
    },
    {
      "name": "static var contentIsNotAuthorized: AVError.Code",
      "desc": "The user isn’t authorized to play the media."
    },
    {
      "name": "static var contentIsProtected: AVError.Code",
      "desc": "The app isn’t authorized to open the media."
    },
    {
      "name": "static var contentIsUnavailable: AVError.Code",
      "desc": "The captured content is unavailable."
    },
    {
      "name": "static var contentKeyRequestCancelled: AVError.Code",
      "desc": "The app canceled a request to retrieve a content key."
    },
    {
      "name": "static var contentNotUpdated: AVError.Code",
      "desc": "The system couldn’t update the captured content."
    },
    {
      "name": "static var createContentKeyRequestFailed: AVError.Code",
      "desc": "The app couldn’t create a content key request."
    },
    {
      "name": "static var decodeFailed: AVError.Code",
      "desc": "The system failed to decode the media."
    },
    {
      "name": "static var decoderNotFound: AVError.Code",
      "desc": "The system can’t find a suitable decoder for the media."
    },
    {
      "name": "static var decoderTemporarilyUnavailable: AVError.Code",
      "desc": "A suitable decoder for the media is temporarily available."
    },
    {
      "name": "static var deviceAlreadyUsedByAnotherSession: AVError.Code",
      "desc": "Your app can’t access the device because another session is currently using it."
    },
    {
      "name": "static var deviceInUseByAnotherApplication: AVError.Code",
      "desc": "Your app can’t access the device because another app is currently using it."
    },
    {
      "name": "static var deviceLockedForConfigurationByAnotherProcess: AVError.Code",
      "desc": "Your app can’t change device settings because another process currently controls the device."
    },
    {
      "name": "static var deviceNotConnected: AVError.Code",
      "desc": "You app can’t access the device because it isn’t connected."
    },
    {
      "name": "static var deviceWasDisconnected: AVError.Code",
      "desc": "A previously connected device is no longer accessible."
    },
    {
      "name": "static var diskFull: AVError.Code",
      "desc": "Recording stopped because the disk is full."
    },
    {
      "name": "static var displayWasDisabled: AVError.Code",
      "desc": "Screen capture failed because the display was inactive."
    },
    {
      "name": "static var encoderNotFound: AVError.Code",
      "desc": "The requested encoder isn’t found."
    },
    {
      "name": "static var encoderTemporarilyUnavailable: AVError.Code",
      "desc": "An appropriate encoder isn’t currently available."
    },
    {
      "name": "static var exportFailed: AVError.Code",
      "desc": "The requested export operation failed."
    },
    {
      "name": "static var externalPlaybackNotSupportedForAsset: AVError.Code",
      "desc": "The current asset doesn’t support playback."
    },
    {
      "name": "static var failedToLoadMediaData: AVError.Code",
      "desc": "The system can’t load the requested media data."
    },
    {
      "name": "static var failedToParse: AVError.Code",
      "desc": "The system can’t parse the media."
    },
    {
      "name": "static var fileAlreadyExists: AVError.Code",
      "desc": "A file with the same name exists at the location and you can’t overwrite it."
    },
    {
      "name": "static var fileFailedToParse: AVError.Code",
      "desc": "The file is corrupt or in an unrecognized format."
    },
    {
      "name": "static var fileFormatNotRecognized: AVError.Code",
      "desc": "The system can’t open the file because it’s in an unrecognized format."
    },
    {
      "name": "static var fileTypeDoesNotSupportSampleReferences: AVError.Code",
      "desc": "The file type doesn’t support sample references."
    },
    {
      "name": "static var formatUnsupported: AVError.Code",
      "desc": "The current asset format isn’t supported."
    },
    {
      "name": "static var incompatibleAsset: AVError.Code",
      "desc": "You can’t display the media because the device isn’t capable of playing the content."
    },
    {
      "name": "static var incorrectlyConfigured: AVError.Code",
      "desc": "The system is incorrectly configured for the requested operation."
    },
    {
      "name": "static var invalidCompositionTrackSegmentDuration: AVError.Code",
      "desc": "You can’t add the source media because its duration in the destination is invalid."
    },
    {
      "name": "static var invalidCompositionTrackSegmentSourceDuration: AVError.Code",
      "desc": "You can’t add the source media because it has no duration."
    },
    {
      "name": "static var invalidCompositionTrackSegmentSourceStartTime: AVError.Code",
      "desc": "You can’t add the source media because its start time in the destination is invalid."
    },
    {
      "name": "static var invalidOutputURLPathExtension: AVError.Code",
      "desc": "The path extension of the output URL is invalid."
    },
    {
      "name": "static var invalidSourceMedia: AVError.Code",
      "desc": "The system couldn’t read the source media."
    },
    {
      "name": "static var invalidVideoComposition: AVError.Code",
      "desc": "You attempted to present an unsupported video composition."
    },
    {
      "name": "static var malformedDepth: AVError.Code",
      "desc": "The depth data isn’t properly structured."
    },
    {
      "name": "static var maximumDurationReached: AVError.Code",
      "desc": "The recording stopped because it reached the file’s maximum duration."
    },
    {
      "name": "static var maximumFileSizeReached: AVError.Code",
      "desc": "The recording stopped because it reached the file’s maximum size."
    },
    {
      "name": "static var maximumNumberOfSamplesForFileFormatReached: AVError.Code",
      "desc": "The recording stopped because it reached the file’s maximum number of samples."
    },
    {
      "name": "static var maximumStillImageCaptureRequestsExceeded: AVError.Code",
      "desc": "Your app can’t take a photo because there are too many unfinished photo capture requests."
    },
    {
      "name": "static var mediaChanged: AVError.Code",
      "desc": "Recording stopped because the format of the source media changed."
    },
    {
      "name": "static var mediaDiscontinuity: AVError.Code",
      "desc": "Recording stopped because there was an interruption in the input media."
    },
    {
      "name": "static var mediaServicesWereReset: AVError.Code",
      "desc": "The system couldn’t perform the operation because media services were unavailable."
    },
    {
      "name": "static var noCompatibleAlternatesForExternalDisplay: AVError.Code",
      "desc": "The system found no compatible external displays."
    },
    {
      "name": "static var noDataCaptured: AVError.Code",
      "desc": "The recording failed because the system received no data."
    },
    {
      "name": "static var noImageAtTime: AVError.Code",
      "desc": "No image is available in the media at the indicated time."
    },
    {
      "name": "static var noLongerPlayable: AVError.Code",
      "desc": "The asset is no longer playable."
    },
    {
      "name": "static var noSourceTrack: AVError.Code",
      "desc": "The asset doesn’t contain a source track."
    },
    {
      "name": "static var operationCancelled: AVError.Code",
      "desc": "The asset handled a request to cancel loading a property value asynchronously."
    },
    {
      "name": "static var operationInterrupted: AVError.Code",
      "desc": "An interruption occurred while performing a reading or writing operation."
    },
    {
      "name": "static var operationNotAllowed: AVError.Code",
      "desc": "The requested operation isn’t allowed."
    },
    {
      "name": "static var operationNotSupportedForAsset: AVError.Code",
      "desc": "Your app attempted to perform an unsupported operation with the asset."
    },
    {
      "name": "static var operationNotSupportedForPreset: AVError.Code",
      "desc": "Your app attempted to perform an unsupported operation for the current preset."
    },
    {
      "name": "static var outOfMemory: AVError.Code",
      "desc": "The operation couldn’t finish because there isn’t enough memory available to process the media."
    },
    {
      "name": "static var recordingAlreadyInProgress: AVError.Code",
      "desc": "Your app attempted to start recording a movie file while an existing recording is underway."
    },
    {
      "name": "static var referenceForbiddenByReferencePolicy: AVError.Code",
      "desc": "The current reference restrictions prevent the system from loading referenced media."
    },
    {
      "name": "static var rosettaNotInstalled: AVError.Code",
      "desc": "The system doesn’t have Rosetta installed and can’t perform the requested operation."
    },
    {
      "name": "static var screenCaptureFailed: AVError.Code",
      "desc": "An unexpected problem occurred that prevented screen capture."
    },
    {
      "name": "static var segmentStartedWithNonSyncSample: AVError.Code",
      "desc": "The operation attempted to write a new MPEG-4 segment that didn’t start with a sync sample."
    },
    {
      "name": "static var serverIncorrectlyConfigured: AVError.Code",
      "desc": "The configuration of the HTTP server that streams the media resource isn’t correct."
    },
    {
      "name": "static var sessionConfigurationChanged: AVError.Code",
      "desc": "Recording stopped because the configuration of media sources and destinations changed."
    },
    {
      "name": "static var sessionHardwareCostOverage: AVError.Code",
      "desc": "Your app requested too many camera hardware resources."
    },
    {
      "name": "static var sessionNotRunning: AVError.Code",
      "desc": "The recording couldn’t start because the session isn’t running."
    },
    {
      "name": "static var sessionWasInterrupted: AVError.Code",
      "desc": "The recording stopped because the system interrupted the audio session."
    },
    {
      "name": "static var torchLevelUnavailable: AVError.Code",
      "desc": "The specified torch level is valid but currently unavailable, possibly due to overheating."
    },
    {
      "name": "static var undecodableMediaData: AVError.Code",
      "desc": "The system couldn’t decode the media data."
    },
    {
      "name": "static var unknown: AVError.Code",
      "desc": "An unknown error occurred."
    },
    {
      "name": "static var unsupportedDeviceActiveFormat: AVError.Code",
      "desc": "The capture session doesn’t support the camera device’s active format."
    },
    {
      "name": "static var unsupportedOutputSettings: AVError.Code",
      "desc": "Your app requested unsupported output settings."
    },
    {
      "name": "static var videoCompositorFailed: AVError.Code",
      "desc": "The compositor couldn’t composite video frames."
    },
    {
      "name": "var code: Code",
      "desc": "The error code."
    },
    {
      "name": "var errorCode: Int",
      "desc": "The integer error code."
    },
    {
      "name": "var userInfo: [String : Any]",
      "desc": "The user information associated with the error."
    },
    {
      "name": "var errorUserInfo: [String : Any]",
      "desc": "The error user information associated with the error."
    },
    {
      "name": "var device: AVCaptureDevice?",
      "desc": "The capture device in use."
    },
    {
      "name": "var fileSize: Int64?",
      "desc": "The asset file size."
    },
    {
      "name": "var fileType: AVFileType?",
      "desc": "The asset file type."
    },
    {
      "name": "var localizedDescription: String",
      "desc": "The error’s localized description."
    },
    {
      "name": "var mediaSubtypes: [Int]?",
      "desc": "An array of media subtypes."
    },
    {
      "name": "var mediaType: AVMediaType?",
      "desc": "The asset media type."
    },
    {
      "name": "var persistentTrackID: CMPersistentTrackID?",
      "desc": "The persistent track ID, if the track exists."
    },
    {
      "name": "var presentationTimeStamp: CMTime?",
      "desc": "The presentation time stamp."
    },
    {
      "name": "var processID: Int?",
      "desc": "The process ID."
    },
    {
      "name": "var recordingSuccessfullyFinished: Bool?",
      "desc": "A Boolean value that indicates whether recording finished successfully."
    },
    {
      "name": "var time: CMTime?",
      "desc": "The time duration of the error."
    },
    {
      "name": "let AVErrorDeviceKey: String",
      "desc": "The user information key to retrieve the device name."
    },
    {
      "name": "let AVErrorDiscontinuityFlagsKey: String",
      "desc": "The user information key to retrieve discontinuity flags."
    },
    {
      "name": "let AVErrorFileSizeKey: String",
      "desc": "The user information key to retrieve the file size in bytes."
    },
    {
      "name": "let AVErrorFileTypeKey: String",
      "desc": "The user information key to retrieve the file type."
    },
    {
      "name": "let AVErrorMediaTypeKey: String",
      "desc": "The user information key to retrieve the media type."
    },
    {
      "name": "let AVErrorMediaSubTypeKey: String",
      "desc": "The user information key to retrieve the media subtype."
    },
    {
      "name": "let AVErrorPersistentTrackIDKey: String",
      "desc": "The user information key to retrieve the track’s persistent identifier."
    },
    {
      "name": "let AVErrorPIDKey: String",
      "desc": "The user information key to retrieve the process ID value."
    },
    {
      "name": "let AVErrorPresentationTimeStampKey: String",
      "desc": "The user information key to retrieve the presentation time stamp."
    },
    {
      "name": "let AVErrorRecordingSuccessfullyFinishedKey: String",
      "desc": "The user information key to retrieve a Boolean value that indicates whether recording finished successfully."
    },
    {
      "name": "let AVErrorTimeKey: String",
      "desc": "The user information key to retrieve the error time."
    },
    {
      "name": "var hashValue: Int",
      "desc": "The hash value."
    },
    {
      "name": "func hash(into: inout Hasher)",
      "desc": "Hashes the essential components of this value by feeding them into the given hasher."
    },
    {
      "name": "static func == (AVError, AVError) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two errors are equal."
    },
    {
      "name": "static func != (AVError, AVError) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two errors are not equal."
    },
    {
      "name": "init(Code, userInfo: [String : Any])",
      "desc": "Creates an error structure with a code and custom data."
    }
  ],
  "declaration": "struct AVError"
}