{
  "path": "/documentation/network/nw_parameters_t",
  "type": "Type Alias",
  "name": "nw_parameters_t",
  "desc": "An object that stores the protocols to use for connections, options for sending data, and network path constraints.",
  "items": [
    {
      "name": "func nw_parameters_create_secure_tcp(nw_parameters_configure_protocol_block_t, nw_parameters_configure_protocol_block_t) -> nw_parameters_t",
      "desc": "Initializes parameters for TLS or TCP connections and listeners."
    },
    {
      "name": "func nw_parameters_create_secure_udp(nw_parameters_configure_protocol_block_t, nw_parameters_configure_protocol_block_t) -> nw_parameters_t",
      "desc": "Initializes parameters for DTLS or UDP connections and listeners."
    },
    {
      "name": "typealias nw_parameters_configure_protocol_block_t",
      "desc": "A block to configure protocol options during the creation of a parameters object."
    },
    {
      "name": "func nw_parameters_create() -> nw_parameters_t",
      "desc": "Initializes parameters for connections, listeners, and browsers with no protocols specified."
    },
    {
      "name": "func nw_parameters_create_custom_ip(UInt8, nw_parameters_configure_protocol_block_t) -> nw_parameters_t",
      "desc": "Initializes parameters for connections and listeners using a custom IP protocol."
    },
    {
      "name": "func nw_parameters_copy(nw_parameters_t) -> nw_parameters_t",
      "desc": "Peforms a deep copy of a parameters object."
    },
    {
      "name": "func nw_parameters_copy_default_protocol_stack(nw_parameters_t) -> nw_protocol_stack_t",
      "desc": "Accesses the protocol stack used by connections and listeners."
    },
    {
      "name": "typealias nw_protocol_stack_t",
      "desc": "An ordered set of protocol options that define the protocols that connections and listeners use."
    },
    {
      "name": "typealias nw_protocol_definition_t",
      "desc": "The abstract superclass for identifying a network protocol."
    },
    {
      "name": "typealias nw_protocol_options_t",
      "desc": "The abstract superclass for configuring the options of a network protocol."
    },
    {
      "name": "func nw_parameters_set_required_interface_type(nw_parameters_t, nw_interface_type_t)",
      "desc": "Sets an interface type to require on connections and listeners."
    },
    {
      "name": "func nw_parameters_get_required_interface_type(nw_parameters_t) -> nw_interface_type_t",
      "desc": "Accesses the interface type required on connections and listeners."
    },
    {
      "name": "func nw_parameters_require_interface(nw_parameters_t, nw_interface_t?)",
      "desc": "Sets a specific interface to require on connections, listeners, and browsers."
    },
    {
      "name": "func nw_parameters_copy_required_interface(nw_parameters_t) -> nw_interface_t?",
      "desc": "Accesses the interface required on connections, listeners, and browsers."
    },
    {
      "name": "func nw_parameters_set_local_endpoint(nw_parameters_t, nw_endpoint_t?)",
      "desc": "Sets a specific local IP address and port to use for connections and listeners."
    },
    {
      "name": "func nw_parameters_copy_local_endpoint(nw_parameters_t) -> nw_endpoint_t?",
      "desc": "Accesses the local IP address and port used for connections and listeners."
    },
    {
      "name": "func nw_parameters_set_prohibit_constrained(nw_parameters_t, Bool)",
      "desc": "Prevents connections, listeners, and browsers from using network paths marked as constrained by Low Data Mode."
    },
    {
      "name": "func nw_parameters_get_prohibit_constrained(nw_parameters_t) -> Bool",
      "desc": "Checks if connections, listeners, and browsers are prevented from using network paths marked as constrained by Low Data Mode."
    },
    {
      "name": "func nw_parameters_set_prohibit_expensive(nw_parameters_t, Bool)",
      "desc": "Prevents connections, listeners, and browsers from using network paths marked as expensive."
    },
    {
      "name": "func nw_parameters_get_prohibit_expensive(nw_parameters_t) -> Bool",
      "desc": "Checks if connections, listeners, and browsers are prevented from using network paths marked as expensive."
    },
    {
      "name": "func nw_parameters_prohibit_interface_type(nw_parameters_t, nw_interface_type_t)",
      "desc": "Prevents connections, listeners, and browsers from using a specific interface type."
    },
    {
      "name": "func nw_parameters_clear_prohibited_interface_types(nw_parameters_t)",
      "desc": "Removes all prohibited interface types."
    },
    {
      "name": "func nw_parameters_iterate_prohibited_interface_types(nw_parameters_t, (nw_interface_type_t) -> Bool)",
      "desc": "Examines the list of prohibited interface types."
    },
    {
      "name": "typealias nw_parameters_iterate_interface_types_block_t",
      "desc": "A block that allows inspection of a list of interface types."
    },
    {
      "name": "func nw_parameters_prohibit_interface(nw_parameters_t, nw_interface_t)",
      "desc": "Prevents connections and listeners from using a specific interface."
    },
    {
      "name": "func nw_parameters_clear_prohibited_interfaces(nw_parameters_t)",
      "desc": "Removes all prohibited interface types."
    },
    {
      "name": "func nw_parameters_iterate_prohibited_interfaces(nw_parameters_t, (nw_interface_t) -> Bool)",
      "desc": "Examines the list of prohibited interfaces."
    },
    {
      "name": "typealias nw_parameters_iterate_interfaces_block_t",
      "desc": "A block that allows inspection of a list of interfaces."
    },
    {
      "name": "func nw_parameters_set_multipath_service(nw_parameters_t, nw_multipath_service_t)",
      "desc": "Enables multipath protocols to allow connections to use multiple interfaces."
    },
    {
      "name": "func nw_parameters_get_multipath_service(nw_parameters_t) -> nw_multipath_service_t",
      "desc": "Checks if multipath is enabled on a connection."
    },
    {
      "name": "struct nw_multipath_service_t",
      "desc": "Modes in which a connection can support multipath protocols."
    },
    {
      "name": "func nw_parameters_set_service_class(nw_parameters_t, nw_service_class_t)",
      "desc": "Sets a level of service quality to use for connections."
    },
    {
      "name": "func nw_parameters_get_service_class(nw_parameters_t) -> nw_service_class_t",
      "desc": "Checks the level of service quality used for connections."
    },
    {
      "name": "struct nw_service_class_t",
      "desc": "Levels of service quality that can be used with a connection."
    },
    {
      "name": "func nw_parameters_set_fast_open_enabled(nw_parameters_t, Bool)",
      "desc": "Enables sending application data with protocol handshakes."
    },
    {
      "name": "func nw_parameters_get_fast_open_enabled(nw_parameters_t) -> Bool",
      "desc": "Checks if sending application data with protocol handshakes is enabled."
    },
    {
      "name": "func nw_parameters_set_expired_dns_behavior(nw_parameters_t, nw_parameters_expired_dns_behavior_t)",
      "desc": "Sets the behavior for how expired DNS answers should be used."
    },
    {
      "name": "func nw_parameters_get_expired_dns_behavior(nw_parameters_t) -> nw_parameters_expired_dns_behavior_t",
      "desc": "Checks the behavior for how expired DNS answers should be used."
    },
    {
      "name": "struct nw_parameters_expired_dns_behavior_t",
      "desc": "Options for configuring how expired DNS answers should be used."
    },
    {
      "name": "func nw_parameters_set_prefer_no_proxy(nw_parameters_t, Bool)",
      "desc": "Sets a Boolean that indicates that connections should ignore proxies when they are enabled on the system."
    },
    {
      "name": "func nw_parameters_get_prefer_no_proxy(nw_parameters_t) -> Bool",
      "desc": "Checks if proxies are ignored by default."
    },
    {
      "name": "func nw_parameters_set_include_peer_to_peer(nw_parameters_t, Bool)",
      "desc": "Enables peer-to-peer link technologies for connections and listeners."
    },
    {
      "name": "func nw_parameters_get_include_peer_to_peer(nw_parameters_t) -> Bool",
      "desc": "Checks whether a connection is allowed to use peer-to-peer link technologies."
    },
    {
      "name": "func nw_parameters_set_reuse_local_address(nw_parameters_t, Bool)",
      "desc": "Allows reusing local addresses and ports across connections."
    },
    {
      "name": "func nw_parameters_get_reuse_local_address(nw_parameters_t) -> Bool",
      "desc": "Checks whether a connection allows reusing local addresses and ports."
    },
    {
      "name": "func nw_parameters_set_local_only(nw_parameters_t, Bool)",
      "desc": "Restricts listeners to only accepting connections from the local link."
    },
    {
      "name": "func nw_parameters_get_local_only(nw_parameters_t) -> Bool",
      "desc": "Checks if a listener is restricted to accepting connections from the local link."
    },
    {
      "name": "func nw_parameters_set_privacy_context(nw_parameters_t, nw_privacy_context_t)",
      "desc": "Associates a privacy context with any connections or listeners that use the parameters."
    },
    {
      "name": "typealias nw_privacy_context_t",
      "desc": "An object that defines the privacy requirements for a set of connections."
    }
  ],
  "declaration": "typealias nw_parameters_t = OS_nw_parameters"
}