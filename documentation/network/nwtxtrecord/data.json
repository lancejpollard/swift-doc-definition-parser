{
  "path": "/documentation/network/nwtxtrecord",
  "type": "Structure",
  "name": "NWTXTRecord",
  "desc": "A dictionary representing a TXT record in a DNS packet.",
  "items": [
    {
      "name": "init([String : String])",
      "desc": "Initializes a TXT record with a dictionary of strings."
    },
    {
      "name": "func removeEntry(key: String) -> Bool",
      "desc": "Removes an entry from a TXT record dictionary."
    },
    {
      "name": "func setEntry(NWTXTRecord.Entry, for: String) -> Bool",
      "desc": "Sets an entry in a TXT record dictionary."
    },
    {
      "name": "enum NWTXTRecord.Entry",
      "desc": "A type of entry in a TXT record dictionary."
    },
    {
      "name": "func getEntry(for: String) -> NWTXTRecord.Entry?",
      "desc": "Accesses an entry in a TXT record dictionary."
    },
    {
      "name": "subscript(String) -> String?",
      "desc": "Get and set values in a TXT record dictionary, by keys."
    },
    {
      "name": "var dictionary: [String : String]",
      "desc": "The TXT record as a dictionary of strings."
    },
    {
      "name": "subscript(NWTXTRecord.Index) -> NWTXTRecord.Element",
      "desc": "Get and set values in a TXT record dictionary, by index."
    },
    {
      "name": "typealias NWTXTRecord.Element",
      "desc": "A container for a TXT record key and entry value."
    },
    {
      "name": "typealias NWTXTRecord.Indices"
    },
    {
      "name": "typealias NWTXTRecord.Iterator"
    },
    {
      "name": "typealias NWTXTRecord.SubSequence"
    },
    {
      "name": "var count: Int",
      "desc": "The number of elements in the collection."
    },
    {
      "name": "var debugDescription: String"
    },
    {
      "name": "var endIndex: NWTXTRecord.Index"
    },
    {
      "name": "var first: (key: String, value: Entry)?",
      "desc": "The first element of the collection."
    },
    {
      "name": "var indices: DefaultIndices<NWTXTRecord>",
      "desc": "The indices that are valid for subscripting the collection, in ascending order."
    },
    {
      "name": "var isEmpty: Bool",
      "desc": "A Boolean value indicating whether the collection is empty."
    },
    {
      "name": "var lazy: LazySequence<NWTXTRecord>",
      "desc": "A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily."
    },
    {
      "name": "var publisher: Publishers.Sequence<NWTXTRecord, Never>"
    },
    {
      "name": "var startIndex: NWTXTRecord.Index"
    },
    {
      "name": "var underestimatedCount: Int",
      "desc": "A value less than or equal to the number of elements in the collection."
    },
    {
      "name": "func allSatisfy(((key: String, value: Entry)) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate."
    },
    {
      "name": "func compactMap<ElementOfResult>(((key: String, value: Entry)) -> ElementOfResult?) -> [ElementOfResult]",
      "desc": "Returns an array containing the non-nil results of calling the given transformation with each element of this sequence."
    },
    {
      "name": "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult"
    },
    {
      "name": "func contains(where: ((key: String, value: Entry)) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate."
    },
    {
      "name": "func distance(from: Index, to: Index) -> Int",
      "desc": "Returns the distance between two indices."
    },
    {
      "name": "func drop(while: ((key: String, value: Entry)) -> Bool) -> Slice<NWTXTRecord>",
      "desc": "Returns a subsequence by skipping elements while predicate returns true and returning the remaining elements."
    },
    {
      "name": "func dropFirst(Int) -> Slice<NWTXTRecord>",
      "desc": "Returns a subsequence containing all but the given number of initial elements."
    },
    {
      "name": "func dropLast(Int) -> Slice<NWTXTRecord>",
      "desc": "Returns a subsequence containing all but the specified number of final elements."
    },
    {
      "name": "func elementsEqual<OtherSequence>(OtherSequence, by: ((key: String, value: Entry), OtherSequence.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test."
    },
    {
      "name": "func enumerated() -> EnumeratedSequence<NWTXTRecord>",
      "desc": "Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence."
    },
    {
      "name": "func filter(((key: String, value: Entry)) -> Bool) -> [(key: String, value: Entry)]",
      "desc": "Returns an array containing, in order, the elements of the sequence that satisfy the given predicate."
    },
    {
      "name": "func first(where: ((key: String, value: Entry)) -> Bool) -> (key: String, value: Entry)?",
      "desc": "Returns the first element of the sequence that satisfies the given predicate."
    },
    {
      "name": "func firstIndex(where: ((key: String, value: Entry)) -> Bool) -> Index?",
      "desc": "Returns the first index in which an element of the collection satisfies the given predicate."
    },
    {
      "name": "func flatMap<SegmentOfResult>(((key: String, value: Entry)) -> SegmentOfResult) -> [SegmentOfResult.Element]",
      "desc": "Returns an array containing the concatenated results of calling the given transformation with each element of this sequence."
    },
    {
      "name": "func forEach(((key: String, value: Entry)) -> Void)",
      "desc": "Calls the given closure on each element in the sequence in the same order as a for-in loop."
    },
    {
      "name": "func formIndex(inout Index, offsetBy: Int)",
      "desc": "Offsets the given index by the specified distance."
    },
    {
      "name": "func formIndex(inout Index, offsetBy: Int, limitedBy: Index) -> Bool",
      "desc": "Offsets the given index by the specified distance, or so that it equals the given limiting index."
    },
    {
      "name": "func formIndex(after: inout Index)",
      "desc": "Replaces the given index with its successor."
    },
    {
      "name": "func formatted<S>(S) -> S.FormatOutput"
    },
    {
      "name": "func index(Index, offsetBy: Int) -> Index",
      "desc": "Returns an index that is the specified distance from the given index."
    },
    {
      "name": "func index(Index, offsetBy: Int, limitedBy: Index) -> Index?",
      "desc": "Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index."
    },
    {
      "name": "func index(after: NWTXTRecord.Index) -> NWTXTRecord.Index"
    },
    {
      "name": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: ((key: String, value: Entry), (key: String, value: Entry)) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements."
    },
    {
      "name": "func makeIterator() -> IndexingIterator<NWTXTRecord>",
      "desc": "Returns an iterator over the elements of the collection."
    },
    {
      "name": "func map<T>(((key: String, value: Entry)) -> T) -> [T]",
      "desc": "Returns an array containing the results of mapping the given closure over the sequenceâ€™s elements."
    },
    {
      "name": "func max(by: ((key: String, value: Entry), (key: String, value: Entry)) -> Bool) -> (key: String, value: Entry)?",
      "desc": "Returns the maximum element in the sequence, using the given predicate as the comparison between elements."
    },
    {
      "name": "func min(by: ((key: String, value: Entry), (key: String, value: Entry)) -> Bool) -> (key: String, value: Entry)?",
      "desc": "Returns the minimum element in the sequence, using the given predicate as the comparison between elements."
    },
    {
      "name": "func prefix(Int) -> Slice<NWTXTRecord>",
      "desc": "Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection."
    },
    {
      "name": "func prefix(through: Index) -> Slice<NWTXTRecord>",
      "desc": "Returns a subsequence from the start of the collection through the specified position."
    },
    {
      "name": "func prefix(upTo: Index) -> Slice<NWTXTRecord>",
      "desc": "Returns a subsequence from the start of the collection up to, but not including, the specified position."
    },
    {
      "name": "func prefix(while: ((key: String, value: Entry)) -> Bool) -> Slice<NWTXTRecord>",
      "desc": "Returns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements."
    },
    {
      "name": "func randomElement() -> (key: String, value: Entry)?",
      "desc": "Returns a random element of the collection."
    },
    {
      "name": "func randomElement<T>(using: inout T) -> (key: String, value: Entry)?",
      "desc": "Returns a random element of the collection, using the given generator as a source for randomness."
    },
    {
      "name": "func reduce<Result>(Result, (Result, (key: String, value: Entry)) -> Result) -> Result",
      "desc": "Returns the result of combining the elements of the sequence using the given closure."
    },
    {
      "name": "func reduce<Result>(into: Result, (inout Result, (key: String, value: Entry)) -> ()) -> Result",
      "desc": "Returns the result of combining the elements of the sequence using the given closure."
    },
    {
      "name": "func reversed() -> [(key: String, value: Entry)]",
      "desc": "Returns an array containing the elements of this sequence in reverse order."
    },
    {
      "name": "func shuffled() -> [(key: String, value: Entry)]",
      "desc": "Returns the elements of the sequence, shuffled."
    },
    {
      "name": "func shuffled<T>(using: inout T) -> [(key: String, value: Entry)]",
      "desc": "Returns the elements of the sequence, shuffled using the given generator as a source for randomness."
    },
    {
      "name": "func sorted(by: ((key: String, value: Entry), (key: String, value: Entry)) -> Bool) -> [(key: String, value: Entry)]",
      "desc": "Returns the elements of the sequence, sorted using the given predicate as the comparison between elements."
    },
    {
      "name": "func sorted<Comparator>(using: Comparator) -> [(key: String, value: Entry)]"
    },
    {
      "name": "func sorted<S, Comparator>(using: S) -> [(key: String, value: Entry)]"
    },
    {
      "name": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: ((key: String, value: Entry)) -> Bool) -> [Slice<NWTXTRecord>]",
      "desc": "Returns the longest possible subsequences of the collection, in order, that donâ€™t contain elements satisfying the given predicate."
    },
    {
      "name": "func starts<PossiblePrefix>(with: PossiblePrefix, by: ((key: String, value: Entry), PossiblePrefix.Element) -> Bool) -> Bool",
      "desc": "Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test."
    },
    {
      "name": "func suffix(Int) -> Slice<NWTXTRecord>",
      "desc": "Returns a subsequence, up to the given maximum length, containing the final elements of the collection."
    },
    {
      "name": "func suffix(from: Index) -> Slice<NWTXTRecord>",
      "desc": "Returns a subsequence from the specified position to the end of the collection."
    },
    {
      "name": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<(key: String, value: Entry)>) -> R) -> R?",
      "desc": "Executes a closure on the sequenceâ€™s contiguous storage."
    },
    {
      "name": "subscript<R>(R) -> Slice<NWTXTRecord>",
      "desc": "Accesses the contiguous subrange of the collectionâ€™s elements specified by a range expression."
    },
    {
      "name": "subscript((UnboundedRange_) -> ()) -> Slice<NWTXTRecord>"
    },
    {
      "name": "subscript(Range<Index>) -> Slice<NWTXTRecord>",
      "desc": "Accesses a contiguous subrange of the collectionâ€™s elements."
    },
    {
      "name": "static func != (NWTXTRecord, NWTXTRecord) -> Bool"
    },
    {
      "name": "static func == (NWTXTRecord, NWTXTRecord) -> Bool"
    },
    {
      "name": "struct NWTXTRecord.Index"
    }
  ],
  "declaration": "struct NWTXTRecord",
  "conformsTo": [
    "Collection",
    "CustomDebugStringConvertible",
    "Equatable"
  ]
}