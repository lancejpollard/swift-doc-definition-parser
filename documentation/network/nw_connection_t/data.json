{
  "path": "/documentation/network/nw_connection_t",
  "type": "Type Alias",
  "name": "nw_connection_t",
  "desc": "A bidirectional data connection between a local endpoint and a remote endpoint.",
  "items": [
    {
      "name": "func nw_connection_create(nw_endpoint_t, nw_parameters_t) -> nw_connection_t",
      "desc": "Initializes a new connection to a remote endpoint."
    },
    {
      "name": "func nw_connection_set_queue(nw_connection_t, DispatchQueue)",
      "desc": "Sets the queue on which all connection events are delivered."
    },
    {
      "name": "func nw_connection_start(nw_connection_t)",
      "desc": "Starts establishing a connection."
    },
    {
      "name": "func nw_connection_restart(nw_connection_t)",
      "desc": "Restarts a connection that is in the waiting state."
    },
    {
      "name": "struct nw_connection_state_t",
      "desc": "States indicating whether a connection can be used to send and receive data."
    },
    {
      "name": "func nw_connection_set_state_changed_handler(nw_connection_t, nw_connection_state_changed_handler_t?)",
      "desc": "Sets a handler to receive connection state updates."
    },
    {
      "name": "typealias nw_connection_state_changed_handler_t",
      "desc": "A handler that delivers connection state updates with associated errors."
    },
    {
      "name": "func nw_connection_send(nw_connection_t, __DispatchData?, nw_content_context_t, Bool, nw_connection_send_completion_t)",
      "desc": "Sends data on a connection."
    },
    {
      "name": "typealias nw_connection_send_completion_t",
      "desc": "A completion handler that indicates when the connection has finished processing sent content."
    },
    {
      "name": "typealias nw_content_context_t",
      "desc": "A representation of a message to send or receive, containing protocol metadata and send properties."
    },
    {
      "name": "func nw_connection_receive(nw_connection_t, UInt32, UInt32, nw_connection_receive_completion_t)",
      "desc": "Schedules a single receive completion handler, with a range indicating how many bytes the handler can receive at one time."
    },
    {
      "name": "typealias nw_connection_receive_completion_t",
      "desc": "A completion handler that indicates when content has been received by the connection, or that an error was encountered."
    },
    {
      "name": "func nw_connection_receive_message(nw_connection_t, nw_connection_receive_completion_t)",
      "desc": "Schedules a single receive completion handler for a complete message, as opposed to a range of bytes."
    },
    {
      "name": "func nw_connection_batch(nw_connection_t, () -> Void)",
      "desc": "Defines a block in which calls to send and receive are processed as a batch to improve performance."
    },
    {
      "name": "func nw_connection_get_maximum_datagram_size(nw_connection_t) -> UInt32",
      "desc": "Accesses the maximum size of a datagram message that can be sent on a connection."
    },
    {
      "name": "func nw_connection_cancel(nw_connection_t)",
      "desc": "Cancels the connection and gracefully disconnects any established network protocols."
    },
    {
      "name": "func nw_connection_force_cancel(nw_connection_t)",
      "desc": "Cancels the connection and immediately disconnects any established network protocols."
    },
    {
      "name": "func nw_connection_cancel_current_endpoint(nw_connection_t)",
      "desc": "Causes the current endpoint to be rejected, allowing the connection to try another resolved address."
    },
    {
      "name": "func nw_connection_copy_current_path(nw_connection_t) -> nw_path_t?",
      "desc": "Accesses the network path the connection is using."
    },
    {
      "name": "func nw_connection_set_path_changed_handler(nw_connection_t, nw_connection_path_event_handler_t?)",
      "desc": "Sets a handler that receives network path updates."
    },
    {
      "name": "typealias nw_connection_path_event_handler_t",
      "desc": "A handler that delivers network path updates."
    },
    {
      "name": "func nw_connection_set_viability_changed_handler(nw_connection_t, nw_connection_boolean_event_handler_t?)",
      "desc": "Sets a handler that receives updates when data can be sent and received."
    },
    {
      "name": "func nw_connection_set_better_path_available_handler(nw_connection_t, nw_connection_boolean_event_handler_t?)",
      "desc": "Sets a handler that receives updates when an alternative network path is preferred over the current path."
    },
    {
      "name": "typealias nw_connection_boolean_event_handler_t",
      "desc": "A handler that receives Boolean state updates from a connection, such as viability and better path state."
    },
    {
      "name": "typealias nw_establishment_report_t",
      "desc": "A report that provides metrics about how a connection was established."
    },
    {
      "name": "func nw_connection_access_establishment_report(nw_connection_t, DispatchQueue, nw_establishment_report_access_block_t)",
      "desc": "Requests a copy of the connection's establishment report once the connection is in the ready state."
    },
    {
      "name": "typealias nw_establishment_report_access_block_t",
      "desc": "A block that delivers a connection's establishment report when it's in the ready state."
    },
    {
      "name": "typealias nw_data_transfer_report_t",
      "desc": "A report that provides metrics about data being sent and received on a connection."
    },
    {
      "name": "func nw_connection_create_new_data_transfer_report(nw_connection_t) -> nw_data_transfer_report_t",
      "desc": "Begins a new data transfer report, which can later be collected."
    },
    {
      "name": "func nw_connection_copy_protocol_metadata(nw_connection_t, nw_protocol_definition_t) -> nw_protocol_metadata_t?",
      "desc": "Retrieves the connection-wide metadata for a specific protocol."
    },
    {
      "name": "func nw_connection_copy_endpoint(nw_connection_t) -> nw_endpoint_t",
      "desc": "Accesses the endpoint with which the connection was created."
    },
    {
      "name": "func nw_connection_copy_parameters(nw_connection_t) -> nw_parameters_t",
      "desc": "Accesses the parameters with which the connection was created."
    },
    {
      "name": "func nw_connection_copy_description(nw_connection_t) -> UnsafeMutablePointer<CChar>",
      "desc": "Copies the description of the connection as a string."
    }
  ],
  "declaration": "typealias nw_connection_t = OS_nw_connection"
}