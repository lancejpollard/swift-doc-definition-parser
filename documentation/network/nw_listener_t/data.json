{
  "path": "/documentation/network/nw_listener_t",
  "type": "Type Alias",
  "name": "nw_listener_t",
  "desc": "An object you use to listen for incoming network connections.",
  "items": [
    {
      "name": "func nw_listener_create(nw_parameters_t) -> nw_listener_t?",
      "desc": "Initializes a network listener, which will select a random port."
    },
    {
      "name": "func nw_listener_create_with_port(UnsafePointer<CChar>, nw_parameters_t) -> nw_listener_t?",
      "desc": "Initializes a network listener with a specified local port."
    },
    {
      "name": "func nw_listener_create_with_connection(nw_connection_t, nw_parameters_t) -> nw_listener_t?",
      "desc": "Initializes a network listener to receive new streams on a multiplexed connection."
    },
    {
      "name": "func nw_listener_set_queue(nw_listener_t, DispatchQueue)",
      "desc": "Sets the queue on which all listener events are delivered."
    },
    {
      "name": "func nw_listener_start(nw_listener_t)",
      "desc": "Registers for listening for inbound connections."
    },
    {
      "name": "func nw_listener_get_port(nw_listener_t) -> UInt16",
      "desc": "The port on which the listener can accept connections."
    },
    {
      "name": "func nw_listener_cancel(nw_listener_t)",
      "desc": "Stops listening for inbound connections."
    },
    {
      "name": "func nw_listener_set_new_connection_handler(nw_listener_t, nw_listener_new_connection_handler_t?)",
      "desc": "Sets a handler that receives inbound connections."
    },
    {
      "name": "typealias nw_listener_new_connection_handler_t",
      "desc": "A handler that delivers inbound connections."
    },
    {
      "name": "func nw_listener_set_new_connection_limit(nw_listener_t, UInt32)",
      "desc": "Resets the number of inbound connections to deliver before rejecting connections."
    },
    {
      "name": "func nw_listener_get_new_connection_limit(nw_listener_t) -> UInt32",
      "desc": "Checks the remaining number of inbound connections to deliver before rejecting connections."
    },
    {
      "name": "var NW_LISTENER_INFINITE_CONNECTION_LIMIT: UInt32",
      "desc": "A static value that indicates that inbound connections should not be limited."
    },
    {
      "name": "property list key NSBonjourServices",
      "desc": "Bonjour service types browsed by the app."
    },
    {
      "name": "property list key NSLocalNetworkUsageDescription",
      "desc": "A message that tells the user why the app is requesting access to the local network."
    },
    {
      "name": "func nw_listener_set_advertise_descriptor(nw_listener_t, nw_advertise_descriptor_t?)",
      "desc": "Sets a Bonjour service that advertises the listener on the local network."
    },
    {
      "name": "typealias nw_advertise_descriptor_t",
      "desc": "A description used to advertise the Bonjour service that a listener provides."
    },
    {
      "name": "func nw_listener_set_advertised_endpoint_changed_handler(nw_listener_t, nw_listener_advertised_endpoint_changed_handler_t?)",
      "desc": "Sets a handler that receives updates for the service endpoint being advertised."
    },
    {
      "name": "typealias nw_listener_advertised_endpoint_changed_handler_t",
      "desc": "A handler that indicates changes to the service endpoints being advertised as they are added and removed."
    },
    {
      "name": "func nw_listener_set_state_changed_handler(nw_listener_t, nw_listener_state_changed_handler_t?)",
      "desc": "Sets a handler to receive listener state updates."
    },
    {
      "name": "typealias nw_listener_state_changed_handler_t",
      "desc": "A handler that delivers listener state updates with associated errors."
    },
    {
      "name": "struct nw_listener_state_t",
      "desc": "States indicating whether a listener is able to accept incoming connections."
    }
  ],
  "declaration": "typealias nw_listener_t = OS_nw_listener"
}