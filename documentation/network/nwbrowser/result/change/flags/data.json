{
  "path": "/documentation/network/nwbrowser/result/change/flags",
  "type": "Structure",
  "name": "NWBrowser.Result.Change.Flags",
  "desc": "Flags providing details about a change in a discovered service.",
  "items": [
    {
      "name": "static let identical: NWBrowser.Result.Change.Flags",
      "desc": "The results are identical."
    },
    {
      "name": "static let interfaceAdded: NWBrowser.Result.Change.Flags",
      "desc": "The service was discovered over a new interface."
    },
    {
      "name": "static let interfaceRemoved: NWBrowser.Result.Change.Flags",
      "desc": "The service was no longer discovered over a certain interface."
    },
    {
      "name": "static let metadataChanged: NWBrowser.Result.Change.Flags",
      "desc": "The service's associated metadata changed."
    },
    {
      "name": "typealias NWBrowser.Result.Change.Flags.ArrayLiteralElement"
    },
    {
      "name": "typealias NWBrowser.Result.Change.Flags.Element"
    },
    {
      "name": "typealias NWBrowser.Result.Change.Flags.RawValue"
    },
    {
      "name": "init()",
      "desc": "Creates an empty option set."
    },
    {
      "name": "init<S>(S)",
      "desc": "Creates a new set from a finite sequence of items."
    },
    {
      "name": "init(arrayLiteral: NWBrowser.Result.Change.Flags...)",
      "desc": "Creates a set containing the elements of the given array literal."
    },
    {
      "name": "init(rawValue: UInt8)"
    },
    {
      "name": "var hashValue: Int"
    },
    {
      "name": "var isEmpty: Bool",
      "desc": "A Boolean value that indicates whether the set has no elements."
    },
    {
      "name": "let rawValue: UInt8"
    },
    {
      "name": "func contains(NWBrowser.Result.Change.Flags) -> Bool",
      "desc": "Returns a Boolean value that indicates whether a given element is a member of the option set."
    },
    {
      "name": "func formIntersection(NWBrowser.Result.Change.Flags)",
      "desc": "Removes all elements of this option set that are not also present in the given set."
    },
    {
      "name": "func formSymmetricDifference(NWBrowser.Result.Change.Flags)",
      "desc": "Replaces this set with a new set containing all elements contained in either this set or the given set, but not in both."
    },
    {
      "name": "func formUnion(NWBrowser.Result.Change.Flags)",
      "desc": "Inserts the elements of another set into this option set."
    },
    {
      "name": "func hash(into: inout Hasher)"
    },
    {
      "name": "func insert(NWBrowser.Result.Change.Flags) -> (inserted: Bool, memberAfterInsert: NWBrowser.Result.Change.Flags)",
      "desc": "Adds the given element to the option set if it is not already a member."
    },
    {
      "name": "func intersection(NWBrowser.Result.Change.Flags) -> NWBrowser.Result.Change.Flags",
      "desc": "Returns a new option set with only the elements contained in both this set and the given set."
    },
    {
      "name": "func isDisjoint(with: NWBrowser.Result.Change.Flags) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the set has no members in common with the given set."
    },
    {
      "name": "func isStrictSubset(of: NWBrowser.Result.Change.Flags) -> Bool",
      "desc": "Returns a Boolean value that indicates whether this set is a strict subset of the given set."
    },
    {
      "name": "func isStrictSuperset(of: NWBrowser.Result.Change.Flags) -> Bool",
      "desc": "Returns a Boolean value that indicates whether this set is a strict superset of the given set."
    },
    {
      "name": "func isSubset(of: NWBrowser.Result.Change.Flags) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the set is a subset of another set."
    },
    {
      "name": "func isSuperset(of: NWBrowser.Result.Change.Flags) -> Bool",
      "desc": "Returns a Boolean value that indicates whether the set is a superset of the given set."
    },
    {
      "name": "func remove(NWBrowser.Result.Change.Flags) -> NWBrowser.Result.Change.Flags?",
      "desc": "Removes the given element and all elements subsumed by it."
    },
    {
      "name": "func subtract(NWBrowser.Result.Change.Flags)",
      "desc": "Removes the elements of the given set from this set."
    },
    {
      "name": "func subtracting(NWBrowser.Result.Change.Flags) -> NWBrowser.Result.Change.Flags",
      "desc": "Returns a new set containing the elements of this set that do not occur in the given set."
    },
    {
      "name": "func symmetricDifference(NWBrowser.Result.Change.Flags) -> NWBrowser.Result.Change.Flags",
      "desc": "Returns a new option set with the elements contained in this set or in the given set, but not in both."
    },
    {
      "name": "func union(NWBrowser.Result.Change.Flags) -> NWBrowser.Result.Change.Flags",
      "desc": "Returns a new option set of the elements contained in this set, in the given set, or in both."
    },
    {
      "name": "func update(with: NWBrowser.Result.Change.Flags) -> NWBrowser.Result.Change.Flags?",
      "desc": "Inserts the given element into the set."
    },
    {
      "name": "static func != (NWBrowser.Result.Change.Flags, NWBrowser.Result.Change.Flags) -> Bool"
    }
  ],
  "declaration": "struct NWBrowser.Result.Change.Flags",
  "conformsTo": [
    "Hashable",
    "OptionSet"
  ]
}