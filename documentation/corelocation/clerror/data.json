{
  "path": "/documentation/corelocation/clerror",
  "type": "Structure",
  "name": "CLError",
  "desc": "A Core Location error.",
  "items": [
    {
      "name": "static var errorDomain: String",
      "desc": "The error domain that the framework uses when issuing errors."
    },
    {
      "name": "var errorCode: Int",
      "desc": "The error code the framework returns when location services fail."
    },
    {
      "name": "var code: Code",
      "desc": "The error code the framework returns when location services fail."
    },
    {
      "name": "var errorUserInfo: [String : Any]",
      "desc": "A dictionary the framework uses to provide information about an error."
    },
    {
      "name": "var userInfo: [String : Any]",
      "desc": "A dictionary the framework uses to provide information about an error."
    },
    {
      "name": "var alternateRegion: CLRegion?",
      "desc": "A region that location services can monitor more effectively."
    },
    {
      "name": "var localizedDescription: String",
      "desc": "A localized, human-readable explanation of the error."
    },
    {
      "name": "static var locationUnknown: CLError.Code",
      "desc": "A constant that indicates the location manager was unable to obtain a location value right now."
    },
    {
      "name": "static var denied: CLError.Code",
      "desc": "A constant that indicates the user denied access to the location service."
    },
    {
      "name": "static var promptDeclined: CLError.Code",
      "desc": "A constant that indicates the user didn’t grant the requested temporary authorization."
    },
    {
      "name": "static var network: CLError.Code",
      "desc": "A constant that indicates the network was unavailable or a network error occurred."
    },
    {
      "name": "static var headingFailure: CLError.Code",
      "desc": "A constant that indicates the location manager can’t determine the heading."
    },
    {
      "name": "static var rangingUnavailable: CLError.Code",
      "desc": "A constant that indicates ranging is disabled."
    },
    {
      "name": "static var rangingFailure: CLError.Code",
      "desc": "A constant that indicates a general ranging error occurred."
    },
    {
      "name": "enum CLError.Code",
      "desc": "Error codes returned by the location manager object."
    },
    {
      "name": "static var regionMonitoringDenied: CLError.Code",
      "desc": "A constant that indicates the user denied access to the region monitoring service."
    },
    {
      "name": "static var regionMonitoringFailure: CLError.Code",
      "desc": "A constant that indicates the location manager failed to monitor a registered region."
    },
    {
      "name": "static var regionMonitoringSetupDelayed: CLError.Code",
      "desc": "A constant that indicates Core Location couldn’t initialize the region monitoring feature immediately."
    },
    {
      "name": "static var regionMonitoringResponseDelayed: CLError.Code",
      "desc": "A constant that indicates Core Location will deliver events but they may be delayed."
    },
    {
      "name": "static var geocodeCanceled: CLError.Code",
      "desc": "A constant that indicates the geocode request was canceled."
    },
    {
      "name": "static var geocodeFoundNoResult: CLError.Code",
      "desc": "A constant that indicates the geocode request yielded no result."
    },
    {
      "name": "static var geocodeFoundPartialResult: CLError.Code",
      "desc": "A constant that indicates the geocode request yielded a partial result."
    },
    {
      "name": "static var deferredFailed: CLError.Code",
      "desc": "A constant that indicates the location manager didn’t enter deferred mode for an unknown reason."
    },
    {
      "name": "static var deferredCanceled: CLError.Code",
      "desc": "A constant that indicates your app or the location manager canceled the request for deferred updates."
    },
    {
      "name": "static var deferredAccuracyTooLow: CLError.Code",
      "desc": "A constant that indicates deferred mode isn’t supported for the requested accuracy."
    },
    {
      "name": "static var deferredDistanceFiltered: CLError.Code",
      "desc": "A constant that indicates deferred mode doesn’t support distance filters."
    },
    {
      "name": "static var deferredNotUpdatingLocation: CLError.Code",
      "desc": "A constant that indicates the location manager didn’t enter deferred mode because location updates were already disabled or paused."
    },
    {
      "name": "static func == (CLError, CLError) -> Bool",
      "desc": "Indicates whether two errors are equal."
    },
    {
      "name": "static func != (CLError, CLError) -> Bool",
      "desc": "Indicates whether two errors aren’t equal."
    },
    {
      "name": "func hash(into: inout Hasher)"
    },
    {
      "name": "var hashValue: Int"
    },
    {
      "name": "init(Code, userInfo: [String : Any])",
      "desc": "Creates a Core Location error."
    }
  ],
  "declaration": "struct CLError"
}