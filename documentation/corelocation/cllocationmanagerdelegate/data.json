{
  "path": "/documentation/corelocation/cllocationmanagerdelegate",
  "type": "Protocol",
  "name": "CLLocationManagerDelegate",
  "desc": "The methods that you use to receive events from an associated location manager object.",
  "items": [
    {
      "name": "func locationManagerDidChangeAuthorization(CLLocationManager)",
      "desc": "Tells the delegate when the app creates the location manager and when the authorization status changes."
    },
    {
      "name": "func locationManager(CLLocationManager, didFailWithError: Error)",
      "desc": "Tells the delegate that the location manager was unable to retrieve a location value."
    },
    {
      "name": "func locationManager(CLLocationManager, didUpdateLocations: [CLLocation])",
      "desc": "Tells the delegate that new location data is available."
    },
    {
      "name": "func locationManager(CLLocationManager, didUpdateTo: CLLocation, from: CLLocation)",
      "desc": "Tells the delegate that a new location value is available."
    },
    {
      "name": "func locationManager(CLLocationManager, didFinishDeferredUpdatesWithError: Error?)",
      "desc": "Tells the delegate that updates will no longer be deferred."
    },
    {
      "name": "func locationManagerDidPauseLocationUpdates(CLLocationManager)",
      "desc": "Tells the delegate that location updates were paused."
    },
    {
      "name": "func locationManagerDidResumeLocationUpdates(CLLocationManager)",
      "desc": "Tells the delegate that the delivery of location updates has resumed."
    },
    {
      "name": "func locationManager(CLLocationManager, didUpdateHeading: CLHeading)",
      "desc": "Tells the delegate that the location manager received updated heading information."
    },
    {
      "name": "func locationManagerShouldDisplayHeadingCalibration(CLLocationManager) -> Bool",
      "desc": "Asks the delegate whether the heading calibration alert should be displayed."
    },
    {
      "name": "func locationManager(CLLocationManager, didEnterRegion: CLRegion)",
      "desc": "Tells the delegate that the user entered the specified region."
    },
    {
      "name": "func locationManager(CLLocationManager, didExitRegion: CLRegion)",
      "desc": "Tells the delegate that the user left the specified region."
    },
    {
      "name": "func locationManager(CLLocationManager, didDetermineState: CLRegionState, for: CLRegion)",
      "desc": "Tells the delegate about the state of the specified region."
    },
    {
      "name": "func locationManager(CLLocationManager, monitoringDidFailFor: CLRegion?, withError: Error)",
      "desc": "Tells the delegate that a region monitoring error occurred."
    },
    {
      "name": "func locationManager(CLLocationManager, didStartMonitoringFor: CLRegion)",
      "desc": "Tells the delegate that a new region is being monitored."
    },
    {
      "name": "func locationManager(CLLocationManager, didRange: [CLBeacon], satisfying: CLBeaconIdentityConstraint)",
      "desc": "Tells the delegate that the location manager detected at least one beacon that satisfies the provided constraint."
    },
    {
      "name": "func locationManager(CLLocationManager, didFailRangingFor: CLBeaconIdentityConstraint, error: Error)",
      "desc": "Tells the delegate that the location manager couldnâ€™t detect any beacons that satisfy the provided constraint."
    },
    {
      "name": "func locationManager(CLLocationManager, didVisit: CLVisit)",
      "desc": "Tells the delegate that a new visit-related event was received."
    }
  ],
  "declaration": "protocol CLLocationManagerDelegate",
  "inheritsFrom": [
    "NSObjectProtocol"
  ]
}