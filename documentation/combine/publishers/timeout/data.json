{
  "path": "/documentation/combine/publishers/timeout",
  "type": "Structure",
  "name": "Publishers.Timeout",
  "desc": "A publisher that terminates publishing if the upstream publisher exceeds a specified time interval without producing an element.",
  "items": [
    {
      "name": "init(upstream: Upstream, interval: Context.SchedulerTimeType.Stride, scheduler: Context, options: Context.SchedulerOptions?, customError: (() -> Publishers.Timeout<Upstream, Context>.Failure)?)",
      "desc": "Creates a publisher that terminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
      "name": "typealias Output",
      "desc": "The kind of values published by this publisher."
    },
    {
      "name": "typealias Failure",
      "desc": "The kind of errors this publisher might publish."
    },
    {
      "name": "let upstream: Upstream",
      "desc": "The publisher from which this publisher receives elements."
    },
    {
      "name": "let interval: Context.SchedulerTimeType.Stride",
      "desc": "The maximum time interval the publisher can go without emitting an element, expressed in the time system of the scheduler."
    },
    {
      "name": "let scheduler: Context",
      "desc": "The scheduler on which to deliver events."
    },
    {
      "name": "let options: Context.SchedulerOptions?",
      "desc": "Scheduler options that customize the delivery of elements."
    },
    {
      "name": "let customError: (() -> Publishers.Timeout<Upstream, Context>.Failure)?",
      "desc": "A closure that executes if the publisher times out. The publisher sends the failure returned by this closure to the subscriber as the reason for termination."
    }
  ],
  "declaration": "struct Timeout<Upstream, Context> where Upstream : Publisher, Context : Scheduler",
  "conformsTo": [
    "Publisher"
  ]
}