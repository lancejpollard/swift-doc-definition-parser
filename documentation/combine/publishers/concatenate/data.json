{
  "path": "/documentation/combine/publishers/concatenate",
  "type": "Structure",
  "name": "Publishers.Concatenate",
  "desc": "A publisher that emits all of one publisher’s elements before those from another publisher.",
  "items": [
    {
      "name": "init(prefix: Prefix, suffix: Suffix)",
      "desc": "Creates a publisher that emits all of one publisher’s elements before those from another publisher."
    },
    {
      "name": "typealias Output",
      "desc": "The kind of values published by this publisher."
    },
    {
      "name": "typealias Failure",
      "desc": "The kind of errors this publisher might publish."
    },
    {
      "name": "let prefix: Prefix",
      "desc": "The publisher to republish, in its entirety, before republishing elements from suffix."
    },
    {
      "name": "let suffix: Suffix",
      "desc": "The publisher to republish only after prefix finishes."
    },
    {
      "name": "static func == (Publishers.Concatenate<Prefix, Suffix>, Publishers.Concatenate<Prefix, Suffix>) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two publishers are equivalent."
    },
    {
      "name": "static func != (Self, Self) -> Bool"
    }
  ],
  "declaration": "struct Concatenate<Prefix, Suffix> where Prefix : Publisher, Suffix : Publisher, Prefix.Failure == Suffix.Failure, Prefix.Output == Suffix.Output",
  "conformsTo": [
    "Equatable",
    "Publisher"
  ]
}