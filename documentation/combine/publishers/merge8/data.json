{
  "path": "/documentation/combine/publishers/merge8",
  "type": "Structure",
  "name": "Publishers.Merge8",
  "desc": "A publisher created by applying the merge function to eight upstream publishers.",
  "items": [
    {
      "name": "init(A, B, C, D, E, F, G, H)",
      "desc": "Creates a publisher created by applying the merge function to eight upstream publishers."
    },
    {
      "name": "typealias Output",
      "desc": "The kind of values published by this publisher."
    },
    {
      "name": "typealias Failure",
      "desc": "The kind of errors this publisher might publish."
    },
    {
      "name": "let a: A",
      "desc": "A publisher to merge."
    },
    {
      "name": "let b: B",
      "desc": "A second publisher to merge."
    },
    {
      "name": "let c: C",
      "desc": "A third publisher to merge."
    },
    {
      "name": "let d: D",
      "desc": "A fourth publisher to merge."
    },
    {
      "name": "let e: E",
      "desc": "A fifth publisher to merge."
    },
    {
      "name": "let f: F",
      "desc": "A sixth publisher to merge."
    },
    {
      "name": "let g: G",
      "desc": "An seventh publisher to merge."
    },
    {
      "name": "let h: H",
      "desc": "A eighth publisher to merge."
    },
    {
      "name": "static func == (Publishers.Merge8<A, B, C, D, E, F, G, H>, Publishers.Merge8<A, B, C, D, E, F, G, H>) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two publishers are equivalent."
    },
    {
      "name": "static func != (Self, Self) -> Bool"
    }
  ],
  "declaration": "struct Merge8<A, B, C, D, E, F, G, H> where A : Publisher, B : Publisher, C : Publisher, D : Publisher, E : Publisher, F : Publisher, G : Publisher, H : Publisher, A.Failure == B.Failure, A.Output == B.Output, B.Failure == C.Failure, B.Output == C.Output, C.Failure == D.Failure, C.Output == D.Output, D.Failure == E.Failure, D.Output == E.Output, E.Failure == F.Failure, E.Output == F.Output, F.Failure == G.Failure, F.Output == G.Output, G.Failure == H.Failure, G.Output == H.Output",
  "conformsTo": [
    "Equatable",
    "Publisher"
  ]
}