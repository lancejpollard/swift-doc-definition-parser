{
  "path": "/documentation/combine/publishers/replaceerror",
  "type": "Structure",
  "name": "Publishers.ReplaceError",
  "desc": "A publisher that replaces any errors in the stream with a provided element.",
  "items": [
    {
      "name": "init(upstream: Upstream, output: Publishers.ReplaceError<Upstream>.Output)",
      "desc": "Creates a publisher that replaces any errors in the stream with a provided element."
    },
    {
      "name": "struct Output",
      "desc": "A publisher that publishes elements specified by a range in the sequence of published elements."
    },
    {
      "name": "typealias Output",
      "desc": "The kind of values published by this publisher."
    },
    {
      "name": "typealias Failure",
      "desc": "The kind of errors this publisher might publish."
    },
    {
      "name": "let upstream: Upstream",
      "desc": "The publisher from which this publisher receives elements."
    },
    {
      "name": "let output: Publishers.ReplaceError<Upstream>.Output",
      "desc": "The element with which to replace errors from the upstream publisher."
    },
    {
      "name": "static func == (Publishers.ReplaceError<Upstream>, Publishers.ReplaceError<Upstream>) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two publishers are equivalent."
    },
    {
      "name": "static func != (Self, Self) -> Bool"
    }
  ],
  "declaration": "struct ReplaceError<Upstream> where Upstream : Publisher",
  "conformsTo": [
    "Equatable",
    "Publisher"
  ]
}