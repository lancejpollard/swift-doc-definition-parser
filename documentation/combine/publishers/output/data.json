{
  "path": "/documentation/combine/publishers/output",
  "type": "Structure",
  "name": "Publishers.Output",
  "desc": "A publisher that publishes elements specified by a range in the sequence of published elements.",
  "items": [
    {
      "name": "init(upstream: Upstream, range: CountableRange<Int>)",
      "desc": "Creates a publisher that publishes elements specified by a range."
    },
    {
      "name": "typealias Output",
      "desc": "The kind of values published by this publisher."
    },
    {
      "name": "typealias Failure",
      "desc": "The kind of errors this publisher might publish."
    },
    {
      "name": "let upstream: Upstream",
      "desc": "The publisher from which this publisher receives its elements."
    },
    {
      "name": "let range: CountableRange<Int>",
      "desc": "The range of elements to publish."
    },
    {
      "name": "static func == (Publishers.Output<Upstream>, Publishers.Output<Upstream>) -> Bool",
      "desc": "Returns a Boolean value that indicates whether two publishers are equivalent."
    },
    {
      "name": "static func != (Self, Self) -> Bool"
    }
  ],
  "declaration": "struct Output<Upstream> where Upstream : Publisher",
  "conformsTo": [
    "Equatable",
    "Publisher"
  ]
}