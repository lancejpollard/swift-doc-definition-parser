{
  "path": "/documentation/combine/immediatescheduler/schedulertimetype/stride",
  "type": "Structure",
  "name": "ImmediateScheduler.SchedulerTimeType.Stride",
  "desc": "The increment by which the immediate scheduler counts time.",
  "items": [
    {
      "name": "init(Int)",
      "desc": "Creates an immediate scheduler time interval from the given time interval."
    },
    {
      "name": "init?<T>(exactly: T)",
      "desc": "Creates an immediate scheduler time interval from a binary integer type."
    },
    {
      "name": "init(floatLiteral: Double)",
      "desc": "Creates an immediate scheduler time interval from a floating-point seconds value."
    },
    {
      "name": "init(from: Decoder) throws",
      "desc": "Creates a new instance by decoding from the given decoder."
    },
    {
      "name": "init(integerLiteral: Int)",
      "desc": "Creates an immediate scheduler time interval from an integer seconds value."
    },
    {
      "name": "static func microseconds(Int) -> ImmediateScheduler.SchedulerTimeType.Stride",
      "desc": "Converts the specified number of microseconds into an instance of this scheduler time type."
    },
    {
      "name": "static func milliseconds(Int) -> ImmediateScheduler.SchedulerTimeType.Stride",
      "desc": "Converts the specified number of milliseconds into an instance of this scheduler time type."
    },
    {
      "name": "static func nanoseconds(Int) -> ImmediateScheduler.SchedulerTimeType.Stride",
      "desc": "Converts the specified number of nanoseconds into an instance of this scheduler time type."
    },
    {
      "name": "static func seconds(Double) -> ImmediateScheduler.SchedulerTimeType.Stride",
      "desc": "Converts the specified number of seconds, as a floating-point value, into an instance of this scheduler time type."
    },
    {
      "name": "static func seconds(Int) -> ImmediateScheduler.SchedulerTimeType.Stride",
      "desc": "Converts the specified number of seconds into an instance of this scheduler time type."
    },
    {
      "name": "static var zero: Self",
      "desc": "The zero value."
    },
    {
      "name": "typealias FloatLiteralType",
      "desc": "The type used when evaluating floating-point literals."
    },
    {
      "name": "typealias IntegerLiteralType",
      "desc": "The type used when evaluating integer literals."
    },
    {
      "name": "typealias Magnitude",
      "desc": "The type used for expressing the strideâ€™s magnitude."
    },
    {
      "name": "var magnitude: Int",
      "desc": "The value of this time interval in seconds."
    },
    {
      "name": "static func ... (Self) -> PartialRangeFrom<Self>",
      "desc": "Returns a partial range extending upward from a lower bound."
    },
    {
      "name": "static func ... (Self) -> PartialRangeThrough<Self>",
      "desc": "Returns a partial range up to, and including, its upper bound."
    },
    {
      "name": "static func ... (Self, Self) -> ClosedRange<Self>",
      "desc": "Returns a closed range that contains both of its bounds."
    },
    {
      "name": "static func ..< (Self) -> PartialRangeUpTo<Self>",
      "desc": "Returns a partial range up to, but not including, its upper bound."
    },
    {
      "name": "static func ..< (Self, Self) -> Range<Self>",
      "desc": "Returns a half-open range that contains its lower bound but not its upper bound."
    },
    {
      "name": "func negate()",
      "desc": "Replaces this value with its additive inverse."
    },
    {
      "name": "static func * (ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride) -> ImmediateScheduler.SchedulerTimeType.Stride",
      "desc": "Multiplies two values and produces their product."
    },
    {
      "name": "static func *= (inout ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride)",
      "desc": "Multiplies two values and stores the result in the left-hand-side variable."
    },
    {
      "name": "static func + (Self) -> Self",
      "desc": "Returns the given number unchanged."
    },
    {
      "name": "static func + (ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride) -> ImmediateScheduler.SchedulerTimeType.Stride",
      "desc": "Adds two values and produces their sum."
    },
    {
      "name": "static func += (inout ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride)",
      "desc": "Adds two values and stores the result in the left-hand-side variable."
    },
    {
      "name": "static func - (Self) -> Self",
      "desc": "Returns the additive inverse of the specified value."
    },
    {
      "name": "static func - (ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride) -> ImmediateScheduler.SchedulerTimeType.Stride",
      "desc": "Subtracts one value from another and produces their difference."
    },
    {
      "name": "static func -= (inout ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride)",
      "desc": "Subtracts the second value from the first and stores the difference in the left-hand-side variable."
    },
    {
      "name": "static func != (Self, Self) -> Bool"
    },
    {
      "name": "static func < (ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument."
    },
    {
      "name": "static func <= (Self, Self) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument."
    },
    {
      "name": "static func == (ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride) -> Bool",
      "desc": "Returns a Boolean value indicating whether two values are equal."
    },
    {
      "name": "static func > (Self, Self) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument."
    },
    {
      "name": "static func >= (Self, Self) -> Bool",
      "desc": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument."
    },
    {
      "name": "func encode(to: Encoder) throws",
      "desc": "Encodes this value into the given encoder."
    }
  ],
  "declaration": "struct Stride",
  "conformsTo": [
    "AdditiveArithmetic",
    "Comparable",
    "Decodable",
    "Encodable",
    "Equatable",
    "ExpressibleByFloatLiteral",
    "ExpressibleByIntegerLiteral",
    "Numeric",
    "SchedulerTimeIntervalConvertible",
    "SignedNumeric"
  ]
}